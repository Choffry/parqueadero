
È

squid:S864⁄
squidS864:Limited dependence should be placed on operator precedence"MAJOR*java:ı<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>
<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational
operators are used in together in a condition, and for other operator combinations according to the following table:</p>
<table>
  <tbody>
    <tr>
      <td> </td>
      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>
      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>
      <td><code>&amp;</code></td>
      <td><code>^</code></td>
      <td> <code>|</code> </td>
    </tr>
    <tr>
      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>
      <td> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>
      <td>x</td>
      <td> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>&amp;</code></td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>^</code></td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>x</td>
    </tr>
    <tr>
      <td> <code>|</code> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
x = a + b - c;
x = a + 1 &lt;&lt; b;  // Noncompliant

if ( a &gt; b || c &lt; d || a == d) {...}
if ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant
if (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a + b - c;
x = (a + 1) &lt;&lt; b;

if ( a &gt; b || c &lt; d || a == d) {...}
if ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}
if ( (a = f(b,c)) == 1) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>
  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>
  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>
  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>
  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>
  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_wI">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VoAyAQ">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9wHEAw">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/783.html">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>Z
CODE_SMELL
•
squid:S2444ï
squidS2444?Lazy initialization of "static" fields should be "synchronized""CRITICAL*java:ß<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a
half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block
should be <code>synchronized</code>.</p>
<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>
<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating
intended usage in multi-threaded applications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static Properties fPreferences = null;

private static Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties(); // Noncompliant
            fPreferences.put("loading", "true");
            fPreferences.put("filterstack", "true");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static Properties fPreferences = null;

private static synchronized Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties();
            fPreferences.put("loading", "true");
            fPreferences.put("filterstack", "true");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>Z
CODE_SMELL
ç	
squid:S2699˝
squidS2699Tests should include assertions"BLOCKER*java:∞<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>
<ul>
  <li> Junit </li>
  <li> Fest 1.x </li>
  <li> Fest 2.x </li>
  <li> Rest-assured 2.0 </li>
  <li> AssertJ </li>
  <li> Hamcrest </li>
  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>
  <li> Eclipse Vert.x </li>
  <li> Truth Framework </li>
  <li> Mockito </li>
  <li> EasyMock </li>
  <li> JMock </li>
  <li> WireMock </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}
</pre>Z
CODE_SMELL
é
squid:S3358˛
squidS3358&Ternary operators should not be nested"MAJOR*java:¨<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String getTitle(Person p) {
  return p.gender == Person.MALE ? "Mr. " : p.isMarried() ? "Mrs. " : "Miss ";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String getTitle(Person p) {
  if (p.gender == Person.MALE) {
    return "Mr. ";
  }
  return p.isMarried() ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
ß
squid:S3355ó
squidS3355Defined filters should be used"CRITICAL*java:«<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not
invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;

  &lt;filter-mapping&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>ZVULNERABILITY
˛
squid:S3369Ó
squidS3369&Security constraints should be defined"BLOCKER*java:ó<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,
but it's a start, and should be used at least as a base.</p>
<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/284.html">MITRE, CWE-284</a> - Improper Access Control </li>
  <li> OWASP Top 10 2017 Category A6 - Broken Access Control </li>
</ul>ZVULNERABILITY
±
squid:S2278°
squidS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"BLOCKER*java:©<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer
  provides the security that is needed to protect federal government information.</p>
  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<p>For similar reasons, RC2 should also be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>
</ul>ZVULNERABILITY
≠	
squid:S2277ù	
squidS2277cCryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)"CRITICAL*java:à<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an
issue as soon as a literal value starts with <code>RSA/NONE</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a> </li>
</ul>ZVULNERABILITY
’
squid:S2153≈
squidS21536Boxing and unboxing should not be immediately reversed"MINOR*java:Í<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>
value. Unboxing is the process of retrieving the primitive value from such an object.</p>
<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing
and auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void examineInt(int a) {
  //...
}

public void examineInteger(Integer a) {
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = new Double(d).intValue(); // Noncompliant

  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox
  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed

  examineInteger(i); // Compliant; value is boxed but not then unboxed
  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed

  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void examineInt(int a) {
  //...
}

public void examineInteger(Integer a) {
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = (int) d;

  examineInt(i);

  examineInteger(i);
  examineInteger(iger1);
}
</pre>ZBUG
∑
squid:UndocumentedApiù
squidUndocumentedApiHPublic types, methods and fields (API) should be documented with Javadoc"MAJOR*java2S1176:ò<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way
to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like "TODO", "FIXME", "..." should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods with <code>@Override</code> annotation. </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>Z
CODE_SMELL
â
squid:S2245˘
squidS2245LPseudorandom number generators (PRNGs) should not be used in secure contexts"CRITICAL*java:˚<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>
method should not be used for security-critical applications or for protecting sensitive data. In such context, the
<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Random random = new Random();
byte bytes[] = new byte[20];
random.nextBytes(bytes);
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom random = new SecureRandom();
byte bytes[] = new byte[20];
random.nextBytes(bytes);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/338.html">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/310">MITRE, CWE-310</a> - Cryptographic Issues </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mAFqAQ">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qw4">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom
  numbers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/WYIyAQ">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom
  numbers </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>ZVULNERABILITY
Ô
squid:S2258ﬂ
squidS2258L"javax.crypto.NullCipher" should not be used for anything other than testing"BLOCKER*java:‚<p>By contract, the <code>NullCipher</code> class provides an "identity cipher" <del></del> one that does not transform or encrypt the plaintext in
any way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
NullCipher nc=new NullCipher();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER">NullCipher Unsafe</a> </li>
</ul>ZVULNERABILITY
∏
squid:S2254®
squidS2254?"HttpServletRequest.getRequestedSessionId()" should not be used"CRITICAL*java:∑<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>
<blockquote>
  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client
  did not specify a session ID, this method returns null.</p>
</blockquote>
<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually
updating the value of this session ID in the HTTP request. </p>
<p>Here is an example of a updated HTTP header:</p>
<pre>
GET /pageSomeWhere HTTP/1.1
Host: webSite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Hacked_Session_Value'''"&gt;
</pre>
<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.
Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.
Moreover, this session ID should never be logged to prevent hijacking of active sessions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(isActiveSession(request.getRequestedSessionId()) ){
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID">Untrusted Session Cookie Value</a>
  </li>
</ul>ZVULNERABILITY
∫
squid:S2257™
squidS22575Only standard cryptographic algorithms should be used"CRITICAL*java:√<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has
been protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>
<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyCryptographicAlgorithm extends MessageDigest {
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST">MessageDigest is Custom</a>
  </li>
</ul>ZVULNERABILITY
€
squid:S1166À
squidS1166:Exception handlers should preserve the original exceptions"MAJOR*java:Â<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info("context");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException("context");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle "e" here
  myInteger = 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/6gEqAQ">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> OWASP Top 10 2017 Category A10 - Insufficient Logging &amp; Monitoring </li>
</ul>Z
CODE_SMELL
ò
squid:S3725à
squidS3725*Java 8's "Files.exists" should not be used"MAJOR*java:≤<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files
that don't actually exist. </p>
<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Path myPath;
if(java.nio.Files.exists(myPath)) {  // Noncompliant
 // do something
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Path myPath;
if(myPath.toFile().exists())) {
 // do something
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8153414">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>
  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8154077">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>
</ul>Z
CODE_SMELL
Ã
squid:S1641º
squidS1641GSets with elements that are enum values should be replaced with EnumSet"MINOR*java:…<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other
sets because the underlying data structure is a simple bitmap.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();
    warm.add(COLOR.RED);
    warm.add(COLOR.ORANGE);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);
  }
}
</pre>Z
CODE_SMELL
◊	
squid:S2976«	
squidS2976>"File.createTempFile" should not be used to create a directory"CRITICAL*java:◊<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and
insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named
<code>Files.createTempDir</code> should be used.</p>
<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>
<ul>
  <li> call to <code>File.createTempFile</code> </li>
  <li> delete resulting file </li>
  <li> call <code>mkdir</code> on the File object </li>
</ul>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
File tempDir;
tempDir = File.createTempFile("", ".");
tempDir.delete();
tempDir.mkdir();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Path tempPath = Files.createTempDirectory("");
File tempDir = tempPath.toFile();
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
</ul>ZVULNERABILITY
œ
squid:S1221ø
squidS1221=Methods should not be named "tostring", "hashcode" or "equal""MAJOR*java:›<p>Naming a method <code>tostring</code>, <code>hashcode()</code> or <code>equal</code> is either:</p>
<ul>
  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or
  <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected. </li>
  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.
  </li>
</ul>
<p>In both cases, the method should be renamed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int hashcode() { /* ... */ }  // Noncompliant

public String tostring() { /* ... */ } // Noncompliant

public boolean equal(Object obj) { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int hashCode() { /* ... */ }

@Override
public String toString() { /* ... */ }

@Override
public boolean equals(Object obj) { /* ... */ }
</pre>ZBUG
´
squid:S1226õ
squidS1226`Method parameters, caught exceptions and foreach variables' initial values should not be ignored"MINOR*java:ñ<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read
before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doTheThing(String str, int i, List&lt;String&gt; strings) {
  str = Integer.toString(i); // Noncompliant

  for (String s : strings) {
    s = "hello world"; // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>ZBUG
•
squid:S2885ï
squidS2885+Non-thread-safe fields should not be static"MAJOR*java:≈<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data
problems or exceptions at runtime.</p>
<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or
<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private static SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");  // Noncompliant
  private static Calendar calendar = Calendar.getInstance();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
  private Calendar calendar = Calendar.getInstance();
</pre>ZBUG
ª	
squid:S1312´	
squidS1312MLoggers should be "private static final" and should share a naming convention"MINOR*java:≤<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>
<ul>
  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own
  logger. </li>
  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be
  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>
  <li> <code>final</code>: be created once and only once per class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>
<pre>
public Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
</pre>
<h2>Exceptions</h2>
<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>Z
CODE_SMELL
Ç
squid:S2658Ú
squidS2658(Classes should not be loaded dynamically"CRITICAL*java:ò<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or
explicitly invoke methods on such classes to be vulnerable to an attack.</p>
<p>This rule raises an issue for each use of dynamic class loading.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String className = System.getProperty("messageClassName");
Class clazz = Class.forName(className);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
</ul>ZVULNERABILITY
Â
squid:S1989’
squidS19894Exceptions should not be thrown from servlet methods"MINOR*java:Ú<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such
exceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service
attacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging
information back to the user. And that information could be very valuable to an attacker. </p>
<p>This rule checks all exceptions in methods named "do*" are explicitly handled in servlet classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  String ip = request.getRemoteAddr();
  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  try {
    String ip = request.getRemoteAddr();
    InetAddress addr = InetAddress.getByName(ip);
    //...
  }
  catch (UnknownHostException uhex) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/600.html">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/s4EVAQ">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information
  </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>ZVULNERABILITY
ì
squid:S2925É
squidS2925*"Thread.sleep" should not be used in tests"MAJOR*java:≠<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on
environment ("Passes on my machine!") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous
testing. </p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  Thread.sleep(500);  // Noncompliant
  // assertions...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant
  // assertions...
}

private Callable&lt;Boolean&gt; didTheThing() {
  return new Callable&lt;Boolean&gt;() {
    public Boolean call() throws Exception {
      // check the condition that must be fulfilled...
    }
  };
}
</pre>Z
CODE_SMELL
æ
squid:S2068Æ
squidS2068$Credentials should not be hard-coded"BLOCKER*java:Ÿ<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Connection conn = null;
try {
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=steve&amp;password=blue"); // Noncompliant
  String uname = "steve";
  String password = "blue";
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=" + uname + "&amp;password=" + password); // Noncompliant

  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication("userName", "1234".toCharArray());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Connection conn = null;
try {
  String uname = getEncryptedUser();
  String password = getEncryptedPass();
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=" + uname + "&amp;password=" + password);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>ZVULNERABILITY
Ä
squid:S2078
squidS20781Values passed to LDAP queries should be sanitized"CRITICAL*java:ç<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker
to include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn't provide any
prepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public User lookupUser(String username, String base, String [] requestedAttrs) {

  // ...
  DirContext dctx = new InitialDirContext(env);

  SearchControls sc = new SearchControls();
  sc.setReturningAttributes(requestedAttrs);  // Noncompliant
  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);

  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username + "))";

  NamingEnumeration results = dctx.search(base,  // Noncompliant
        filter,  // Noncompliant; parameter concatenated directly into string
        sc);
</pre>
<h2>Compliant Solution</h2>
<pre>
public User lookupUser(String username, String base, String [] requestedAttrs) {

  // ...
  DirContext dctx = new InitialDirContext(env);

  SearchControls sc = new SearchControls();
  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input
  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);

  String useBase = "ou=People";
  if (! base.startsWith(useBase)) {
    useBase = base;
  }

  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username.replaceAll("[()| ]","") + "))";

  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally
        filter,  // Compliant; parameter NOT concatenated directly into string
        sc);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/90">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP
  Injection') </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/CgLEAw">CERT, IDS54-J.</a> - Prevent LDAP injection </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION">Potential LDAP Injection</a> </li>
</ul>ZVULNERABILITY
é
squid:S2076˛
squidS20760Values passed to OS commands should be sanitized"CRITICAL*java:ú<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any
externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or
exposes sensitive data.</p>
<p>This rule logs issues for dynamically-built commands, and when parameter values are used to influence how a command is run. it's then up to the
auditor to figure out if the command execution is secure or not. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void listContent(String input) {
  Runtime rt = Runtime.getRuntime();
  rt.exec("ls " + input); // Noncompliant; input could easily contain extra commands
  ...
}

public void execute(String command, String argument) {
  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant
  ...
}

public void doTheThing(String path) {
  ProcessBuilder pb = new ProcessBuilder("ls");  // command hard coded. So far, so good
  pb.redirectOutput(path);  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/78">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/88">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> OWASP Top 10 2017 Category A1 - Injection </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from the FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION">Potential Command Injection</a>
  </li>
</ul>ZVULNERABILITY
™/
squid:S2077ö/
squidS2077%SQL binding mechanisms should be used"CRITICAL*java:√.<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an
attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>
<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are
covered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. </p>
<ul>
  <li> <code>org.hibernate.Session.createQuery</code> </li>
  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>
  <li> <code>java.sql.Statement.executeQuery</code> </li>
  <li> <code>java.sql.Statement.execute</code> </li>
  <li> <code>java.sql.Statement.executeUpdate</code> </li>
  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>
  <li> <code>java.sql.Statement.addBatch</code> </li>
  <li> <code>java.sql.Connection.prepareStatement</code> </li>
  <li> <code>java.sql.Connection.prepareCall</code> </li>
  <li> <code>java.sql.Connection.nativeSQL</code> </li>
  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>
  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>
  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>
  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>
  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>
  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>
  <li> <code>javax.jdo.Query.setFilter</code> </li>
  <li> <code>javax.jdo.Query.setGrouping</code> </li>
</ul>
<p>If a method is defined in an interface, implementations are also tested. For example this is the case for
<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>
<h2>Noncompliant Code Example</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  Statement stmt2 = null;
  PreparedStatement pstmt;
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery("GETDATE()"); // Compliant; parameters not used here

    stmt2 = con.createStatement();
    ResultSet rs2 = stmt2.executeQuery("select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query

    pstmt = con.prepareStatement("select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query
    ResultSet rs3 = pstmt.executeQuery();

    //...
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query = session.createQuery(  // Compliant
            "FROM students where fname = " + userInput);  // Noncompliant; parameter binding should be used instead
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  PreparedStatement pstmt = null;
  String query = "select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=?"
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery("GETDATE()");

    pstmt = con.prepareStatement(query);
    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.
    ResultSet rs2 = pstmt.executeQuery();

    //...
  }
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query =  session.createQuery("FROM students where fname = ?");
  query = query.setParameter(0,userInput);  // Parameter binding escapes all input
  // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/89">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/564.html">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/943.html">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PgIRAg">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA">Potential SQL/JPQL Injection
  (JPA)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>ZVULNERABILITY
§
squid:S2070î
squidS2070;SHA-1 and Message-Digest hash algorithms should not be used"CRITICAL*java:ß<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, RIPEMD160.</p>
<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>
<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>
<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>
<p> * <code>java.security.MessageDigest</code> (JDK)</p>
<p> * <code>java.security.KeyFactory</code> (JDK)</p>
<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>
<p> * <code>java.security.Signature</code> (JDK)</p>
<p> * <code>javax.crypto.Mac</code> (JDK)</p>
<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>
<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>
<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA1");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a> </li>
</ul>ZVULNERABILITY
á
squid:S4347˜
squidS4347."SecureRandom" seeds should not be predictable"CRITICAL*java:ó<p>The <code>java.security.SecureRandom</code> class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it
with a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the
<code>SecureRandom</code> implementation.</p>
<p>This rule raises an issue when <code>SecureRandom.setSeed()</code> or <code>SecureRandom(byte[])</code> are called with a seed that is either
of:</p>
<ul>
  <li> A constant </li>
  <li> <code>System.currentTimeMillis()</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
SecureRandom sr = new SecureRandom();
sr.setSeed(123456L); // Noncompliant
int v = sr.next(32);

sr = new SecureRandom("abcdefghijklmnop".getBytes("us-ascii")); // Noncompliant
v = sr.next(32);
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom sr = new SecureRandom();
int v = sr.next(32);
</pre>ZVULNERABILITY
≠
squid:S4349ù
squidS4349,"write(byte[],int,int)" should be overridden"MINOR*java:≈<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement
the method <code>write(int)</code>. However most uses for such streams don't write a single byte at a time and the default implementation for
<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>write(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn't provide an
override of <code>write(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyStream extends OutputStream { // Noncompliant
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void close() throws IOException {
        fout.write("\n\n".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyStream extends OutputStream {
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        fout.write(b, off, len);
    }

    @Override
    public void close() throws IOException {
        fout.write("\n\n".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>Z
CODE_SMELL
£
squid:S4348ì
squidS4348#"iterator" should not return "this""MAJOR*java:À<p>There are two classes in the Java standard library that deal with iterations: <code>Iterable&lt;T&gt;</code> and <code>Iterator&lt;T&gt;</code>. An
<code>Iterable&lt;T&gt;</code> represents a data structure that can be the target of the "for-each loop" statement, and an
<code>Iterator&lt;T&gt;</code> represents the state of an ongoing traversal. An <code>Iterable&lt;T&gt;</code> is generally expected to support
multiple traversals.</p>
<p>An <code>Iterator&lt;T&gt;</code> that also implements <code>Iterable&lt;t&gt;</code> by returning itself as its <code>iterator()</code> will not
support multiple traversals since its state will be carried over.</p>
<p>This rule raises an issue when the <code>iterator()</code> method of a class implementing both <code>Iterable&lt;T&gt;</code> and
<code>Iterator&lt;t&gt;</code> returns <code>this</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooIterator implements Iterator&lt;Foo&gt;, Iterable&lt;Foo&gt; {
  private Foo[] seq;
  private int idx = 0;

  public boolean hasNext() {
    return idx &lt; seq.length;
  }

  public Foo next() {
    return seq[idx++];
  }

  public Iterator&lt;Foo&gt; iterator() {
    return this; // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooSequence implements Iterable&lt;Foo&gt; {
  private Foo[] seq;

  public Iterator&lt;Foo&gt; iterator() {
    return new Iterator&lt;Foo&gt;() {
      private int idx = 0;

      public boolean hasNext() {
        return idx &lt; seq.length;
      }

      public Foo next() {
        return seq[idx++];
      }
    };
  }
  // ...
}
</pre>ZBUG
»
squid:S2178∏
squidS21786Short-circuit logic should be used in boolean contexts"BLOCKER*java:‘<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
</pre>
<h2>Compliant Solution</h2>
<pre>
if(getTrue() || getFalse()) { ... } // true short-circuit logic
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand
  </li>
</ul>Z
CODE_SMELL
‡
squid:S4288–
squidS42882Spring components should use constructor injection"MAJOR*java:Ú<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance
of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>
<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation, or if the constructor of Spring
component does not have injection annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  @Autowired
  private String name = null; // Noncompliant

  HelloWorld() {
   // ...
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @Autowired
  HelloWorld(String name) {
    this.name = name;
   // ...
  }

  // ...
}
</pre>Z
CODE_SMELL
å
squid:S4165¸
squidS4165#Assignments should not be redundant"MAJOR*java:≠<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in
assigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>Z
CODE_SMELL
›	
squid:S2089Õ	
squidS2089%HTTP referers should not be relied on"CRITICAL*java:ˆ<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may
be safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>
<p>This rule flags uses of the referer header field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    String referer = request.getHeader("referer");  // Noncompliant
    if(isTrustedReferer(referer)){
      //..
    }
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/293">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
</ul>ZVULNERABILITY
ã
squid:S2092˚
squidS2092Cookies should be "secure""MINOR*java:≤<p>The "secure" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.
Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure
response.addCookie(c);
</pre>
<h2>Compliant Solution</h2>
<pre>
Cookie c = new Cookie(SECRET, secret);
c.setSecure(true);
response.addCookie(c);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/614">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>
  <li> OWASP Top 10 2017 Category A2 - Broken Authentication </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>ZVULNERABILITY
∆
squid:S2095∂
squidS2095Resources should be closed"BLOCKER*java:ı<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,
<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise
an exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using
"try-with-resources" pattern and will be closed automatically.</p>
<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to
their knees.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void readTheFile() throws IOException {
  Path path = Paths.get(this.fileName);
  BufferedReader reader = Files.newBufferedReader(path, this.charset);
  // ...
  reader.close();  // Noncompliant
  // ...
  Files.lines("input.txt").forEach(System.out::println); // Noncompliant: The stream needs to be closed
}

private void doSomething() {
  OutputStream stream = null;
  try {
    for (String property : propertyList) {
      stream = new FileOutputStream("myfile.txt");  // Noncompliant
      // ...
    }
  } catch (Exception e) {
    // ...
  } finally {
    stream.close();  // Multiple streams were opened. Only the last is closed.
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readTheFile(String fileName) throws IOException {
    Path path = Paths.get(fileName);
    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
      reader.readLine();
      // ...
    }
    // ..
    try (Stream&lt;String&gt; input = Files.lines("input.txt"))  {
      input.forEach(System.out::println);
    }
}

private void doSomething() {
  OutputStream stream = null;
  try {
    stream = new FileOutputStream("myfile.txt");
    for (String property : propertyList) {
      // ...
    }
  } catch (Exception e) {
    // ...
  } finally {
    stream.close();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>
<ul>
  <li> <code>java.io.ByteArrayOutputStream</code> </li>
  <li> <code>java.io.ByteArrayInputStream</code> </li>
  <li> <code>java.io.CharArrayReader</code> </li>
  <li> <code>java.io.CharArrayWriter</code> </li>
  <li> <code>java.io.StringReader</code> </li>
  <li> <code>java.io.StringWriter</code> </li>
</ul>
<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources
statement are ignored by this rule. </p>
<pre>
try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
  //...
}
catch ( ... ) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gFqAQ">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/GAGQBw">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>
  <li> <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">Try With Resources</a> </li>
</ul>ZBUG
‡
php:S104”
phpS104,Files should not have too many lines of code"MAJOR*php2S104:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
à
	php:S2757˙
phpS2757'"=+" should not be used instead of "+=""MAJOR*php2S2757:™<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$target = -5;
$num = 3;

$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?
$target =+ $num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
$target = -5;
$num = 3;

$target = -$num;  // Compliant; intent to assign inverse value of num is clear
$target += $num;
</pre>ZBUG
‡
	php:S2201“
phpS2201GReturn values from functions without side effects should not be ignored"MAJOR*php2S2201:‚<p>When the call to a function doesn't have any side effect, what is the point of making the call if the results are ignored? In such cases, either
the function call is useless and should be dropped, or the source code doesn't behave as expected. </p>
<h2>Noncompliant Code Example</h2>
<pre>
strlen($name); // Noncompliant; "strlen" has no side effect
</pre>
<h2>Compliant Solution</h2>
<pre>
$length = strlen($name);
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
∑
	php:S1110©
phpS11100Redundant pairs of parentheses should be removed"MAJOR*php2S1110:…<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler

if ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant
  //...
}

return (($x + 1)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$x = ($y / 2 + 1);

if ($a &amp;&amp; ($x + $y &gt; 0)) {
  //...
}

return ($x + 1);
</pre>Z
CODE_SMELL
õ
	php:S2681ç
phpS26813Multiline blocks should be enclosed in curly braces"MAJOR*php2S2681:™<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if($condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if($condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

$str = null;
for ($i = 0; $i &lt; count($array); $i++)
  $str = $array[$i];
  doTheThing($str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

if($condition) { firstActionInBlock(); secondAction(); }

if($condition) {
  firstActionInBlock();
  secondAction();
}

$str = null;
for ($i = 0; $i &lt; count($array); $i++) {
  $str = $array[$i];
  doTheThing($str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
±
	php:S1075£
phpS1075URIs should not be hardcoded"MINOR*php2S1075:◊<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>Z
CODE_SMELL
˛
php:NoSonarÓ
phpNoSonar Track uses of "NOSONAR" comments"MAJOR*php2NoSonar:ö<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>Z
CODE_SMELL
¯
	php:S2042Í
phpS2042.Classes should not have too many lines of code"MAJOR*php2S2042:å<p>A class that grows too much tends to aggregate too many responsibilities, and inevitably becomes harder to understand and to maintain. Above a
specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well-defined topics.</p>Z
CODE_SMELL
 
	php:S1121º
phpS1121:Assignments should not be made from within sub-expressions"MAJOR*php2S1121:“<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($val = value() &amp;&amp; check()) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$val = value();
if ($val &amp;&amp; check()) {
}
</pre>
<p>or </p>
<pre>
if ($val == value() &amp;&amp; check()) { // Perhaps in fact the assignment operator was expected
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while (($line = next_line()) != NULL) {...}

while ($line = next_line()) {...}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>
</ul>Z
CODE_SMELL
≤	
	php:S2737§	
phpS2737+"catch" clauses should do more than rethrow"MINOR*php2S2737:…<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$s = "";
try {
  $s = readMyFile($fileName);
} catch (Exception $e)  {
  throw $e;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$s = "";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e.getMessage());
  throw $e;  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = "";
try {
  $s = readMyFile($fileName);
} catch (Exception $e) {
  error_log($e.getMessage());
  throw new MyException("an exception occurred", 2, $e);  // Compliant
}
</pre>
<p>or</p>
<pre>
$s = readMyFile($fileName);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
í
	php:S3358Ñ
phpS3358&Ternary operators should not be nested"MAJOR*php2S3358:Æ<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function get_title($gender, $is_married) {
  return $gender == "MALE" ? "Mr. " : ($is_married ? "Mrs. " : "Miss ");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function get_title($gender, $is_married) {
  if ($gender == "MALE") {
    return "Mr. ";
  }
  return $is_married ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
†
	php:S3923í
phpS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*php2S3923:í<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not
apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

$b = $a &gt; 12 ? 4 : 4;  // Noncompliant

switch ($i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>ZBUG
ˆ
	php:S3801Ë
phpS3801*Functions should use "return" consistently"MAJOR*php2S3801:é<p>Because it is dynamically typed, PHP does not enforce a return type on a function. This means that different paths through a function can return
different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<p>In particular, it is consequently also possible to mix empty <code>return</code> statements (implicitly returning <code>null</code>) with some
returning an expression. This rule verifies that all the <code>return</code> statements from a function are consistent.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo($a) { // Noncompliant, function will return "true" or null
  if ($a == 1) {
    return true;
  }
  return;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($a) {
  if ($a == 1) {
    return true;
  }
  return false;
}
</pre>
<p>or </p>
<pre>
function foo($a) {
  if ($a == 1) {
    return true;
  }
  return null;
}
</pre>Z
CODE_SMELL
Œ
	php:S3699¿
phpS3699EThe output of functions that don't return anything should not be used"MAJOR*php2S3699:“<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
"result" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$result = closedir($dir_handle); // Noncompliant, "closedir" does not return anything.
</pre>
<h2>Compliant Solution</h2>
<pre>
closedir($dir_handle);
</pre>ZBUG
È
php:S836‹
phpS836*Variables should be initialized before use"MAJOR*php2S836:ã<p>When a variable is not initialized before its use, it's a sign that the developer made a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun($condition) {
  $res = 1;
  if ($condition) {
    $res++;
  }
  return $result; // Noncompliant, "$result" instead of "$res"
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun($condition) {
  $res = 1;
  if ($condition) {
    $res++;
  }
  return $res;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/457.html">MITRE, CWE-457</a> - Use of Uninitialized Variable </li>
  <li> MISRA C:2004, 9.1 - All automatic variables shall have been assigned a value before being used. </li>
  <li> MISRA C++:2008, 8-5-1 - All variables shall have a defined value before they are used. </li>
</ul>ZBUG
î
	php:S3972Ü
phpS3972&Conditionals should start on new lines"CRITICAL*php2S3972:≠<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<code>else</code> or <code>elseif</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers
fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($condition1) {
  // ...
} if ($condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($condition1) {
  // ...
} elseif ($condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if ($condition1) {
  // ...
}

if ($condition2) {
  //...
}
</pre>Z
CODE_SMELL
Ó
	php:S3973‡
phpS3973SConditionally executed code should be denoted by either indentation or curly braces"CRITICAL*php2S3973:⁄<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &gt; 0)  // Noncompliant
doTheThing();
doTheOtherThing();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($x &gt; 0) {
  doTheThing();
  doTheOtherThing();
}

foo();
</pre>
<p>or</p>
<pre>
if ($x &gt; 0)
    doTheThing();
doTheOtherThing();

foo();
</pre>Z
CODE_SMELL
¯
	php:S4144Í
phpS41441Methods should not have identical implementations"MAJOR*php2S4144:â<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
    private const CODE = "bounteous";

    public function getCode() {
        doTheThing();
        return A::CODE;
    }

    public function getName() {  // Noncompliant
        doTheThing();
        return A::CODE;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
    private const CODE = "bounteous";

    public function getCode() {
        doTheThing();
        return A::CODE;
    }

    public function getName() {
        return $this-&gt;getCode();
    }
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
Ù
	php:S2123Ê
phpS2123*Values should not be uselessly incremented"MAJOR*php2S2123:ì<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  $i = 0;
  $i = $i++; // Noncompliant; i is still zero
</pre>
<h2>Compliant Solution</h2>
<pre>
  $i = 0;
  $i++;
</pre>ZBUG
∏
	php:S1151™
phpS1151<"switch case" clauses should not have too many lines of code"MAJOR*php2S1151:æ<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
switch ($var) {
  case 0:  // 6 lines till next case
    methodCall1();
    methodCall2();
    methodCall3();
    methodCall4();
    break;
  default:
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($var) {
  case 0:
    doSomething();
    break;
  default:
    break;
}

function doSomething(){
  methodCall1("");
  methodCall2("");
  methodCall3("");
  methodCall4("");
}
</pre>Z
CODE_SMELL
±
	php:S4142£
phpS41422Duplicate values should not be passed as arguments"MAJOR*php2S4142:¡<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (compare($a+$x, $a+$x) != 0) { // Noncompliant
&nbsp;&nbsp;//...
}

if (compare(getValue($a), getValue($a)) != 0) { // Noncompliant
&nbsp;&nbsp;// ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (compare($a+$y, $a+$x) != 0) {
&nbsp;&nbsp;//...
}

$v1 = getValue($a);
$v2 = getValue($a);
if (compare($v1, $v2) != 0) {
&nbsp;&nbsp;// ...
}
</pre>Z
CODE_SMELL
¥
	php:S3984¶
phpS39844Exception should not be created without being thrown"MAJOR*php2S3984:…<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &lt; 0)
  new Exception('$x must be nonnegative');
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($x &lt; 0)
  throw new Exception('$x must be nonnegative');
</pre>ZBUG
ô
	php:S3981ã
phpS3981=Array or Countable object count comparisons should make sense"MAJOR*php2S3981:•<p>The count of elements from an array or Countable object is always greater than or equal to zero. So testing that the count is greater than or equal
to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the object or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (count($arr) &gt;= 0) { ... }

if (count($arr) &lt; 0) { ... }

$result = count($arr) &gt;= 0;

if (0 &gt; count($arr)) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (count($arr) != 0) { ... }

if (count($arr) &gt; 0) { ... }
</pre>ZBUG
ê
	php:S2251Ç
phpS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*php2S2251:ê<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually
reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; $length; $i--) { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; $length; $i++) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
á
php:S138˙
phpS1380Functions should not have too many lines of code"MAJOR*php2S138:ú<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
Û
)javascript:BoundOrAssignedEvalOrArguments≈

javascriptBoundOrAssignedEvalOrArguments6"eval" and "arguments" should not be bound or assigned"MAJOR*js2BoundOrAssignedEvalOrArguments:Æ<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed
properties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the
original definitions of those two reserved words.</p>
<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function("arguments", "return 17;"); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function("args", "return 17;");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2137'>S2137</a> instead.</p>ZBUG
 
javascript:S2228µ

javascriptS2228"Console logging should not be used"MINOR*js2S2228:⁄<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>ZVULNERABILITY
§
javascript:S3271è

javascriptS3271 Local storage should not be used"CRITICAL*js2S3271:≥<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb
cookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because
the data is not encrypted by default and any script on the page may access it.</p>
<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
localStorage.setItem("login", login); // Noncompliant
sessionStorage.setItem("sessionId", sessionId); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf">Packet Storm Security</a> - HTML 5 Modern
  Day Attack And Defence Vectors </li>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
</ul>ZVULNERABILITY
°
javascript:S2757å

javascriptS2757=Non-existent operators '=+', '=-' and '=!' should not be used"MAJOR*js2S2757:†<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when
there is at least one whitespace after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let target =-5;
let num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
let target = -5;
let num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
ç
javascript:S1125¯

javascriptS11252Boolean literals should not be used in comparisons"MINOR*js2S1125:ê<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>
<p>This rule also reports on redundant boolean operations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let someValue = "0";
// ...

if (someValue == true) { /* ... */ }
if (someBooleanValue != true) { /* ... */ }
doSomething(!false);
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someValue &amp;&amp; someValue != "0") { /* ... */ }
if (!someBooleanValue) { /* ... */ }
doSomething(true);
</pre>Z
CODE_SMELL
é
javascript:Eval˙

javascriptEval4Code should not be dynamically injected and executed"CRITICAL*js2Eval:å<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when
the arguments haven't been properly validated.</p>
<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var value = eval('obj.' + propName); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var value = obj[propName];
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when the argument of the <code>eval</code> call is a literal string as it is reasonably safe.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically
  Evaluated Code ('Eval Injection') </li>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>ZVULNERABILITY
ì
javascript:S2692˛

javascriptS26923"indexOf" checks should not be for positive numbers"MAJOR*js2S2692:ï<p>Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for
values &gt;0 ignore the first element, which is likely a bug. If you're merely checking the presence of the string, consider using
<code>includes</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var name = "ishmael";
var number = 123;

var arr = [color, name];

if (arr.indexOf("blue") &gt; 0) { // Noncompliant
  // ...
}
if (arr[0].indexOf("ish") &gt; 0 { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var color = "blue";
var name = "ishmael";
var number = 123;

var arr = [color, name];

if (arr.indexOf("blue") &gt;= 0) {
  // ...
}
if (arr[0].includes("ish")) {
  // ...
}
</pre>Z
CODE_SMELL
â
javascript:S3358Ù

javascriptS3358&Ternary operators should not be nested"MAJOR*js2S3358:ò<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getTitle(Person p) {
  return p.gender == "male" ? "Mr. " : p.isMarried() ? "Mrs. " : "Miss ";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getTitle(Person p) {
  if (p.gender == "male") {
    return "Mr. ";
  }
  return p.isMarried() ? "Mrs. " : "Miss ";
}
</pre>Z
CODE_SMELL
∆
javascript:S2819±

javascriptS2819?Cross-document messaging domains should be carefully restricted"CRITICAL*js2S2819:∂<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>
<blockquote>
  Authors should not use the wildcard keyword (
  <code>*</code>) in the
  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message
  is only delivered to the recipient to which it was intended.
</blockquote>
<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time
<code>Window.postMessage</code> is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myWindow = document.getElementById('myIFrame').contentWindow;
myWindow.postMessage(message, "*"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>
</ul>ZVULNERABILITY
ù
javascript:S3972à

javascriptS3972&Conditionals should start on new lines"CRITICAL*js2S3972:©<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers
fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
ö
javascript:S2137Ö

javascriptS21373Special identifiers should not be bound or assigned"MAJOR*js2S2137:£<p>JavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:</p>
<ul>
  <li> <code>eval</code> - evaluates a string as JavaScript code </li>
  <li> <code>arguments</code> - used to access function arguments through indexed properties. </li>
  <li> <code>undefined</code> - returned for values and properties that have not yet been assigned </li>
  <li> <code>NaN</code> - Not a Number; returned when math functions fail. </li>
  <li> <code>Infinity</code> - when a number exceeds the upper limit of the floating point numbers </li>
</ul>
<p> </p>
<p>These words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. What's more, assigning
or binding some of these names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function("arguments", "return 17;"); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { }
var y = function fun() { };
var f = new Function("args", "return 17;");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>ZBUG
Ì
javascript:S1442ÿ

javascriptS1442"alert(...)" should not be used"MINOR*js2S1442:Ä<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in
production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition) {
  alert("Unexpected Condition");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
ã
javascript:S2817ˆ

javascriptS2817$Web SQL databases should not be used"BLOCKER*js2S2817:ó<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some
browsers. (It is not supported in Firefox or IE.)</p>
<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var db = window.openDatabase("myDb", "1.0", "Personal secrets stored here", 2*1024*1024);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>
  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>
</ul>ZVULNERABILITY
√
typescript:S4325Æ

typescriptS43259Redundant casts and not-null assertions should be avoided"MINOR*ts:∆<p>The TypeScript compiler automatically casts a variable to the relevant type inside conditionals where it is possible to infer (usage of
<code>typeof</code>, <code>instanceof</code> etc). These compiler feature makes casts and not-<code>null</code> assertions unnecessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getName(x?: string | UserName) {
  if (x) {
    console.log("Getting name for " + x!); // Noncompliant

    if (typeof x === "string")
      return (x as string); // Noncompliant
    else
      return (x as UserName).name; // Noncompliant
  }
  return "NoName";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getName(x?: string | UserName) {
  if (x) {
    console.log("Getting name for " + x);

    if (typeof x === "string")
      return x;
    else
      return x.name;
  }
  return "NoName";
}
</pre>Z
CODE_SMELL
∞

typescript:S2589õ


typescriptS2589=Conditions should not always evaluate to 'true' or to 'false'"MAJOR*ts:Ø	<p>If an expression doesn't change the evaluation of the condition, then it is either unnecessary, and condition can be removed, or it makes some code being never executed. In any case, the code should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  function checkState(state: boolean) {
    if (state) {
      console.log("Checking the state");
      if (state) { // Noncompliant, condition is always true
        doSomething();
      }
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
∞
typescript:S4327õ

typescriptS4327+"this" should not be assigned to a variable"MAJOR*ts:¡<p>Assigning <code>this</code> to a local variable is a way to reference parent context inside inner functions. In TypeScript when using arrow
functions this happens automatically.</p>
<p>This rule raises an issue when <code>this</code> is assigned to a local variable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function Foo() {
  let that = this;  // Noncompliant
  that.val = 0;

  setInterval(function() {
    that.val++;
  }, 1000);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function Foo() {
  this.val = 0;

  setInterval(() =&gt; {
    this.val++;
  }, 1000);
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>this</code> used for destructuring.</p>
<pre>
const { foo, bar } = this;
</pre>Z
CODE_SMELL
ò
typescript:S4326É

typescriptS4326%Unnecessary "await" should be avoided"MINOR*ts:Ø<p>An <code>async</code> function always wraps the return value in a <code>Promise</code>. Using <code>return await</code> is therefore redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return await foo(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
async function foo() {
  // ...
}

async function bar() {
  // ...
  return foo();
}
</pre>Z
CODE_SMELL
œ
typescript:S4323∫

typescriptS4323Type aliases should be used"MINOR*ts:<p>Union and intersection types are very convenient but can make code a bit harder to read and to maintain. So if a particular union or intersection
is used in multiple places it is highly recommended to use a type alias.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(x:string|null|number) {
  // ...
}
function bar(x:string|null|number) { // Noncompliant
  // ...
}
function zoo(): string|null|number {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
type MyType = string | null | number;

function foo(x: MyType) {
  // ...
}
function bar(x: MyType) {
  // ...
}
function zoo():  MyType {
  // ...
}
</pre>Z
CODE_SMELL
´
typescript:S4328ñ

typescriptS4328Dependencies should be explicit"MAJOR*ts:»<p>Dependencies should be explicitly listed in the <code>package.json</code> file. Importing a module that is not declared as a dependency makes it an
implicit one and is bound to create problems.</p>Z
CODE_SMELL
Ó
typescript:S1854Ÿ

typescriptS1854Dead stores should be removed"MAJOR*ts:ç<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is
assigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious
error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function pow(a: number, b: number) {
  if(b == 0) {
    return 0;
  }
  let x = a;
  for(let i = 1; i &lt; b; i++) {
    x = a * i;  //Dead store because the last return statement should return x instead of returning a
  }
  return a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function pow(a: number, b: number) {
  if(b == 0) {
    return 0;
  }
  let x = a;
  for(let i = 1; i &lt; b; i++) {
    x = a * i;
  }
  return x;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>, <code>[]</code> and
<code>{}</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ö
typescript:S2757Ö

typescriptS2757=Non-existent operators '=+', '=-' and '=!' should not be used"MAJOR*ts:†<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when
there is at least one whitespace after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let target =-5;
let num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
let target = -5;
let num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
ª
typescript:S1226¶

typescriptS1226bFunction parameters, caught exceptions and foreach variables' initial values should not be ignored"MINOR*ts:ú<p>While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as read-only, then at least read before
reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doTheThing(str : string, i: number, strings: string[]) {
  str = i.toString();  // Noncompliant

  for (let s in strings) {
    s = "hello world" + str;  // Noncompliant
    console.log(s);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>ZBUG
ç
typescript:S113˘

typescriptS1130Files should contain an empty newline at the end"MINOR*ts:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
º
typescript:S1110ß

typescriptS11100Redundant pairs of parentheses should be removed"MAJOR*ts:»<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   // Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>Z
CODE_SMELL
…
typescript:S4143¥

typescriptS4143:Collection elements should not be replaced unconditionally"MAJOR*ts:“<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 fruits[1] = "banana";
 fruits[1] = "apple";  // Noncompliant - value on index 1 is overwritten

 myMap.set("key", 1);
 myMap.set("key", 2); // Noncompliant - value for key "key" is replaced

 mySet.add(1);
 mySet.add(1); // Noncompliant - element is already in the set
</pre>ZBUG
Ö
typescript:S3863

typescriptS3863.Imports from the same modules should be merged"MINOR*ts:ì<p>Multiple imports from the same module should be merged together to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import { B1 } from 'b';
import { B2 } from 'b'; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import { B1, B2 } from 'b';
</pre>Z
CODE_SMELL
Ë
typescript:S3981”

typescriptS3981?Collection sizes and array length comparisons should make sense"MAJOR*ts:Ï<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (someSet.size &gt;= 0) {...} // Noncompliant

if (someMap.size &lt; 0) {...} // Noncompliant

const result = someArray.length &gt;= 0;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (someSet.size &gt; 0) {...}

if (someMap.size == 0) {...}

const result = someArray.length &gt; 0;
</pre>ZBUG

common-php:DuplicatedBlocks–

common-phpDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*php:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
Ø
common-php:FailedUnitTestsê

common-phpFailedUnitTests!Failed unit tests should be fixed"MAJOR*php:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-php:SkippedUnitTestsÏ

common-phpSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*php:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Â
%common-php:InsufficientBranchCoverageª

common-phpInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*php:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
ö
%common-php:InsufficientCommentDensity

common-phpInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*php:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
⁄
#common-php:InsufficientLineCoverage≤

common-phpInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*php:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ø
common-xml:FailedUnitTestsê

common-xmlFailedUnitTests!Failed unit tests should be fixed"MAJOR*xml:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG

common-xml:DuplicatedBlocks–

common-xmlDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*xml:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
å
common-xml:SkippedUnitTestsÏ

common-xmlSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*xml:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
ö
%common-xml:InsufficientCommentDensity

common-xmlInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*xml:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
⁄
#common-xml:InsufficientLineCoverage≤

common-xmlInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*xml:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Â
%common-xml:InsufficientBranchCoverageª

common-xmlInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*xml:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
Ì
common-cs:DuplicatedBlocksŒ
	common-csDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*cs:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
¨
common-cs:FailedUnitTestsé
	common-csFailedUnitTests!Failed unit tests should be fixed"MAJOR*cs:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-cs:SkippedUnitTestsÍ
	common-csSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*cs:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
‚
$common-cs:InsufficientBranchCoverageπ
	common-csInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*cs:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
ó
$common-cs:InsufficientCommentDensityÓ
	common-csInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*cs:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
◊
"common-cs:InsufficientLineCoverage∞
	common-csInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*cs:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
—
typescript:S3512º

typescriptS35128Template strings should be used instead of concatenation"MINOR*ts:’<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are
preferred.</p>
<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function sayHello(name) {
  console.log("hello " + name);  // ignored
}

function madLib(verb, noun) {
  console.log("I really " + verb + " one or two " + noun);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function sayHello(name) {
  console.log(`hello ${name}`);  // no issue raised before, but this is better
}

function madLib(verb, noun) {
  console.log(`I really ${verb} one or two ${noun}`);
}
</pre>Z
CODE_SMELL
·
typescript:S1533Ã

typescriptS15336Wrapper objects should not be used for primitive types"MINOR*ts:Á<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number("0");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number("0");
if (x) {
  alert('hi');
}
</pre>Z
CODE_SMELL
è
typescript:S3799˙

typescriptS3799*Destructuring patterns should not be empty"MAJOR*ts:®<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible
to create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the
intent was to use a default value instead.</p>
<p>This rule raises an issue when empty destructuring pattern is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var {a: {}, b} = myObj; // Noncompliant
function foo({first: [], second}) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var {a = {}, b} = myObj;
function foo({first = [], second}) {
  // ...
}
</pre>ZBUG
¨
typescript:S4123ó

typescriptS4123)"await" should only be used with promises"CRITICAL*ts:º<p>It is possible to use <code>await</code> on values which are not <code>Promise</code>s, but it's useless and misleading. The point of
<code>await</code> is to pause execution until the <code>Promise</code>'s asynchronous code has run to completion. With anything other than a
<code>Promise</code>, there's nothing to wait for. </p>
<p>This rule raises an issue when an <code>await</code>ed value is guaranteed not to be a <code>Promise</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = 42;
await x; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = new Promise(resolve =&gt; resolve(42));
await x;

let y = p ? 42 : new Promise(resolve =&gt; resolve(42));
await y;
</pre>Z
CODE_SMELL
˘
typescript:S4204‰

typescriptS4204!The "any" type should not be used"MAJOR*ts:î<p>Variables can be declared with or without types. Variables declared without a type will be implicitly typed if the declaration includes an
initialization, and compiler type checking will be automatically applied to any typed variable. But if you declare a variable with the
<code>any</code> "type" then you've explicitly told the compiler not to do any type checking, which is risky. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 42;  // implicitly typed to number
let b: number = 42;  // explicitly typed to number
let c: any = 42;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 42;
let b: number = 42;
let c: number = 42;
</pre>Z
CODE_SMELL
˝	
typescript:S1451Ë	

typescriptS1451+Track lack of copyright and license headers"BLOCKER*ts:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
ä
typescript:S4124ı

typescriptS41245Constructors should not be declared inside interfaces"MAJOR*ts:ò<p>Declare a constructor inside an <code>interface</code>, and you will get a simple method with the name "constructor". The same thing will happen if
you create a <code>new</code> method inside the <code>interface</code>: you'll get a simple method named "new".</p>
<p>Instead, the intent was probably to specify that the type did not originate from a TypeScript file. In such cases, just use the <code>declare
class</code> syntax.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface TypeDeclaredElsewhere {
  someMethod(): number;
  new(b: boolean): TypeDeclaredElsewhere; // Noncompliant
  constructor(b: boolean): void; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
declare class TypeDeclaredElsewhere {
  someMethod(): number;
  constructor(b: boolean);
}
</pre>
<p> </p>ZBUG
¡
typescript:S1656¨

typescriptS1656%Variables should not be self-assigned"MAJOR*ts:ﬂ<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function setName(name) {
    name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function setName(name) {
    this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
õ
typescript:S2228Ü

typescriptS2228"Console logging should not be used"MINOR*ts:≤<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure
  </li>
</ul>ZVULNERABILITY
Ç
typescript:S905Ó

typescriptS905PNon-empty statements should change control flow or have at least one side-effect"MAJOR*ts:˜<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
a &lt; b; // Noncompliant; have we forgotten to assign the result to a variable?
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.
  </li>
</ul>ZBUG
—
typescript:S103Ω

typescriptS103Lines should not be too long"MAJOR*ts:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
Á
typescript:S104”

typescriptS104,Files should not have too many lines of code"MAJOR*ts:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
£
typescript:S105è

typescriptS105(Tabulation characters should not be used"MINOR*ts:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
í
typescript:S4043˝

typescriptS4043/"Array.reverse" should not be used misleadingly"MAJOR*ts:¶<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact.
<code>Array.reverse()</code> is not one of those. Instead, it alters the source array <em>in addition to</em> returning the altered version, which is
likely not what was intended. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var b = a.reverse(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'

a.reverse();
</pre>ZBUG
õ
typescript:S108á

typescriptS108.Nested blocks of code should not be left empty"MAJOR*ts:´<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>Z
CODE_SMELL
·
typescript:S109Õ

typescriptS109 Magic numbers should not be used"MAJOR*ts:ˇ<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  for (let i = 0; i &lt; 4; i++) {    // Noncompliant, 4 is a magic number
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {
  const numberOfCycles = 4;
  for (let i = 0; i &lt; numberOfCycles; i++) {
    // ...
  }
}
</pre>Z
CODE_SMELL
î
typescript:S3402ˇ

typescriptS3402+Strings and non-strings should not be added"MINOR*ts:•<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could
be confusing, specially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 5 + 8;  // okay
var z = "8"
var y = 5 + z;  // Noncompliant; yields string "58"
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 5 + 8;
var z = "8";
var y = 5 + Number(z);
</pre>Z
CODE_SMELL
˜
typescript:S4138‚

typescriptS4138&"for of" should be used with Iterables"MINOR*ts:ç<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use a
counter, and ... well you'll get the right behavior, but your code just isn't as clean or clear.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let i = 0; i &lt; arr.length; i++) {  // Noncompliant
  console.log(arr[i]);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value of arr) {
  console.log(value);
}
</pre>Z
CODE_SMELL
õ
typescript:S1862Ü

typescriptS1862\Related "if/else if" statements and "cases" in a "switch" should not have the same condition"MAJOR*ts:Ç<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse
there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice
that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
Ù
typescript:S4137ﬂ

typescriptS4137Type assertions should use "as""MINOR*ts:ë<p>Type assertion can be done in two ways: with <code>as MyType</code> or with <code>&lt;MyType&gt;</code>. But since there is an ambiguity in the
latter when using JSX and there is no ambiguity in the former, <code>as</code> is preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var foo = &lt;any&gt;"foo";  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var foo = "foo" as any;
</pre>Z
CODE_SMELL
È
typescript:S4139‘

typescriptS4139*"for in" should not be used with iterables"MAJOR*ts:˚<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use
<code>for in</code> and you'll iterate the properties, rather than the values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value in arr) {  // Noncompliant
  console.log(value);  // logs 0, 1, 2, 3
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const arr = [4, 3, 2, 1];

for (let value of arr) {
  console.log(value);
}
</pre>Z
CODE_SMELL
¨

typescript:S1143ó


typescriptS11434Jump statements should not occur in "finally" blocks"MAJOR*ts:ª	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>ZBUG
¬
typescript:S121Æ

typescriptS121*Control structures should use curly braces"CRITICAL*ts:”<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
á
typescript:S1541Ú

typescriptS1541#Functions should not be too complex"CRITICAL*ts:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
æ	
typescript:S2870©	

typescriptS2870%"delete" should not be used on arrays"MAJOR*ts:’<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be
used here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>
<p>The proper method for removing an element at a certain index would be:</p>
<ul>
  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>
  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>
  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

delete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']
console.log(myArray[2]); // expected value was 'd' but output is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

// removes 1 element from index 2
removed = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']
console.log(myArray[2]); // outputs 'd'
</pre>Z
CODE_SMELL
ò
typescript:S1105É

typescriptS1105:An open curly brace should be located at the end of a line"MINOR*ts:ö<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
{                                                      //Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {                                   //Compliant
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Object literals appearing as arguments can start on their own line.</p>
<pre>
functionWithObject(
   {                                                 //Compliant
        g: "someValue"
   }
);
</pre>Z
CODE_SMELL
∏
typescript:S3923£

typescriptS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*ts:§<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not
apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>ZBUG
Ë
typescript:S4136”

typescriptS4136+Method overloads should be grouped together"MINOR*ts:˘<p>For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current
available options.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface MyInterface {
  doTheThing(): number;
  doTheOtherThing(): string;
  doTheThing(str: string): string;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyInterface {
  doTheThing(): number;
  doTheThing(str: string): string;
  doTheOtherThing(): string;
}
</pre>Z
CODE_SMELL
›
typescript:S117…

typescriptS1175Variable names should comply with a naming convention"MINOR*ts:Ê<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
variable names match one of the following patterns: <code>lowerCamelCase</code>, <code>PascalCamelCase</code> or <code>UPPER_CASED</code>. This rule
also allows leading underscore.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const foo_bar = 1;
const baz_ = 2;
</pre>
<h2>Compliant Solution</h2>
<pre>
const fooBar = 1;
const _baz = 2;
</pre>Z
CODE_SMELL
Ø
typescript:S3699ö

typescriptS3699EThe output of functions that don't return anything should not be used"MAJOR*ts:≠<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
"result" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
}

foo();
</pre>ZBUG
§
typescript:S3801è

typescriptS3801*Functions should use "return" consistently"MAJOR*ts:∂<p>In TypeScript a function can return a value explicitly, by using a <code>return</code> statement with a value, or implicitly, at the end of the
function or by a <code>return</code> with no value, resulting in the function returning <code>undefined</code>. Implicit returns of
<code>undefined</code> not declared in the function signature, can be confusing for the maintainer.</p>
<p>This rule ensures that <code>returns</code> are either all explicit or all implicit, or the function signatures makes the implicit
<code>return</code> obvious.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) { // Noncompliant, function exits without "return"
  if (a == 1) {
    return true;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a): boolean | undefined {
  if (a == 1) {
    return true;
  }
}
</pre>Z
CODE_SMELL
Å
typescript:S1751Ï

typescriptS17512Jump statements should not be used unconditionally"MAJOR*ts:ã<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once
and the loop structure itself is simply wasted keystrokes.</p>
<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>
<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
  break;  // loop only executes once
}

for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
  continue;  // this is meaningless; the loop would continue anyway
}

for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
  return;  // loop only executes once
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>
  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
«
typescript:S1874≤

typescriptS1874"Deprecated APIs should not be used"MINOR*ts:·<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
export interface LanguageService {
  /**
  * @deprecated Use getEncodedSyntacticClassifications instead.
  */
  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];
}

const syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>Z
CODE_SMELL
™	
typescript:S2688ï	

typescriptS2688'"NaN" should not be used in comparisons"MAJOR*ts:∆<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want. </p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log("a is not a number");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log("a is not NaN"); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Number.isNaN(a)) {
  console.log("a is not a number");
}
if (!Number.isNaN(a)) {
  console.log("a is not NaN");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>
</ul>ZBUG
»
typescript:S3854≥

typescriptS3854%"super()" should only be invoked once"CRITICAL*ts:„<p><code>super()</code> should only be invoked once in a constructor. Additional invocations will result in runtime errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super();         // Noncompliant
    super.doSomething();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super.doSomething();
  }
}
</pre>ZBUG
Î	
typescript:S2201÷	

typescriptS2201GReturn values from functions without side effects should not be ignored"MAJOR*ts:Á<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>
<h2>Noncompliant Code Example</h2>
<pre>
'hello'.lastIndexOf('e'); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let char = 'hello'.lastIndexOf('e');
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
Ô
typescript:S2685⁄

typescriptS2685%"arguments.callee" should not be used"MAJOR*ts:Ü<p>The <code>arguments.callee</code> property holds the current function. It could be useful in an anonymous function, but its usage would make quite
a few optimizations impossible so it was deprecated in the latest versions of JavaScript. In fact, EcmaScript 5 forbids its use in <code>strict</code>
mode, according to the docs:</p>
<blockquote>
  Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError
  exception on access.
</blockquote>
<p>This rule raises an issue when <code>arguments.callee</code> is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[1, 2, 3, 4, 5].map(function(n) {
  if (n === 0) {
    return 1;
  } else {
    return arguments.callee(n - 1) * n;
  }
});
</pre>Z
CODE_SMELL
‡
typescript:S3257À

typescriptS3257LPrimitive types should be omitted from initialized or defaulted declarations"MINOR*ts:–<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified. Specifically, primitive
(<code>number</code>, <code>string</code>, and <code>boolean</code>) types should be omitted from variable and parameter declaration when they can be
easily inferred from the initialized or defaulted value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const n: number = 1; // Noncompliant, "number" can be omitted

function foo(s: string = "") {} // Noncompliant, "string" can be omitted

class Bar {
  b: boolean = true;  // Noncompliant, "boolean" can be omitted
}
</pre>
<h2>Compliant Solution</h2>
<pre>
const n = 1;

function foo(s = "") {}

class Bar {
  b = true;
}
</pre>Z
CODE_SMELL
ó
typescript:S3972Ç

typescriptS3972&Conditionals should start on new lines"CRITICAL*ts:™<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding
<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers
fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
Ê
typescript:S1871—

typescriptS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*ts:À<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}

if ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else {
  doTheRest();
}
</pre>
<p>or </p>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doFirstThing();
    doThirdThing();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThirdThing();
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>Z
CODE_SMELL
ı
typescript:S2123‡

typescriptS2123*Values should not be uselessly incremented"MAJOR*ts:é<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let i = 0;
i = i++; // Noncompliant; i is still zero
</pre>
<h2>Compliant Solution</h2>
<pre>
let i = 0;
i++;
</pre>ZBUG
‡
typescript:S3498À

typescriptS3498.Object literal shorthand syntax should be used"MINOR*ts:Ó<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,
object-shorthand is also preferred for the definition of functions in object literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 1;

let myObj = {
  a : a,  // Noncompliant
  fun: function () {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 1;

let myObj = {
  a,
  fun () {
    //...
  }
}
</pre>Z
CODE_SMELL
ü
typescript:S3533ä

typescriptS35330"import" should be used to include external code"MINOR*ts:´<p>TypeScript provides the <code>import</code> and <code>export</code> keywords as language-standard mechanisms for module management. Javascript's
<code>require()</code> usages should be converted to the new syntax.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// circle.js
module.exports = function (r) {
  return PI * r * r;
};

// foo.js
const circle = require('./circle.js');  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// circle.ts
export default function (r) {
  return PI * r * r;
}

// foo.ts
import circle from "./circle.ts"
</pre>Z
CODE_SMELL
î
typescript:S2681ˇ

typescriptS26813Multiline blocks should be enclosed in curly braces"MAJOR*ts:ù<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

let str: string|null = null;
for (let i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

str: string|null = null;
for (let i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
é
typescript:S3696˘

typescriptS3696Strings should not be thrown"MAJOR*ts:Æ<p>It is a bad practice to <code>throw</code> something that's not derived at some level from <code>Error</code>. If you can't find an existing
<code>Error</code> type that suitably conveys what you need to convey, then you should extend <code>Error</code> to create one.</p>
<p>Specifically, part of the point of throwing <code>Error</code>s is to communicate about the conditions of the error, but strings have far less
ability to communicate meaningfully than <code>Error</code>s because they don't include stacktraces.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw "Invalid negative index.";        // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new Error("Invalid negative index.");
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 15-1-2 - NULL shall not be thrown explicitly. </li>
</ul>Z
CODE_SMELL
Ò
typescript:S4144‹

typescriptS41443Functions should not have identical implementations"MAJOR*ts:˙<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but
may be confusing to maintainers. In the latter case, the code should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private readonly CODE = "bounteous";

  public calculateCode(): string {
    doTheThing();
    doOtherThing();
    return this.CODE;
  }

  public getName(): string {  // Noncompliant
    doTheThing();
    doOtherThing();
    return this.CODE;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private readonly CODE = "bounteous";

  public calculateCode(): string {
    doTheThing();
    doOtherThing();
    return this.CODE;
  }

  public getName(): string {
    return this.calculateCode();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Functions with fewer than 3 lines are ignored.</p>Z
CODE_SMELL
ú
typescript:S1438á

typescriptS1438%Statements should end with semicolons"MINOR*ts:≥<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to
unexpected results because a semicolon is implicitly inserted at the end of each line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun() {
  return  // Noncompliant. ';' implicitly inserted at end of line
       5   // Noncompliant. ';' implicitly inserted at end of line
}
print(fun());  // prints "undefined", not "5"
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun() {
  return 5;
}
print(fun());
</pre>Z
CODE_SMELL
Ú
typescript:S1439›

typescriptS1439DOnly "while", "do", "for" and "switch" statements should be labelled"MAJOR*ts:Í<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code>, <code>for</code> and <code>switch</code> statements. Using labels in any other context leads to unstructured, confusing code.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    console.log("12");
    break myLabel;
  }
  console.log("Odd number, but not 12");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel: for (i = 0; i &lt; 10; i++) {   // Compliant
  console.log("Loop");
  break myLabel;
}
</pre>Z
CODE_SMELL
Å

typescript:S1516Ï	

typescriptS1516,Multiline string literals should not be used"MINOR*ts:ë	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>Z
CODE_SMELL
Û
typescript:S4023ﬁ

typescriptS4023Interfaces should not be empty"MINOR*ts:ë<p>An empty interface is equivalent to an empty object ('{}'). Normally you cannot directly assign an object literal to a type when the object literal
contains more properties than are specified in the type. But in the case of an empty interface, this check is not done, and such assignments will be
successful. The result is highly likely to confuse maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface MyFace {}  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyFace {
  foo: number;
}
</pre>Z
CODE_SMELL
ø
typescript:S1764™

typescriptS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*ts:∑<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if(f !== f) { // test for NaN value
  console.log("f is NaN");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href='/coding_rules#rule_key=typescript%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
à
typescript:S2966Û

typescriptS2966&Non-null assertions should not be used"MINOR*ts:•<p>The point of declaring an optional property or parameter is to make explicit the fact that it might contain no valid value, i.e. <code>null</code>
or <code>undefined</code>. Using a non-null assertion (the <code>!.</code> operator) will lead to a runtime error if the optional does contain
<code>null</code> or <code>undefined</code>. Even if the value is tested first, it's still considered a bad practice to use a non-null assertion. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function doTheThing(foo?: Foo) {
  let s = foo!.bar;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doTheThing(foo?: Foo) {
  if (foo) {
    let s = foo.bar;
  }
}
</pre>ZBUG
Ø
typescript:S3984ö

typescriptS39841Errors should not be created without being thrown"MAJOR*ts:¡<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error("x must be nonnegative");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error("x must be nonnegative");
}
</pre>ZBUG
∂
typescript:S4140°

typescriptS4140$Sparse arrays should not be declared"MAJOR*ts:Œ<p>An array declared with missing ("sparse") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert
the missing value and forgot.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = [1, , 3, 6, 9];  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = [1, 3, 6, 9];
</pre>Z
CODE_SMELL
Ù
typescript:S1441ﬂ

typescriptS14416Quotes for string literals should be used consistently"MINOR*ts:˙<p>Shared code conventions allow teams to collaborate efficiently. This rule checks that all non-JSX string literals use the same kind of quotes, and
requires double quotes in JSX code, regardless of the parameter value.</p>
<h2>Noncompliant Code Example</h2>
<p>Using the parameter default (forcing single quotes):</p>
<pre>
let message = "Hello, World!"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let message = 'Hello, World!';
</pre>
<h2>Exceptions</h2>
<p>Strings that contain quotes are ignored.</p>
<pre>
let heSaid = "Then he said 'What?'."  // ignored
let sheSaid = '"Whatever!" she replied.'  // ignored
</pre>Z
CODE_SMELL
Ú
typescript:S3786›

typescriptS3786ITemplate literal placeholder syntax should not be used in regular strings"MAJOR*ts:Ï<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is
done by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string
literal (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was
intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log("Today is ${date}"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
console.log(`Today is ${date}`);
</pre>ZBUG
¶
typescript:S4156ë

typescriptS4156"module" should not be used"MINOR*ts:«<p>Each file is considered an "external" module. The use of the <code>module</code> keyword creates an internal module, and was used before the
ECMAScript 2015 addition of <code>namespace</code>s for the same purpose. Now that <code>namespace</code> is available, the use of <code>module</code>
is deprecated because it does the same thing, and its use could confuse maintainers unaware of the history of the language.</p>
<h2>Noncompliant Code Example</h2>
<pre>
module myMod {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace myMod {
  // ...
}
</pre>Z
CODE_SMELL
’
typescript:S101¡

typescriptS101@Class and interface names should comply with a naming convention"MINOR*ts:”<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when class or interface names are not in
<em>PascalCase</em> (i.e. camel case with an initial capital letter).</p>
<h2>Noncompliant Code Example</h2>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
‡
typescript:S1440À

typescriptS14407"===" and "!==" should be used instead of "==" and "!=""MAJOR*ts:Â<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against <code>null</code> doesn't do exactly what most TypeScript developers believe, the use of
<code>==</code> or <code>!=</code> is tolerated in such contexts. As shown below, if <code>foo</code> hasn't been initialized, its default value is
not <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so TypeScript developers get the expected behavior.</p>
<pre>
if (foo == null) {...}  // ignored
</pre>Z
CODE_SMELL
î
typescript:S2814ˇ

typescriptS2814"Variables should not be redeclared"MAJOR*ts:Æ<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as
either a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with
the developer not realizing that the value of the variable is overwritten by the new assignment.</p>
<p>This rule also applies to function parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function myFunc(arg) {
  var a = "Ayyyyye";
  var arg = "event"; // Noncompliant, argument value is lost
  var a = "Howdy";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 'foo';
function otherName() {}
console.log(a);

function myFunc(arg) {
  var newName = "event";
}

fun(); // prints "foo"

function fun() {
  print("foo");
}

fun(); // prints "foo"

function printBar() {
  print("bar");
}

printBar(); // prints "bar"
</pre>Z
CODE_SMELL
á
typescript:S4157Ú

typescriptS4157)Default type parameters should be omitted"MINOR*ts:ö<p>There's no reason to repeat a default type unless it is early in a list and other, non-default types come after it. Instead, leave it out and only
supply type when it is something other than the default.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo&lt;N = number, S = string&gt;() {}
foo&lt;number, string&gt;();  // Noncompliant; both types redundant
foo&lt;string, string&gt;();  // Noncompliant; 2nd string is redundant
foo&lt;number, number&gt;();  // Ignored; number is redundant but required
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo&lt;N = number, S = string&gt;() {}
foo();
foo&lt;string&gt;();
foo&lt;number, number&gt;();
</pre>Z
CODE_SMELL
‚
typescript:S1524Õ

typescriptS1524 Variables should not be shadowed"CRITICAL*ts:˚
<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code.
Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = bar(1);
  if (x &gt; 0) {
      let x = bar(2); // Noncompliant
      console.log(x);
  } else {
     console.log("Wrong Value");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = bar(1);
  if (x &gt; 0) {
      let y = bar(2);
      console.log(y);
  } else {
     console.log("Wrong Value");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that
  identifier </li>
  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>
  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwE">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwAhAQ">CERT, DCL01-CPP.</a> - Do not reuse variable names in subscopes </li>
</ul>Z
CODE_SMELL
á
typescript:S1525Ú

typescriptS1525&Debugger statements should not be used"MINOR*ts:ö<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
Á
typescript:S1526“

typescriptS15261Variables should be declared before they are used"BLOCKER*ts:<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they "float" to the top
of the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. To keep confusion to
a minimum, <code>var</code> declarations should happen before the variables they declare are used for the first time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;

function fun(){
  alert(x); // Noncompliant as x is declared later in the same scope
  if(something) {
    var x = 42; // Declaration in function scope (not block scope!) shadows global variable
  }
}

fun(); // Unexpectedly alerts "undefined" instead of "1"
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function fun() {
  print(x);
  if (something) {
    x = 42;
  }
}

fun(); // Print "1"
</pre>Z
CODE_SMELL
Ä
typescript:S3504Î

typescriptS35042Variables should be declared with "let" or "const""CRITICAL*ts:á<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>
will help alleviate many of the variable scope issues which have caused confusion in the past. </p>
<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var size = 4;
</pre>
<h2>Compliant Solution</h2>
<pre>
const color = "blue";
let size = 4;
</pre>Z
CODE_SMELL
⁄
typescript:S1523≈

typescriptS15234Code should not be dynamically injected and executed"CRITICAL*ts:‹<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows
execution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay
special attention not to pass any user-provided data into it without properly validating it beforehand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
eval(code_to_be_dynamically_executed)
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically
  Evaluated Code ('Eval Injection') </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting
  (XSS) </li>
</ul>ZVULNERABILITY
ë
typescript:S4030¸

typescriptS4030Array contents should be used"MAJOR*ts:∞<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the
collection moot, or an access is missing.</p>
<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getLength(a: string, b: string, c: string) {
  const strings = [];  // Noncompliant
  strings.push(a);
  strings.push(b);
  strings.push(c);

  return a.length + b.length + c.length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getLength(a: string, b: string, c: string) {
  return a.length + b.length + c.length;
}
</pre>Z
CODE_SMELL
Ã
typescript:S4275∑

typescriptS42755Getters and setters should access the expected fields"CRITICAL*ts:◊
<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to
<code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed getters
and setters, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {  // Noncompliant: field 'x' is not used in the return value
    return this.y;
  }

  public setX(val: number) { // Noncompliant: field 'x' is not updated
    if (val &gt;= 0 &amp;&amp; val &lt; 10) {
      this.y = val;
    }
  }

  public getY() { // Noncompliant: field 'y' is not used in the return value
    return this.x;
  }
}{code}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private _x: number = 0;
  private y: number = 0;

  public get x() {
    return this._x;
  }

  public setX(val: number) {
    if (val &gt;= 0 &amp;&amp; val &lt; 10) {
      this.x = val;
    }
  }

  public getY() {
    return this.y;
  }
}{code}
</pre>ZBUG
Ä
squid:S00115Ô
squidS001155Constant names should comply with a naming convention"CRITICAL*java2S115:Ñ<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public class MyClass {
  public static final int first = 1;
}

public enum MyEnum {
  first;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public static final int FIRST = 1;
}

public enum MyEnum {
  FIRST;
}
</pre>Z
CODE_SMELL
¨
squid:S1258ú
squidS1258@Classes and enums with private members should have a constructor"MAJOR*java:∞<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize
those members, either in a constructor or with a default value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A { // Noncompliant
  private int field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int field;

  A(int field) {
    this.field = field;
  }
}
</pre>Z
CODE_SMELL
ó
squid:S2225á
squidS22259"toString()" and "clone()" methods should not return null"MAJOR*java:©<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>
instead contravenes the method's implicit contract.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String toString () {
  if (this.collection.isEmpty()) {
    return null; // Noncompliant
  } else {
    // ...
 {code}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String toString () {
  if (this.collection.isEmpty()) {
    return "";
  } else {
    // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
–
squid:S2589¿
squidS2589,Boolean expressions should not be gratuitous"MAJOR*java:Ë
<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; "a" is always "true"
  doSomething();
}

if (c || !a) { // Noncompliant; "!a" is always "false"
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
±
squid:S00116†
squidS001162Field names should comply with a naming convention"MINOR*java2S116:ª<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
   private int my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private int myField;
}
</pre>Z
CODE_SMELL
å	
squid:S2226¸
squidS22260Servlets should not have mutable instance fields"MAJOR*java:ß<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to
process this request. So all threads are sharing the servlet instances and by extension instance fields. To prevent any misunderstanding and
unexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>
<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently
  ...
}
</pre>
<p>or </p>
<pre>
public class MyAction extends Action {
  private String userName;  //Same reason
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYBUC">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>
</ul>ZBUG
ª
squid:S3436´
squidS34362Value-based classes should not be used for locking"MAJOR*java:‘<p>According to the documentation,</p>
<blockquote>
  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization...
</blockquote>
<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to
<code>struct</code>s in other languages) that will come in future versions of Java.</p>
<blockquote>
  <p> Instances of a value-based class ... </p>
  <ul>
    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of
    returned instances; </li>
  </ul>
</blockquote>
<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to
contention and deadlock issues.</p>
<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>
<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>
package except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,
<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,
<code>OptionalLong</code>, <code>OptionalInt</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Optional&lt;Foo&gt; fOpt = doSomething();
synchronized (fOpt) {  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>
</ul>ZBUG
è
squid:S00113˛
squidS001130Files should contain an empty newline at the end"MINOR*java2S113:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
æ
squid:S00114≠
squidS001146Interface names should comply with a naming convention"MINOR*java2S114:ƒ<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyInterface {...}
</pre>Z
CODE_SMELL
‹
squid:S1134Ã
squidS1134Track uses of "FIXME" tags"MAJOR*java:Ü<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
˝
squid:S1135Ì
squidS1135Track uses of "TODO" tags"INFO*java:©<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ø
squid:S00119Æ
squidS00119;Type parameter names should comply with a naming convention"MINOR*java2S119:¿<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type
parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>
<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass&lt;TYPE&gt; { // Noncompliant
  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass&lt;T&gt; {
  &lt;T&gt; void method(T t) {
  }
}
</pre>Z
CODE_SMELL
·
squid:S1133—
squidS1133!Deprecated code should be removed"INFO*java:Ö<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  /**
   * @deprecated
   */
  public void foo() {    // Noncompliant
  }

  @Deprecated            // Noncompliant
  public void bar() {
  }

  public void baz() {    // Compliant
  }
}
</pre>Z
CODE_SMELL
÷
squid:S2221∆
squidS2221D"Exception" should not be caught when not required by called methods"MINOR*java:÷
<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,
both checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime
exceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed
in the <code>catch</code> clause.</p>
<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException
} catch (Exception e) { // Noncompliant
  // log exception ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {
  // log exception ...
}
</pre>
<p>or if runtime exceptions should not be caught:</p>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {
  // log exception ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
</ul>Z
CODE_SMELL
∫	
squid:S3553™	
squidS3553,"Optional" should not be used for parameters"MAJOR*java:“<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a
method may or may not return a value. </p>
<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really
increasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,
non-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are
optional, and there's really no reason to have <code>Optional</code> parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String sayHello(Optional&lt;String&gt; name) {  // Noncompliant
  if (name == null || !name.isPresent()) {
    return "Hello World";
  } else {
    return "Hello " + name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String sayHello(String name) {
  if (name == null) {
    return "Hello World";
  } else {
    return "Hello " + name;
  }
}
</pre>Z
CODE_SMELL
â
squid:S00117¯
squidS00117PLocal variable and method parameter names should comply with a naming convention"MINOR*java2S117:ı<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant
  // ...
}
</pre>
<p>as well as one-character <code>catch</code> variables: </p>
<pre>
try {
//...
} catch (Exception e) { // Compliant
}
</pre>Z
CODE_SMELL
Î
squid:S1132€
squidS1132MStrings literals should be placed on the left side when checking for equality"MINOR*java:‚<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>
<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myString = null;

System.out.println("Equal? " + myString.equals("foo"));                        // Noncompliant; will raise a NPE
System.out.println("Equal? " + (myString != null &amp;&amp; myString.equals("foo")));  // Noncompliant; null check could be removed
</pre>
<h2>Compliant Solution</h2>
<pre>
System.out.println("Equal?" + "foo".equals(myString));                         // properly deals with the null case
</pre>Z
CODE_SMELL
ö
squid:S2222ä
squidS2222Locks should be released"CRITICAL*java: <p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>
<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private Lock lock = new Lock();

  public void doSomething() {
    lock.lock(); // Noncompliant
    if (isInitialized()) {
      // ...
      lock.unlock();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private Lock lock = new Lock();

  public void doSomething() {
    if (isInitialized()) {
      lock.lock();
      // ...
      lock.unlock();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
à

squid:S2583¯	
squidS25831Conditionally executed blocks should be reachable"MAJOR*java:¢	<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
ã
squid:S00118˙
squidS00118;Abstract class names should comply with a naming convention"MINOR*java2S118:å<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
abstract class names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
abstract class MyClass { // Noncompliant
}

class AbstractLikeClass { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class MyAbstractClass {
}

class LikeClass {
}
</pre>Z
CODE_SMELL
ü

squid:S2109è

squidS2109>Reflection should not be used to check non-runtime annotations"MAJOR*java:¨	<p>The writer of an annotation can set one of three retention policies for it:</p>
<ul>
  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,
  <code>@SuppressWarnings</code>. </li>
  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the
  default. </li>
  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>
</ul>
<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any
other retention policy is simply an error, since the test will always return false.</p>
<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Method m = String.class.getMethod("getBytes", new Class[] {int.class,
int.class, byte[].class, int.class});
if (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code
</pre>ZBUG
Ä
squid:S3318
squidS3318/Untrusted data should not be stored in sessions"MAJOR*java:í<p>Data in a web session is considered inside the "trust boundary". That is, it is assumed to be trustworthy. But storing unvetted data from an
unauthenticated user violates the trust boundary, and may lead to that data being used inappropriately.</p>
<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>
<h2>Noncompliant Code Example</h2>
<pre>
login = request.getParameter("login");
session.setAttribute("login", login);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/501">MITRE, CWE-501</a> - Trust Boundary Violation </li>
</ul>ZVULNERABILITY
ﬁ
squid:S00122Õ
squidS00122&Statements should be on separate lines"MAJOR*java2S122:Ù<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>Z
CODE_SMELL
Ω
squid:S3437≠
squidS3437,Value-based objects should not be serialized"MINOR*java:‹<p>According to the documentation,</p>
<blockquote>
  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...
</blockquote>
<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = new Foo(0);
</pre>
<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = arr[0];
</pre>
<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>
<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true
value types are introduced in the language.</p>
<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable
value-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the
date classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass implements Serializable {
  private HijrahDate date;  // Noncompliant; mark this transient
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass implements Serializable {
  private transient HijrahDate date;
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>
</ul>ZBUG
â
squid:S3438˘
squidS3438K"SingleConnectionFactory" instances should be set to "reconnectOnException""MAJOR*java:â<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic
connection recovery when the connection goes bad. </p>
<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this
connection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the
<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing
anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;  &lt;!-- Noncompliant --&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory" p:reconnectOnException="true"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<p>or</p>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
   &lt;property name="reconnectOnException"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;
 &lt;/bean&gt;
</pre>ZBUG
ı
squid:S00120‰
squidS001204Package names should comply with a naming convention"MINOR*java2S120:˝<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z]+(\.[a-z][a-z0-9]*)*$</code>:</p>
<pre>
package org.exAmple; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;
</pre>Z
CODE_SMELL
ƒ
squid:S00121≥
squidS00121*Control structures should use curly braces"CRITICAL*java2S121:”<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
ß
squid:S3688ó
squidS3688 Track uses of disallowed classes"INFO*java: <p>This rule allows banning certain classes.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
</ul>
<pre>
String name;  // Noncompliant
</pre>@Z
CODE_SMELL
È
squid:S00104ÿ
squidS00104,Files should not have too many lines of code"MAJOR*java2S104:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
Î
squid:S1148€
squidS11483Throwable.printStackTrace(...) should not be called"MINOR*java:˘<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream
<code>System.Err</code>, which could inadvertently expose sensitive information.</p>
<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>
<ul>
  <li> Users are able to easily retrieve the logs. </li>
  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>
</ul>
<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default
stream.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch(Exception e) {
  e.printStackTrace();        // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch(Exception e) {
  LOGGER.log("context", e);
}
</pre>ZVULNERABILITY
·
squid:S2116—
squidS2116A"hashCode" and "toString" should not be called on array instances"MAJOR*java:Î<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's
"identity hash code", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.
Instead, you should pass the array to the relevant static <code>Arrays</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main( String[] args )
{
    String argStr = args.toString(); // Noncompliant
    int argHash = args.hashCode(); // Noncompliant

</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main( String[] args )
{
    String argStr = Arrays.toString(args);
    int argHash = Arrays.hashCode(args);

</pre>ZBUG
ö
squid:S2236ä
squidS2236ZMethods "wait(...)", "notify()" and "notifyAll()" should not be called on Thread instances"BLOCKER*java:â<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only
because all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not
calling them on a <code>Thread</code>:</p>
<ul>
  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling
  them will corrupt the behavior of the JVM. </li>
  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to
  suspended, or is it the acquisition of the object monitor that is waited for? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(new RunnableJob());
...
myThread.wait(2000);
</pre>ZBUG
•
squid:S00105î
squidS00105(Tabulation characters should not be used"MINOR*java2S105:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
‹
squid:S1147Ã
squidS1147!Exit methods should not be called"BLOCKER*java:˝<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the
entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and
skipping finalization.</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them
should be called from applications running in a J2EE container.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.exit(0);
Runtime.getRuntime().exit(0);
Runtime.getRuntime().halt(0);
</pre>
<h2>Exceptions</h2>
<p>These methods are ignored inside <code>main</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/382.html">MITRE, CWE-382</a> - Use of System.exit() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PoYbAQ">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>
</ul>Z
CODE_SMELL
Ï
squid:S2114‹
squidS2114BCollections should not be passed as arguments to their own methods"MAJOR*java:ı<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical
code. </p>
<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in
undefined behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();
objs.add("Hello");

objs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called
objs.addAll(objs); // Noncompliant; behavior undefined
objs.containsAll(objs); // Noncompliant; always true
objs.removeAll(objs); // Noncompliant; confusing. Use clear() instead
objs.retainAll(objs); // Noncompliant; NOOP
</pre>ZBUG
”
squid:S2235√
squidS22351IllegalMonitorStateException should not be caught"CRITICAL*java:„<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting
  on an object's monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>Z
CODE_SMELL
”
squid:S00103¬
squidS00103Lines should not be too long"MAJOR*java2S103:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
⁄
squid:S1145 
squidS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*java:ﬂ<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {
  doSomething();
}
...
if (false) {
  doSomethingElse();
}

if (2 &lt; 3 ) { ... }  // Noncompliant; always false

int i = 0;
int j = 0;
// ...
j = foo();

if (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization

boolean b = true;
//...
if (b || !b) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2583'>S2583</a> instead.</p>ZBUG
œ
squid:S2111ø
squidS2111'"BigDecimal(double)" should not be used"MAJOR*java:Û<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>
<p>From <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)">the JavaDocs</a>:</p>
<blockquote>
  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which
  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to
  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a
  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances
  notwithstanding.
</blockquote>
<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the
constructor that takes a <code>String</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
double d = 1.1;

BigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above
BigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result
</pre>
<h2>Compliant Solution</h2>
<pre>
double d = 1.1;

BigDecimal bd1 = BigDecimal.valueOf(d);
BigDecimal bd2 = new BigDecimal("1.1"); // using String constructor will result in precise value
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQAVAg">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point
  literals </li>
</ul>ZBUG

squid:S2232‡
squidS2232'"ResultSet.isLast()" should not be used"MAJOR*java:ç<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>
result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear
on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
stmt.executeQuery("SELECT name, address FROM PERSON");
ResultSet rs = stmt.getResultSet();
while (! rs.isLast()) { // Noncompliant
  // process row
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ResultSet rs = stmt.executeQuery("SELECT name, address FROM PERSON");
while (! rs.next()) {
  // process row
}
</pre>Z
CODE_SMELL
í
squid:S00108Å
squidS00108.Nested blocks of code should not be left empty"MAJOR*java2S108:†<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>
blocks are still considered empty even with comments because they can still affect program flow.</p>Z
CODE_SMELL
Ê
squid:S1143÷
squidS11434Jump statements should not occur in "finally" blocks"MAJOR*java:˝<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any
unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and
<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");   // incorrect "OK" message is printed
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // this message is not shown
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
    return;      // Noncompliant - prevents the RuntimeException from being propagated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // "ERROR" is printed as expected
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>ZBUG
ﬂ
squid:S1264œ
squidS12645A "while" loop should be used instead of a "for" loop"MINOR*java:Ó<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
⁄
squid:S2112 
squidS21121"URL.hashCode" and "URL.equals" should be avoided"MAJOR*java:Ì
<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to
resolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand
makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>
<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the
<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>
<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and
<code>hashCode</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant

  URL homepage = new URL("http://sonarsource.com");  // Compliant
  if (homepage.equals(url)) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant

  URI homepage = new URI("http://sonarsource.com");  // Compliant
  URI uri = url.toURI();
  if (homepage.equals(uri)) {  // Compliant
    // ...
  }
}
</pre>Z
CODE_SMELL
°
squid:S1142ë
squidS11422Methods should not have too many return statements"MAJOR*java:≥<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public boolean myMethod() { // Noncompliant; there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
º
squid:S2110¨
squidS2110(Invalid "Date" values should not be used"MAJOR*java:ﬂ<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month
starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12
for month, and you'll get January of the following year.</p>
<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and
<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>
<table>
  <tbody>
    <tr>
      <th>Field</th>
      <th>Valid</th>
    </tr>
    <tr>
      <td>month</td>
      <td>0-11</td>
    </tr>
    <tr>
      <td>date (day)</td>
      <td>0-31</td>
    </tr>
    <tr>
      <td>hour</td>
      <td>0-23</td>
    </tr>
    <tr>
      <td>minute</td>
      <td>0-60</td>
    </tr>
    <tr>
      <td>second</td>
      <td>0-61</td>
    </tr>
  </tbody>
</table>
<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(12);  // Noncompliant; rolls d into the next year

Calendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant
if (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(11);

Calendar c = new Gregorian Calendar(2014, 11, 25);
if (c.get(Calendar.MONTH) == 11) {
  // ...
}
</pre>ZBUG
‚
squid:S2230“
squidS22301Non-public methods should not be "@Transactional""MAJOR*java:¸<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't "see" non-<code>public</code>
methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>
<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the
method is actually written to be <code>@Transactional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Transactional  // Noncompliant
private void doTheThing(ArgClass arg) {
  // ...
}
</pre>ZBUG
Ä
squid:S00107Ô
squidS00107+Methods should not have too many parameters"MAJOR*java2S107:ë<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore
ignored.</p>Z
CODE_SMELL
¢
squid:S1141í
squidS1141%Try-catch blocks should not be nested"MAJOR*java:¡<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>Z
CODE_SMELL
∂	
squid:S2118¶	
squidS2118.Non-serializable classes should not be written"MAJOR*java:”<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.
Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Vegetable {  // neither implements Serializable nor extends a class that does
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);  // Noncompliant. Nothing will be written
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Vegetable implements Serializable {  // can now be serialized
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);
  }
}
</pre>ZBUG
…

squid:S881∫
squidS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*java:ë<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
÷
squid:S00112≈
squidS00112)Generic exceptions should never be thrown"MAJOR*java2S112:È<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents
calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo(String bar) throws Throwable {  // Noncompliant
  throw new RuntimeException("My Message");     // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo(String bar) {
  throw new MyOwnRuntimeException("My Message");
}
</pre>
<h2>Exceptions</h2>
<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration
in the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the
analysis).</p>
<pre>
@Override
public void myMethod() throws Exception {...}
</pre>
<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>
<pre>
public void myOtherMethod throws Exception {
  doTheThing();  // this method throws Exception
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>Z
CODE_SMELL
È
squid:S1149Ÿ
squidS1149QSynchronized classes Vector, Hashtable, Stack and StringBuffer should not be used"MAJOR*java:‹<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them
thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>
<p>It is better to use their new unsynchronized replacements:</p>
<ul>
  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>
  <li> <code>Deque</code> instead of <code>Stack</code> </li>
  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>
  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Vector cats = new Vector();
</pre>
<h2>Compliant Solution</h2>
<pre>
ArrayList cats = new ArrayList();
</pre>
<h2>Exceptions</h2>
<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>
<pre>
@Override
public Vector getCats() {...}
</pre>Z
CODE_SMELL
¡
squid:S2203±
squidS2203>"collect" should be used with "Streams" instead of "list::add""MINOR*java:«<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the
better choice because it's automatically thread-safe and parallellizable. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; bookNames = new ArrayList&lt;&gt;();
books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))
                .map(Book::getTitle)
                .forEach(bookNames::add);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))
                .map(Book::getTitle)
                .collect(Collectors.toList());
</pre>Z
CODE_SMELL
™

squid:S3655ö

squidS3655@Optional value should only be accessed after calling isPresent()"MAJOR*java:µ	<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the
<code>get()</code> method, but it will throw a </p>
<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> method should always
be done before any call to <code>get()</code>.</p>
<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used
to specify what to do with an empty <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

String stringValue = value.get(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

if (value.isPresent()) {
  String stringValue = value.get();
}
</pre>
<p>or</p>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

String stringValue = value.orElse("default");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
</ul>ZBUG
Ç

squid:S2325Ú	
squidS2325D"private" methods that don't access instance data should be "static""MINOR*java:Ç	<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the
method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private String getMagicWord() { // Noncompliant
    return magicWord;
  }

  private void setMagicWord(String value) { // Noncompliant
    magicWord = value;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private static String getMagicWord() {
    return magicWord;
  }

  private static void setMagicWord(String value) {
    magicWord = value;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>
<ul>
  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>
  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>
  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>
</ul>Z
CODE_SMELL
Å
squid:S2445Ò
squidS24457Blocks should be synchronized on "private final" fields"MAJOR*java:ï<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>
field makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,
synchronized on the new value, to enter the block at the same time.</p>
<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object
instances in to the method as parameters, completely undermining the synchronization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private String color = "red";

private void doSomething(){
  synchronized(color) {  // Noncompliant; lock is actually on object instance "red" referred to by the color variable
    //...
    color = "green"; // other threads now allowed into this block
    // ...
  }
  synchronized(new Object()) { // Noncompliant this is a no-op.
     // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private String color = "red";
private final Object lockObj = new Object();

private void doSomething(){
  synchronized(lockObj) {
    //...
    color = "green";
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/412.html">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/413">MITRE, CWE-413</a> - Improper Resource Locking </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/6IEzAg">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that
  may interact with untrusted code </li>
</ul>ZBUG
§
squid:S3776î
squidS37766Cognitive Complexity of methods should not be too high"CRITICAL*java:Ø<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
‡
squid:S1598–
squidS15986Package declaration should match source file directory"CRITICAL*java:Î<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java
file located at "src/org/sonarqube/Foo.java" should have a package of "org.sonarqube". </p>
<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the
"com.apple" package, which could degrade the maintainability of both the class and its application.</p>Z
CODE_SMELL
€
squid:S2201À
squidS2201GReturn values from functions without side effects should not be ignored"MAJOR*java:ﬂ<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API
:</p>
<ul>
  <li> <code>java.lang.String</code> </li>
  <li> <code>java.lang.Boolean</code> </li>
  <li> <code>java.lang.Integer</code> </li>
  <li> <code>java.lang.Double</code> </li>
  <li> <code>java.lang.Float</code> </li>
  <li> <code>java.lang.Byte</code> </li>
  <li> <code>java.lang.Character</code> </li>
  <li> <code>java.lang.Short</code> </li>
  <li> <code>java.lang.StackTraceElement</code> </li>
  <li> <code>java.time.DayOfWeek</code> </li>
  <li> <code>java.time.Duration</code> </li>
  <li> <code>java.time.Instant</code> </li>
  <li> <code>java.time.LocalDate</code> </li>
  <li> <code>java.time.LocalDateTime</code> </li>
  <li> <code>java.time.LocalTime</code> </li>
  <li> <code>java.time.Month</code> </li>
  <li> <code>java.time.MonthDay</code> </li>
  <li> <code>java.time.OffsetDateTime</code> </li>
  <li> <code>java.time.OffsetTime</code> </li>
  <li> <code>java.time.Period</code> </li>
  <li> <code>java.time.Year</code> </li>
  <li> <code>java.time.YearMonth</code> </li>
  <li> <code>java.time.ZonedDateTime</code> </li>
  <li> <code>java.math.BigInteger</code> </li>
  <li> <code>java.math.BigDecimal</code> </li>
  <li> <code>java.util.Optional</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void handle(String command){
  command.toLowerCase(); // Noncompliant; result of method thrown away
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void handle(String command){
  String formattedCommand = command.toLowerCase();
  ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when both these conditions are met:</p>
<ul>
  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>
  <li> The method name starts with "parse", "format", "decode" or "valueOf" or the method is <code>String.getBytes(Charset)</code>. </li>
</ul>
<pre>
private boolean textIsInteger(String textToCheck) {

    try {
        Integer.parseInt(textToCheck, 10); // OK
        return true;
    } catch (NumberFormatException ignored) {
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
·
squid:S2204—
squidS2204E".equals()" should not be used to test the values of "Atomic" classes"MAJOR*java:Á<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and
<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,
thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be "equal" to itself. Instead, you should
<code>.get()</code> the value and make comparisons on it.</p>
<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and
<code>AtomicBoolean</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.equals(aInt2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.get() == aInt2.get()) { ... }
</pre>ZBUG
é
squid:S2446˛
squidS2446"notifyAll" should be used"MAJOR*java:ø<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>
rouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notify();  // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notifyAll();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OoAlAQ">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread
  </li>
</ul>ZBUG
§
squid:S1596î
squidS1596I"Collections.EMPTY_LIST", "EMPTY_MAP", and "EMPTY_SET" should not be used"MINOR*java:ü<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw
ones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>
fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant
Map&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant
Set&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; collection1 = Collections.emptyList();
Map&lt;String, String&gt; collection2 = Collections.emptyMap();
Set&lt;String&gt; collection3 = Collections.emptySet();
</pre>Z
CODE_SMELL
Ì	
squid:S2441›	
squidS2441FNon-serializable objects should not be stored in "HttpSession" objects"MAJOR*java:Ú<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not
seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use
in a process called "passivation". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such
sessions at startup.</p>
<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be
serialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

//...
HttpSession session = request.getSession();
session.setAttribute("address", new Address());  // Noncompliant; Address isn't serializable
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/579.html">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session
  </li>
</ul>ZBUG
¸
squid:S2442Ï
squidS2442+"Lock" objects should not be "synchronized""MAJOR*java:ï<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with
<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such
objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Lock lock = new MyLockImpl();
synchronized(lock) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Lock lock = new MyLockImpl();
lock.tryLock();
//...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cQCaAg">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level
  concurrency objects </li>
</ul>Z
CODE_SMELL
Ü
squid:S2200ˆ
squidS2200="compareTo" results should not be checked for specific values"MINOR*java:î<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific
value other than 0 could result in false negatives.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myClass.compareTo(arg) == -1) {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myClass.compareTo(arg) &lt; 0) {
  // ...
}
</pre>ZBUG
ö	
squid:S2440ä	
squidS2440=Classes with only "static" methods should not be instantiated"MAJOR*java:°<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only
<code>static</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("&lt;[^&gt;]+&gt;", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    TextUtils textUtils = new TextUtils(); // Noncompliant

    String stripped = textUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("&lt;[^&gt;]+&gt;", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    String stripped = TextUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>See Also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>
</ul>Z
CODE_SMELL
¸
squid:S2681Ï
squidS26813Multiline blocks should be enclosed in curly braces"MAJOR*java:ç<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
Å
squid:NoSonarÔ
squidNoSonar Track uses of "NOSONAR" comments"MAJOR*java2S1291:ö<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>Z
CODE_SMELL
„
squid:S2209”
squidS2209."static" members should be accessed statically"MAJOR*java:˘<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading
because it implies to the readers of your code that there's an instance of the member per class instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    first.counter ++;  // Noncompliant
    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    A.counter ++;  // Compliant
    A.counter ++;  // Compliant
  }
}
</pre>Z
CODE_SMELL
≤
squid:S3419¢
squidS3419+Group ids should follow a naming convention"MINOR*java:À<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match
the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>(com|org)(\.[a-z][a-z-0-9]*)+</code></p>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;com.myco&lt;/groupId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>Z
CODE_SMELL
∏
squid:S1118®
squidS11183Utility classes should not have public constructors"MAJOR*java:…<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException("Utility class");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>Z
CODE_SMELL
“
squid:S2208¬
squidS2208#Wildcard imports should not be used"CRITICAL*java:<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with
the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.*; // Noncompliant
import java.util.*; // Noncompliant

private Date date; // Date class exists in java.sql and java.util. Which one is this?
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Date;
import java.util.List;
import java.util.ArrayList;

private Date date;
</pre>
<h2>Exceptions</h2>
<p>Static imports are ignored by this rule. E.G.</p>
<pre>
import static java.lang.Math.*;
</pre>Z
CODE_SMELL
†
squid:S3417ê
squidS3417%Track uses of disallowed dependencies"MAJOR*java:Ω<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>
<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter of: <code>*:.*log4j.*</code></p>
<pre>
&lt;dependency&gt; &lt;!-- Noncompliant --&gt;
    &lt;groupId&gt;log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j&lt;/artifactId&gt;
    &lt;version&gt;1.2.17&lt;/version&gt;
&lt;/dependency&gt;
</pre>@Z
CODE_SMELL
û
squid:S2326é
squidS2326(Unused type parameters should be removed"MAJOR*java:∫<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored
{
  return a + b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Add(int a, int b)
{
  return a + b;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ª
squid:S2447´
squidS24473Null should not be returned from a "Boolean" method"CRITICAL*java:…<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and
<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Boolean isUsable() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>Z
CODE_SMELL
¿
squid:S3415∞
squidS34159Assertion arguments should be passed in the correct order"MAJOR*java:À<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the
first argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome
(succeed/fail when it should) but the error messages will be confusing. </p>
<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
org.junit.Assert.assertEquals(runner.exitCode(), 0, "Unexpected exit code");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.
</pre>
<h2>Compliant Solution</h2>
<pre>
org.junit.Assert.assertEquals(0, runner.exitCode(), "Unexpected exit code");
</pre>Z
CODE_SMELL
õ
squid:S3658ã
squidS3658"Unit tests should throw exceptions"MINOR*java:Ω<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>Z
CODE_SMELL
’
squid:S1479≈
squidS1479;"switch" statements should not have too many "case" clauses"MAJOR*java:ﬁ<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>Z
CODE_SMELL
˘
squid:UnusedPrivateMethod€
squidUnusedPrivateMethod*Unused "private" methods should be removed"MAJOR*java2S1144:<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism
  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism

  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on annotated methods.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>Z
CODE_SMELL
ó
squid:UselessImportCheck˙
squidUselessImportCheck!Useless imports should be removed"MINOR*java2S1128:ô<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>
<p>Unused and useless imports should not occur if that is the case.</p>
<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>Z
CODE_SMELL
€
squid:UselessParenthesesCheckπ
squidUselessParenthesesCheck0Redundant pairs of parentheses should be removed"MAJOR*java2S1110:ƒ<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>Z
CODE_SMELL
•
squid:S1126ï
squidS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*java:ï<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>Z
CODE_SMELL
Ú
squid:S2698‚
squidS2698(JUnit assertions should include messages"MINOR*java:é<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of
time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the
assertion messages work as a sort of documentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertEquals(4, list.size());  // Noncompliant

try {
  fail();  // Noncompliant
} catch (Exception e) {
  assertThat(list.get(0)).isEqualTo("pear");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
assertEquals("There should have been 4 Fruits in the list", 4, list.size());

try {
  fail("And exception is expected here");
} catch (Exception e) {
  assertThat(list.get(0)).as("check first element").overridingErrorMessage("The first element should be a pear, not a %s", list.get(0)).isEqualTo("pear");
}
</pre>Z
CODE_SMELL
≈
squid:S1125µ
squidS1125(Boolean literals should not be redundant"MINOR*java:·<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>Z
CODE_SMELL
≠
squid:S1488ù
squidS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*java:£<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public long computeDurationInMilliseconds() {
  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}

public void doSomething() {
  RuntimeException myException = new RuntimeException();
  throw myException;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
</pre>Z
CODE_SMELL
¬
squid:S3422≤
squidS3422+Dependencies should not have "system" scope"CRITICAL*java:ﬂ<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact
in an environment that's not configured just like yours is, your code won't work. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;dependency&gt;
  &lt;groupId&gt;javax.sql&lt;/groupId&gt;
  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;
  &lt;version&gt;2.0&lt;/version&gt;
  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;
  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;
&lt;/dependency&gt;
</pre>ZBUG
î
squid:S3546Ñ
squidS3546!Custom resources should be closed"BLOCKER*java:∫<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule
template allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom
resources are leaked.</p>
<h2>See also</h2>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS2095'>S2095</a> - Resources should be closed </li>
</ul>@ZBUG
·
squid:S2333—
squidS2333&Redundant modifiers should not be used"MINOR*java:ˇ<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically
<code>public static final</code>. There is no need to explicitly declare them so.</p>
<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>
<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the
constructor of an <code>Enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Vehicle {

  public void go(int speed, Direction direction);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Vehicle {

  void go(int speed, Direction direction);
</pre>Z
CODE_SMELL
¬
squid:S2696≤
squidS26964Instance methods should not write to "static" fields"CRITICAL*java:œ<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>
methods.</p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private static int count = 0;

  public void doSomething() {
    //...
    count++;  // Noncompliant
  }
}
</pre>Z
CODE_SMELL
é
squid:S3423˛
squidS3423/pom elements should be in the recommended order"MINOR*java:£<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following
order:</p>
<ol>
  <li> &lt;modelVersion/&gt; </li>
  <li> &lt;parent/&gt; </li>
  <li> &lt;groupId/&gt; </li>
  <li> &lt;artifactId/&gt; </li>
  <li> &lt;version/&gt; </li>
  <li> &lt;packaging/&gt; </li>
  <li> &lt;name/&gt; </li>
  <li> &lt;description/&gt; </li>
  <li> &lt;url/&gt; </li>
  <li> &lt;inceptionYear/&gt; </li>
  <li> &lt;organization/&gt; </li>
  <li> &lt;licenses/&gt; </li>
  <li> &lt;developers/&gt; </li>
  <li> &lt;contributors/&gt; </li>
  <li> &lt;mailingLists/&gt; </li>
  <li> &lt;prerequisites/&gt; </li>
  <li> &lt;modules/&gt; </li>
  <li> &lt;scm/&gt; </li>
  <li> &lt;issueManagement/&gt; </li>
  <li> &lt;ciManagement/&gt; </li>
  <li> &lt;distributionManagement/&gt; </li>
  <li> &lt;properties/&gt; </li>
  <li> &lt;dependencyManagement/&gt; </li>
  <li> &lt;dependencies/&gt; </li>
  <li> &lt;repositories/&gt; </li>
  <li> &lt;pluginRepositories/&gt; </li>
  <li> &lt;build/&gt; </li>
  <li> &lt;reporting/&gt; </li>
  <li> &lt;profiles/&gt; </li>
</ol>
<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard
order.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">POM Code Convention</a> </li>
</ul>Z
CODE_SMELL
‹
squid:S1244Ã
squidS12448Floating point numbers should not be tested for equality"MAJOR*java:Ô<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings);</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider
using one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third
option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored
value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>
for instance).</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146;
if ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false
  // ...
}
if ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test
  // ...
}

float zeroFloat = 0.0f;
if (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.
}
</pre>
<h2>Exceptions</h2>
<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for
<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>
<pre>
float f;
double d;
if(f != f) { // Compliant; test for NaN value
  System.out.println("f is NaN");
} else if (f != d) { // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>
  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>
</ul>ZBUG
Ü
squid:S2694ˆ
squidS2694LInner classes which do not reference their owning classes should be "static""MAJOR*java:˛<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the
inner class larger and could cause the outer class instance to live in memory longer than necessary. </p>
<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the
reference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will
also be necessary to name it. </p>
<p>However, while a nested/<code>static</code> class would be more efficient, it's worth nothing that there are semantic differences between an inner
class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  // ...

  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  // ...

  public static class Seed {
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>Z
CODE_SMELL
∫
squid:S3420™
squidS3420.Artifact ids should follow a naming convention"MINOR*java:–<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the
provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>Z
CODE_SMELL
“
squid:S3421¬
squidS34211Deprecated "${pom}" properties should not be used"MINOR*java:Â<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,
deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated
features should be added, and all existing uses should be gradually removed.</p>
<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;
</pre>
<p>or</p>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;
</pre>Z
CODE_SMELL

squid:S2211‡
squidS2211Types should be used in lambdas"MAJOR*java:ï<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the
code clearer and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.sort(rosterAsArray,
    (a, b) -&gt; {  // Noncompliant
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.sort(rosterAsArray,
    (Person a, Person b) -&gt; {
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>Z
CODE_SMELL
¡

squid:S2692±

squidS26923"indexOf" checks should not be for positive numbers"CRITICAL*java:œ	<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the
first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider
using the <code>contains</code> method instead.</p>
<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; 0) {  // Noncompliant
  // ...
}
if (name.indexOf("ish") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf("ae") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; -1) {
  // ...
}
if (name.indexOf("ish") &gt;= 0) {
  // ...
}
if (name.contains("ae") {
  // ...
}
</pre>Z
CODE_SMELL
˛
squid:S2693Ó
squidS2693-Threads should not be started in constructors"BLOCKER*java:ì<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever
extended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>
<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  Thread thread = null;

  public MyClass(Runnable runnable) {
    thread = new Thread(runnable);
    thread.start(); // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZQIRAg">CERT, TSM02-J.</a> - Do not use background threads during class initialization
  </li>
</ul>Z
CODE_SMELL
Á
squid:S2695◊
squidS2695O"PreparedStatement" and "ResultSet" methods should be called with valid indices"BLOCKER*java:·<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any "set" method of a <code>PreparedStatement</code> with a
number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,
rather than 0</p>
<h2>Noncompliant Code Example</h2>
<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");
ps.setDate(0, date);  // Noncompliant
ps.setDouble(3, salary);  // Noncompliant

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(0);  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");
ps.setDate(1, date);
ps.setDouble(2, salary);

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(1);
  // ...
}
</pre>ZBUG
¨
squid:S1481ú
squidS1481(Unused local variables should be removed"MINOR*java:»<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int numberOfMinutes(int hours) {
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int numberOfMinutes(int hours) {
  return hours * 60;
}
</pre>Z
CODE_SMELL
ô
squid:S2148â
squidS21489Underscores should be used to make large numbers readable"MINOR*java:§
<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this
manner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <tbody>
    <tr>
      <th>Base</th>
      <th> Minimum digits</th>
    </tr>
    <tr>
      <td>binary</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>octal</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>decimal</td>
      <td> 6 </td>
    </tr>
    <tr>
      <td>hexadecimal</td>
      <td> 9 </td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>Z
CODE_SMELL
ô
squid:S3306â
squidS3306?Constructor injection should be used instead of field injection"MAJOR*java:•
<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>
waiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,
rather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>
<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>
<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyComponent {  // Anyone can call the default constructor

  @Inject MyCollaborator collaborator;  // Noncompliant

  public void myBusinessMethod() {
    collaborator.doSomething();  // this will fail in classes new-ed by a caller
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyComponent {

  private final MyCollaborator collaborator;

  @Inject
  public MyComponent(MyCollaborator collaborator) {
    Assert.notNull(collaborator, "MyCollaborator must not be null!");
    this.collaborator = collaborator;
  }

  public void myBusinessMethod() {
    collaborator.doSomething();
  }
}
</pre>ZBUG
ı
squid:S2147Â
squidS2147Catches should be combined"MINOR*java:ü<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they
should be combined for better readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (IOException e) {
  doCleanup();
  logger.log(e);
}
catch (SQLException e) {  // Noncompliant
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {  // Compliant; block contents are different
  doCleanup();
  throw e;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (IOException|SQLException e) {
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {
  doCleanup();
  throw e;
}
</pre>Z
CODE_SMELL
œ
squid:S2386ø
squidS2386,Mutable fields should not be "public static""MINOR*java:‰<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.
Such variables should be moved into classes and their visibility lowered. </p>
<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,
should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>
<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on
the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>
<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyInterface {
  public static String [] strings; // Noncompliant
}

public class A {
  public static String [] strings1 = {"first","second"};  // Noncompliant
  public static String [] strings2 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/rwBc">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed
  </li>
</ul>ZVULNERABILITY
ë
squid:S2388Å
squidS2388>Inner class calls to super class methods should be unambiguous"MAJOR*java:ó<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can
be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called
explicitly, using <code>super.</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      foo();  // Noncompliant; was Outer.this.foo() intended instead?
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      super.foo();
      // ...
    }
  }
}
</pre>Z
CODE_SMELL
œ
squid:S3599ø
squidS3599.Double Brace Initialization should not be used"MINOR*java:Ï<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to
memory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to
confuse most maintainers. </p>
<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Map source = new HashMap(){{ // Noncompliant
    put("firstName", "John");
    put("lastName", "Smith");
}};
</pre>
<h2>Compliant Solution</h2>
<pre>
Map source = new HashMap();
// ...
source.put("firstName", "John");
source.put("lastName", "Smith");
// ...
</pre>ZBUG
ñ
squid:S2142Ü
squidS2142,"InterruptedException" should not be ignored"MAJOR*java:µ<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". The
throwing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact
that the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up
the method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a
single-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -
probably without finishing its task.</p>
<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>
<blockquote>
  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) { // Noncompliant; logging is not enough
    LOGGER.log(Level.WARN, "Interrupted!", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, "Interrupted!", e);
    // Restore interrupted state...
    Thread.currentThread().interrupt();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> <a href="https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1">Dealing with InterruptedException</a> </li>
</ul>ZBUG
Í	
squid:S2387⁄	
squidS23878Child class fields should not shadow parent class fields"BLOCKER*java:Ù<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at
best, chaos at worst. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripened;
  private static Color FLESH_COLOR;

}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent
class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit {
  private Season ripe;
  // ...
}

public class Raspberry extends Fruit {
  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry
  // ...
}
</pre>Z
CODE_SMELL
˝
squid:S1175Ì
squidS1175FThe signature of "finalize()" should match that of "Object.finalize()""CRITICAL*java:ˇ<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>
<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>
<ul>
  <li> The overload may not be called by the Garbage Collector. </li>
  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>
</ul>
<p>But beyond that it's a terrible idea to name a method "finalize" if it doesn't actually override <code>Object.finalize()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int finalize(int someParameter) {        // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int someBetterName(int someParameter) {  // Compliant
  /* ... */
}
</pre>ZBUG
É
squid:S2143Û
squidS21436"java.time" classes should be used for dates and times"MAJOR*java:ë<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in
a multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310
implementation offers specific classes for:</p>
<table>
  <tbody>
    <tr>
      <th>Class</th>
      <th>Use for</th>
    </tr>
    <tr>
      <td>LocalDate</td>
      <td>a date, without time of day, offset, or zone</td>
    </tr>
    <tr>
      <td>LocalTime</td>
      <td>the time of day, without date, offset, or zone</td>
    </tr>
    <tr>
      <td>LocalDateTime</td>
      <td>the date and time, without offset, or zone</td>
    </tr>
    <tr>
      <td>OffsetDate</td>
      <td>a date with an offset such as +02:00, without time of day, or zone</td>
    </tr>
    <tr>
      <td>OffsetTime</td>
      <td>the time of day with an offset such as +02:00, without date, or zone</td>
    </tr>
    <tr>
      <td>OffsetDateTime</td>
      <td>the date and time with an offset such as +02:00, without a zone</td>
    </tr>
    <tr>
      <td>ZonedDateTime</td>
      <td>the date and time with a time zone and offset</td>
    </tr>
    <tr>
      <td>YearMonth</td>
      <td>a year and month</td>
    </tr>
    <tr>
      <td>MonthDay</td>
      <td>month and day</td>
    </tr>
    <tr>
      <td>Year/MonthOfDay/DayOfWeek/...</td>
      <td>classes for the important fields</td>
    </tr>
    <tr>
      <td>DateTimeFields</td>
      <td>stores a map of field-value pairs which may be invalid</td>
    </tr>
    <tr>
      <td>Calendrical</td>
      <td>access to the low-level API</td>
    </tr>
    <tr>
      <td>Period</td>
      <td>a descriptive amount of time, such as "2 months and 3 days"</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
Date now = new Date();  // Noncompliant
DateFormat df = new SimpleDateFormat("dd.MM.yyyy");
Calendar christmas  = Calendar.getInstance();  // Noncompliant
christmas.setTime(df.parse("25.12.2020"));
</pre>
<h2>Compliant Solution</h2>
<pre>
LocalDate now = LocalDate.now();  // gets calendar date. no time component
LocalTime now2 = LocalTime.now(); // gets current time. no date component
LocalDate christmas = LocalDate.of(2020,12,25);
</pre>Z
CODE_SMELL
ˇ
squid:S2384Ô
squidS23849Mutable members should not be stored or returned directly"MINOR*java:á<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be
returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>
<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,
<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>
<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings; // Noncompliant
  }

  public void setStrings(String [] strings) {
    this.strings = strings;  // Noncompliant
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"yellow", "second"};
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings.clone();
  }

  public void setStrings(String [] strings) {
    this.strings = strings.clone();
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"first", "second"};
  }
}

</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/375">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zQCuAQ">CERT, OBJ05-J.</a> - Do not return references to private mutable class members
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QIEVAQ">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal
  components </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/kwCuAQ">CERT, OOP08-CPP.</a> - Do not return references to private data </li>
</ul>ZVULNERABILITY
ö
squid:ClassCyclomaticComplexityˆ
squidClassCyclomaticComplexity!Classes should not be too complex"CRITICAL*java2S1311:ã<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,
<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,
<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance
initializer in the class. The last return statement in method, if exists, is not taken into account.</p>
<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the
time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several
classes.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
í
squid:S1174Ç
squidS1174K"Object.finalize()" should remain protected (versus public) when overriding"CRITICAL*java:à<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>
<p>Making this method public is misleading, because it implies that any caller can use it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  @Override
  public void finalize() {    // Noncompliant
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/583.html">MITRE, CWE-583</a> - finalize() Method Declared Public </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>Z
CODE_SMELL
Ï
squid:S2140‹
squidS2140eMethods of "Random" that return floating point values should not be used in random integer generation"MINOR*java:À<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the
<code>nextInt</code> method instead.</p>
<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an
integer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Random r = new Random();
int rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50
int rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
Random r = new Random();
int rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50
</pre>Z
CODE_SMELL
Ï
squid:S2141‹
squidS2141CClasses that don't define "hashCode()" should not be used in hashes"MAJOR*java:Ù<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define
<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the
<code>equals</code> method can return different hashes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Student {  // no hashCode() method; not hash-able
  // ...

  public boolean equals(Object o) {
    // ...
  }
}

public class School {
  private Map&lt;Student, Integer&gt; studentBody = // okay so far
          new HashTable&lt;Student, Integer&gt;(); // Noncompliant

  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Student {  // has hashCode() method; hash-able
  // ...

  public boolean equals(Object o) {
    // ...
  }
  public int hashCode() {
    // ...
  }
}

public class School {
  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();

  // ...
</pre>ZBUG
Â
squid:S1170’
squidS1170jPublic constants and fields initialized at declaration should be "static final" rather than merely "final""MINOR*java:ø
<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every
instance of the class, uselessly increasing the amount of memory required to execute the application.</p>
<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have
different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such
fields should either be made <code>static</code> or initialized in the constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass {
  public final int THRESHOLD = 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Myclass {
  public static final int THRESHOLD = 3;    // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>
<blockquote>
  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (¬ß8.7)
  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (¬ß15.28).</p>
</blockquote>Z
CODE_SMELL
Ò
squid:S1171·
squidS1171-Only static class initializers should be used"MAJOR*java:à<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When
possible, non-static initializers should be refactored into standard constructors or field initializers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {

    // Noncompliant - HashMap should be extended only to add behavior, not for initialization
    {
      put("a", "b");
    }

  };
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();

  static {
    MY_MAP.put("a", "b");
  }
}
</pre>
<p>or using Guava:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of("a", "b");
}
</pre>Z
CODE_SMELL
Ü
squid:S1172ˆ
squidS1172*Unused method parameters should be removed"MAJOR*java:†<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) {     // "b" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise issues for unused parameters:</p>
<ul>
  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
  <li> in overrides and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>
  <li> in annotated methods, unless the annotation is <code>@SuppressWarning("unchecked")</code> or <code>@SuppressWarning("rawtypes")</code>, in
  which case the annotation will be ignored </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper
  javadoc. </li>
</ul>
<pre>
@Override
void doSomething(int a, int b) {     // no issue reported on b
  compute(a);
}

public void foo(String s) {
  // designed to be extended but noop in standard case
}

protected void bar(String s) {
  //open-closed principle
}

public void qix(String s) {
  throw new UnsupportedOperationException("This method should be implemented in subclasses");
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
Ÿ
squid:S2039…
squidS2039.Member variable visibility should be specified"MINOR*java:Ï<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it
open to unexpected modification by other classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class Ball {
    String color="red";  // Noncompliant
}
enum A {
  B;
  int a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Ball {
    private String color="red";  // Compliant
}
enum A {
  B;
  private int a;
}
</pre>
<h2>Exceptions</h2>
<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed
to make the code testable.</p>
<pre>
class Cone {
  @VisibleForTesting
  Logger logger; // Compliant
}
</pre>ZVULNERABILITY
‰

squid:S2157‘

squidS2157%"Cloneables" should implement "clone""CRITICAL*java:Ä
<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While
the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.
Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.
without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>
<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a
class to be copied.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Team implements Cloneable {  // Noncompliant
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) {...}
  public Person getCoach() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Team implements Cloneable {
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) { ... }
  public Person getCoach() { ... }

  @Override
  public Object clone() {
    Team clone = (Team) super.clone();
    //...
  }
}
</pre>Z
CODE_SMELL
’
squid:S2159≈
squidS2159(Silly equality checks should not be made"MAJOR*java:¯<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>
<ul>
  <li> comparing an object with null </li>
  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>
  <li> comparing unrelated classes </li>
  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>
  <li> comparing unrelated <code>interface</code> types </li>
  <li> comparing an array to a non-array </li>
  <li> comparing two arrays </li>
</ul>
<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same
as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>
<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for
instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be
used with arrays.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface KitchenTool { ... };
interface Plant {...}

public class Spatula implements KitchenTool { ... }
public class Tree implements Plant { ...}
//...

Spatula spatula = new Spatula();
KitchenTool tool = spatula;
KitchenTool [] tools = {tool};

Tree tree = new Tree();
Plant plant = tree;
Tree [] trees = {tree};


if (spatula.equals(tree)) { // Noncompliant; unrelated classes
  // ...
}
else if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface
  // ...
}
else if (tool.equals(plant)) { // Noncompliant; unrelated interfaces
  // ...
}
else if (tool.equals(tools)) { // Noncompliant; array &amp; non-array
  // ...
}
else if (trees.equals(tools)) {  // Noncompliant; incompatible arrays
  // ...
}
else if (tree.equals(null)) {  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/IQAlAg">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two
  arrays </li>
</ul>ZBUG
˙
squid:S1068Í
squidS1068)Unused "private" fields should be removed"MAJOR*java:ï<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private int foo = 42;

  public int compute(int a) {
    return a * 42;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public int compute(int a) {
    return a * 42;
  }
}
</pre>
<h2>Exceptions</h2>
<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during
deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to
serialization.</p>
<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that
must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>
<pre>
public class MyClass implements java.io.Serializable {
  private static final long serialVersionUID = 42L;
}
</pre>
<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
⁄
squid:S1188 
squidS1188DLambdas and anonymous classes should not have too many lines of code"MAJOR*java:⁄<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.
But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the
source code can quickly become unreadable.</p>Z
CODE_SMELL
å
squid:S2276¸
squidS2276M"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held"BLOCKER*java:à<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even
worse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to
temporarily release the lock and allow other threads to run.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      Thread.sleep(200);
    }
    process();
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      monitor.wait(200);
    }
    process();
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/FgG7AQ">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a
  lock </li>
</ul>ZBUG
æ
squid:S1067Æ
squidS1067%Expressions should not be too complex"CRITICAL*java:⁄<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>Z
CODE_SMELL
…
squid:S2156π
squidS21563"final" classes should not have "protected" members"MINOR*java:⁄
<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this
could lead to accidental, unintended access to otherwise private members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public final class MyFinalClass {

  protected String name = "Fred";  // Noncompliant
  protected void setName(String name) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class MyFinalClass {

  private String name = "Fred";
  public void setName(String name) {
    // ...
  }
</pre>
<h2>Exceptions</h2>
<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed
to make the code testable.</p>
<pre>
public final class MyFinalClass {
  @VisibleForTesting
  protected Logger logger; // Compliant

  @VisibleForTesting
  protected int calculateSomethingComplex(String input) { // Compliant
    // ...
  }
}
</pre>Z
CODE_SMELL
ô
squid:S1066â
squidS1066,Collapsible "if" statements should be merged"MAJOR*java:±<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

private static boolean isFileOrDirectory(File file) {
  return file.isFile() || file.isDirectory();
}
</pre>Z
CODE_SMELL
®
squid:S2274ò
squidS2274T"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop"CRITICAL*java:ï<p>According to the documentation of the Java <code>Condition</code> interface:</p>
<blockquote>
  <p>When waiting upon a <code>Condition</code>, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform
  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state
  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications
  programmers always assume that they can occur and so always wait in a loop.</p>
</blockquote>
<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>
<blockquote>
  <p>waits should always occur in loops, like this one:</p>
  <pre>
synchronized (obj) {
  while (&lt;condition does not hold&gt;){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (obj) {
  if (!suitableCondition()){
    obj.wait(timeout);   //the thread can wake up even if the condition is still false
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>Compliant Solution</h2>
<pre>
synchronized (obj) {
  while (!suitableCondition()){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9QIhAQ">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop
  </li>
</ul>Z
CODE_SMELL
÷

squid:S3242∆

squidS32424Method parameters should be declared with base types"MINOR*java:Ê	<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class
are required by a method, a type higher up the class hierarchy should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>
parameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context
than method invocation or enhanced for loop are also excluded.</p>Z
CODE_SMELL
—
squid:S1065¡
squidS1065Unused labels should be removed"MAJOR*java:ˆ<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  outer: //label is not used.
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() {
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
¸
squid:S1186Ï
squidS1186Methods should not be empty"CRITICAL*java:¢<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
}

public void doSomethingElse() {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public void doSomething() {
  // Do nothing because of X and Y.
}

@Override
public void doSomethingElse() {
  throw new UnsupportedOperationException();
}
</pre>
<h2>Exceptions</h2>
<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>
<pre>
public abstract class Animal {
  void speak() {  // default implementation ignored
  }
}
</pre>Z
CODE_SMELL
Ä
squid:S2154
squidS2154cDissimilar primitive wrappers should not be used with the ternary operator without explicit casting"MAJOR*java:Ë<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both
values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible
type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? (Number) i : f;  // n = 123456789
</pre>ZBUG
ü
squid:S1185è
squidS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*java:é<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  super.doSomething();
}

@Override
public boolean isLegal(Action action) {
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public boolean isLegal(Action action) {         // Compliant - not simply forwarding the call
  return super.isLegal(new Action(/* ... */));
}

@Id
@Override
public int getId() {                            // Compliant - there is annotation different from @Override
  return super.getId();
}
</pre>Z
CODE_SMELL
∏
squid:S2275®
squidS2275MPrintf-style format strings should not lead to unexpected behavior at runtime"BLOCKER*java:¥<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors
that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling
the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,
<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>
or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format("The value of my integer is %d", "Hello World");  // Noncompliant; an 'int' is expected rather than a String
String.format("Duke's Birthday year is %tX", c);  //Noncompliant; X is not a supported time conversion character
String.format("Display %0$d and then %d", 1);   //Noncompliant; arguments are numbered starting from 1
String.format("Not enough arguments %d and %d", 1);  //Noncompliant; the second argument is missing
String.format("%&lt; is equals to %d", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one

MessageFormat.format("Result {1}.", value); // Noncompliant; Not enough arguments. (first element is {0})
MessageFormat.format("Result {{0}.", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)
MessageFormat.format("Result ' {0}", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format("The value of my integer is %d", 3);
String.format("Duke's Birthday year is %tY", c);
String.format("Display %1$d and then %d", 1);
String.format("Not enough arguments %d and %d", 1, 2);
String.format("%d is equals to %&lt;", 2);

MessageFormat.format("Result {0}.", value);
MessageFormat.format("Result {0} &amp; {1}.", value, value);
MessageFormat.format("Result {0}.", myObject);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>
</ul>ZBUG
Ô	
squid:S2151ﬂ	
squidS2151*"runFinalizersOnExit" should not be called"CRITICAL*java:ç	<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and
<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>
<p>According to the Oracle Javadoc:</p>
<blockquote>
  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic
  behavior or deadlock.</p>
</blockquote>
<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String [] args) {
  ...
  System.runFinalizersOnExit(true);  // Noncompliant
  ...
}

protected void finalize(){
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String [] args) {
  Runtime.addShutdownHook(new Runnable() {
    public void run(){
      doSomething();
    }
  });
  //...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>ZBUG
«
squid:S2272∑
squidS2272?"Iterator.next()" methods should throw "NoSuchElementException""MINOR*java:”<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception
when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this
<code>Iterator</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      return null;
    }
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      throw new NoSuchElementException();
    }
    ...
  }
}
</pre>ZBUG
π
squid:S3008©
squidS3008CStatic non-final field names should comply with a naming convention"MINOR*java:∫<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public final class MyClass {
   private static String foo_bar;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private static String fooBar;
}
</pre>Z
CODE_SMELL
‘
squid:S1182ƒ
squidS1182LClasses that override "clone" should be "Cloneable" and call "super.clone()""MINOR*java:Ã<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding
<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,
it's probably a mistake.</p>
<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>
<ol>
  <li> <code>x.clone() != x</code> </li>
  <li> <code>x.clone().getClass() == x.getClass()</code> </li>
  <li> <code>x.clone().equals\(x\)</code> </li>
</ol>
<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>
<ol>
  <li> <code>super.clone()</code> returns a new object instance </li>
  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>
  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
class BaseClass {  // Noncompliant; should implement Cloneable
  @Override
  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance
    return new BaseClass();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class BaseClass implements Cloneable {
  @Override
  public Object clone() throws CloneNotSupportedException {    // Compliant
    return super.clone();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/580.html">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/CQHEAw">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>
</ul>Z
CODE_SMELL
≥	
squid:S2273£	
squidS2273a"wait", "notify" and "notifyAll" should only be called when a lock is obviously held on an object"MAJOR*java:ù<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a
thread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule
reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>
<h2>Noncompliant Code Example</h2>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    obj.wait();
  }
  ... // Perform removal
}
</pre>
<p>or</p>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void removeElement() {
  synchronized(obj) {
    while (!suitableCondition()){
      obj.wait();
    }
    ... // Perform removal
  }
}
</pre>
<p>or</p>
<pre>
private synchronized void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>ZBUG
¸
squid:S2391Ï
squidS23913JUnit framework methods should be declared properly"BLOCKER*java:ã<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named
"suite", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a
<code>junit.framework.TestSuite</code>.</p>
<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Test suite() { ... }  // Noncompliant; must be public static
public static boolean suite() { ... }  // Noncompliant; wrong return type
public static Test suit() { ... }  // Noncompliant; typo in method name
public static Test suite(int count) { ... } // Noncompliant; must be no-arg

public void setup() { ... } // Noncompliant; should be setUp
public void tearDwon() { ... }  // Noncompliant; should be tearDown
</pre>
<h2>Compliant Solution</h2>
<pre>
public static Test suite() { ... }
public void setUp() { ... }
public void tearDown() { ... }
</pre>Z
CODE_SMELL
‘
squid:S1181ƒ
squidS1181(Throwable and Error should not be caught"MAJOR*java:<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not
meant to be caught by applications.</p>
<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from
which an application should not attempt to recover.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try { /* ... */ } catch (Throwable t) { /* ... */ }
try { /* ... */ } catch (Error e) { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
try { /* ... */ } catch (RuntimeException e) { /* ... */ }
try { /* ... */ } catch (MyException e) { /* ... */ }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors
  </li>
</ul>Z
CODE_SMELL
¶

squid:S2390ñ

squidS2390DClasses should not access their own subclasses during initialization"CRITICAL*java:£	<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child
class might not have been initialized yet. This could create what is known as an "initialisation cycle", or even a deadlock in some extreme cases.</p>
<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  static int field1 = Child.method(); // Noncompliant
  static int field2 = 42;

  public static void main(String[] args) {
    System.out.println(Parent.field1); // will display "0" instead of "42"
  }
}

class Child extends Parent {
  static int method() {
    return Parent.field2;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles">CERT, DCL00-J.</a> - Prevent
  class initialization cycles </li>
  <li> Java Language Specifications - <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4">Section 12.4: Initialization of
  Classes and Interfaces</a> </li>
</ul>Z
CODE_SMELL
î
squid:S3578Ñ
squidS35783Test methods should comply with a naming convention"MINOR*java:•<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>Z
CODE_SMELL
Ï
squid:S1158‹
squidS1158VPrimitive wrappers should not be instantiated only for "toString" or "compareTo" calls"MINOR*java:⁄<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is
inefficient.</p>
<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new Integer(myInteger).toString();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer.toString(myInteger);        // Compliant
</pre>Z
CODE_SMELL
Ω
squid:S2127≠
squidS21276"Double.longBitsToDouble" should not be used for "int""MAJOR*java:“<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the
mathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as
if a child were trying to use an adult's gloves.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 42;
double d = Double.longBitsToDouble(i);  // Noncompliant
</pre>ZBUG
›
squid:S3457Õ
squidS34574Printf-style format strings should be used correctly"MAJOR*java:Ì<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that
result in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their
arguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,
<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of
<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format("First {0} and then {1}", "foo", "bar");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters "foo" and "bar" will be simply ignored here
String.format("Display %3$d and then %d", 1, 2, 3);   //Noncompliant; the second argument '2' is unused
String.format("Too many arguments %d and %d", 1, 2, 3);  //Noncompliant; the third argument '3' is unused
String.format("First Line\n");   //Noncompliant; %n should be used in place of \n to produce the platform-specific line separator
String.format("Is myObject null ? %b", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)
String.format("value is " + value); // Noncompliant
String s = String.format("string without arguments"); // Noncompliant

MessageFormat.format("Result '{0}'.", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)
MessageFormat.format("Result {0}.", value, value);  // Noncompliant; 2nd argument is not used
MessageFormat.format("Result {0}.", myObject.toString()); // Noncompliant; no need to call toString() on objects
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format("First %s and then %s", "foo", "bar");
String.format("Display %2$d and then %d", 1, 3);
String.format("Too many arguments %d %d", 1, 2);
String.format("First Line%n");
String.format("Is myObject null ? %b", myObject == null);
String.format("value is %d", value);
String s = "string without arguments";

MessageFormat.format("Result {0}.", value);
MessageFormat.format("Result '{0}'  =  {0}", value);
MessageFormat.format("Result {0}.", myObject);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>
</ul>Z
CODE_SMELL
ı
squid:S1157Â
squidS1157]Case insensitive string comparisons should be made without intermediate upper or lower casing"MINOR*java:‹<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation
of temporary, intermediate <code>String</code> objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant
boolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant
boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean result = foo.equalsIgnoreCase(bar);                  // Compliant
</pre>Z
CODE_SMELL
Ô
squid:S2122ﬂ
squidS2122<"ScheduledThreadPoolExecutor" should not have 0 core threads"CRITICAL*java:˚<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>
to zero means the executor will have no threads and run nothing.</p>
<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void do(){

  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant

  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);
  stpe2.setCorePoolSize(0);  // Noncompliant
</pre>ZBUG
ì
squid:S3577É
squidS35773Test classes should comply with a naming convention"MINOR*java:§<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>
<pre>
class Foo {  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooTest {
}
</pre>Z
CODE_SMELL
‚
 squid:LabelsShouldNotBeUsedCheckΩ
squidLabelsShouldNotBeUsedCheckLabels should not be used"MAJOR*java2S1119:‹<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to
follow, which reduces the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};

outer: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant
  for (int col = 0; col &lt; matrix[row].length; col++) {
    if (col == row) {
      continue outer;
    }
    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int row = 1; row &lt; matrix.length; row++) {          // Compliant
  for (int col = 0; col &lt; row; col++) {
    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8
  }
}
</pre>Z
CODE_SMELL
ò
squid:S1155à
squidS11559Collection.isEmpty() should be used to test for emptiness"MINOR*java:£<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can
be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations
of <code>size()</code> can be <code>O(n)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myCollection.size() == 0) {  // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myCollection.isEmpty()) {
  /* ... */
}
</pre>Z
CODE_SMELL
Ç
squid:S2123Ú
squidS2123*Values should not be uselessly incremented"MAJOR*java:£<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i++;
  return ++j;
}
</pre>ZBUG
’
squid:S1151≈
squidS1151<"switch case" clauses should not have too many lines of code"MAJOR*java:›<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // 6 lines till next case
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething()
    break;
  case 1:
  ...
}
...
private void doSomething(){
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
}
</pre>Z
CODE_SMELL
ﬂ
squid:S1153œ
squidS11533String.valueOf() should not be appended to a String"MINOR*java:<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>
<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void display(int i){
  System.out.println("Output is " + String.valueOf(i));    // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void display(int i){
  System.out.println("Output is " + i);                    // Compliant
}
</pre>Z
CODE_SMELL
Ê
squid:S2129÷
squidS2129UConstructors should not be used to instantiate "String" and primitive-wrapper classes"MAJOR*java:’<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory
than simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>
<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially "", so just use that.
String nonempty = new String("Hello world"); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = "";
String nonempty = "Hello world";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
</pre>Z
CODE_SMELL
Â
squid:S00100‘
squidS001003Method names should comply with a naming convention"MINOR*java2S100:Ó<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public int DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded. </p>
<pre>
@Override
public int Do_Something(){...}
</pre>Z
CODE_SMELL
Ê
squid:S00101’
squidS001012Class names should comply with a naming convention"MINOR*java2S101:<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
ß
squid:S1150ó
squidS1150%Enumeration should not be implemented"MAJOR*java:∆<p>From the official Oracle Javadoc:</p>
<blockquote>
  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove
  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass implements Enumeration {  // Non-Compliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass implements Iterator {     // Compliant
  /* ... */
}
</pre>Z
CODE_SMELL
 
squid:S2259∫
squidS2259(Null pointers should not be dereferenced"MAJOR*java:Ì<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At
best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or
it could allow an attacker to bypass security measures.</p>
<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a
href="https://jcp.org/en/jsr/detail?id=305">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used
on the parameter to <code>equals</code>, which by contract should always work with null.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
String getName(){...}

public boolean isNameEmpty() {
  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked
}
</pre>
<pre>
Connection conn = null;
Statement stmt = null;
try{
  conn = DriverManager.getConnection(DB_URL,USER,PASS);
  stmt = conn.createStatement();
  // ...

}catch(Exception e){
  e.printStackTrace();
}finally{
  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block
  conn.close();  // Noncompliant; conn could be null if an exception was thrown
}
</pre>
<pre>
private void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}

public  void append(@CheckForNull Color color) {
    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters
}
</pre>
<pre>
void paint(Color color) {
  if(color == null) {
    System.out.println("Unable to apply color " + color.toString());  // Noncompliant; NullPointerException will be thrown
    return;
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
‡

squid:S923—
squidS923CFunctions should not be defined with a variable number of arguments"INFO*java:‰<p>As stated per effective java : </p>
<blockquote>
  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can
  produce confusing results if used inappropriately.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
void fun ( String... strings )	// Noncompliant
{
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>
  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4CW">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>
</ul>Z
CODE_SMELL
º
squid:S1168¨
squidS1168?Empty arrays and collections should be returned instead of null"MAJOR*java:¡<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more
complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static List&lt;Result&gt; getResults() {
  return null;                             // Noncompliant
}

public static Result[] getResults() {
  return null;                             // Noncompliant
}

public static void main(String[] args) {
  Result[] results = getResults();

  if (results != null) {                   // Nullity test required to prevent NPE
    for (Result result: results) {
      /* ... */
    }
  }
}

</pre>
<h2>Compliant Solution</h2>
<pre>
public static List&lt;Result&gt; getResults() {
  return Collections.emptyList();          // Compliant
}

public static Result[] getResults() {
  return new Result[0];
}

public static void main(String[] args) {
  for (Result result: getResults()) {
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an
  empty array over a null value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zwHEAw">CERT, MET55-J.</a> - Return an empty array or collection instead of a null
  value for methods that return an array or collection </li>
</ul>Z
CODE_SMELL
ﬁ
squid:S2133Œ
squidS21330Objects should not be created only to "getClass""MAJOR*java:Ú<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'
<code>.class</code> property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyObject myOb = new MyObject();  // Noncompliant
Class c = myOb.getClass();
</pre>
<h2>Compliant Solution</h2>
<pre>
Class c = MyObject.class;
</pre>Z
CODE_SMELL
ÿ
squid:S3346»
squidS3346<Expressions used in "assert" should not produce side effects"MAJOR*java:Á<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their
execution the evaluation of any logic required for correct program function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assert myList.remove(myList.get(0));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean removed = myList.remove(myList.get(0));
assert removed;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/vwG7AQ">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side
  effects </li>
</ul>ZBUG
ü	
squid:S1165è	
squidS1165%Exception classes should be immutable"MINOR*java:æ<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>
<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>
<ul>
  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>
  <li> Won't be updated or corrupted by a questionable error handler. </li>
</ul>
<p>This will enable developers to quickly understand what went wrong.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Exception {

  private int status;                               // Noncompliant

  public MyException(String message) {
    super(message);
  }

  public int getStatus() {
    return status;
  }

  public void setStatus(int status) {
    this.status = status;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception {

  private final int status;

  public MyException(String message, int status) {
    super(message);
    this.status = status;
  }

  public int getStatus() {
    return status;
  }

}
</pre>Z
CODE_SMELL
ü
squid:S2131è
squidS2131;Primitives should not be boxed just for "String" conversion"MAJOR*java:®<p>"Boxing" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'
<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a
class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>
argument should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myInt = 4;
String myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object
myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int myInt = 4;
String myIntString = Integer.toString(myInt);
</pre>Z
CODE_SMELL
†
squid:S2134ê
squidS2134CClasses extending java.lang.Thread should override the "run" method"MAJOR*java:®<p>According to the Java API documentation:</p>
<blockquote>
  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the
  run method of class Thread. An instance of the subclass can then be allocated and started...</p>
  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An
  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>
</blockquote>
<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the
<code>Thread</code> class is not well understood.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyRunner extends Thread { // Noncompliant; run method not overridden

  public void doSometing() {...}
}
</pre>
<h2>Exceptions</h2>
<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call
<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule
consequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a
proper <code>Runnable</code> target.</p>
<pre>
class MyThread extends Thread { // Compliant - calling super constructor with a Runnable
  MyThread(Runnable target) {
    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed
    // ...
  }
}
</pre>ZBUG
±
squid:S2252°
squidS2252,Loop conditions should be true at least once"MAJOR*java:–<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always
bugs, particularly when the initial value and stop conditions are hard-coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 10; i &lt; 10; i++) {  // Noncompliant
  // ...
</pre>ZBUG
î
 squid:LeftCurlyBraceEndLineCheckÔ
squidLeftCurlyBraceEndLineCheck:An open curly brace should be located at the end of a line"MINOR*java2S1105:Ì<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
ø
squid:S1163Ø
squidS11631Exceptions should not be thrown in finally blocks"CRITICAL*java:œ<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block, and the masked's exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/soUbAQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block
  </li>
</ul>Z
CODE_SMELL
´
squid:S2253õ
squidS2253 Track uses of disallowed methods"MAJOR*java:Õ<p>This rule allows banning certain methods.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className:java.lang.String </li>
  <li> methodName: replace </li>
  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>
</ul>
<pre>
String name;
name.replace("A","a");  // Noncompliant
</pre>@Z
CODE_SMELL
æ
squid:S1162Æ
squidS1162'Checked exceptions should not be thrown"MAJOR*java:€<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe
that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>
<p>This rule verifies that no method throws a new checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod1() throws CheckedException {
  ...
  throw new CheckedException(message);   // Noncompliant
  ...
  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked
}

public void myMethod2() throws CheckedException {  // Compliant; propagation allowed
  myMethod1();
}
</pre>Z
CODE_SMELL
»
squid:S2250∏
squidS2250ACollection methods with O(n) performance should be used carefully"MINOR*java:À<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes
constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of
elements in the collection. When the collection is large, this could therefore be an expensive operation. </p>
<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>
<ul>
  <li> <code>ArrayList</code>
    <ul>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
  <li> <code>LinkedList</code>
    <ul>
      <li> <code>get</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>ConcurrentLinkedQueue</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>ConcurrentLinkedDeque</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>CopyOnWriteArrayList</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
  <li> <code>CopyOnWriteArraySet</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();
//...
log.info("Queue contains " + queue.size() + " elements");  // Noncompliant
</pre>Z
CODE_SMELL
¬
squid:S3340≤
squidS3340KAnnotation arguments should appear in the order in which they were declared"MINOR*java:ª<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@interface Pet {
    String name();
    String surname();
}

@Pet(surname ="", name="") // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@interface Pet {
    String name();
    String surname();
}

@Pet(name ="", surname="") // Compliant
</pre>Z
CODE_SMELL
 

squid:S818ª
squidS818%Literal suffixes should be upper case"MINOR*java:Î<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
long long1 = 1l; // Noncompliant
float float1 = 1.0f; // Noncompliant
double double1 = 1.0d; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
long long1 = 1L;
float float1 = 1.0F;
double double1 = 1.0D;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>
  <li> MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C</a> - Use "L," not "l," to indicate a long value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP</a> - Use "L," not "l," to indicate a long value </li>
</ul>Z
CODE_SMELL
≠
squid:S1160ù
squidS11609Public methods should throw at most one checked exception"MAJOR*java:∏<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them
fully part of the API of the method.</p>
<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void delete() throws IOException, SQLException {      // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void delete() throws SomeApplicationLevelException {
  /* ... */
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>Z
CODE_SMELL
ò
squid:S1161à
squidS1161A"@Override" should be used on overriding and implementing methods"MAJOR*java:õ<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashcode()</code>, ...</p>Z
CODE_SMELL
¿
squid:S2130∞
squidS21309Parsing should be used to convert "Strings" to primitives"MINOR*java:À<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method
instead. It will be clearer and more efficient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myNum = "12.2";

float f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float
</pre>
<h2>Compliant Solution</h2>
<pre>
String myNum = "12.2";

float f = Float.parseFloat(myNum);
</pre>Z
CODE_SMELL
˙
squid:S2251Í
squidS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*java:¸<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually
reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;
    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1
    //...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i++) {
    String string = strings[i];
    //...
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
ﬁ
$squid:AssignmentInSubExpressionCheckµ
squidAssignmentInSubExpressionCheck:Assignments should not be made from within sub-expressions"MAJOR*java2S1121:Ø<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>
<pre>
BufferedReader br = new BufferedReader(/* ... */);
String line;
while ((line = br.readLine()) != null) {...}
</pre>
<p>Chained assignments, including compound assignments, are ignored.</p>
<pre>
int i = j = 0;
int k = (j += 1);
result = (bresult = new byte[len]);
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>
</ul>Z
CODE_SMELL
â
squid:S1774˘
squidS1774'The ternary operator should not be used"MAJOR*java:¶<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(i&gt;10?"yes":"no");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (i &gt; 10) {
  System.out.println(("yes");
} else {
  System.out.println("no");
}
</pre>Z
CODE_SMELL
ä
squid:S2864˙
squidS2864F"entrySet()" should be iterated when both the key and value are needed"MAJOR*java:à<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,
it's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved
    Object value = map.get(key);
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {
    String key = entry.getKey();
    Object value = entry.getValue();
    // ...
  }
}
</pre>Z
CODE_SMELL
¡
squid:ObjectFinalizeCheck£
squidObjectFinalizeCheck1The Object.finalize() method should not be called"MAJOR*java2S1111:∏<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection
determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void dispose() throws Throwable {
  this.finalize();                       // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/586.html">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>ZBUG
ï
squid:S2629Ö
squidS2629C"Preconditions" and logging arguments should not require evaluation"MAJOR*java:ñ<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, "Something went wrong: " + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine("An exception occurred with message: " + message); // Noncompliant

LOG.error("Unable to open file " + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, "Arg must be positive, but got " + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, "message: %s", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, "Something went wrong: {0} ", message);  // String formatting only applied if needed

logger.fine("An exception occurred with message: {}", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; "Something went wrong: " + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error("Unable to open file {0}", csvPath, e);

if (LOG.isDebugEnabled() {
  LOG.debug("Unable to open file " + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, "Arg must be positive, but got %d", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException("message: " + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored. This rule accounts for explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and
ignores the bodies of such <code>if</code> statements.</p>Z
CODE_SMELL
	
squid:S3958‡	
squidS39585Intermediate Stream methods should not be left unused"MAJOR*java:Ü	<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something
other than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed
on their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is
almost certainly an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
widgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int sum = widgets.stream()
                      .filter(b -&gt; b.getColor() == RED)
                      .mapToInt(b -&gt; b.getWeight())
                      .sum();
Stream&lt;Widget&gt; pipeline = widgets.stream()
                                 .filter(b -&gt; b.getColor() == GREEN)
                                 .mapToInt(b -&gt; b.getWeight());
sum = pipeline.sum();
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>ZBUG
Ù
squid:S3959‰
squidS3959.Consumed Stream pipelines should not be reused"MAJOR*java:ë<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is
performed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);
int sum1 = pipeline.sum();
int sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>ZBUG
À
squid:ParsingError¥
squidParsingErrorJava parser failure"MAJOR*java2S2260:Á<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
…
squid:S1656π
squidS1656%Variables should not be self-assigned"MAJOR*java:Ô<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void setName(String name) {
  name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void setName(String name) {
  this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
€
squid:S1659À
squidS1659:Multiple variables should not be declared on the same line"MINOR*java:Â<p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator
  respectively </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fAAhAQ">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration
  </li>
</ul>Z
CODE_SMELL
£
squid:S1301ì
squidS13019"switch" statements should have at least 3 "case" clauses"MINOR*java:Æ<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>Z
CODE_SMELL
Ô
squid:S1309ﬂ
squidS1309-Track uses of "@SuppressWarnings" annotations"INFO*java:á<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter value of "unused" :</p>
<pre>
@SuppressWarnings("unused")
@SuppressWarnings("unchecked")  // Noncompliant
</pre>Z
CODE_SMELL
’	
squid:S2638≈	
squidS2638,Method overrides should not change contracts"CRITICAL*java:Í<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the
superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are
marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and
<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {

  private Season ripe;
  private String color;

  public void setRipe(@Nullable Season ripe) {
    this.ripe = ripe;
  }

  public @NotNull Integer getProtein() {
    return 12;
  }
}

public class Raspberry extends Fruit {

  public void setRipe(@NotNull Season ripe) {  // Noncompliant
    this.ripe = ripe;
  }

  public @Nullable Integer getProtein() {  // Noncompliant
    return null;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>
</ul>Z
CODE_SMELL
¥
squid:S2639§
squidS26394Inappropriate regular expressions should not be used"MAJOR*java:À<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>
<p>The following should not be used as regular expressions:</p>
<ul>
  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>
  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>
  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String str = "/File|Name.txt";

String clean = str.replaceAll(".",""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string
String clean2 = str.replaceAll("|","_"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_
String clean3 = str.replaceAll(File.separator,""); // Noncompliant; exception on Windows
</pre>ZBUG
Á
squid:S1994◊
squidS1994>"for" loop increment clauses should modify the loops' counters"CRITICAL*java:Í<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop's increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) {  // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or</p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>Z
CODE_SMELL
∂

squid:S2637¶

squidS2637+"@NonNull" values should not be set to null"MINOR*java:÷	<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null
values and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field
in a constructor, could cause <code>NullPointerException</code>s at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MainClass {

  @Nonnull
  private String primary;
  private String secondary;

  public MainClass(String color) {
    if (color != null) {
      secondary = null;
    }
    primary = color;  // Noncompliant; "primary" is Nonnull but could be set to null here
  }

  public MainClass() { // Noncompliant; "primary" Nonnull" but is not initialized
  }

  @Nonnull
  public String indirectMix() {
    String mix = null;
    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
ä
squid:S2757˙
squidS2757'"=+" should not be used instead of "+=""MAJOR*java:Æ<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
£
squid:S1751ì
squidS17512Jump statements should not be used unconditionally"MAJOR*java:µ<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once
and the loop structure itself is simply wasted keystrokes.</p>
<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>
<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i;
for (i = 0; i &lt; 10; ++i) {
  System.out.println("i is " + i);
  break;  // loop only executes once
}

for (i = 0; i &lt; 10; ++i) {
  System.out.println("i is " + i);
  continue;  // this is meaningless; the loop would continue anyway
}

for (i = 0; i &lt; 10; ++i) {
  System.out.println("i is " + i);
  return;  // loop only executes once
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i;
for (i = 0; i &lt; 10; ++i) {
  System.out.println("i is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>
  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ﬁ
squid:S1871Œ
squidS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*java:À<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}

if ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else {
  doTheRest();
}
</pre>
<p>or </p>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doFirstThing();
    doThirdThing();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThirdThing();
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>Z
CODE_SMELL
Ì
squid:S1872›
squidS1872&Classes should not be compared by name"MAJOR*java:í<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based
on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted
class and thereby gain trusted access.</p>
<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying
type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package computer;
class Pear extends Laptop { ... }

package food;
class Pear extends Fruit { ... }

class Store {

  public boolean hasSellByDate(Object item) {
    if ("Pear".equals(item.getClass().getSimpleName())) {  // Noncompliant
      return true;  // Results in throwing away week-old computers
    }
    return false;
  }

  public boolean isList(Class&lt;T&gt; valueClass) {
    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant
      return true;
    }
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Store {

  public boolean hasSellByDate(Object item) {
    if (item instanceof food.Pear) {
      return true;
    }
    return false;
  }

  public boolean isList(Class&lt;T&gt; valueClass) {
    if (valueClass.isAssignableFrom(List.class)) {
      return true;
    }
    return false;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/486.html">MITRE, CWE-486</a> - Comparison of Classes by Name </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/LAFlAQ">CERT, OBJ09-J.</a> - Compare classes and not class names </li>
</ul>ZBUG
ﬂ
squid:CommentedOutCodeLine¿
squidCommentedOutCodeLine.Sections of code should not be "commented out""MAJOR*java2S125:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
π
squid:S1996©
squidS1996?Files should contain only one top-level class or interface each"MAJOR*java:æ<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>Z
CODE_SMELL
¡
squid:S2973±
squidS2973-Escaped Unicode characters should not be used"MAJOR*java:ÿ<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>
<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a
printable character.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String prefix = "n\u00E9e"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String prefix = "n√©e";
</pre>Z
CODE_SMELL
ˇ
squid:S3937Ô
squidS3937!Number patterns should be regular"CRITICAL*java:ü<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int duos = 1_00_00;
int million = 1_000_00_000;  // Noncompliant
int thousand = 1000;
int tenThousand = 100_00;  // Noncompliant
</pre>Z
CODE_SMELL
†
squid:S1643ê
squidS16436Strings should not be concatenated using '+' in a loop"MINOR*java:Æ<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop
iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted
back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is
preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String str = "";
for (int i = 0; i &lt; arrayOfStrings.length ; ++i) {
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {
    bld.append(arrayOfStrings[i]);
  }
  String str = bld.toString();
</pre>Z
CODE_SMELL
‘
squid:S1764ƒ
squidS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*java:‘<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

int j = 5 / 5; //always 1
int k = 5 - 5; //always 0

c.equals(c); //always true
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>
<pre>
float f;
if(f != f) { //test for NaN value
  System.out.println("f is NaN");
}

int i = 1 &lt;&lt; 1; // Compliant
int j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
ô
squid:S2974â
squidS29747Classes without "public" constructors should be "final""MINOR*java:¶<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PrivateConstructorClass {  // Noncompliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class PrivateConstructorClass {  // Compliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>Z
CODE_SMELL
Œ
squid:S1640æ
squidS1640CMaps with keys that are enum values should be replaced with EnumMap"MINOR*java:œ<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);
  }
}
</pre>Z
CODE_SMELL
•
squid:S2970ï
squidS2970Assertions should be complete"BLOCKER*java: <p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>
<ul>
  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>
</ul>
<p>In such cases, what is intended to be a test doesn't actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether "result" is true or false

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let's check that "add" and "clear" methods are actually called
Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
</pre>
<h2>Compliant Solution</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result).isTrue();

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let's check that "add" and "clear" methods are actually called
Mockito.verify(mockedList).add("one");
Mockito.verify(mockedList).clear();
</pre>
<h2>Exceptions</h2>
<p>Variable assignments and return statements are skipped to allow helper methods.</p>
<pre>
private BooleanAssert check(String filename, String key) {
  String fileContent = readFileContent(filename);
  performReplacements(fileContent);
  return assertThat(fileContent.contains(key)); // No issue is raised here
}

@Test
public void test() {
  check("foo.txt", "key1").isTrue();
  check("bar.txt", "key2").isTrue();
}
</pre>Z
CODE_SMELL
∏
squid:S2972®
squidS29724Inner classes should not have too many lines of code"MAJOR*java:»<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold
should probably be externalized to its own file.</p>Z
CODE_SMELL
˘
squid:S2737È
squidS2737+"catch" clauses should do more than rethrow"MINOR*java:í<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
Ÿ
squid:S2975…
squidS2975 "clone" should not be overridden"BLOCKER*java:˚<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky
and difficult to get right, according to Joshua Bloch:</p>
<blockquote>
  Object's clone method is very tricky. It's based on field copies, and it's "extra-linguistic." It creates an object without calling a constructor.
  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and
  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow
  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.
  If you modify one, the other changes as well. And all of a sudden, you get random behavior.
</blockquote>
<p>A copy constructor or copy factory should be used instead.</p>
<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  // ...

  public Object clone() { // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  // ...

  MyClass (MyClass source) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://www.artima.com/intv/bloch13.html">Copy Constructor versus Cloning</a> </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href='/coding_rules#rule_key=squid%3AS2157'>S2157</a> - "Cloneables" should implement "clone" </li>
  <li> <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> - Classes that override "clone" should be "Cloneable" and call "super.clone()" </li>
</ul>Z
CODE_SMELL
—
squid:S3824¡
squidS3824C"Map.get" and value test should be replaced with single method call"MAJOR*java:“<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing
the value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the
<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
V value = map.get(key);
if (value == null) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
return value;
</pre>
<h2>Compliant Solution</h2>
<pre>
return map.computeIfAbsent(key, k -&gt; V.createFor(k));
</pre>Z
CODE_SMELL
ã
squid:EmptyFile˜
squid	EmptyFileFiles should not be empty"MINOR*java2S2309:ß<p>Files with no lines of code clutter a project and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
//package org.foo;
//
//public class Bar {}
</pre>Z
CODE_SMELL
≤	
4squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck˘
squid.ObjectFinalizeOverridenCallsSuperFinalizeCheckU"super.finalize()" should be called at the end of "Object.finalize()" implementations"CRITICAL*java2S1114:Ã<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>
<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also
dispose some system resources.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void finalize() {   // Noncompliant; no call to super.finalize();
  releaseSomeResources();
}

protected void finalize() {
  super.finalize();  // Noncompliant; this call should come last
  releaseSomeResources();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void finalize() {
  releaseSomeResources();
  super.finalize();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/568.html">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>ZBUG
≥
squid:S2786£
squidS2786,Nested "enum"s should not be declared static"MINOR*java:À<p>According to <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">the docs</a>:</p>
<blockquote>
  Nested enum types are implicitly
  <code>static</code>.
</blockquote>
<p>So there's no need to declare them <code>static</code> explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Flower {
  static enum Color { // Noncompliant; static is redundant here
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Flower {
  enum Color { // Compliant
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>Z
CODE_SMELL
õ
squid:S1213ã
squidS1213UThe members of an interface declaration or class should appear in a pre-defined order"MINOR*java:ä<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order
in the source files:</p>
<ul>
  <li> Class and instance variables </li>
  <li> Constructors </li>
  <li> Methods </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo{
   private int field = 0;
   public boolean isTrue() {...}
   public Foo() {...}                         // Noncompliant, constructor defined after methods
   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo{
   public static final int OPEN = 4;
   private int field = 0;
   public Foo() {...}
   public boolean isTrue() {...}
}
</pre>Z
CODE_SMELL
’

squid:S1214≈

squidS1214-Constants should not be defined in interfaces"CRITICAL*java:È	<p>According to Joshua Bloch, author of "Effective Java":</p>
<blockquote>
  <p>The constant interface pattern is a poor use of interfaces. </p>
  <p>That a class uses some constants internally is an implementation detail.</p>
  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users
  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future
  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.
  If a nonfinal class implements a constant interface,</p>
  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
interface Status {                      // Noncompliant
   int OPEN = 1;
   int CLOSED = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Status {                    // Compliant
  OPEN,
  CLOSED;
}
</pre>
<p>or</p>
<pre>
public final class Status {             // Compliant
   public static final int OPEN = 1;
   public static final int CLOSED = 2;
}
</pre>Z
CODE_SMELL
ª
squid:S1697´
squidS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*java:Ø<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null || str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str == null || str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null &amp;&amp; str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2259'>S2259</a> instead.</p>ZBUG
À
squid:S1698ª
squidS1698<"==" and "!=" should not be used when "equals" is overridden"MINOR*java:”<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName();   //String is a good example of a class overriding the equals method
String lastName = getLastName();

if (firstName == lastName) { ... };   // Non-compliant, the two literals can have the same value and yet the condition is false
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue.</p>
<pre>
Class c;
if(c == Integer.class) { //No issue raised
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>Z
CODE_SMELL
∞	
squid:S1696†	
squidS1696+"NullPointerException" should not be caught"MAJOR*java:…<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can
easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of
the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;
  try {
    len += str.length();
  }
  catch (NullPointerException e) {
    log.info("argument was null");
  }
  return len;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;

  if (str != null) {
    len += str.length();
  }
  else {
    log.info("argument was null");
  }
  return len;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer
  Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors
  </li>
</ul>Z
CODE_SMELL
‘	
squid:S2301ƒ	
squidS23014Public methods should not contain selector arguments"MAJOR*java:‰<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a
parameter may seem innocuous, particularly if it's well named. </p>
<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at
the meaning or to take extra time to look the method up.</p>
<p>Instead, separate methods should be written.</p>
<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String tempt(String name, boolean ofAge) {
  if (ofAge) {
    offerLiquor(name);
  } else {
    offerCandy(name);
  }
}

// ...
public void corrupt() {
  tempt("Joe", false); // does this mean not to temp Joe?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void temptAdult(String name) {
  offerLiquor(name);
}

public void temptChild(String name) {
    offerCandy(name);
}

// ...
public void corrupt() {
  age &lt; legalAge ? temptChild("Joe") : temptAdult("Joe");
}
</pre>Z
CODE_SMELL
’
squid:S3631≈
squidS36313"Arrays.stream" should be used for primitive arrays"MAJOR*java:Ê<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of
performance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use
<em>that</em> last as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,
<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList("a1", "a2", "b1", "c2", "c1").stream()
    .filter(...)
    .forEach(...);

Arrays.asList(1, 2, 3, 4).stream() // Noncompliant
    .filter(...)
    .forEach(...);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList("a1", "a2", "b1", "c2", "c1").stream()
    .filter(...)
    .forEach(...);

int[] intArray = new int[]{1, 2, 3, 4};
Arrays.stream(intArray)
    .filter(...)
    .forEach(...);
</pre>Z
CODE_SMELL
µ
squid:S1452•
squidS1452>Generic wildcard types should not be used in return parameters"CRITICAL*java:∏<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is
unlikely the user of that API will know how to use it correctly. </p>
<p>Let's take the example of method returning a "List&lt;? extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don't
know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method
parameters.</p>
<p>This rule raises an issue when a method returns a wildcard type. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;? extends Animal&gt; getAnimals(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;Animal&gt; getAnimals(){...}
</pre>
<p>or</p>
<pre>
List&lt;Dog&gt; getAnimals(){...}
</pre>Z
CODE_SMELL
§
squid:S1694î
squidS1694@An abstract class should have both abstract and concrete methods"MINOR*java:®
<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the
<code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal {  // Noncompliant; should be an interface
  abstract void move();
  abstract void feed();
}

public abstract class Color {  // Noncompliant; should be concrete with a private constructor
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int getRed() {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal {
  void move();
  void feed();
}

public class Color {
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color () {}

  public int getRed() {
    return red;
  }
}

public abstract class Lamp {

  private boolean switchLamp=false;

  public abstract void glow();

  public void flipSwitch() {
    switchLamp = !switchLamp;
    if (switchLamp) {
      glow();
    }
  }
}
</pre>Z
CODE_SMELL
å
squid:S1695¸
squidS16956"NullPointerException" should not be explicitly thrown"MAJOR*java:ö<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE's. </p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>Z
CODE_SMELL
˝
squid:S3750Ì
squidS37504Spring "@Controller" classes should not use "@Scope""MAJOR*java:î<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only
one instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn
as new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the
server.</p>
<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or
<code>@Repository</code> with any value but "singleton". <code>@Scope("singleton")</code> is redundant, but ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Scope("prototype")  // Noncompliant
@Controller
public class HelloWorld {
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
public class HelloWorld {
</pre>ZBUG
º

squid:S1210¨

squidS1210R"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method"MINOR*java:Æ	<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>
<blockquote>
  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>
  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>
  <p>The recommended language is "Note: this class has a natural ordering that is inconsistent with equals." </p>
</blockquote>
<p>If this rule is violated, weird and unpredictable failures can occur.</p>
<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on
<code>equals()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Compliant

  @Override
  public boolean equals(Object obj) { /* ... */ }
}
</pre>Z
CODE_SMELL
ı	
squid:S1451Â	
squidS1451+Track lack of copyright and license headers"BLOCKER*java:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
Ç	
squid:S3751Ú
squidS3751,"@RequestMapping" methods should be "public""BLOCKER*java:ï<p>A <code>@Controller</code> method with a <code>@RequestMapping</code> annotation will be called to handle matching web requests. That will happen
even if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>
<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring
frameworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,
<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access
it. That's because AOP proxies are not applied to non-public methods. </p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping("/greet", method = GET)
private String greet(String greetee) {  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@RequestMapping("/greet", method = GET)
public String greet(String greetee) {
</pre>ZVULNERABILITY
¢
squid:S1219í
squidS12196"switch" statements should not contain non-case labels"BLOCKER*java:Æ
<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
</ul>Z
CODE_SMELL
Ê
squid:S1450÷
squidS1450TPrivate fields only used as local variables in methods should become local variables"MINOR*java:÷<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int singularField;

  public void doSomething(int y) {
    singularField = y + 5;
    ...
    if(singularField == 0 {...}
    ...
  }

  public void doSomethingElse(int y) {
    singularField = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int singularField = y + 5;
    ...
  }

  public void doSomethingElse(int y) {
    int singularField = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on annotated field.</p>Z
CODE_SMELL
’
squid:S3516≈
squidS3516'Methods returns should not be invariant"BLOCKER*java:<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is surely a bug.</p>
<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(int a) {
  int b = 12;
  if (a == 1) {
    return b;
  }
  return b;  // Noncompliant
}
</pre>Z
CODE_SMELL
´
squid:S3518õ
squidS3518)Zero should not be a possible denominator"CRITICAL*java: <p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void test_divide() {
  int z = 0;
  if (unknown()) {
    // ..
    z = 3;
  } else {
    // ..
  }
  z = 1 / z; // Noncompliant, possible division by zero
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void test_divide() {
  int z = 0;
  if (unknown()) {
    // ..
    z = 3;
  } else {
    // ..
    z = 1;
  }
  z = 1 / z;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/369.html">MITRE, CWE-369</a> - Divide by zero </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KAGyAw">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not
  result in divide-by-zero errors </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cAI">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result
  in divide-by-zero errors </li>
</ul>ZBUG
ò
squid:S1217à
squidS1217*Thread.run() should not be called directly"MAJOR*java:π<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make
sense because it causes its code to be executed in the current thread. </p>
<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.run(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.start(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/572.html">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQAiAg">CERT THI00-J.</a> - Do not invoke Thread.run() </li>
</ul>ZBUG
”
squid:S2789√
squidS2789)"null" should not be used with "Optional""MAJOR*java:ı<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,
and when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething () {
  Optional&lt;String&gt; optional = getOptional();
  if (optional != null) {  // Noncompliant
    // do something with optional...
  }
}

@Nullable // Noncompliant
public Optional&lt;String&gt; getOptional() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething () {
  Optional&lt;String&gt; optional = getOptional();
  optional.ifPresent(
    // do something with optional...
  );
}

public Optional&lt;String&gt; getOptional() {
  // ...
  return Optional.empty();
}
</pre>ZBUG
Ω	
squid:S3878≠	
squidS38783Arrays should not be created for varargs parameters"MINOR*java:Œ<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object ora collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { "s1", "s2"});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing("s1", "s2");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>Z
CODE_SMELL
û
squid:S1215é
squidS1215FExecution of the Garbage Collector should be triggered only by the JVM"CRITICAL*java:ô<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what
will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>
<ul>
  <li> Will the whole application be frozen during the call? </li>
  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>
  <li> Will the JVM simply ignore the call? </li>
  <li> ... </li>
</ul>
<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should
be left exclusively to the JVM.</p>Z
CODE_SMELL
˜
squid:S1699Á
squidS16995Constructors should only call non-overridable methods"CRITICAL*java:É<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  public Parent () {
    doSomething();  // Noncompliant
  }

  public void doSomething () {  // not final; can be overridden
    ...
  }
}

public class Child extends Parent {

  private String foo;

  public Child(String foo) {
    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized
    this.foo = foo;
  }

  public void doSomething () {
    System.out.println(this.foo.length());
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/MYYbAQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/TQBi">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or
  destructors </li>
</ul>Z
CODE_SMELL
è
squid:S2676ˇ
squidS2676SNeither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE""MINOR*java:á<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll
still have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>
<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and
<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods
is similarly ill-advised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String str) {
  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String str) {
  if (str.hashCode() != 0) {
    // ...
  }
}
</pre>ZBUG
è	
squid:S2677ˇ
squidS26772"read" and "readLine" return values should be used"MAJOR*java:®<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of
action is surely a bug.</p>
<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,
<code>Reader.read()</code>, and these methods in any child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    while (buffReader.readLine() != null) { // Noncompliant
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    String line = null;
    while ((line = buffReader.readLine()) != null) {
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>ZBUG
Ï
squid:S1223‹
squidS1223LNon-constructor methods should not have the same name as the enclosing class"MAJOR*java:‰<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or
was the methods supposed to be a constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void Foo(String label) {...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void foo(String label) {...}  // Compliant
}
</pre>Z
CODE_SMELL
◊
squid:S2674«
squidS26747The value returned from a stream read should be checked"MINOR*java:Î<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value
returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>
<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned
from the method.</p>
<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not
checked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child
classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    is.read(buffer);  // Noncompliant
    // ...
  } catch (IOException e) { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    int count = 0;
    while (count = is.read(buffer) &gt; 0) {
      // ...
    }
  } catch (IOException e) { ... }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/XACSAQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an
  array </li>
</ul>ZBUG
§
squid:S2675î
squidS2675)"readObject" should not be "synchronized""MAJOR*java:ø<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be
the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the
<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method
should be refactored to make it the case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private synchronized void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Compliant
  //...
}
</pre>Z
CODE_SMELL
π
squid:S3400©
squidS3400#Methods should not return constants"MINOR*java:⁄<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a
method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>
<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int getBestNumber() {
  return 12;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
static int bestNumber = 12;
</pre>
<h2>Exceptions</h2>
<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>Z
CODE_SMELL
û
squid:S1220é
squidS1220.The default unnamed package should not be used"MINOR*java:¥<p>According to the Java Language Specification:</p>
<blockquote>
  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just
  beginning development.</p>
</blockquote>
<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;

public class MyClass{ /* ... */ }
</pre>Z
CODE_SMELL
’
squid:S1228≈
squidS12287Packages should have a javadoc file 'package-info.java'"MINOR*java:‚<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using
javadoc and declare package annotations.</p>
<h2>Compliant Solution</h2>
<pre>
/**
* This package has non null parameters and is documented.
**/
@ParametersAreNonnullByDefault
package org.foo.bar;
</pre>Z
CODE_SMELL

squid:S2438‡
squidS2438;"Threads" should not be used where "Runnables" are expected"MAJOR*java:˘<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are
different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>
<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose
running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
	public static void main(String[] args) {
		Thread r =new Thread() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println("a");
			}
		};
		new Thread(r).start();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
	public static void main(String[] args) {
		Runnable r =new Runnable() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println("a");
			}
		};
		new Thread(r).start();
</pre>Z
CODE_SMELL
ú
 squid:ForLoopCounterChangedCheck˜
squidForLoopCounterChangedCheck."for" loop stop conditions should be invariant"MAJOR*java2S127:Ç<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant; counter updated in the body of the loop
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {...}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the
  loop. </li>
  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>
</ul>Z
CODE_SMELL
¥
"squid:ObjectFinalizeOverridenCheckç
squidObjectFinalizeOverridenCheck4The Object.finalize() method should not be overriden"CRITICAL*java2S1113:å<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to
the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be
few microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous
mechanism to dispose them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  ...
  protected void finalize() {
    releaseSomeResources();    // Noncompliant
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>Z
CODE_SMELL
Ñ
squid:S2437Ù
squidS2437,Silly bit operations should not be performed"BLOCKER*java:ö<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>Z
CODE_SMELL
Œ
squid:S1313æ
squidS1313$IP addresses should not be hardcoded"MINOR*java:Î<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>
<ul>
  <li> a recompile is required if the address changes </li>
  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>
  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>
  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String ip = "127.0.0.1";
Socket socket = new Socket(ip, 6667);
</pre>
<h2>Compliant Solution</h2>
<pre>
String ip = System.getProperty("myapplication.ip");
Socket socket = new Socket(ip, 6667);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>ZVULNERABILITY
ˆ
squid:S1310Ê
squidS1310*Track uses of "NOPMD" suppression comments"MINOR*java:ê<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// NOPMD
</pre>Z
CODE_SMELL
÷
squid:S2886∆
squidS28863Getters and setters should be synchronized in pairs"MAJOR*java:Ó
<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may
result in inconsistent behavior at runtime as callers access an inconsistent method state.</p>
<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  String name;
  int age;

  public synchronized void setName(String name) {
    this.name = name;
  }

  public String getName() {  // Noncompliant
    return this.name;
  }

  public void setAge(int age) {  // Noncompliant
    this.age = age;
  }

  public int getAge() {
    synchronized (this) {
      return this.age;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  String name;
  int age;

  public synchronized void setName(String name) {
    this.name = name;
  }

  public synchronized String getName() {
    return this.name;
  }

  public void setAge(int age) {
    synchronized (this) {
      this.age = age;
   }
  }

  public int getAge() {
    synchronized (this) {
      return this.age;
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/I4BoAg">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable
  objects </li>
</ul>ZBUG
è
squid:S3972ˇ
squidS3972&Conditionals should start on new lines"CRITICAL*java:™<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding
<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers
fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>Z
CODE_SMELL
è
squid:S1315ˇ
squidS13153Track uses of "CHECKSTYLE:OFF" suppression comments"MINOR*java:†<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// CHECKSTYLE:OFF
</pre>Z
CODE_SMELL
„
squid:S1317”
squidS1317N"StringBuilder" and "StringBuffer" should not be instantiated with a character"MAJOR*java:‡<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect
the character to be the initial value of the <code>StringBuffer</code>. </p>
<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
StringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuffer foo = new StringBuffer("x");
</pre>ZBUG
˜

squid:S1319Á

squidS1319ÇDeclarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList""MINOR*java:∏	<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>
<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose
type is a Java Collection interface.</p>
<p>This rule raises an issue when an implementation class:</p>
<ul>
  <li> is returned from a <code>public</code> method. </li>
  <li> is accepted as an argument to a <code>public</code> method. </li>
  <li> is exposed as a <code>public</code> member. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Employees {
  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"

  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant
    return employees;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Employees {
  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant

  public Set&lt;Employee&gt; getEmployees() {                           // Compliant
    return employees;
  }
}
</pre>Z
CODE_SMELL
Õ
squid:MaximumInheritanceDepth´
squidMaximumInheritanceDepth2Inheritance tree of classes should not be too deep"MAJOR*java2S110:µ<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object
oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>Z
CODE_SMELL
≤	
squid:S1314¢	
squidS1314Octal values should not be used"BLOCKER*java:’<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
Ñ
squid:S3985Ù
squidS3985*Unused "private" classes should be removed"MAJOR*java:û<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  ...
  private class MyUnusedPrivateClass {...} // Noncompliant
}
</pre>Z
CODE_SMELL
ä
squid:S1201˙
squidS1201;"equals" method overrides should accept "Object" parameters"MAJOR*java:ö<p>"equals" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>
<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.
However, this will not work as expected when that is the only override.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private int foo = 1;

  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)
    return o != null &amp;&amp; o.foo == this.foo;
  }

  public static void main(String[] args) {
    MyClass o1 = new MyClass();
    Object o2 = new MyClass();
    System.out.println(o1.equals(o2));  // Prints "false" because o2 an Object not a MyClass
  }
}

class MyClass2 {
  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present
    //..
  }

  public boolean equals(Object o) {
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private int foo = 1;

  @Override
  public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    MyClass other = (MyClass)o;
    return this.foo == other.foo;
  }

  /* ... */
}

class MyClass2 {
  public boolean equals(MyClass2 o) {
    //..
  }

  public boolean equals(Object o) {
    //...
  }
}
</pre>ZBUG
¢
squid:S1444í
squidS1444)"public static" fields should be constant"MINOR*java:∫<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a
state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to
<code>null</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Greeter {
  public static Foo foo = new Foo();
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Greeter {
  public static final Foo FOO = new Foo();
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QQBqAQ">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>
</ul>ZVULNERABILITY
Ã
squid:S3984º
squidS39844Exception should not be created without being thrown"MAJOR*java:„<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new IllegalArgumentException("x must be nonnegative");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new IllegalArgumentException("x must be nonnegative");
</pre>ZBUG
ó
squid:S3986á
squidS39869Week Year ("YYYY") should not be used for date formatting"MAJOR*java:©<p>Few developers are aware of the difference between <code>Y</code> for "Week year" and <code>y</code> for Year when formatting and parsing a date
with <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first
or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of
January, you may get unexpected results.</p>
<p>According to the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year">Javadoc</a>:</p>
<blockquote>
  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.
  Therefore, the first and last days of a week year may have different calendar year values.</p>
  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible
  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar
  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three
  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("YYYY/MM/dd").format(date);   //Noncompliant; yields '2016/12/31'
</pre>
<h2>Compliant Solution</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("yyyy/MM/dd").format(date);   //Yields '2015/12/31' as expected
</pre>
<h2>Exceptions</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("YYYY-ww").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'
</pre>ZBUG
∑
squid:IndentationCheckú
squidIndentationCheck+Source code should be indented consistently"MINOR*java2S1120:≥<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier. </p>
<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>
<h2>Noncompliant Code Example</h2>
<p>With an indent size of 2:</p>
<pre>
class Foo {
  public int a;
   public int b;   // Noncompliant, expected to start at column 4

...

  public void doSomething() {
    if(something) {
          doSomethingElse();  // Noncompliant, expected to start at column 6
  }   // Noncompliant, expected to start at column 4
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  public int a;
  public int b;

...

  public void doSomething() {
    if(something) {
        doSomethingElse();
    }
  }
}
</pre>Z
CODE_SMELL
Ò
squid:S1200·
squidS1200YClasses should not be coupled to too many other classes (Single Responsibility Principle)"MAJOR*java:‹
<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
class Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
  T1 a1;                           // Foo is coupled to T1
  T2 a2;                           // Foo is coupled to T2
  T3 a3;                           // Foo is coupled to T3

  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6
    T7 result = a.getResult(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9
    T8 a8;
    T9 a9;
  }
}
</pre>Z
CODE_SMELL
¢

squid:S2653í

squidS26530Web applications should not have a "main" method"CRITICAL*java:∞	<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,
but such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic
that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be
present.</p>
<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
    if (userIsAuthorized(req)) {
      updatePrices(req);
    }
  }

  public static void main(String[] args) { // Noncompliant
    updatePrices(req);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VoB8Bw">CERT, ENV06-J.</a> - Production code must not contain debugging entry points
  </li>
</ul>ZVULNERABILITY
∏
squid:S3981®
squidS3981?Collection sizes and array length comparisons should make sense"MAJOR*java:ƒ<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myList.size() &gt;= 0) { ... }

if (myList.size() &lt; 0) { ... }

boolean result = myArray.length &gt;= 0;

if (0 &gt; myArray.length) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!myList.isEmpty()) { ... }

if (myArray.length &gt;= 42) { ... }
</pre>ZBUG
ö

squid:S1449ä

squidS1449*Locale should be used in String operations"MINOR*java:¥	<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on
<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number
representations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a
dot over it.</p>
<p>Case conversion without a locale may work fine in its "home" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive
strings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myString.toLowerCase()
</pre>
<h2>Compliant Solution</h2>
<pre>
myString.toLowerCase(Locale.TR)
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing
  locale-dependent data </li>
</ul>Z
CODE_SMELL
Ü
squid:S3749ˆ
squidS3749/Members of Spring components should be injected"CRITICAL*java:ï<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s are singletons by default, meaning only one instance of the
class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,
<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>
<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is
almost guaranteed to eventually expose data from User1's session to User2. </p>
<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>
members that are not annotated with one of:</p>
<ul>
  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>
  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>
  <li> <code>javax.annotation.Inject</code> </li>
  <li> <code>javax.annotation.Resource</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    if (greetee != null) {
      this.name = greetee;
    }

    return "Hello " + this.name;  // if greetee is null, you see the previous user's data
  }
}
</pre>ZVULNERABILITY
À
squid:S1206ª
squidS1206C"equals(Object obj)" and "hashCode()" should be overridden in pairs"MINOR*java:”<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>
<blockquote>
  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two
  objects must produce the same integer result. </p>
  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the
  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>
  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of
  hashtables.</p>
</blockquote>
<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {    // Noncompliant - should also override "hashCode()"

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {    // Compliant

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

  @Override
  public int hashCode() {
    /* ... */
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYYbAQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a
  hashCode() method </li>
</ul>ZBUG
˘
squid:S1448È
squidS1448(Classes should not have too many methods"MAJOR*java:ï<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
≤
squid:S4087¢
squidS4087'"close()" calls should not be redundant"MINOR*java:œ<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit
<code>close()</code> call is redundant and potentially confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
  writer.close();  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
}
</pre>Z
CODE_SMELL
¶
#squid:RightCurlyBraceStartLineCheck˛
squidRightCurlyBraceStartLineCheck@A close curly brace should be located at the beginning of a line"MINOR*java2S1109:Û<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
∑
squid:S1940ß
squidS1940%Boolean checks should not be inverted"MINOR*java:÷<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i &gt;= 10);
</pre>Z
CODE_SMELL
Û
squid:S1948„
squidS1948KFields in a "Serializable" class should either be transient or serializable"CRITICAL*java:È<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is
never explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly
<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In
general a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>
<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they
could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;  // Noncompliant; Address isn't serializable
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Address implements Serializable {
  private static final long serialVersionUID = 2405172041950251807L;
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;
}
</pre>
<h2>Exceptions</h2>
<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the
responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>
<pre>
 private void writeObject(java.io.ObjectOutputStream out)
     throws IOException
 private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/594.html">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>
  <li> <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html">Oracle Java 6, Serializable</a> </li>
  <li> <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">Oracle Java 7, Serializable</a> </li>
</ul>Z
CODE_SMELL
Ç
squid:S1942Ú
squidS1942!Simple class names should be used"MINOR*java:•<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that
<code>import</code>s the class is redundant and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

java.util.List&lt;String&gt; myList;  // Noncompliant
java.sql.Timestamp tStamp; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

List&lt;String&gt; myList;
Timestamp tStamp;
</pre>Z
CODE_SMELL
‘
squid:S1943ƒ
squidS1943OClasses and methods that rely on the default system encoding should not be used"MINOR*java:…<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its "home" environment. But that code may
break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to
reproduce when it's time to fix them.</p>
<p>This rule detects uses of the following classes and methods:</p>
<ul>
  <li> <code>FileReader</code> </li>
  <li> <code>FileWriter</code> </li>
  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument
    <ul>
      <li> <code>String(byte[] bytes)</code> </li>
      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>
    </ul> </li>
  <li> <code>String.getBytes()</code> </li>
  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>
  <li> <code>InputStreamReader(InputStream in)</code> </li>
  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>
  <li> <code>ByteArrayOutputStream.toString()</code> </li>
  <li> Some <code>Formatter</code> constructors
    <ul>
      <li> <code>Formatter(String fileName)</code> </li>
      <li> <code>Formatter(File file)</code> </li>
      <li> <code>Formatter(OutputStream os)</code> </li>
    </ul> </li>
  <li> Some <code>Scanner</code> constructors
    <ul>
      <li> <code>Scanner(File source)</code> </li>
      <li> <code>Scanner(Path source)</code> </li>
      <li> <code>Scanner(InputStream source)</code> </li>
    </ul> </li>
  <li> Some <code>PrintStream</code> constructors
    <ul>
      <li> <code>PrintStream(File file)</code> </li>
      <li> <code>PrintStream(OutputStream out)</code> </li>
      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintStream(String fileName)</code> </li>
    </ul> </li>
  <li> Some <code>PrintWriter</code> constructors
    <ul>
      <li> <code>PrintWriter(File file)</code> </li>
      <li> <code>PrintWriter(OutputStream out)</code> </li>
      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintWriter(String fileName)</code> </li>
    </ul> </li>
  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit
  the encoding argument
    <ul>
      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>
      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>
      <li> <code>IOUtils.readLines(InputStream)</code> </li>
      <li> <code>IOUtils.toByteArray(Reader)</code> </li>
      <li> <code>IOUtils.toByteArray(String)</code> </li>
      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>
      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>
      <li> <code>IOUtils.toString(byte[])</code> </li>
      <li> <code>IOUtils.toString(URI)</code> </li>
      <li> <code>IOUtils.toString(URL)</code> </li>
      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>
      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>
      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>
      <li> <code>FileUtils.readFileToString(File)</code> </li>
      <li> <code>FileUtils.readLines(File)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>
      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>
    </ul> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/FoL5AQ">CERT, STR04-J.</a> - Use compatible character encodings when communicating
  string data between JVMs </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JgAWCQ">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a
  string </li>
</ul>Z
CODE_SMELL
…
squid:S2912π
squidS2912,"indexOf" checks should use a start position"MINOR*java:·<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper
choice of <code>indexOf</code> methods can help move code from confusing to clear.</p>
<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus
the target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the
result is tested against -1, which is an easily recognizable "not found" indicator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae") &gt; 2) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae", 2) &gt; -1) {
  // ...
}
</pre>Z
CODE_SMELL
æ	
squid:S1700Æ	
squidS1700=A field should not duplicate the name of its containing class"MAJOR*java:≈<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String foo;

  public String getFoo() { }
}

Foo foo = new Foo();
foo.getFoo() // what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  private String name;

  public String getName() { }
}

//...

Foo foo = new Foo();
foo.getName()

</pre>
<h2>Exceptions</h2>
<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>
<pre>
public class Foo {
  ...
  private static Foo foo;
  public Foo getInstance() {
    if(foo==null) {
      foo = new Foo();
    }
    return foo;
  }
  ...
}
</pre>Z
CODE_SMELL
Õ
squid:S1820Ω
squidS1820'Classes should not have too many fields"MAJOR*java:Í<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
Ò
squid:S1939·
squidS19396Extensions and implementations should not be redundant"MINOR*java:ˇ<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>
<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also
implicitly implement its parents and there's no need to do so explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo
    extends Object // Noncompliant
    implements MyFace, MyOtherFace {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo implements MyOtherFace {
  //...
}
</pre>Z
CODE_SMELL
∆
squid:S1941∂
squidS19419Variables should not be declared before they are relevant"MINOR*java:—<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering
methods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a
variable that may never be used because conditions for an early return are met first.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;
  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return

  if (difference &lt; 0) {
    return false;
  }

  // ...

  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;

  if (difference &lt; 0) {
    return false;
  }

  // ...

  MyClass foo = new MyClass(a);
  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
ﬁ
"squid:CallToFileDeleteOnExitMethod∑
squidCallToFileDeleteOnExitMethod!"deleteOnExit" should not be used"MAJOR*java2S2308:Ã<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>
<ul>
  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>
  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
File file = new File("file.txt");
file.deleteOnExit();  // Noncompliant
</pre>Z
CODE_SMELL
≤	
-squid:RightCurlyBraceSameLineAsNextBlockCheckÄ	
squid'RightCurlyBraceSameLineAsNextBlockCheckhClose curly brace and the next "else", "catch" and "finally" keywords should be located on the same line"MINOR*java2S1107:√<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or
<code>finally</code> keywords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  }
  else {                               // Noncompliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {                            // Noncompliant
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  } else {
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  } finally {
    closeConnection();
  }
}
</pre>Z
CODE_SMELL
≠
squid:S1905ù
squidS1905"Redundant casts should not be used"MINOR*java:œ<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void example() {
  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void example() {
  for (Foo obj : getFoos()) {
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Exceptions</h2>
<p>Casting may be required to distinguish the method to call in the case of overloading:</p>
<pre>
class A {}
class B extends A{}
class C {
  void fun(A a){}
  void fun(B b){}

  void foo() {
    B b = new B();
    fun(b);
    fun((A) b); //call the first method so cast is not redundant.
  }

}
</pre>Z
CODE_SMELL
Ú
squid:S4065‚
squidS4065-"ThreadLocal.withInitial" should be preferred"MINOR*java:â<p>Java 8 Introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a
<code>ThreadLocal</code> instance.</p>
<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to
<code>ThreadLocal.withInitial</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =
    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant
        @Override
        protected List&lt;String&gt; initialValue() {
            return new ArrayList&lt;String&gt;();
        }
    };
</pre>
<h2>Compliant Solution</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);
</pre>Z
CODE_SMELL
ı
squid:CallToDeprecatedMethod‘
squidCallToDeprecatedMethod%"@Deprecated" code should not be used"MINOR*java2S1874:Î
<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated  As of release 1.3, replaced by {@link #Fee}
 */
@Deprecated
public class Fum { ... }

public class Foo {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }
}

public class Bar extends Foo {
  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated
}

public class Bar extends Fum {  // Noncompliant; Fum is deprecated

  public void myMethod() {
    Foo foo = new Foo();  // okay; the class isn't deprecated
    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>Z
CODE_SMELL
Å
squid:S1610Ò
squidS1610AAbstract classes without fields should be converted to interfaces"MINOR*java:Ñ<p>With Java 8's "default method" feature, any abstract class without direct or inherited field should be converted into an interface. However, this
change may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Car {
  public abstract void start(Environment c);

  public void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Car {
  public void start(Environment c);

  public default void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>Z
CODE_SMELL
ü
squid:S1850è
squidS1850M"instanceof" operators that always return "true" or "false" should be removed"MAJOR*java:ù<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding
which could lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isSuitable(Integer param) {
...
  String name = null;

  if (name instanceof String) { // Noncompliant; always false since name is null
    //...
  }

  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer
    doSomething();
  }
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isSuitable(Integer param) {
...
  doSomething();
...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2589'>S2589</a> instead.</p>ZBUG
å
"squid:SwitchLastCaseIsDefaultCheckÂ
squidSwitchLastCaseIsDefaultCheck5"switch" statements should end with "default" clauses"CRITICAL*java2S131:‰<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,
then no <code>default</code> clause is expected.</p>
<p>Example:</p>
<pre>
public enum Day {
    SUNDAY, MONDAY
}
...
switch(day) {
  case SUNDAY:
    doSomething();
    break;
  case MONDAY:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
Ñ
squid:S1612Ù
squidS16121Lambdas should be replaced with method references"MINOR*java:ó<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks
can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .map(a -&gt; a.&lt;String&gt;getObject())
      .forEach(a -&gt; { System.out.println(a); });
  }

  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .map(A::&lt;String&gt;getObject)
      .forEach(System.out::println);
  }

  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>Z
CODE_SMELL
‰
squid:S1854‘
squidS1854Dead stores should be removed"MAJOR*java:ã<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction.
Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error,
it is at best a waste of resources. </p>
<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage
collector used to be common practice, but is no longer needed and such code should be eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void pow(int a, int b) {
  if(b == 0) {
    return 0;
  }
  int x = a;
  for(int i= 1, i &lt; b, i++) {
    x = x * a;  //Dead store because the last return statement should return x instead of returning a
  }
  return a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void pow(int a, int b) {
  if(b == 0) {
    return 0;
  }
  int x = a;
  for(int i= 1, i &lt; b, i++) {
    x = x * a;
  }
  return x;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, empty string (<code>""</code>), <code>true</code>, and <code>false</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
 
squid:S1858∫
squidS18586"toString()" should never be called on a String object"MINOR*java:ÿ<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant
construction may be optimized by the compiler, but will be confusing in the meantime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String message = "hello world";
System.out.println(message.toString()); // Noncompliant;
</pre>
<h2>Compliant Solution</h2>
<pre>
String message = "hello world";
System.out.println(message);
</pre>Z
CODE_SMELL
‰	
squid:S1609‘	
squidS1609X@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces"CRITICAL*java:Õ<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as
<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and
<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or
Method references. </p>
<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would
break the use of Lambda implementations.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
À
squid:S1611ª
squidS1611\Parentheses should be removed from a single lambda input parameter when its type is inferred"MINOR*java:≥<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single
parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
(x) -&gt; x * 2
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; x * 2
</pre>Z
CODE_SMELL
ô

squid:S1862â

squidS1862BRelated "if/else if" statements should not have the same condition"MAJOR*java:¢	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
}

</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
É
squid:S2701Û
squidS27017Literal boolean values should not be used in assertions"CRITICAL*java:ç<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(true);  // Noncompliant
assertThat(true).isTrue(); // Noncompliant
</pre>Z
CODE_SMELL
»
squid:S1860∏
squidS1860BSynchronization should not be based on Strings or boxed primitives"MAJOR*java:—<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock
with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects
because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of
<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the
two.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static final Boolean bLock = Boolean.FALSE;
private static final Integer iLock = Integer.valueOf(0);
private static final String sLock = "LOCK";

public void doSomething() {

  synchronized(bLock) {  // Noncompliant
    // ...
  }
  synchronized(iLock) {  // Noncompliant
    // ...
  }
  synchronized(sLock) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Object lock1 = new Object();
private static final Object lock2 = new Object();
private static final Object lock3 = new Object();

public void doSomething() {

  synchronized(lock1) {
    // ...
  }
  synchronized(lock2) {
    // ...
  }
  synchronized(lock3) {
    // ...
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/rQGeAQ">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>
</ul>ZBUG
ü
squid:S2718è
squidS2718H"DateUtils.truncate" from Apache Commons Lang library should not be used"MAJOR*java:õ<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class
from Commons Lang.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Date trunc(Date date) {
  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public Date trunc(Date date) {
  Instant instant = date.toInstant();
  instant = instant.truncatedTo(ChronoUnit.SECONDS);
  return Date.from(instant);
}
</pre>Z
CODE_SMELL
õ
squid:S2959ã
squidS2959(Unnecessary semicolons should be omitted"MINOR*java:∑<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can
be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required
      Reader r = new InputStreamReader(b);)   // Noncompliant
{
   //do stuff
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);
      Reader r = new InputStreamReader(b))
{
   //do stuff
}
</pre>Z
CODE_SMELL
Ù
squid:HiddenFieldCheckŸ
squidHiddenFieldCheck.Local variables should not shadow class fields"MAJOR*java2S1117:Ì<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public int myField;

  public void doSomething() {
    int myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
›

squid:S134Œ
squidS134`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"CRITICAL*java:¿<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) {                  // Compliant - depth = 1
  /* ... */
  if (condition2) {                // Compliant - depth = 2
    /* ... */
    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
      /* ... */
      if (condition4) {            // Noncompliant - depth = 4
        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>Z
CODE_SMELL
û
squid:S3923é
squidS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*java:í<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not
apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>ZBUG
¨
squid:S1710ú
squidS1710,Annotation repetitions should not be wrapped"MINOR*java:ƒ<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's
no longer necessary, allowing for cleaner, more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SomeAnnotations({  // Noncompliant
  @SomeAnnotation(..a..),
  @SomeAnnotation(..b..),
  @SomeAnnotation(..c..),
})
public class SomeClass {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SomeAnnotation(..a..)
@SomeAnnotation(..b..)
@SomeAnnotation(..c..)
public class SomeClass {
  ...
}
</pre>Z
CODE_SMELL


squid:S1711‡

squidS17116Standard functional interfaces should not be redefined"MAJOR*java:˛	<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard
functional interfaces.</p>
<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of
confusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@FunctionalInterface
public interface MyInterface { // Noncompliant
	double toDouble(int a);
}

@FunctionalInterface
public interface ExtendedBooleanSupplier { // Noncompliant
  boolean get();
  default boolean isFalse() {
    return !get();
  }
}

public class MyClass {
    private int a;
    public double myMethod(MyInterface instance){
	return instance.toDouble(a);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier
  default boolean isFalse() {
    return !getAsBoolean();
  }
}

public class MyClass {
    private int a;
    public double myMethod(IntToDoubleFunction instance){
	return instance.applyAsDouble(a);
    }
}
</pre>Z
CODE_SMELL
Ω
squid:S2924≠
squidS2924JUnit rules should be used"MINOR*java:Á<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there's no reason to leave them cluttering up the file if they're not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>Z
CODE_SMELL
Ø
 squid:MethodCyclomaticComplexityä
squidMethodCyclomaticComplexity!Methods should not be too complex"CRITICAL*java2S1541:û<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in
<code>equals</code> and <code>hashCode</code> methods.</p>Z
CODE_SMELL
ú

squid:S124ç
squidS124,Track comments matching a regular expression"MAJOR*java:¥<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
»

squid:S128π
squidS128?Switch cases should end with an unconditional "break" statement"BLOCKER*java:Õ<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw new IllegalStateException();
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
Ç	
squid:S1604Ú
squidS1604HAnonymous inner classes containing only one method should become lambdas"MAJOR*java:˛<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may
seem unwieldy and unclear.</p>
<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myCollection.stream().map(new Mapper&lt;String,String&gt;() {
  public String map(String input) {
    return new StringBuilder(input).reverse().toString();
  }
});

Predicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {
    boolean test(String myString) {
        return myString.isEmpty();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());

Predicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();
</pre>Z
CODE_SMELL
Œ
squid:S1607æ
squidS1607Tests should not be ignored"MAJOR*java:˜<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why
the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up
polluting their projects.</p>
<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Ignore  // Noncompliant
@Test
public void testDoTheThing() {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing() {
  // ...
</pre>
<h2>Exceptions</h2>
<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>Z
CODE_SMELL
˙
squid:S1845Í
squidS1845OMethods and field names should not be the same or differ only by capitalization"BLOCKER*java:Ì<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is
confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field
with exactly the same name and visibility.</p>
<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead
added a new method with nearly the same name.</p>
<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the
case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be
disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car{

  public DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // Noncompliant; duplicates field name
}

public class MyCar extends Car{
  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?

  public void drivefast(){...}

  public void driveFast(){...} //Huh?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car{

  private DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // field visibility reduced
}

public class MyCar extends Car{
  @Override
  public void tearDown(){...}

  public void drivefast(){...}

  public void driveReallyFast(){...}

}
</pre>Z
CODE_SMELL
¥
squid:S1849§
squidS18496"Iterator.hasNext()" should not call "Iterator.next()""MAJOR*java:…<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.
<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the
<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FibonacciIterator implements Iterator&lt;Integer&gt;{
...
@Override
public boolean hasNext() {
  if(next() != null) {
    return true;
  }
  return false;
}
...
}
</pre>ZBUG
à
squid:MissingDeprecatedCheckÁ
squidMissingDeprecatedCheckGDeprecated elements should have both the annotation and the Javadoc tag"MAJOR*java2S1123:‹<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as
IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be
refactored. </p>
<p>Further, Java 9 adds two additional arguments to the annotation:</p>
<ul>
  <li> <code>since</code> allows you to describe when the deprecation took place </li>
  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>
</ul>
<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  @Deprecated
  public void foo1() {
  }

  /**
    * @deprecated
    */
  public void foo2() {    // Noncompliant
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo1() {
  }

  /**
    * Java &gt;= 9
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated(since="5.1")
  public void foo2() {
  }

  /**
    * Java &gt;= 9
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated(since="4.2", forRemoval=true)
  public void foo3() {
  }

}
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<pre>
/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
class Qix  {

  public void foo() {} // Compliant; class is deprecated

}

/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
interface Plop {

  void bar();

}
</pre>Z
CODE_SMELL
π
squid:S1602©
squidS1602OLamdbas containing only one statement should not nest this statement in a block"MINOR*java:Æ<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>Z
CODE_SMELL
õ

squid:S1844ã

squidS1844j"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition""MAJOR*java:ı<p>From the Java API documentation:</p>
<blockquote>
  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)
  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.
  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the
  <code>Object</code> monitor methods.</p>
</blockquote>
<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,
calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.wait();
</pre>
<h2>Compliant Solution</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.await();
</pre>Z
CODE_SMELL
å

squid:S135˝
squidS135KLoops should not contain more than a single "break" or "continue" statement"MINOR*java:á<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.
</p>
<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,
the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  System.out.println("i = " + i);
}
</pre>Z
CODE_SMELL
‰

squid:S138’
squidS138&Methods should not have too many lines"MAJOR*java:Ñ<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder
to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will
not only be easier to understand, but also probably easier to test.</p>Z
CODE_SMELL
œ
squid:S3038ø
squidS3038(Abstract methods should not be redundant"MINOR*java:Î<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the
class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Reportable {
  String getReport();
}

public abstract class AbstractRuleReport implements Reportable{
  public abstract String getReport();  // Noncompliant

  // ...
}
</pre>Z
CODE_SMELL
ç
squid:S2188˝
squidS2188*JUnit test cases should call super methods"BLOCKER*java:•<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding
method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3
<code>TestCase</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {  // Noncompliant
      myClass = new MyClass();
    }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {
      super.setUp();
      myClass = new MyClass();
    }
</pre>Z
CODE_SMELL
ã
squid:S2189˚
squidS2189Loops should not be infinite"BLOCKER*java:∏<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is
by meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;;) {  // Noncompliant; end condition omitted
  // ...
}

int j;
while (true) { // Noncompliant; end condition omitted
  j++;
}

int k;
boolean b = true;
while (b) { // Noncompliant; b never written to in loop
  k++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int j;
while (true) { // reachable end condition added
  j++;
  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1
    break;
  }
}

int k;
boolean b = true;
while (b) {
  k++;
  b = k &lt; Integer.MAX_VALUE;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>
</ul>ZBUG
‰
squid:S3398‘
squidS3398O"private" methods called only by inner classes should be moved to those classes"MINOR*java:Ÿ<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same
access to the outer class' members, but the outer class will be clearer and less cluttered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Outie {
  private int i=0;

  private void increment() {  // Noncompliant
    i++;
  }

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Outie {
  private int i=0;

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }

    private void increment() {
      Outie.this.i++;
    }
  }
}
</pre>Z
CODE_SMELL
Ñ
squid:S2065Ù
squidS2065<Fields in non-serializable classes should not be "transient""MINOR*java:å<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class
that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Vegetable {  // does not implement Serializable
  private transient Season ripe;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Vegetable {
  private Season ripe;
  // ...
}
</pre>Z
CODE_SMELL
´
squid:S2186õ
squidS21864JUnit assertions should not be used in "run" methods"CRITICAL*java:∏<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in
<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the
test won't fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run() {
  // ...
  Assert.assertEquals(expected, actual);  // Noncompliant
}
</pre>Z
CODE_SMELL
û
squid:S2187é
squidS2187TestCases should contain tests"BLOCKER*java:¬<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with
"Test" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>
<p>This rule raises an issue when files in the test directory have "Test" in the name or implement <code>TestCase</code> but don't contain any
tests.</p>Z
CODE_SMELL
è
squid:S3034ˇ
squidS3034SRaw byte values should not be used in bitwise operations in combination with shifts"MAJOR*java:á<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are
automatically promoted, but that promotion can have unexpected results.</p>
<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of
(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,
-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>
<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of
the bytes without taking care of the sign will not produce the expected result. </p>
<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>
(255) and turn all the higher bits back off.</p>
<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  int intFromBuffer() {
    int result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) | readByte(); // Noncompliant
    }
    return result;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  int intFromBuffer() {
    int result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);
    }
    return result;
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SAHEAw">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>
</ul>ZBUG
≈
squid:S2063µ
squidS2063$Comparators should be "Serializable""CRITICAL*java:‚<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the
overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant
  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {
  private static final long serialVersionUID = 1;

  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>Z
CODE_SMELL
π

squid:S2066©

squidS2066K"Serializable" inner classes of non-serializable classes should be "static""MINOR*java:π	<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not
serializable, then serialization will fail, resulting in a runtime error. </p>
<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one: </p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Pomegranate {
  // ...

  public class Seed implements Serializable {  // Noncompliant; serialization will fail
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Pomegranate {
  // ...

  public static class Seed implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/O4CpAQ">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>ZBUG
ƒ
squid:S2184¥
squidS2184.Math operands should be cast before assignment"MINOR*java:·<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,
<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result
will likely not be what you expect. </p>
<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the
assignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>
<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the
operation takes place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float twoThirds = 2/3; // Noncompliant; int division. Yields 0.0
long millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928
long bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647
long bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.
Date myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483
...
public long compute(int factor){
  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748
}

public float compute2(long factor){
  return factor / 123;  //Noncompliant, will be rounded to closest long integer
}
</pre>
<h2>Compliant Solution</h2>
<pre>
float twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667
long millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000
long bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649
long bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649
Date myDate = new Date(seconds * 1_000L);
...
public long compute(int factor){
  return factor * 10_000L;
}

public float compute2(long factor){
  return factor / 123f;
}
</pre>
<p>or</p>
<pre>
float twoThirds = (float)2/3; // 2 cast to float
long millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long
long bigNum = (long)Integer.MAX_VALUE + 2;
long bigNegNum =  (long)Integer.MIN_VALUE-1;
Date myDate = new Date((long)seconds * 1_000);
...
public long compute(long factor){
  return factor * 10_000;
}

public float compute2(float factor){
  return factor / 123;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue
  expression. </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/woIyAQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point
  operations </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AxE">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before
  comparing or assigning to that size </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1IAyAQ">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before
  comparing or assigning to that size </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZBUG
ƒ
squid:S2061¥
squidS2061?Custom serialization method signatures should meet requirements"MAJOR*java:–<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can
choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they
will be ignored and the default serialization mechanisms will kick back in. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private
        throws IOException
  {...}

  private void readObject(java.io.ObjectInputStream in)
  {...}

  public void readObjectNoData()  // Noncompliant; not private
  {...}

  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static

  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object
  {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  private void writeObject(java.io.ObjectOutputStream out)
        throws IOException
  {...}

  private void readObject(java.io.ObjectInputStream in)
        throws IOException, ClassNotFoundException
  {...}

  private void readObjectNoData()
        throws ObjectStreamException
  {...}

  protected Object readResolve() throws ObjectStreamException
  {...}

  private Object writeReplace() throws ObjectStreamException
  {...}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/4gAMAg">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization
  methods </li>
</ul>ZBUG
ë
squid:S2062Å
squidS2062+"readResolve" methods should be inheritable"CRITICAL*java:ß<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement
<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  private Object readResolve() throws ObjectStreamException  // Noncompliant
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  protected Object readResolve() throws ObjectStreamException
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {
  //...
}
</pre>Z
CODE_SMELL
≠
squid:S2185ù
squidS2185"Silly math should not be performed"MAJOR*java:œ<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>
<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>
<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or
<code>Math.floor</code> is silly because the result will always be the original value. </p>
<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,
<code>Math.round</code>.</p>
<p>And these oprations are silly with certain constant values:</p>
<table>
  <tbody>
    <tr>
      <th>Operation</th>
      <th>Value</th>
    </tr>
    <tr>
      <td>acos</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>asin</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>atan</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>atan2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>cbrt</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>cos</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>cosh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>exp</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>expm1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>log</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>log10</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>sin</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>sinh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>sqrt</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>tan</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>tanh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>toDegrees</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>toRadians</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public void doMath(int a) {
  double floor = Math.floor((double)a); // Noncompliant
  double ceiling = Math.ceil(4.2);  // Noncompliant
  double arcTan = Math.atan(0.0);  // Noncompliant
}
</pre>Z
CODE_SMELL
Ø
squid:S3030ü
squidS30301Classes should not have too many "static" imports"MAJOR*java:¬<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be
handy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value: 4</p>
<pre>
import static java.lang.Math.*;
import static java.util.Collections.*;
import static com.myco.corporate.Constants.*;
import static com.myco.division.Constants.*;
import static com.myco.department.Constants.*;  // Noncompliant
</pre>Z
CODE_SMELL
˚

squid:S106Ï
squidS106<Standard outputs should not be used directly to log anything"MAJOR*java:Ö<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println("My Message");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log("My Message");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/RoElAQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>Z
CODE_SMELL
±
squid:S2060°
squidS2060>"Externalizable" classes should have no-arguments constructors"MAJOR*java:æ<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first
step in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a
no-arg constructor cannot be deserialized.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor

  public Tomato (String color, int weight) { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Tomato implements Externalizable {

  public Tomato() { ... }
  public Tomato (String color, int weight) { ... }
}
</pre>ZBUG
¿
squid:S2183∞
squidS2183PInts and longs should not be shifted by zero or more than their number of bits-1"MINOR*java:ª<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. Shifting an
<code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>
<p>Similarly, shifting a <code>long</code> by +/-64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int shift(int a) {
  return a &lt;&lt; 48;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int shift(int a) {
  return a &lt;&lt; 16;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>ZBUG
Õ

squid:S109æ
squidS109 Magic numbers should not be used"MAJOR*java:Û<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loops, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void doSomething() {
	for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number
		...
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static final int NUMBER_OF_CYCLES = 4;
public static void doSomething() {
  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>hashCode</code> methods.</p>Z
CODE_SMELL
≥
squid:S3046£
squidS30468"wait" should not be called when multiple locks are held"BLOCKER*java:ƒ<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests
a lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a
deadlock.</p>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA
	synchronized (this.mon2) {
		this.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1
	}
}
</pre>ZBUG
Å	
squid:S2197Ò
squidS21979Modulus results should not be checked for direct equality"CRITICAL*java:â<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 != 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/xAHAAQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQBi">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_YBLAQ">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %
  operator </li>
</ul>Z
CODE_SMELL
Ë
squid:S3047ÿ
squidS30473Multiple loops over the same set should be combined"MINOR*java:˘<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made
more efficient by combining the loops into a single set of iterations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
  }
  for (String str : strings) {  // Noncompliant
    doStep2(str);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
    doStep2(str);
  }
}
</pre>Z
CODE_SMELL
Ñ
squid:EmptyStatementUsageCheck·
squidEmptyStatementUsageCheck"Empty statements should be removed"MINOR*java2S1116:˘<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse() {
  System.out.println("Hello, world!");;                     // Noncompliant - double ;
  ...
  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {}

void doSomethingElse() {
  System.out.println("Hello, world!");
  ...
  for (int i = 0; i &lt; 3; i++){
    System.out.println(i);
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
ñ
squid:S2196Ü
squidS2196>Switches should be used for sequences of simple "String" tests"MINOR*java:ú<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or
more values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ("red".equals(choice)) {  // Noncompliant
  dispenseRed();
} else if ("blue".equals(choice)) {
  dispenseBlue();
} else if ("yellow".equals(choice)) {
  dispenseYellow();
} else {
  promptUser();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(choice) {
  case "Red":
    dispenseRed();
    break;
  case "Blue":
    dispenseBlue():
    break;
  case "Yellow":
    dispenseYellow();
    break;
  default:
    promptUser();
    break;
}
</pre>Z
CODE_SMELL
ú	
squid:S3042å	
squidS3042C"writeObject" should not be the only "synchronized" code in a class"MAJOR*java:ù<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking
<code>writeObject</code> <code>synchronized</code>, but if it's highly suspicious if this serialization-related method the only
<code>synchronized</code> code in a <code>class</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

  public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

   public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private void writeObject(ObjectOutputStream stream) throws IOException {
    // ...
  }
}
</pre>Z
CODE_SMELL
¬
squid:S3282≤
squidS3282<EJB interceptor exclusions should be declared as annotations"BLOCKER*java:»<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they
are preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;assembly-descriptor&gt;
      &lt;interceptor-binding&gt;
         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;
         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;
         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;
         &lt;method&gt;
           &lt;method-name&gt;doTheThing&lt;/method-name&gt;
         &lt;/method&gt;
      &lt;/interceptor-binding&gt;

&lt;/assembly-descriptor&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
@ExcludeDefaultInterceptors
public class MyExcludedClass implements MessageListener
{

  @ExcludeClassInterceptors
  @ExcludeDefaultInterceptors
  public void doTheThing() {
    // ...
  }
</pre>Z
CODE_SMELL
œ
squid:S4011ø
squidS4011%Track uses of disallowed constructors"MAJOR*java:Ï<p>This rule allows banning usage of certain constructors.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
  <li> className: java.util.Date </li>
  <li> argumentTypes: java.lang.String </li>
</ul>
<pre>
Date birthday;
birthday = new Date("Sat Sep 27 05:42:21 EDT 1986");  // Noncompliant
birthday = new Date(528176541000L); // Compliant
</pre>@Z
CODE_SMELL
¿
squid:S2047∞
squidS2047OThe names of methods with boolean return values should start with "is" or "has""MAJOR*java:µ<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean should have names that start with "is" or "has" rather than with "get".</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean getFoo() { // Noncompliant
  // ...
}

public boolean getBar(Bar c) { // Noncompliant
  // ...
}

public boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFoo() {
  // ...
}

public boolean hasBar(Bar c) {
  // ...
}

public boolean testForBar(Bar c) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public boolean getFoo(){
  // ...
}
</pre>Z
CODE_SMELL
˙
squid:S2168Í
squidS2168)Double-checked locking should not be used"BLOCKER*java:ö<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is
entered to determine whether or not to initialize the object.</p>
<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than
<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object
risks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the
program.</p>
<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.
With early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>
performance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,
you can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@NotThreadSafe
public class DoubleCheckedLocking {
    private static Resource resource;

    public static Resource getInstance() {
        if (resource == null) {
            synchronized (DoubleCheckedLocking.class) {
                if (resource == null)
                    resource = new Resource();
            }
        }
        return resource;
    }

    static class Resource {

    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@ThreadSafe
public class SafeLazyInitialization {
    private static Resource resource;

    public synchronized static Resource getInstance() {
        if (resource == null)
            resource = new Resource();
        return resource;
    }

    static class Resource {
    }
}
</pre>
<p>With inner static holder:</p>
<pre>
@ThreadSafe
public class ResourceFactory {
    private static class ResourceHolder {
        public static Resource resource = new Resource(); // This will be lazily initialised
    }

    public static Resource getResource() {
        return ResourceFactory.ResourceHolder.resource;
    }

    static class Resource {
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">The "Double-Checked Locking is Broken" Declaration</a> </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/IgAZAg">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/609.html">MITRE, CWE-609</a> - Double-checked locking </li>
  <li> <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4">JLS 12.4</a> - Initialization of Classes and Interfaces </li>
</ul>ZBUG
ç	
squid:S3281˝
squidS3281<Default EJB interceptors should be declared in "ejb-jar.xml""BLOCKER*java:ê<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated
as default. </p>
<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,
<code>Stateless</code> or <code>Stateful</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
// file: ejb-interceptors.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// file: ejb-jar.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>ZVULNERABILITY
¿
squid:S1199∞
squidS1199%Nested code blocks should not be used"MINOR*java:ﬂ<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD: {                                // Noncompliant - nested code block '{' ... '}'
        int a = stack.pop();
        int b = stack.pop();
        int result = a + b;
        stack.push(result);
        break;
      }
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD:                                  // Compliant
      evaluateAdd();
      break;
    /* ... */
  }
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>Z
CODE_SMELL
ø	
squid:S2166Ø	
squidS2166FClasses named like "Exception" should extend "Exception" or a subclass"MAJOR*java:Ω<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using "exception" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>Z
CODE_SMELL
„
squid:S2167”
squidS21671"compareTo" should not return "Integer.MIN_VALUE""MINOR*java:˝<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>
does <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes
inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields
<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return Integer.MIN_VALUE;  // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return -1;
  }
</pre>ZBUG
Ü
squid:S1197ˆ
squidS1197>Array designators "[]" should be on the type, not the variable"MINOR*java:å<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][];   // Noncompliant
int[] matrix[];   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int[][] matrix;   // Compliant
</pre>Z
CODE_SMELL
§	
squid:S2164î	
squidS2164&Math should not be performed on floats"MINOR*java:…<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.
<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
float c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7

double d = a + b; // Noncompliant; addition is still between 2 floats
</pre>
<h2>Compliant Solution</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
BigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));

double d = (double)a + (double)b;
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>
<pre>
System.out.println("["+getName()+"] " +
           "\n\tMax time to retrieve connection:"+(max/1000f/1000f)+" ms.");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/DgU">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation
  is needed </li>
</ul>ZBUG
Ê
squid:S3254÷
squidS3254EDefault annotation parameter values should not be passed as arguments"MINOR*java:Â<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@MyAnnotation(arg = "def")  // Noncompliant
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default "def";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@MyAnnotation
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default "def";
}
</pre>Z
CODE_SMELL
≥

squid:S3374£

squidS33740Struts validation forms should have unique names"BLOCKER*java:¬	<p>According to the Common Weakness Enumeration,</p>
<blockquote>
  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the
  other. This decision might not correspond to the programmer's expectations...
</blockquote>
<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/102.html">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>
  <li> <a href="https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms">OWASP, Improper Data
  Validation</a> - Struts: Duplicate Validation Forms </li>
</ul>ZVULNERABILITY
˚
squid:S1075Î
squidS1075URIs should not be hardcoded"MINOR*java:£<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  public Collection&lt;User&gt; listUsers() {
    File userList = new File("/home/mylogin/Dev/users.txt"); // Non-Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.
  private Configuration config;
  public Foo(Configuration myConfig) {
    this.config = myConfig;
  }
  public Collection&lt;User&gt; listUsers() {
    // Find here the way to get the correct folder, in this case using the Configuration object
    String listingFolder = config.getProperty("myApplication.listingFolder");
    // and use this parameter instead of the hard coded path
    File userList = new File(listingFolder, "users.txt"); // Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>Z
CODE_SMELL
©
squid:S2165ô
squidS2165*"finalize" should not set fields to "null""MINOR*java:√<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -
the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String name;

  @Override
  void finalize() {
    name = null;  // Noncompliant; completely unnecessary
</pre>Z
CODE_SMELL
«
squid:S1195∑
squidS1195LArray designators "[]" should be located after the type in method signatures"MINOR*java:ø<p>According to the Java Language Specification: </p>
<blockquote>
  <p>For compatibility with older versions of the Java SE platform,</p>
  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the
  array type after the formal parameter list.</p>
  <p>This obsolescent syntax should not be used in new code.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public int getVector()[] { /* ... */ }    // Noncompliant

public int[] getMatrix()[] { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public int[] getVector() { /* ... */ }

public int[][] getMatrix() { /* ... */ }
</pre>Z
CODE_SMELL
—
squid:S2162¡
squidS2162<"equals" methods should be symmetric and work for subclasses"MINOR*java:‡<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is
symmetric. </p>
<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the
parent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a
new implementation of <code>equals</code>):</p>
<pre>
Fruit fruit = new Fruit();
Raspberry raspberry = new Raspberry();

if (raspberry instanceof Fruit) { ... } // true
if (fruit instanceof Raspberry) { ... } // false
</pre>
<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>
<pre>
raspberry.equals(fruit); // false
fruit.equals(raspberry); //true
</pre>
<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the
method for subclasses. Instead, make the comparison dynamic.</p>
<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while
<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class
      // ...
    }
    //...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (this.getClass() == obj.getClass()) {
      return ripe.equals(((Fruit)obj).getRipe());
    }
    return false;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zIUbAQ">CERT, MET08-J.</a> - Preserve the equality contract when overriding the
  equals() method </li>
</ul>ZBUG
…
squid:S3373π
squidS3373<"action" mappings should not have too many "forward" entries"MINOR*java:—<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of
CRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it
becomes difficult to maintain a transparent naming convention. </p>
<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of
<code>&lt;forward/&gt;</code> tags.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 4:</p>
<pre>
&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;
  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;
  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;
  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;
  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;
  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;
&lt;/action&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;
  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;
  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;
  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;
  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;
&lt;/action&gt;

&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;
  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;
&lt;/action&gt;
</pre>Z
CODE_SMELL
ä
squid:S1194˙
squidS1194("java.lang.Error" should not be extended"MAJOR*java:¶<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be
encountered by the Java Virtual Machine.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Error { /* ... */ }       // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception { /* ... */ }   // Compliant
</pre>Z
CODE_SMELL
˚
squid:S2160Î
squidS21603Subclasses that add fields should override "equals""MINOR*java:å<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of
non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>
<p>This rule looks for classes that do all of the following:</p>
<ul>
  <li> extend classes that override <code>equals</code>. </li>
  <li> do not themselves override <code>equals</code>. </li>
  <li> add fields. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method
  private Color ripeColor;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {
  private Color ripeColor;

  public boolean equals(Object obj) {
    if (! super.equals(obj)) {
      return false;
    }
    Raspberry fobj = (Raspberry) obj;
    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested
      return true;
    }
    return false;
  }
}
</pre>Z
CODE_SMELL
◊
squid:S3010«
squidS30103Static fields should not be updated in constructors"MAJOR*java:Ë<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  static Date dateOfBirth;
  static int expectedFingers;

  public Person(date birthday) {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  Date dateOfBirth;
  static int expectedFingers = 10;

  public Person(date birthday) {
    dateOfBirth = birthday;
  }
}
</pre>Z
CODE_SMELL
¯
squid:S1190Ë
squidS1190+Future keywords should not be used as names"BLOCKER*java:è<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,
it will not be under modern versions. </p>
<p>Following keywords are marked as invalid identifiers </p>
<table>
  <tbody>
    <tr>
      <th>Keyword</th>
      <th>Added</th>
    </tr>
    <tr>
      <td><code>_</code></td>
      <td>9</td>
    </tr>
    <tr>
      <td><code>enum</code></td>
      <td>5.0</td>
    </tr>
  </tbody>
</table>
<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as
documented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this
rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  int enum = 42;            // Noncompliant
  String _ = "";   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  int magic = 42;
}
</pre>Z
CODE_SMELL
√
squid:S1191≥
squidS11910Classes from "sun.*" packages should not be used"MAJOR*java:◊<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>
<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause
problems when moving to a different Java vendor, such as OpenJDK.</p>
<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import com.sun.jna.Native;     // Noncompliant
import sun.misc.BASE64Encoder; // Noncompliant
</pre>Z
CODE_SMELL
ó
squid:S1192á
squidS1192(String literals should not be duplicated"CRITICAL*java:∞
<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public void run() {
  prepare("action1");                              // Noncompliant - "action1" is duplicated 3 times
  execute("action1");
  release("action1");
}

@SuppressWarning("all")                            // Compliant - annotations are excluded
private void method1() { /* ... */ }
@SuppressWarning("all")
private void method2() { /* ... */ }

public String method3(String a) {
  System.out.println("'" + a + "'");               // Compliant - literal "'" has less than 5 characters and is excluded
  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final String ACTION_1 = "action1";  // Compliant

public void run() {
  prepare(ACTION_1);                               // Compliant
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>Z
CODE_SMELL
Ó
squid:S1193ﬁ
squidS1193GException types should not be tested using "instanceof" in catch blocks"MAJOR*java:Î<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  if(e instanceof IOException) { /* ... */ }         // Noncompliant
  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (IOException e) { /* ... */ }                // Compliant
} catch (NullPointerException e) { /* ... */ }       // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/5gFFB">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception
  types </li>
</ul>Z
CODE_SMELL
ñ
squid:S2059Ü
squidS2059G"Serializable" inner classes of "Serializable" classes should be static"MINOR*java:ì
<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually
serializable, then the serialization will succeed but possibly write out far more data than was intended. </p>
<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one: </p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/O4CpAQ">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>Z
CODE_SMELL
Ø
squid:S2177ü
squidS2177FChild class methods named for parent class methods should be overrides"MAJOR*java:¥<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case
when:</p>
<ul>
  <li> the parent class method is <code>static</code> and the child class method is not. </li>
  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>
  <li> the parent class method is <code>private</code>. </li>
</ul>
<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent
declaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then
the method should be renamed to prevent confusion. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Parent.java
import computer.Pear;
public class Parent {

  public void doSomething(Pear p) {
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}

// Child.java
import fruit.Pear;
public class Child extends Parent {

  public void doSomething(Pear p) {  // Noncompliant; this is not an override
    // ...
  }


  public void doSomethingElse() {  // Noncompliant; parent method is static
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Parent.java
import computer.Pear;
public class Parent {

  public void doSomething(Pear p) {
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}

// Child.java
import computer.Pear;  // import corrected
public class Child extends Parent {

  public void doSomething(Pear p) {  // true override (see import)
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}
</pre>ZBUG
°
squid:S3027ë
squidS3027=String function use should be optimized for single characters"MAJOR*java:®<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a
call with a <code>char</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myStr = "Hello World";
// ...
int pos = myStr.indexOf("W");  // Noncompliant
// ...
int otherPos = myStr.lastIndexOf("r"); // Noncompliant
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
String myStr = "Hello World";
// ...
int pos = myStr.indexOf('W');
// ...
int otherPos = myStr.lastIndexOf('r');
// ...
</pre>Z
CODE_SMELL
˚
squid:S2057Î
squidS2057/"Serializable" classes should have a version id"CRITICAL*java:ç<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for
you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id,
and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>
<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),
and classes marked with <code>@SuppressWarnings("serial")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYCpAQ">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution
  </li>
</ul>Z
CODE_SMELL
ˇ
squid:S2175Ô
squidS21753Inappropriate "Collection" calls should not be made"MAJOR*java:ó<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of
using the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is
unrelated to the type used for the list declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; list = new ArrayList&lt;String&gt;();
Integer integer = Integer.valueOf(1);

if (list.contains(integer)) {  // Noncompliant. Always false.
  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QwFlAQ">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections
  Framework methods that are a different type than the collection parameter type </li>
</ul>ZBUG
§
squid:S2176î
squidS21768Class names should not shadow interfaces or superclasses"CRITICAL*java:≠<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's
confusing and could cause problems in the future. </p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.mypackage;

public class Foo implements a.b.Foo { // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package my.mypackage;

public class FooJr implements a.b.Foo {
</pre>Z
CODE_SMELL
ó
"squid:ClassVariableVisibilityCheck
squidClassVariableVisibilityCheck:Class variable fields should not have public accessibility"MINOR*java2S1104:È
<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>
</ul>
<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  public String firstName;                       // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  private String firstName;                      // Compliant

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

}
</pre>
<h2>Exceptions</h2>
<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>ZVULNERABILITY
¥	
2squid:RightCurlyBraceDifferentLineAsNextBlockCheck˝
squid,RightCurlyBraceDifferentLineAsNextBlockCheckfClose curly brace and the next "else", "catch" and "finally" keywords should be on two different lines"MINOR*java2S1108:Ω<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on
two different lines.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Noncompliant
    doSomethingElse();
  }
  else {                               // Compliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  }
  else if (somethingElse) {
    doSomethingElse();
  }
  else {
     generateError();
  }

  try {
    generateOrder();
  }
  catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>Z
CODE_SMELL
Ê
squid:S2055÷
squidS2055`The non-serializable super class of a "Serializable" class should have a no-argument constructor"MINOR*java:—<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the
object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until
the final object has been instantiated. </p>
<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a
<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit
        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor
  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) {...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>ZBUG
≠
"squid:LeftCurlyBraceStartLineCheckÜ
squidLeftCurlyBraceStartLineCheck@An open curly brace should be located at the beginning of a line"MINOR*java2S1106:¸<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  // Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>Z
CODE_SMELL
«
%squid:RedundantThrowsDeclarationCheckù
squidRedundantThrowsDeclarationCheck/"throws" declarations should not be superfluous"MINOR*java2S1130:°<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> a <code>RuntimeException</code>, or one of its descendants </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
void baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
void baz() {}
</pre>Z
CODE_SMELL
ﬁ
squid:S2293Œ
squidS2293*The diamond operator ("<>") should be used"MINOR*java:¯<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare
a <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,
and the compiler will infer the type.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;&gt;();
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</pre>Z
CODE_SMELL
⁄
squid:S3020 
squidS30206"toArray" should be passed an array of the proper type"MINOR*java:Ô<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a
<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the
call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String [] getStringArray(List&lt;String&gt; strings) {
  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String [] getStringArray(List&lt;String&gt; strings) {
  return strings.toArray(new String[0]);
}
</pre>ZBUG
à
squid:S4042¯
squidS4042+"java.nio.Files#delete" should be preferred"MAJOR*java:°<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On
the other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better
indicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the
preferred option.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void cleanUp(Path path) {
  File file = new File(path);
  if (!file.delete()) {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{
  Files.delete(path);
}
</pre>Z
CODE_SMELL
Õ
squid:TrailingCommentCheckÆ
squidTrailingCommentCheck:Comments should not be located at the end of lines of code"MINOR*java2S139:≥<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
int a2 = b + c;
</pre>Z
CODE_SMELL
¨
squid:S4143ú
squidS41431Map values should not be replaced unconditionally"MAJOR*java:∆<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
letters.put("a", "Apple");
letters.put("a", "Boy");  // Noncompliant

towns[i] = "London";
towns[i] = "Chicago";  // Noncompliant
</pre>ZBUG
ì
squid:S4144É
squidS41441Methods should not have identical implementations"MAJOR*java:¶<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private final static String CODE = "bounteous";

public String calculateCode() {
  doTheThing();
  return CODE;
}

public String getName() {  // Noncompliant
  doTheThing();
  return CODE;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private final static String CODE = "bounteous";

public String getCode() {
  doTheThing();
  return CODE;
}

public String getName() {
  return getCode();
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>Z
CODE_SMELL
ˆ
squid:S4174Ê
squidS4174>Local constants should follow naming conventions for constants"MINOR*java:¸<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive
variables, have names that match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public void doSomething() {
  final int local = 42;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  final int LOCAL = 42;
  ...
}
</pre>Z
CODE_SMELL
æ
squid:ModifiersOrderCheck†
squidModifiersOrderCheck1Modifiers should be declared in the correct order"MINOR*java2S1124:Æ<p>The Java Language Specification recommends listing modifiers in the following order:</p>
<p>1. Annotations</p>
<p>2. public</p>
<p>3. protected</p>
<p>4. private</p>
<p>5. abstract</p>
<p>6. static</p>
<p>7. final</p>
<p>8. transient</p>
<p>9. volatile</p>
<p>10. synchronized</p>
<p>11. native</p>
<p>12. strictfp</p>
<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard
order.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static public void main(String[] args) {   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {   // Compliant
}
</pre>Z
CODE_SMELL
™
squid:S3052ö
squidS30522Fields should not be initialized to default values"MINOR*java:º<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need
to explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  int count = 0;  // Noncompliant
  // ...

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  int count;
  // ...

}
</pre>
<h2>Exceptions</h2>
<p><code>final</code> fields are ignored.</p>Z
CODE_SMELL
—
squid:S4142¡
squidS41422Duplicate values should not be passed as arguments"MAJOR*java:„<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant
&nbsp;&nbsp;//...
}

if (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant
&nbsp;&nbsp;// ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (compare(myPoint.x, myPoint.y) != 0) {
&nbsp;&nbsp;//...
}

Object v1 = getNextValue();
Object v2 = getNextValue();
if (compare(v1, v2) != 0) {
&nbsp;&nbsp;// ...
}
</pre>Z
CODE_SMELL
Œ

squid:S888ø
squidS888JEquality operators should not be used in "for" loop termination conditions"CRITICAL*java:«<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-5-2 </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes
  by more than one </li>
</ul>Z
CODE_SMELL
÷
squid:S3066∆
squidS3066,"enum" fields should not be publicly mutable"MINOR*java:Î<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is
not only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the
constructor, but if that's not possible, their visibility should be reduced as much as possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  public int countryCount;  // Noncompliant
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }

  public void setLandMass(int landMass) {  // Noncompliant
    this.landMass = landMass;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  private int countryCount;
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }
</pre>ZVULNERABILITY
ï
squid:S3067Ö
squidS30671"getClass" should not be used for synchronization"MAJOR*java:Ø<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a
different object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>
keyword.</p>
<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  public void doSomethingSynchronized(){
    synchronized (this.getClass()) {  // Noncompliant
      // ...
    }
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public void doSomethingSynchronized(){
    synchronized (MyClass.class) {
      // ...
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/bwCaAg">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by
  getClass() </li>
</ul>ZBUG
°
squid:S4032ë
squidS4032>Packages containing only "package-info.java" should be removed"MINOR*java:ß<p>There is no reason to have a package that is empty except for "package-info.java". Such packages merely clutter a project, taking up space but
adding no value. </p>Z
CODE_SMELL
•
squid:S4034ï
squidS40347"Stream" call chains should be simplified when possible"MINOR*java:≤<p>The Stream API provides the <code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code> method, which is a very convenient and efficient
way to check whether any elements of a stream match the provided predicate.</p>
<p>This rule raises an issue when a <code>Stream</code> chain could be replaced by this method call. Specifically:</p>
<ul>
  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findFirst().isPresent()</code> </li>
  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findAny().isPresent()</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
boolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);
</pre>Z
CODE_SMELL
ê
squid:S2094Ä
squidS2094Classes should not be empty"MINOR*java:π<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an
<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be
eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Nothing {  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Nothing {
}
</pre>
<h2>Exceptions</h2>
<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>
<pre>
@Configuration
@EnableWebMvc
public final class ApplicationConfiguration {

}
</pre>Z
CODE_SMELL
é
squid:S2096˛
squidS2096""main" should not "throw" anything"BLOCKER*java:Æ<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>
<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and
perform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String args[]) throws Exception { // Noncompliant
  doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String args[]) {
 try {
    doSomething();
  } catch (Throwable t) {
    log.error(t);
    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.
  }
}
</pre>Z
CODE_SMELL
—
squid:S2097¡
squidS2097."equals(Object obj)" should test argument type"MINOR*java:Ó<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method
should not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(Object obj) {
  MyClass mc = (MyClass)obj;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null)
    return false;

  if (this.getClass() != obj.getClass())
    return false;

  MyClass mc = (MyClass)obj;
  // ...
}
</pre>ZBUG
©

squid:S899ö
squidS899OReturn values should not be ignored when they contain the operation status code"MINOR*java:ù<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed
successfully.</p>
<p>This rule raises an issue when the return values of the following are ignored:</p>
<ul>
  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>
  <li> <code>Iterator.hasNext()</code> </li>
  <li> <code>Enumeration.hasMoreElements()</code> </li>
  <li> <code>Lock.tryLock()</code> </li>
  <li> non-void <code>Condition.await*</code> methods </li>
  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>
  <li> <code>Semaphore.tryAcquire</code> </li>
  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code>, <code>drainTo</code>, </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(File file, Lock lock) {
  file.delete();  // Noncompliant
  // ...
  lock.tryLock(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(File file, Lock lock) {
  if (!lock.tryLock()) {
    // lock failed; take appropriate action
  }
  if (!file.delete()) {
    // file delete failed; take appropriate action
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested </li>
  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.
  </li>
  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested </li>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/w4C4Ag">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/iIBfBw">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/toHWAw">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/754">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>
</ul>ZVULNERABILITY
»
squid:S2093∏
squidS2093!Try-with-resources should be used"CRITICAL*java:Ë<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer
to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>
<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileReader fr = null;
BufferedReader br = null;
try {
  fr = new FileReader(fileName);
  br = new BufferedReader(fr);
  return br.readLine();
} catch (...) {
} finally {
  if (br != null) {
    try {
      br.close();
    } catch(IOException e){...}
  }
  if (fr != null ) {
    try {
      br.close();
    } catch(IOException e){...}
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (
    FileReader fr = new FileReader(fileName);
    BufferedReader br = new BufferedReader(fr)
  ) {
  return br.readLine();
}
catch (...) {}
</pre>
<p>or</p>
<pre>
try (BufferedReader br =
        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to
  return br.readLine();
}
catch (...) {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/MACfBg">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle
  closeable resources </li>
</ul>Z
CODE_SMELL
ﬂ
	php:S1134—
phpS1134Track uses of "FIXME" tags"MAJOR*php2S1134:á<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide($numerator, $denominator) {
  return $numerator / $denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
É
	php:S1135ı
phpS1135Track uses of "TODO" tags"INFO*php2S1135:≠<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ô
php:S112å
phpS112VGeneric exceptions ErrorException, RuntimeException and Exception should not be thrown"MAJOR*php2S112:à<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to
catch all exceptions, including unknown exceptions that they do not know how to handle.</p>
<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
throw new Exception();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
throw new InvalidArgumentException();
// or
throw new UnexpectedValueException();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>Z
CODE_SMELL
≥
	php:S1131•
phpS1131.Lines should not end with trailing whitespaces"MINOR*php2S1131:«<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>Z
CODE_SMELL
ï
	php:S2068á
phpS2068$Credentials should not be hard-coded"BLOCKER*php2S2068:Æ<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to
end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$uname = "steve";
$password = "blue";
connect($uname, $password);
</pre>
<h2>Compliant Solution</h2>
<pre>
$uname = getEncryptedUser();
$password = getEncryptedPass();
connect($uname, $password);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -
  Broken Authentication and Session Management </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>ZVULNERABILITY
”
	php:S1536≈
phpS1536(Function argument names should be unique"MAJOR*php2S1536:Ù<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be
error prone. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute($a, $a, $c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute($a, $b, $c) { // Compliant
}
</pre>ZBUG
”
	php:S1656≈
phpS1656%Variables should not be self-assigned"MAJOR*php2S1656:˜<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public function setName($name) {
    $name = $name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function setName($name) {
    $this-&gt;name = $name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
Û
	php:S1779Â
phpS17799Only LF character (Unix-like) should be used to end lines"MINOR*php2S1779:¸<p>All developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover
some SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.</p>Z
CODE_SMELL
˛
php:S905Ò
phpS905PNon-empty statements should change control flow or have at least one side-effect"MAJOR*php2S905:˙<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$a == 1; // Noncompliant; was assignment intended?
$a &lt; $b; // Noncompliant; have we forgotten to assign the result to a variable?
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.
  </li>
</ul>ZBUG
¯
php:S907Î
phpS907#"goto" statement should not be used"MAJOR*php2S907:ö<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$i = 0;
loop:
  echo("i = $i");
  $i++;
  if ($i &lt; 10){
    goto loop;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++){
  echo("i = $i");
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>
  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>
</ul>Z
CODE_SMELL
÷B
	php:S1808»B
phpS18083Source code should comply with formatting standards"MINOR*php2S1808:ÂA<p>Shared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting
standard. The default parameter values conform to the PSR2 standard.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default PSR2 parameter values:</p>
<pre>
use FooClass;‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ  // Noncompliant; the "use" declaration should be placed after the "namespace" declaration

namespace Vendor\Package;
use FooClass;‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ  // Noncompliant; the "namespace" declaration should be followed by a blank line
$foo = 1;‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ  // Noncompliant; the "use" declaration should be followed by a blank line

class ClassA {‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ ‚ÄÇ ‚ÄÇ// Noncompliant; an open curly brace should be at the beginning of a new line for classes and functions
‚ÄÇ‚ÄÇfunction my_function(){ ‚ÄÇ// Noncompliant; curly brace on wrong line
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($firstThing)‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ// Noncompliant; an open curly brace should be at the end of line for a control structure
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ{
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($secondThing)‚ÄÇ   {‚ÄÇ// Noncompliant; there should be exactly one space between the closing parenthesis and the opening curly brace
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

    if($thirdThing) {      // Noncompliant; there should be exactly one space between the control structure keyword and the opening parenthesis
      ...
    }
    else {                 // Noncompliant; the close curly brace and the next "else" (or "catch" or "finally") keyword should be located on the same line
      ...
    }

    try{                   // Noncompliant; there should be exactly one space between the control structure keyword and the curly brace
      ...
    } catch (Exception $e) {
‚ÄÇ‚ÄÇ  }

    analyse( $fruit ) ;    // Noncompliant; there should not be any space after the opening parenthesis and before the closing parenthesis

    for ($i = 0;$i &lt; 10;   $i++) { // Nomcompliant; there should be exactly one space after each ";" in the {{for}} statement
      ...
    }

    pressJuice($apply ,$orange);    // Noncompliant; the comma should be followed by one space and not preceded by any

    do_something ();       // Noncompliant; there should not be any space after the method name

    foreach ($fruits    as $fruit_key =&gt;     $fruit) {  // Noncompliant; in the foreach statement there should be one space before and after "as" keyword and "=&gt;" operator
      ...
    }
  }
}

class ClassB
extends ParentClass  // Noncompliant; the class name and the "extends" / "implements" keyword should be on the same line
{
  ...
}

class ClassC extends ParentClass implements \ArrayAccess, \Countable,
    \Serializable    // Noncompliant; the list of implemented interfaces should be correctly indented
{

  public function aVeryLongMethodName(ClassTypeHint $arg1, // Noncompliant; the arguments in a method declaration should be correctly indented
    &amp;$arg2, array $arg3 = []) {

    $noArgs_longVars = function () use ($longVar1,         // Noncompliant; the arguments in a function declaration should be correctly indented
        $longerVar2,
        $muchLongerVar3
    ) {
      ...
    };

    $foo-&gt;bar($longArgument,    // Noncompliant; the arguments in a method call should be correctly indented
      $longerArgument,
      $muchLongerArgument);     // Noncompliant; the closing parenthesis should be placed on the next line

    $closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {  // Noncompliant; the closure declaration should be correctly spaced - see (5)
      ...
    };
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
namespace Vendor\Package; // Compliant; the "namespace" declaration is followed by a blank line

use FooClass;             // Compliant; the "use" declaration is placed after the "namespace" declaration
                          // Compliant; the "use" declaration is followed by a blank line
$foo = 1;

class ClassA
{‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ           ‚ÄÇ// Compliant; the open curly brace is at the beginning of a new line for the class
‚ÄÇ‚ÄÇfunction my_function()
  {‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ                   // Compliant; the open curly brace is at the beginning of a new line for the function
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($firstThing)‚ÄÇ{‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ// Compliant; the open curly brace is at the end of line for the control structure
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇif ($secondThing)‚ÄÇ{‚ÄÇ‚ÄÇ // Compliant; there is exactly one space between the closing parenthesis and the opening curly brace
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ...
‚ÄÇ‚ÄÇ‚ÄÇ‚ÄÇ}

    if ($thirdThing) {    // Compliant; there is exactly one space between the control structure keyword and the opening parenthesis
      ...
    } else {              // Compliant; the close curly brace and the next "else" (or "catch" or "finally") keyword are located on the same line
      ...
    }

    try {                 // Compliant; there is exactly one space between the control structure keyword and the curly brace
      ...
    } catch (Exception $e) {
      ...
    }

    analyse($fruit);      // Compliant: there is no space after the opening parenthesis, nor before the closing parenthesis

    for ($i = 0; $i &lt; 10; $i++) { // Compliant: there is exactly one space after each ";" in the {{for}} statement
      ...
    }

    pressJuice($apply, $orange);   // Compliant; the comma is followed by one space and is not preceded by any

    do_something();       // Compliant; there is no space after the method name

    foreach ($fruits as $fruit_key =&gt; $fruit) {  // Compliant; in the foreach statement there is one space before and after "as" keyword and "=&gt;" operator
      ...
    }
  }
}

/* The idea here is to make it obvious at first glance that a class extends
 * some other classes and/or implements some interfaces. The names of
 * extended classes or implemented interfaces can be located on subsequent lines.
 */
class ClassB1 extends ParentClass // Compliant; the class name and the "extends" (or "implements") keyword are located on the same line
{
  ...
}

class ClassB2 extends             // Compliant; the class name and the "extends" (or "implements") keyword are located on the same line
ParentClass {
  ...
}

/* Lists of implements may be split across multiple lines, where each subsequent line
 * is indented once. When doing so, the first item in the list should be on the next line,
 * and there should be only one interface per line.
 */
class ClassC extends ParentClass implements
    \ArrayAccess,         // Compliant; the list of implemented interfaces is correctly indented
    \Countable,
    \Serializable
{
  /* Argument lists may be split across multiple lines, where each subsequent line
   * is indented once. When doing so, the first item in the list should be on the next line,
   * and there should be only one argument per line. Also, when the argument list is
   * split across multiple lines, the closing parenthesis and opening brace should be
   * placed together on their own line with one space between them.
   */
  public function aVeryLongMethodName(
    ClassTypeHint $arg1,  // Compliant; the arguments in a method/function declaration are correctly indented
      &amp;$arg2,
      array $arg3 = []
    ) {
      $noArgs_longVars = function () use (
        $longVar1,        // Compliant; the arguments in a method/function declaration are correctly indented
        $longerVar2,
        $muchLongerVar3
      ) {
        ...
      };


    /* Argument lists may be split across multiple lines, where each subsequent line is
     * indented once. When doing so, the first item in the list should be on the next line,
     * and there should be only one argument per line.
     */
    $foo-&gt;bar(
      $longArgument,       // Compliant; the arguments in the method call are be correctly indented
      $longerArgument,
      $muchLongerArgument
    );                     // Compliant; the closing parenthesis is placed on a separate line

    /* Closures should be declared with a space after the "function" keyword,
     * and a space before and after the "use" keyword.
     */
    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) { // Compliant; the closure declaration is correctly spaced
      ...
    };
  }
}
</pre>Z
CODE_SMELL
 
php:S103Ω
phpS103Lines should not be too long"MAJOR*php2S103:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
ú
php:S105è
phpS105(Tabulation characters should not be used"MINOR*php2S105:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
ô
php:S107å
phpS107-Functions should not have too many parameters"MAJOR*php2S107:±<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething($param1, $param2, $param3, $param4, $param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($param1, $param2, $param3, $param4) {
...
}
</pre>Z
CODE_SMELL
ﬁ
php:S108—
phpS108.Nested blocks of code should not be left empty"MAJOR*php2S108:ı<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
≠
	php:S1301ü
phpS13019"switch" statements should have at least 3 "case" clauses"MINOR*php2S1301:∂<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($variable) {
  case 0:
    do_something();
    break;
  default:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($variable == 0) {
  do_something();
} else {
  do_something_else();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>Z
CODE_SMELL
⁄
	php:S1784Ã
phpS1784/Method visibility should be explicitly declared"MINOR*php2S1784:Ù<p>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To
prevent any misunderstanding, this visibility should always be explicitly declared.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function foo(){...}
</pre>ZBUG
á	
	php:S1144˘
phpS1144*Unused "private" methods should be removed"MAJOR*php2S1144:ü<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
    ...
  }

  private function unusedPrivateFunction() {  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.

  public static function doSomething()
  {
    $foo = new Foo();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>Z
CODE_SMELL
Ù
	php:S1145Ê
phpS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*php2S1145:˜
<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>ZBUG
ª
php:S121Æ
phpS121*Control structures should use curly braces"CRITICAL*php2S121:”<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
Å
	php:S1541Û
phpS1541#Functions should not be too complex"CRITICAL*php2S1541:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
·
	php:S1264”
phpS12645A "while" loop should be used instead of a "for" loop"MINOR*php2S1264:Ó<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
 
	php:S1780º
phpS1780?Closing tag "?>" should be omitted on files containing only PHP"MINOR*php2S1780:Õ<p>According to the PSR2 coding standard:</p>
<blockquote>
  <p>The closing <code>?&gt;</code> tag should be omitted from files containing only PHP.</p>
</blockquote>
<p>According to the PHP manual:</p>
<blockquote>
  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still
  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at
  the end of the parts generated by the included files.</p>
</blockquote>Z
CODE_SMELL
ª
	php:S1781≠
phpS1781GPHP keywords and constants "true", "false", "null" should be lower case"MINOR*php2S1781:∂<p>Using indifferently lower or upper case for PHP keywords and constants "true", "false" and "null" can impact the readability of PHP source
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php ECHO 'Hello World'; ?&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php echo 'Hello World'; ?&gt;
</pre>Z
CODE_SMELL
´
	php:S1142ù
phpS11427Functions should not contain too many return statements"MAJOR*php2S1142:∂<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function myFunction(){ // Noncompliant as there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
€
php:S122Œ
phpS122&Statements should be on separate lines"MAJOR*php2S122:˙<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored.</p>
<pre>
$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant
$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant
</pre>Z
CODE_SMELL
◊
php:S881 
phpS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*php2S881:û<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
$u8a = ++$u8b + $u8c--;
$foo = $bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++$u8b;
$u8a = $u8b + $u8c;
$u8c--;
$foo = $bar / 4;
$bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
ß
php:S114ö
phpS1146Interface names should comply with a naming convention"MINOR*php2S114:∂<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
interface MyInterface {...}
</pre>Z
CODE_SMELL
Ñ
	php:S1788ˆ
phpS17883Method arguments with default values should be last"MAJOR*php2S1788:ì<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many
or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. </p>
<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it
impossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to "get to" the non-default arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function makeyogurt($type = "acidophilus", $flavor){...}  // Noncompliant

makeyogurt("raspberry")}}  // Runtime error: Missing argument 2 in call to makeyogurt()
</pre>
<h2>Compliant Solution</h2>
<pre>
function makeyogurt($flavor, $type = "acidophilus", ){...}

makeyogurt("raspberry")}} // Works as expected
</pre>Z
CODE_SMELL
œ
	php:S1820¡
phpS1820'Classes should not have too many fields"MAJOR*php2S1820:Í<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
Ü
php:S113˘
phpS1130Files should contain an empty newline at the end"MINOR*php2S113:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
ª
php:S115Æ
phpS1155Constant names should comply with a naming convention"CRITICAL*php2S115:»<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
define("const1", true);

class Foo {
    const const2 = "bar";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
define("CONST1", true);

class Foo {
    const CONST2 = "bar";
}
</pre>Z
CODE_SMELL
ê
php:S116É
phpS1162Field names should comply with a naming convention"MINOR*php2S116:£<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
  $my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  $myField;
}
</pre>Z
CODE_SMELL
È
php:S117‹
phpS117RLocal variable and function parameter names should comply with a naming convention"MINOR*php2S117:‹<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public function doSomething($my_param){
  $LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public function doSomething($myParam){
  $local;
  ...
}
</pre>Z
CODE_SMELL
∞
	php:S1599¢
phpS1599%Variable variables should not be used"BLOCKER*php2S1599:À<p>PHP's "variable variables" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
$var = 'foo';
$$var = 'bar';      //Noncompliant
$$$var = 'hello';  //Noncompliant

echo $foo; //will display 'bar'
echo $bar; //will display 'hello'
</pre>Z
CODE_SMELL
Å
	php:S2047Û
phpS2047OThe names of methods with boolean return values should start with "is" or "has""MAJOR*php2S2047:Ù<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean property should have names that start with "is" or "has" rather than with "get".</p>
<p>Note that this rule will only apply to functions that are documented to return a boolean.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @return boolean
 */
public function getFoo() // Noncompliant
{
  return foo;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
 * @return boolean
 */
public function isFoo()
{
  return true;
}
</pre>Z
CODE_SMELL
¨
	php:S3776û
phpS37768Cognitive Complexity of functions should not be too high"CRITICAL*php2S3776:≥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
‡
	php:S1871“
phpS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*php2S1871:À<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($i) {
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doSomething();
    break;
  default:
    doTheRest();
}

if ($a &gt;= 0 &amp;&amp; $a &lt; 10) {
  doTheThing();
else if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {
  doTheOtherThing();
}
else if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}

if ($b == 0) {
  doOneMoreThing();
}
else {
  doOneMoreThing(); // Noncompliant; duplicates then-branch
}

var b = a ? 12 &gt; 4 : 4;  // Noncompliant; always results in the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($i) {
  case 1:
  case 3:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}

if (($a &gt;= 0 &amp;&amp; $a &lt; 10) || ($a &gt;= 20 &amp;&amp; $a &lt; 50)) {
  doTheThing();
else if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {
  doTheOtherThing();
}
else {
  doTheRest();
}

doOneMoreThing();

b = 4;
</pre>
<p>or </p>
<pre>
switch ($i) {
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doThirdThing();
    break;
  default:
    doTheRest();
}

if ($a &gt;= 0 &amp;&amp; $a &lt; 10) {
  doTheThing();
else if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {
  doTheOtherThing();
}
else if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {
  doTheThirdThing();
}
else {
  doTheRest();
}

if ($b == 0) {
  doOneMoreThing();
}
else {
  doTheRest();
}

int b = a ? 12 &gt; 4 : 8;
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>Z
CODE_SMELL
ä
	php:S1990¸
phpS1990&"final" should not be used redundantly"MINOR*php2S1990:¶<p>There is no need to use the <code>final</code> modifier inside a <code>final</code> class. Everything in it is <code>final</code> by default.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final class MyClass {

  public final String getName() {  // Noncompliant
    return name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
final class MyClass {

  public String getName() {  // Compliant
    return name;
  }
}
</pre>Z
CODE_SMELL
¶
	php:S2046ò
phpS2046&Perl-style comments should not be used"MINOR*php2S2046:¬<p>Shared coding conventions allow teams to collaborate effectively. This rule flags all Perl-style comments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$myvar; # Noncompliant; this comment should have started with "//"
</pre>
<h2>Compliant Solution</h2>
<pre>
$myvar; // Compliant; this comment started with "//"
</pre>Z
CODE_SMELL
ı
	php:S1757Á
phpS1757%"<?php" and "<?=" tags should be used"MINOR*php2S1757:í<p>Coding conventions allow teams to collaborate effectively. For maximum standardization and readability, PHP code should use the long <code>&lt;?php
?&gt;</code> tags or the short-echo <code>&lt;?= ?&gt;</code> tags; it should not use the other tag variations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?
$foo = 1;
?&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
$foo = 1;
?&gt;
</pre>Z
CODE_SMELL
Ü	
	php:S1998¯
phpS19981References should not be passed to function calls"CRITICAL*php2S1998:î<p>Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as
well, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,
particularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than
more efficient. </p>
<p>Further, according to the PHP manual: </p>
<blockquote>
  As of PHP 5.3.0, you will get a warning saying that "call-time pass-by-reference" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference
  was removed, so using it will raise a fatal error.
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
myfun(&amp;$name);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
myfun($name);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Weakness Base Passing Mutable Objects to an Untrusted Method </li>
</ul>Z
CODE_SMELL
ì
	php:S2043Ö
phpS2043,Superglobals should not be accessed directly"MINOR*php2S2043:©<p>Superglobal variables are predefined variables available in all scopes throughout a script. However, accessing them directly is considered bad
practice. Instead, they should be accessed through an object or framework that handles sanitation and validation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$name = $_POST['name'];
</pre>
<h2>Compliant Solution</h2>
<pre>
$name = $this-&gt;params()-&gt;fromPost('name');
</pre>Z
CODE_SMELL
∂
	php:S2044®
phpS2044$"php_sapi_name()" should not be used"MAJOR*php2S2044:‘<p>Both <code>php_sapi_name()</code> and the <code>PHP_SAPI</code> constant give the same value. But calling the method is less efficient that simply
referencing the constant. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (php_sapi_name() == 'test') { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (PHP_SAPI == 'test') { ... }
</pre>Z
CODE_SMELL
Ê
	php:S1117ÿ
phpS1117=Local variables should not have the same name as class fields"MAJOR*php2S1117:Î<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public $myField;

  public function doSomething() {
    $myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
ƒ
	php:S1997∂
phpS1997$Files should not contain inline HTML"MAJOR*php2S1997:‚<p>Shared coding conventions allow teams to collaborate efficiently. To avoid the confusion that can be caused by tangling two coding languages in the
same file, inline HTML should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
$name = "George";
?&gt;
&lt;p&gt; Hello &lt;?php echo $name ?&gt;!&lt;/p&gt;
</pre>
<h2>Exceptions</h2>
<p>File having the extension <code>.phtml</code> are ignored by this rule because they are expected to have mixed PHP and HTML.</p>Z
CODE_SMELL
Å
	php:S2964Û
phpS2964"sleep" should not be called"MINOR*php2S2964:§<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it
ties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather
than less.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (is_bad_ip($requester)) {
  sleep(5);  // Noncompliant
}
</pre>ZVULNERABILITY
ò
	php:S1116ä
phpS1116"Empty statements should be removed"MINOR*php2S1116:∏<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  ;                                              // Noncompliant - was used as a kind of TODO marker
}

function doSomethingElse($p) {
  echo $p;;                                      // Noncompliant - double ;
}

for ($i = 1; $i &lt;= 10; doSomething($i), $i++);   // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething() {}

function doSomethingElse($p) {
  echo $p;

  for ($i = 1; $i &lt;= 10; $i++) {
    doSomething($i);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
›
	php:S1479œ
phpS1479;"switch" statements should not have too many "case" clauses"MAJOR*php2S1479:‰<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>Z
CODE_SMELL
ª
	php:S1996≠
phpS1996?Files should contain only one top-level class or interface each"MAJOR*php2S1996:æ<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>Z
CODE_SMELL
°
	php:S2041ì
phpS20412Parentheses should not be used for calls to "echo""CRITICAL*php2S2041:Æ<p><code>echo</code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses
with multiple arguments will result in a parse error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
echo("Hello");  // Noncompliant, but it works
echo("Hello", "World"); // Noncompliant. Parse error
</pre>
<h2>Compliant Solution</h2>
<pre>
echo "Hello";
echo "Hello","World!";
</pre>Z
CODE_SMELL
Î
	php:S1192›
phpS1192(String literals should not be duplicated"CRITICAL*php2S1192:Ç<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function run() {
  prepare('action1');                              // Non-Compliant - 'action1' is duplicated 3 times
  execute('action1');
  release('action1');
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ACTION_1 = 'action1';

function run() {
  prepare(ACTION_1);
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>Z
CODE_SMELL
÷
	php:S1764»
phpS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*php2S1764:‘<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( $a == $a ) { // always true
  doZ();
}
if ( $a != $a ) { // always false
  doY();
}
if ( $a == $b &amp;&amp; $a == $b ) { // if the first one is true, the second one is too
  doX();
}
if ( $a == $b || $a == $b ) { // if the first one is true, the second one is too
  doW();
}

$j = 5 / 5; //always 1
$k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>
<pre>
$i = 1 &lt;&lt; 1; // Compliant
$j = $a &lt;&lt; $a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href='/coding_rules#rule_key=php%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
ß
	php:S1126ô
phpS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*php2S1126:ï<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>Z
CODE_SMELL
ˇ
	php:S1488Ò
phpS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*php2S1488:Û<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;
  return $duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;
}
</pre>Z
CODE_SMELL
˙
	php:S1763Ï
phpS1763:Jump statements should not be followed by other statements"MAJOR*php2S1763:â<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>goto</code>) and <code>throw</code> expressions move
control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted
keystrokes lying in wait to confuse the unwary. </p>
<p>Rarely, as illustrated below, code after a jump or <code>throw</code> is reachable. However, such code is difficult to understand, and should be
refactored. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun($a) {
  $i = 10;
  return $i + $a;
  $i++;             // this is never executed
}

function foo($a) {
  if ($a == 5) {
    goto error;
  } else {
    // do the job
  }
  return;

  error:
    printf("don't use 5"); // this is reachable but unreadable

}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun($a) {
  $i = 10;
  return $i + $a;
}

function foo($a) {
  if ($a == 5) {
    handleError();
  } else {
    // do the job
  }
  return;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>ZBUG
“
php:S100≈
phpS1005Function names should comply with a naming convention"MINOR*php2S100:‚<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Methods with an <code>@inheritdoc</code> annotation, as well as magic methods (<code>__construct()</code>, <code>__destruct()</code>,
<code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>,
<code>__sleep()</code>, <code>__wakeup()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>,
<code>__clone()</code>, <code>__debugInfo()</code>) are ignored.</p>
<pre>
function __construct(){...}
function __destruct(){...}

/**
 * {@inheritdoc}
 */
function myFunc(){...}
</pre>Z
CODE_SMELL
›
php:S101–
phpS1012Class names should comply with a naming convention"MINOR*php2S101:<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>Z
CODE_SMELL
≥
	php:S1124•
phpS11241Modifiers should be declared in the correct order"MINOR*php2S1124:ƒ<p>The PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:</p>
<ol>
  <li> final or abstract </li>
  <li> public or protected or private </li>
  <li> static </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
static protected $foo;
...
public static final function bar(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected static $foo;
...
final public static function bar(){...}
</pre>Z
CODE_SMELL
¶
	php:S1125ò
phpS1125(Boolean literals should not be redundant"MINOR*php2S1125:¿<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($booleanVariable == true) { /* ... */ }
if ($booleanVariable != true) { /* ... */ }
if ($booleanVariable || false) { /* ... */ }
doSomething(!false);

$booleanVariable = condition ? true : exp;
$booleanVariable = condition ? false : exp;
$booleanVariable = condition ?  exp : true;
$booleanVariable = condition ?  exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($booleanVariable) { /* ... */ }
if (!$booleanVariable) { /* ... */ }
if ($booleanVariable) { /* ... */ }
doSomething(true);

$booleanVariable = condition || exp;
$booleanVariable = !condition &amp;&amp; exp;
$booleanVariable = !condition ||  exp;
$booleanVariable = condition &amp;&amp; exp;
</pre>
<h2>Exceptions</h2>
<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>Z
CODE_SMELL
´
	php:S1766ù
phpS1766;More than one property should not be declared per statement"MINOR*php2S1766:≤<p>For better readability, do not put multiple property declarations in the same statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
class Foo
{
   private $bar = 1, $bar2 = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
class Foo
{
   private $bar1 = 1;
   private $bar2 = 2;
}
</pre>Z
CODE_SMELL
√
	php:S1765µ
phpS1765$The "var" keyword should not be used"MINOR*php2S1765:·<p>The PHP 4 method of declaring a variable, using the <code>var</code> keyword, was deprecated in early versions of PHP 5. Even though it's not
considered deprecated in the most recent versions, it's nonetheless not best practice to use it. When <code>var</code> does appear, it is interpreted
as a synonym for <code>public</code> and treated as such. Therefore <code>public</code> should be used instead.</p>
<p>From the PHP Manual:</p>
<blockquote>
  <p>The PHP 4 method of declaring a variable with the var keyword is still supported for compatibility reasons (as a synonym for the public keyword).
  In PHP 5 before 5.1.3, its usage would generate an E_STRICT warning.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php
class Foo
{
    var $bar = 1;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
class Foo
{
    public $bar = 1;
}
</pre>Z
CODE_SMELL
°
	php:S1481ì
phpS1481(Unused local variables should be removed"MINOR*php2S1481:ª<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function numberOfMinutes($hours) {
  $seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function numberOfMinutes($hours) {
  return hours * 60;
}
</pre>Z
CODE_SMELL
¨
	php:S1523û
phpS15234Code should not be dynamically injected and executed"CRITICAL*php2S1523:¥<p>The <code>eval</code> function is a way to run arbitrary code at run-time. </p>
<p>According to the PHP documentation</p>
<blockquote>
  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have
  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it
  without properly validating it beforehand.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
eval($code_to_be_dynamically_executed)
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically
  Evaluated Code ('Eval Injection') </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting
  (XSS) </li>
</ul>ZVULNERABILITY
Ñ
	php:S1697ˆ
phpS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*php2S1697:ˆ<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($obj == null &amp;&amp; $obj-&gt;isOpen()) {
  echo "Object is open";
}

if ($obj != null || $obj-&gt;isOpen()) {
  echo "Object is not open";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($obj == null || $obj-&gt;isOpen()) {
  echo "Object is open";
}

if ($obj != null &amp;&amp; !$obj-&gt;isOpen()) {
  echo "Object is not open";
}
</pre>ZBUG
—
	php:S2050√
phpS2050"Alias functions should not be used"MINOR*php2S2050:Ò<p>Certain functions exist in PHP only as aliases of other functions. These aliases have been made available for backward compatibility, but should
really be removed from code. </p>
<p>This rule looks for uses of the following aliases:</p>
<table>
  <tbody>
    <tr>
      <th>Alias</th>
      <th>Replacement</th>
    </tr>
    <tr>
      <td><code>chop</code></td>
      <td><code>rtrim</code></td>
    </tr>
    <tr>
      <td><code>close</code></td>
      <td><code>closedir</code></td>
    </tr>
    <tr>
      <td><code>doubleval</code></td>
      <td><code>floatval</code></td>
    </tr>
    <tr>
      <td><code>fputs</code></td>
      <td><code>fwrite</code></td>
    </tr>
    <tr>
      <td><code>ini_alter</code></td>
      <td><code>ini_set</code></td>
    </tr>
    <tr>
      <td><code>is_double</code></td>
      <td><code>is_float</code></td>
    </tr>
    <tr>
      <td><code>is_integer</code></td>
      <td><code>is_int</code></td>
    </tr>
    <tr>
      <td><code>is_long</code></td>
      <td><code>is_int</code></td>
    </tr>
    <tr>
      <td><code>is_real</code></td>
      <td><code>is_float</code></td>
    </tr>
    <tr>
      <td><code>is_writeable</code></td>
      <td><code>is_writable</code></td>
    </tr>
    <tr>
      <td><code>join</code></td>
      <td><code>implode</code></td>
    </tr>
    <tr>
      <td><code>key_exists</code></td>
      <td><code>array_key_exists</code></td>
    </tr>
    <tr>
      <td><code>magic_quotes_runtime</code></td>
      <td><code>set_magic_quotes_runtime</code></td>
    </tr>
    <tr>
      <td><code>pos</code></td>
      <td><code>current</code></td>
    </tr>
    <tr>
      <td><code>show_source</code></td>
      <td><code>highlight_file</code></td>
    </tr>
    <tr>
      <td><code>sizeof</code></td>
      <td><code>count</code></td>
    </tr>
    <tr>
      <td><code>strchr</code></td>
      <td><code>strstr</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
$arr=array("apple", "pear","banana");
echo sizeof($arr);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$arr=array("apple", "pear","banana");
echo count($arr);
</pre>Z
CODE_SMELL
¨	
	php:S1172û	
phpS1172,Unused function parameters should be removed"MAJOR*php2S1172:¬<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething($a, $b) { // "$a" is unused
  return compute($b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething($b) {
  return compute($b);
}
</pre>
<h2>Exceptions</h2>
<p>Functions in classes that override a class or implement interfaces are ignored.</p>
<pre>
class C extends B {

  function doSomething($a, $b) {     // no issue reported on $b
    compute($a);
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
˜	
	php:S1451È	
phpS1451+Track lack of copyright and license headers"BLOCKER*php2S1451:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
£
	php:S1578ï
phpS15781File names should comply with a naming convention"MINOR*php2S1578:¥<p>Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule
raises an issue when the names of analyzed files don't match the provided regular expression.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/P4IyAQ">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/lQAl">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>
</ul>Z
CODE_SMELL
ú
	php:S1862é
phpS1862\Related "if/else if" statements and "cases" in a "switch" should not have the same condition"MAJOR*php2S1862:â<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse
there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice
that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($param == 1)
  openWindow();
else if ($param == 2)
  closeWindow();
else if ($param == 1)  // Noncompliant
  moveWindowToTheBackground();


switch($i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($param == 1)
  openWindow();
else if ($param == 2)
  closeWindow();
else if ($param == 3)
  moveWindowToTheBackground();

switch($i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
Ù
	php:S2038Ê
phpS2038&Colors should be defined in upper case"MINOR*php2S2038:ê<p>Shared coding conventions allow teams to collaborate effectively. Writing colors in upper case makes them stand out at such, thereby making the
code easier to read.</p>
<p>This rule checks that hexadecimal color definitions are written in upper case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$white = '#ffffff';  // Noncompliant
$dkgray = '#006400';
$aqua = '#00ffff';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$white = '#FFFFFF';  // Compliant
$dkgray = '#006400';
$aqua = '#00FFFF';  // Compliant
</pre>Z
CODE_SMELL
∂
	php:S2260®
phpS2260PHP parser failure"MAJOR*php2S2260:Ê<p>When the PHP parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
„
	php:S2830’
phpS28302Class constructors should not create other objects"MAJOR*php2S2830:Û<p>Dependency injection is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, into a
dependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies from its own
behavior, which allows program designs to be loosely coupled and to follow the dependency inversion and single responsibility principles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class SomeClass {

  public function __construct() {
    $this-&gt;object = new SomeOtherClass();  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class SomeClass {

  public function __construct(SomeOtherClass $object) {
    $this-&gt;object = $object;
  }
}
</pre>Z
CODE_SMELL
Ï	
	php:S2036ﬁ	
phpS20367Files that define symbols should not cause side-effects"MAJOR*php2S2036:˛<p>Files that define symbols such as classes and variables may be included into many files. Simply performing that inclusion should have no effect on
those files other than declaring new symbols. For instance, a file containing a class definition should not also contain side-effects such as
<code>print</code> statements that will be evaluated automatically on inclusion. Logic should be segregated into symbol-only files and
side-effect-only files. The type of operation which is not allowed in a symbol-definition file includes but is not limited to: </p>
<ul>
  <li> generating output </li>
  <li> modifying <code>ini</code> settings </li>
  <li> emitting errors or exceptions </li>
  <li> modifying global or static variables </li>
  <li> reading/writing files </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php

print "Include worked!";

class foo {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php

class foo {

  public function log() {
    print "Include worked!";
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://www.php-fig.org/psr/psr-1/">PHP-FIG Basic Coding Standard PSR1</a>, 2.3 - Side Effects </li>
</ul>ZBUG
π
	php:S2037´
phpS20373Static members should be referenced with "static::""MINOR*php2S2037:œ<p>References in a class to static class members (fields or methods) can be made using either <code>self::$var</code> or <code>static::$var</code>
(introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of <code>self::</code> references the
original definition of the member, i.e. the superclass version, rather than any override at the subclass level. <code>static::</code>, on the other
hand, references the class that was called at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php

class Toy {

    public static function status() {
        self::getStatus();  // Noncompliant; will always print "Sticks are fun!" even when called from a subclass which overrides this method;
    }

    protected static function getStatus() {
        echo "Sticks are fun!";
    }
}

class Ball extends Toy {

    protected static function getStatus() {  // Doesn't actually get called
        echo "Balls are fun!";
    }
}

$myBall = new Ball();
$myBall::status();  // Prints "Sticks are fun!"
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php

class Toy {

    public static function status() {
        static::getStatus();  // Compliant
    }

    protected static function getStatus() {
        echo "Sticks are fun!";
    }
}

class Ball extends Toy {

    protected static function getStatus() {
        echo "Balls are fun!";
    }
}

$myBall = new Ball();
$myBall::status();  // Prints "Balls are fun!"
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when <code>self</code> is used on a constant field, a private field or a private method.</p>
<pre>
class A
{
    private static $somevar = "hello";
    const CONSTANT = 42;

    private static function foo()
    {
        $var = self::$somevar . self::CONSTANT;  // Should be OK
        self::foo();                               // Should be OK
    }
}
</pre>ZBUG
 
	php:S1067º
phpS1067%Expressions should not be too complex"CRITICAL*php2S1067:‰<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }
</pre>Z
CODE_SMELL
ß
	php:S1068ô
phpS1068)Unused "private" fields should be removed"MAJOR*php2S1068:¿<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private $foo = 4;                       //foo is unused

  public function compute($a) {
    return $a * 4;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  public function compute($a) {
    return $a * 4;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
˛
	php:S1066
phpS1066,Collapsible "if" statements should be merged"MAJOR*php2S1066:î<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2) {
  ...
}
</pre>Z
CODE_SMELL
˜
	php:S1106È
phpS1106@An open curly brace should be located at the beginning of a line"MINOR*php2S1106:˘<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function myMethod() {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  //Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function myMethod()
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>Z
CODE_SMELL
Ò
	php:S1109„
phpS1109@A close curly brace should be located at the beginning of a line"MINOR*php2S1109:Û<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
Å	
	php:S1185Û
phpS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*php2S1185:Ó<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);  // Noncompliant
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Child extends Parent {

  public function func($n,$m) {
    parent::func($n$m);
    // do additional things...
  }
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>
<p>or</p>
<pre>
class Child extends Parent {
  // function eliminated
}

class Parent {
  public function func($n, $m) {
    // do something
  }
}
</pre>Z
CODE_SMELL
Â
	php:S1105◊
phpS1105:An open curly brace should be located at the end of a line"MINOR*php2S1105:Ì<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
¶
	php:S2005ò
phpS2005*String literals should not be concatenated"MINOR*php2S2005:æ<p>There is no reason to concatenate literal strings. Doing so is an exercise in reducing code readability. Instead, the strings should be
combined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$msg = "Hello " . "${name}" . "!";  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
$msg = "Hello ${name}!";
</pre>Z
CODE_SMELL
Í
	php:S3336‹
phpS3336-"session.use_trans_sid" should not be enabled"BLOCKER*php2S3336:˙<p>PHP's <code>session.use_trans_sid</code> automatically appends the user's session id to urls when cookies are disabled. On the face of it, this
seems like a nice way to let uncookie-able users use your site anyway. In reality, it makes those users vulnerable to having their sessions hijacked
by anyone who might:</p>
<ul>
  <li> see the URL over the user's shoulder </li>
  <li> be sent the URL by the user </li>
  <li> retrieve the URL from browser history </li>
  <li> ... </li>
</ul>
<p>For that reason, it's better to practice a little "tough love" with your users and force them to turn on cookies.</p>
<p>Since <code>session.use_trans_sid</code> is off by default, this rule raises an issue when it is explicitly enabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
session.use_trans_sid=1  ; Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
»
	php:S3337∫
phpS3337"enable_dl" should be disabled"BLOCKER*php2S3337:Á<p><code>enable_dl</code> is on by default and allows <code>open_basedir</code> restrictions, which limit the files a script can access, to be
ignored. For that reason, it's a dangerous option and should be explicitly turned off.</p>
<p>This rule raises an issue when <code>enable_dl</code> is not explicitly set to 0 in <em>php.ini</em>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
enable_dl=1  ; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini
enable_dl=0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/23.html">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/36.html">MITRE, CWE-36</a> - Absolute Path Traversal </li>
</ul>ZVULNERABILITY
Û
	php:S1311Â
phpS1311!Classes should not be too complex"CRITICAL*php2S1311:ë<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
Ω
	php:S2003Ø
phpS2003S"require_once" and "include_once" should be used instead of "require" and "include""MINOR*php2S2003:≥<p>At root, <code>require</code>, <code>require_once</code>, <code>include</code>, and <code>include_once</code> all perform the same task of
including one file in another. However, the way they perform that task differs, and they should not be used interchangeably.</p>
<p><code>require</code> includes a file but generates a fatal error if an error occurs in the process.</p>
<p><code>include</code> also includes a file, but generates only a warning if an error occurs.</p>
<p>Predictably, the difference between <code>require</code> and <code>require_once</code> is the same as the difference between <code>include</code>
and <code>include_once</code> - the "_once" versions ensure that the specified file is only included once. </p>
<p>Because including the same file multiple times could have unpredictable results, the "once" versions are preferred.</p>
<p>Because <code>include_once</code> generates only warnings, it should be used only when the file is being included conditionally, i.e. when all
possible error conditions have been checked beforehand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
include 'code.php';  //Noncompliant; not a "_once" usage and not conditional
include $user.'_history.php'; // Noncompliant
require 'more_code.php';  // Noncompliant; not a "_once" usage
</pre>
<h2>Compliant Solution</h2>
<pre>
require_once 'code.php';
if (is_member($user)) {
  include_once $user.'_history.php';
}
require_once 'more_code.php';
</pre>ZBUG
«

	php:S3334π

phpS3334<"allow_url_fopen" and "allow_url_include" should be disabled"BLOCKER*php2S3334:»	<p><code>allow_url_fopen</code> and <code>allow_url_include</code> allow code to be read into a script from URL's. The ability to suck in executable
code from outside your site, coupled with imperfect input cleansing could lay your site bare to attackers. Even if your input filtering is perfect
today, are you prepared to bet your site that it will always be perfect in the future?</p>
<p>This rule raises an issue when either property is explicitly enabled in <em>php.ini</em> and when <code>allow_url_fopen</code>, which defaults to
enabled, is not explicitly disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini  Noncompliant; allow_url_fopen not explicitly disabled
allow_url_include=1  ; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini
allow_url_fopen=0
allow_url_include=0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/829.html">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZVULNERABILITY
›
	php:S2004œ
phpS2004)Functions should not be nested too deeply"CRITICAL*php2S2004:Û<p>Nesting functions can quickly turn your code into "spaghetti code". Such code is hard to read, refactor and therefore to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
function f () {
  function f_inner () {
    function f_inner_inner() {
      function f_inner_inner_inner() { // Noncompliant
      }
    }
  }
}
</pre>Z
CODE_SMELL
É	
	php:S3332ı
phpS33323Session-management cookies should not be persistent"CRITICAL*php2S3332:å<p>Cookies without fixed lifetimes or expiration dates are known as non-persistent, or "session" cookies, meaning they last only as long as the
browser session, and poof away when the browser closes. Cookies with expiration dates, "persistent" cookies, are stored/persisted until those
dates.</p>
<p>Non-persistent cookies should be used for the management of logged-in sessions on web sites. To make a cookie non-persistent, simply omit the
<code>expires</code> attribute.</p>
<p>This rule raises an issue when <code>expires</code> is set for a session cookie, either programmatically or via configuration, such as
<code>session.cookie_lifetime</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Expire_and_Max-Age_Attributes">OWASP, Session Management Cheat
  Sheet</a> - Expire and Max-Age Attributes </li>
</ul>ZVULNERABILITY
ˆ
	php:S3335Ë
phpS3335&"cgi.force_redirect" should be enabled"MAJOR*php2S3335:è<p>The <code>cgi.force_redirect</code> <em>php.ini</em> configuration is on by default, and it prevents unauthenticated access to scripts when PHP is
running as a CGI. Unfortunately, it must be disabled on IIS, OmniHTTPD and Xitami, but in all other cases it should be on.</p>
<p>This rule raises an issue when when <code>cgi.force_redirect</code> is explicitly disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
cgi.force_redirect=0  ; Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/305">MITRE, CWE-305</a> - Authentication Bypass by Primary Weakness </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security
  Misconfiguration </li>
</ul>ZVULNERABILITY
°
	php:S1793ì
phpS1793>"elseif" keyword should be used in place of "else if" keywords"MINOR*php2S1793:•<p>According to the PSR2 coding standard:</p>
<blockquote>
  <p>The keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control keywords look like single words.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
if ($expr1) {
  ...
} else if ($expr2) {
  ...
} else {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
if ($expr1) {
  ...
} elseif ($expr2) {
  ...
} else {...}
</pre>Z
CODE_SMELL
Í
	php:S2001‹
phpS2001'Deprecated functions should not be used"MAJOR*php2S2001:Ö<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from
the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no
use of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>
<p>The following functions were deprecated in PHP 5:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>call_user_method()</code></td>
      <td><code>call_user_func()</code></td>
    </tr>
    <tr>
      <td><code>call_user_method_array()</code></td>
      <td><code>call_user_func_array()</code></td>
    </tr>
    <tr>
      <td><code>define_syslog_variables()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>dl()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>ereg()</code></td>
      <td><code>preg_match()</code></td>
    </tr>
    <tr>
      <td><code>ereg_replace()</code></td>
      <td><code>preg_replace()</code> (note that this is deprecated in PHP 5.5)</td>
    </tr>
    <tr>
      <td><code>eregi()</code></td>
      <td><code>preg_match()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>eregi_replace()</code></td>
      <td><code>preg_replace()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>set_magic_quotes_runtime()</code> and its alias, <code>magic_quotes_runtime()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>session_register()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_unregister()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>session_is_registered()</code></td>
      <td><code>$_SESSION</code> superglobal</td>
    </tr>
    <tr>
      <td><code>set_socket_blocking()</code></td>
      <td><code>stream_set_blocking()</code></td>
    </tr>
    <tr>
      <td><code>split()</code></td>
      <td><code>preg_split()</code></td>
    </tr>
    <tr>
      <td><code>spliti()</code></td>
      <td><code>preg_split()</code> with 'i' modifier</td>
    </tr>
    <tr>
      <td><code>sql_regcase()</code></td>
      <td></td>
    </tr>
    <tr>
      <td><code>mysql_db_query()</code></td>
      <td><code>mysql_select_db()</code> and <code>mysql_query()</code></td>
    </tr>
    <tr>
      <td><code>mysql_escape_string()</code></td>
      <td><code>mysql_real_escape_string()</code></td>
    </tr>
    <tr>
      <td>Passing locale category names as strings</td>
      <td>Use the LC_* family of constants</td>
    </tr>
  </tbody>
</table>
<p>The following functions were deprecated in PHP 7:</p>
<table>
  <tbody>
    <tr>
      <th>Deprecated</th>
      <th>Use Instead</th>
    </tr>
    <tr>
      <td><code>__autoload()</code></td>
      <td><code>spl_autoload_register()</code></td>
    </tr>
    <tr>
      <td><code>create_function()</code></td>
      <td>anonymous function</td>
    </tr>
    <tr>
      <td><code>parse_str()</code> without second argument</td>
      <td><code>parse_str()</code> with second argument</td>
    </tr>
    <tr>
      <td><code>gmp_random()</code></td>
      <td><code>gmp_random_bits()</code> or <code>gmp_random_range()</code></td>
    </tr>
    <tr>
      <td><code>each()</code></td>
      <td><code>foreach</code></td>
    </tr>
    <tr>
      <td><code>assert()</code> with string argument</td>
      <td> </td>
    </tr>
  </tbody>
</table>Z
CODE_SMELL
È
	php:S2002€
phpS2002Errors should not be silenced"MINOR*php2S2002:ï<p>Just as pain is your body's way of telling you something is wrong, errors are PHP's way of telling you there's something you need to fix. Neither
pain, nor PHP errors should be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@doSomethingDangerous($password);  // Noncompliant; '@' silences errors from function call
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomethingDangerous($password);
</pre>ZBUG
≈
	php:S3333∑
phpS3333'"open_basedir" should limit file access"BLOCKER*php2S3333:€<p>The <code>open_basedir</code> configuration in <em>php.ini</em> limits the files the script can access using, for example, <code>include</code> and
<code>fopen()</code>. Leave it out, and there is no default limit, meaning that any file can be accessed. Include it, and PHP will refuse to access
files outside the allowed path.</p>
<p><code>open_basedir</code> should be configured with a directory, which will then be accessible recursively. However, the use of <code>.</code>
(current directory) as an <code>open_basedir</code> value should be avoided since it's resolved dynamically during script execution, so a
<code>chdir('/')</code> command could lay the whole server open to the script.</p>
<p>This is not a fool-proof configuration; it can be reset or overridden at the script level. But its use should be seen as a minimum due diligence
step. This rule raises an issue when <code>open_basedir</code> is not present in <em>php.ini</em>, and when <code>open_basedir</code> contains root,
or the current directory (<code>.</code>) symbol.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini try 1
; open_basedir="${USER}/scripts/data"  Noncompliant; commented out

; php.ini try 2
open_basedir="/:${USER}/scripts/data"  ; Noncompliant; root directory in the list
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini try 1
open_basedir="${USER}/scripts/data"
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/23.html">MITRE, CWE-23</a> - Relative Path Traversal </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/36.html">MITRE, CWE-36</a> - Absolute Path Traversal </li>
</ul>ZVULNERABILITY
ó
php:S131ä
phpS1312Statements should end with a "case default" clause"CRITICAL*php2S131:ß<p>The requirement for a final <code>case default</code> clause is defensive programming. The clause should either take appropriate action, or contain
a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a default case
should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($param) {  //missing default clause
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
}

switch ($param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($param) {
  case 0:
    do_something();
    break;
  case 1:
    do_something_else();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
„
php:S134÷
phpS134`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"CRITICAL*php2S134:≈<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    ...
    if (condition2) {                // Compliant - depth = 2
      ...
      for($ = 0; $i &lt; 10; $i++) {  // Compliant - depth = 3, not exceeding the limit
        ...
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            ...
          }
          return;
        }
      }
    }
  }
</pre>Z
CODE_SMELL
‹
	php:S2000Œ
phpS20002Files should not contain characters before "<?php""MINOR*php2S2000:Û<p>Having characters before <code>&lt;?php</code> can cause "Cannot modify header information" errors and similar problems with Ajax requests.</p>
<h2>Noncompliant Code Example</h2>
<pre>
test&lt;?php  //Noncompliant
// ...
</pre>
<p>and</p>
<pre>
// Noncompliant; newline before opening tag
&lt;?php
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
// ...
</pre>ZBUG
ê
	php:S3338Ç
phpS3338!"file_uploads" should be disabled"BLOCKER*php2S3338:¨<p><code>file_uploads</code> is an on-by-default PHP configuration that allows files to be uploaded to your site. Since accepting <del>candy</del>
files from strangers is inherently dangerous, this feature should be disabled unless it is absolutely necessary for your site.</p>
<p>This rule raises an issue when <code>file_uploads</code> is not explicitly disabled.</p>
<h2>Noncompliant Code Example</h2>
<pre>
; php.ini
file_uploads=1  ; Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
; php.ini
file_uploads=0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/434.html">MITRE, CWE-434</a> - Unrestricted Upload of File with Dangerous Type </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>ZVULNERABILITY
ø	
	php:S1799±	
phpS17998"exit(...)" and "die(...)" statements should not be used"BLOCKER*php2S1799:Œ<p>The <code>exit(...)</code> and <code>die(...)</code> statements should absolutely not be used in Web PHP pages as this might lead to a very bad
user experience. In such case, the end user might have the feeling that the web site is down or has encountered a fatal error. </p>
<p>But of course PHP can also be used to develop command line application and in such case use of <code>exit(...)</code> or <code>die(...)</code>
statement can be justified but must remain limited and not spread all over the application. We expect exceptions to be used to handle errors and those
exceptions should be caught just before leaving the application to specify the exit code with help of <code>exit(...)</code> or <code>die(...)</code>
statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
    public function bar($param)  {
        if ($param === 42) {
            exit(23);
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
    public function bar($param)  {
        if ($param === 42) {
            throw new Exception('Value 42 is not expected.');
        }
    }
}
</pre>ZBUG
º

	php:S2007Æ

phpS2007@Functions and variables should not be defined outside of classes"BLOCKER*php2S2007:º	<p>Defining and using global variables and global functions, when the convention dictates OOP can be confusing and difficult to use properly for
multiple reasons:</p>
<ul>
  <li> You run the risk of name clashes. </li>
  <li> Global functions must be stateless, or they can cause difficult-to-track bugs. </li>
  <li> Global variables can be updated from anywhere and may no longer hold the value you expect. </li>
  <li> It is difficult to properly test classes that use global functions. </li>
</ul>
<p>Instead of being declared globally, such variables and functions should be moved into a class, potentially marked <code>static</code>, so they can
be used without a class instance. </p>
<p>This rule checks that only object-oriented programming is used and that no functions or procedures are declared outside of a class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;?php

$name = "Bob"; // Noncompliant

function doSomething($arg) {   // Noncompliant
  //...
}

class MyClass {
    //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?php
class MyClass {

  public static $name = "Bob"; // Compliant

  public static function doSomething($arg) {              // Compliant
    //...
  }
  //...
}
</pre>Z
CODE_SMELL
Ä
	php:S2918Ú
phpS2918/Configuration should not be changed dynamically"MAJOR*php2S2918:ì<p><code>ini_set</code> changes the value of the given configuration option for the duration of the script's execution. While there may be a reason to
do this, you should make sure that it's a very good reason indeed, because this is the sort of "magic" change which can cause severe teeth-gnashing
and hair tearing when the script needs to be debugged. </p>
<p>For instance, if the user explicitly turns logging on for a script, but then the script itself uses <code>ini_set('display_errors', 0);</code> to
turn logging back off, it is likely that every other aspect of the environment will be examined before, in desperation, the script is read to figure
out where the logging is going.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ini_set('display_errors', 0);  // Noncompliant
</pre>Z
CODE_SMELL
∫
php:S125≠
phpS125.Sections of code should not be "commented out""MAJOR*php2S125:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
∏
php:S126´
phpS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*php2S126:¿<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  do_something();
} else if (condition2) {
  do_something_else();
} else {
  throw new InvalidArgumentException('message');
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
œ
php:S127¬
phpS127."for" loop stop conditions should be invariant"MAJOR*php2S127:Ê
<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
  if(condition) {
    $i = 20;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for ($i = 0; $i &lt; 10; $i++) {
  echo $i;
}

</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the
  loop. </li>
  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>
</ul>Z
CODE_SMELL
Ë
	php:S1200⁄
phpS1200YClasses should not be coupled to too many other classes (Single Responsibility Principle)"MAJOR*php2S1200:—
<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  class Foo {            // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
    /**
     * @var T1
     */
    public $a1;          // Foo is coupled to T1
    /**
     * @var T2
     */
    protected $a2;       // Foo is coupled to T2
    /**
     * @var T3
     */
    private $a3;         // Foo is coupled to T3

    /**
     * @param T5
     * @param T6
     *
     * @return T4
     */
    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6
      $result = new T7();     // Foo is coupled to T7
      return $result;
  }
}
</pre>Z
CODE_SMELL

php:S128„
phpS128?Switch cases should end with an unconditional "break" statement"BLOCKER*php2S128:Ù<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    do_something();
  default:
    do_something_else();
   break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch ($myVariable) {
  case 1:
    foo();
    break;
  case 2:
    do_something();
    break;
  default:
    do_something_else();
   break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in following cases:</p>
<pre>
switch ($myVariable) {
  case 0:                  // Empty case used to specify the same behavior for a group of cases.
  case 1:
    do_something();
    break;
  case 2:                  // Use of continue statement
    continue;
  case 3:                  // Case includes a jump statement (exit, return, break &amp;etc)
    exit(0);
  case 4:
    echo 'Second case, which falls through';
    // no break        &lt;- comment is used when fall-through is intentional in a non-empty case body
  default:                 // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
Ï
	php:S2014ﬁ
phpS2014."$this" should not be used in a static context"BLOCKER*php2S2014:Ö<p><code>$this</code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this</code>
is not available to them. Using <code>$this</code> in a static context will result in a fatal error at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Clazz {
  $name=NULL;  // instance variable

  public static function foo(){
    if ($this-&gt;name != NULL) {
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Clazz {
  $name=NULL;  // instance variable

  public static function foo($nameParam){
    if ($nameParam != NULL) {
      // ...
    }
  }
}
</pre>ZBUG
£
	php:S1605ï
phpS1605P"__construct" functions should not make PHP 4-style calls to parent constructors"MAJOR*php2S1605:ï<p>In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with
the PHP5 <code>__construct</code> name, nested calls to parent constructors should also use the new <code>__constructor</code> name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo extends Bar {
  function __construct() {
    parent::Bar();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo extends Bar {
  function __construct() {
    parent::__construct();
  }
}
</pre>Z
CODE_SMELL
™
	php:S1848ú
phpS1848JObjects should not be created to be dropped immediately without being used"MAJOR*php2S1848:©<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and
called directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ($x &lt; 0) {
  new foo;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
$var = NULL;
if ($x &lt; 0) {
  $var = new foo;
}
</pre>ZBUG
°
	php:S2010ì
phpS2010"&&" and "||" should be used"MINOR*php2S2010:«<p>PHP has two sets of logical operators: <code>&amp;&amp;</code> / <code>||</code>, and <code>and</code> / <code>or</code>. The difference between
the sets is precedence. Because <code>and</code> / <code>or</code> have a lower precedence than almost any other operator, using them instead of
<code>&amp;&amp;</code> / <code>||</code> may not have the result you expect.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$have_time = true;
$have_money = false;
$take_vacation = $have_time and $have_money;  // Noncompliant. $take_vacation == true.
</pre>
<h2>Compliant Solution</h2>
<pre>
$have_time = true;
$have_money = false;
$take_vacation = $have_time &amp;&amp; $have_money;  // $take_vacation == false.
</pre>Z
CODE_SMELL
›
	php:S2011œ
phpS2011"global" should not be used"CRITICAL*php2S2011:Å<p>Global variables are a useful construct, but they should not be abused. Functions can access the global scope either through the
<code>global</code> keyword or though the <code>$GLOBALS</code> array, but these practices considerably reduce the function's readability and
reusability. Instead, the global variable should be passed as a parameter to the function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$myGlobalVariable;

function foo()
{
  global $myGlobalVariable; // Noncompliant
  $GLOBALS['myGlobalVariable']; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo($myStateVariable)
{
  // ...
}
</pre>Z
CODE_SMELL
˚
	php:S1448Ì
phpS1448(Classes should not have too many methods"MAJOR*php2S1448:ï<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>Z
CODE_SMELL
Ã
	php:S1600æ
phpS16002Deprecated predefined variables should not be used"MAJOR*php2S1600:‹<p>The following predefined variables are deprecated and should be replaced by the new versions:</p>
<table>
  <tbody>
    <tr>
      <th>Replace</th>
      <th>With</th>
    </tr>
    <tr>
      <td>$HTTP_SERVER_VARS</td>
      <td>$_SERVER</td>
    </tr>
    <tr>
      <td>$HTTP_GET_VARS</td>
      <td>$_GET</td>
    </tr>
    <tr>
      <td>$HTTP_POST_VARS</td>
      <td>$_POST</td>
    </tr>
    <tr>
      <td>$HTTP_POST_FILES</td>
      <td>$_FILES</td>
    </tr>
    <tr>
      <td>$HTTP_SESSION_VARS</td>
      <td>$_SESSION</td>
    </tr>
    <tr>
      <td>$HTTP_ENV_VARS</td>
      <td>$_ENV</td>
    </tr>
    <tr>
      <td>$HTTP_COOKIE_VARS</td>
      <td>$_COOKIE</td>
    </tr>
    <tr>
      <td>$php_errormsg</td>
      <td>error_get_last()</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
echo 'Name parameter value: ' . $HTTP_GET_VARS["name"];
</pre>
<h2>Compliant Solution</h2>
<pre>
echo 'Name parameter value: ' . $_GET["name"];
</pre>Z
CODE_SMELL
ƒ
	php:S1603∂
phpS16031PHP 4 constructor declarations should not be used"MAJOR*php2S1603:’<p>In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and
the "__construct" method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named "__construct"
as the class constructor. </p>
<p>This rule rule raises an issue for each method with the same name as the enclosing class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  function Foo(){...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  function __construct(){...}
}
</pre>Z
CODE_SMELL
§
php:S139ó
phpS139:Comments should not be located at the end of lines of code"MINOR*php2S139:Ø<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$a = $b + $c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
$a = $b + $c;
</pre>Z
CODE_SMELL
–
csharpsquid:S2223∫
csharpsquidS22230Non-constant static fields should not be visible"CRITICAL*cs:◊<p>A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads
needs synchronization with <code>lock</code>s. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best
suited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or
converted to constants.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Math
{
  public static double Pi = 3.14;  // Noncompliant
}
</pre>
<p>or</p>
<pre>
public class Shape
{
  public static Shape Empty = new EmptyShape();  // Noncompliant

  private class EmptyShape : Shape
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Math
{
  public const double Pi = 3.14;
}
</pre>
<p>or</p>
<pre>
public class Shape
{
  public static readonly Shape Empty = new EmptyShape();

  private class EmptyShape : Shape
  {
  }
}
</pre>Z
CODE_SMELL
ˇ
csharpsquid:S2225È
csharpsquidS2225*"ToString()" method should not return null"MAJOR*cs:ñ<p>Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit
contract.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public override string ToString ()
{
  if (this.collection.Count == 0)
  {
    return null; // Noncompliant
  }
  else
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override string ToString ()
{
  if (this.collection.Count == 0)
  {
    return string.Empty;
  }
  else
  {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
</ul>ZBUG
£
csharpsquid:S2346ç
csharpsquidS2346<Flags enumerations zero-value members should be named "None""CRITICAL*cs:û<p>Consisitent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other
state, since there is no way to check that the bit <code>0</code> is set.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Flags]
enum FruitType
{
    Void = 0,        // Non-Compliant
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Flags]
enum FruitType
{
    None = 0,        // Compliant
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
</pre>Z
CODE_SMELL
Ó
csharpsquid:S1134ÿ
csharpsquidS1134Track uses of "FIXME" tags"MAJOR*cs:é<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private int Divide(int numerator, int denominator)
{
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
è
csharpsquid:S1135˘
csharpsquidS1135Track uses of "TODO" tags"INFO*cs:±<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
Ÿ
csharpsquid:S2344√
csharpsquidS2344AEnumeration type names should not have "Flags" or "Enum" suffixes"MINOR*cs:“<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum FooFlags // Noncompliant
{
    Foo = 1
    Bar = 2
    Baz = 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Foo
{
    Foo = 1
    Bar = 2
    Baz = 4
}
</pre>Z
CODE_SMELL
ı
csharpsquid:S2345ﬂ
csharpsquidS2345AFlags enumerations should explicitly initialize all their members"MINOR*cs:ı
<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to
0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or
operator in a useful way.</p>
<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Flags]
enum FruitType    // Noncompliant
{
  None,
  Banana,
  Orange,
  Strawberry
}
class Program
{
    static void Main()
    {
        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;
        // Will display only Strawberry!
        Console.WriteLine(bananaAndStrawberry.ToString());
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Flags]
enum FruitType
{
  None = 0,
  Banana = 1,
  Orange = 2,
  Strawberry = 4
}
class Program
{
    static void Main()
    {
        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;
        // Will display Banana and Strawberry, as expected.
        Console.WriteLine(bananaAndStrawberry.ToString());
    }
}
</pre>
<h2>Exceptions</h2>
<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three
members of the enumeration is not initialized.</p>ZBUG
ø

csharpsquid:S2342©

csharpsquidS23428Enumeration types should comply with a naming convention"MINOR*cs:¡	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular
expression.</p>
<p>The default configuration is the one recommended by Microsoft:</p>
<ul>
  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>
  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>
  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>
  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>
<pre>
public enum foo // Noncompliant
{
    FooValue = 0
}
</pre>
<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>
<pre>
[Flags]
public enum Option // Noncompliant
{
    None = 0,
    Option1 = 1,
    Option2 = 2
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Foo
{
    FooValue = 0
}
</pre>
<pre>
[Flags]
public enum Options
{
    None = 0,
    Option1 = 1,
    Option2 = 2
}
</pre>Z
CODE_SMELL
í

csharpsquid:S2583¸	
csharpsquidS25839Expressions should not unconditionally evaluate to "true""MINOR*cs:ö	<p>If a boolean expression cannot evaluate to anything but <code>true</code>, this expression is completely redundant. From time to time, such useless
expression can be used on purpose to increase the readability of the code. But such expression deserves to be carefully reviewed to make sure that was
the initial programmer's intent.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp;&amp; b)
{
  if(a)   //a is always true
  {
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
ª
csharpsquid:S1940•
csharpsquidS1940%Boolean checks should not be inverted"MINOR*cs:–<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
bool b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
bool b = (i &gt;= 10);
</pre>Z
CODE_SMELL
î
csharpsquid:S2228˛
csharpsquidS2228"Console logging should not be used"MINOR*cs:©<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you
run the risk of inadvertently exposing sensitive information.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething ()
{
  // ...
  Console.WriteLine ("so far, so good..."); // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure
  </li>
</ul>ZVULNERABILITY
≥
csharpsquid:S2357ù
csharpsquidS2357Fields should be private"MAJOR*cs:’<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and
validation cannot be added later on without breaking backward compatiblity. Instead, developers should encapsulate their fields into properties.
Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public int MagicNumber = 42;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public int MagicNumber
  {
    get { return 42; }
  }
}
</pre>
<p>or </p>
<pre>
public class Foo
{
  private int MagicNumber = 42;
}
</pre>
<h2>Exceptions</h2>
<p><code>struct</code>s are ignored, as are <code>static</code> and <code>const</code> fields in classes. </p>
<p>Further, an issue is only raised when the real accessibility is <code>public</code>, taking into account the class accessibility.</p>Z
CODE_SMELL
õ
csharpsquid:S3447Ö
csharpsquidS3447<"[Optional]" should not be used on "ref" or "out" parameters"CRITICAL*cs:ñ
<p>The use of <code>ref</code> or <code>out</code> in combination with <code>[Optional]</code> is both confusing and contradictory.
<code>[Optional]</code> indicates that the parameter doesn't have to be provided, while <code>out</code> and <code>ref</code> mean that the parameter
will be used to return data to the caller (<code>ref</code> additionally indicates that the parameter may also be used to pass data into the
method).</p>
<p>Thus, making it <code>[Optional]</code> to provide the parameter in which you will be passing back the method results doesn't make sense. In fact,
the compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the <code>[Optional]</code> parameter has been
omitted, not the source of the problem, the method declaration. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    public void DoStuff([Optional] ref int i) // Noncompliant
    {
        Console.WriteLine(i);
    }

    public static void Main()
    {
        new MyClass().DoStuff(); // This doesn't compile, CS7036 shows
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public void DoStuff(ref int i)
  {
    Console.WriteLine(i);
  }

  public static void Main()
  {
    var i = 42;
    new MyClass().DoStuff(ref i);
  }
}
</pre>Z
CODE_SMELL
Á
csharpsquid:S1145—
csharpsquidS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*cs:‚<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true)
{
  DoSomething();
}
...
if (false)
{
  DoSomethingElse();
}

if (2 &lt; 3 ) { ... }  // Noncompliant; always false

int i = 0;
int j = 0;
// ...
j = Foo();

if (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization

bool b = true;
//...
if (b || !b) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
DoSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS2583'>S2583</a> instead.</p>ZBUG
„
csharpsquid:S2234Õ
csharpsquidS22340Parameters should be passed in the correct order"MAJOR*cs:Ù<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when
the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead
to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public double Divide(int divisor, int dividend)
{
  return divisor/dividend;
}

public void DoTheThing()
{
  int divisor = 15;
  int dividend = 5;

  double result = Divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public double Divide(int divisor, int dividend)
{
  return divisor/dividend;
}

public void DoTheThing()
{
  int divisor = 15;
  int dividend = 5;

  double result = Divide(divisor, dividend);
  //...
}
</pre>ZBUG
·
csharpsquid:S3444À
csharpsquidS3444PInterfaces should not simply inherit from base interfaces with colliding members"MINOR*cs:À<p>When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived
interface will result in the compiler error <code>CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'</code>.</p>
<p>So instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the
ambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:</p>
<ul>
  <li> renaming the member in one of the base interfaces to remove the collision </li>
  <li> also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. </li>
</ul>
<p> </p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IBase1
{
  string SomeProperty { get; set; }
}

public interface IBase2
{
  string SomeProperty { get; set; }
}

public interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous
{
}

public class MyClass : IDerived
{
  // Implements both IBase1.SomeProperty and IBase2.SomeProperty
  public string SomeProperty { get; set; } = "Hello";

  public static void Main()
  {
    MyClass myClass = new MyClass();
    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IDerived : IBase1, IBase2
{
  new string SomeProperty { get; set; }
}

public class MyClass : IDerived
{
  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty
  public string SomeProperty { get; set; } = "Hello";

  public static void Main()
  {
    MyClass myClass = new MyClass();
    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected
    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes "Hello" as expected
  }
}
</pre>
<p>or</p>
<pre>
public interface IBase1
{
  string SomePropertyOne { get; set; }
}

public interface IBase2
{
  string SomePropertyTwo { get; set; }
}

public interface IDerived : IBase1, IBase2
{
}
</pre>Z
CODE_SMELL
º	
csharpsquid:S1144¶	
csharpsquidS11441Unused private types or members should be removed"MAJOR*cs:≈<p>Private types or members that are never executed or referenced are dead code: unnecessary, inoperative code that should be removed. Cleaning out
dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private void UnusedPrivateMethod() {...} // Noncompliant

  private class UnusedClass {...} // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private Foo()
  {
    UsedPrivateMethod();
  }

  private void UsedPrivateMethod()
  {
    var c = new UsedClass();
  }

  private class UsedClass {...}
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't raise any issue on:</p>
<ul>
  <li> Empty constructors </li>
  <li> Attributed members </li>
  <li> Empty serialization constructor on type with <code>System.SerializableAttribute</code> attribute. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>Z
CODE_SMELL
á
csharpsquid:S3442Ò
csharpsquidS34428"abstract" classes should not have "public" constructors"MAJOR*cs:â<p>Since <code>abstract</code> classes can't be instantiated, there's no point in their having <code>public</code> or <code>internal</code>
constructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a
constructor, but make that constructor <code>private</code> or <code>protected</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
abstract class Base
{
    public Base() // Noncompliant, should be private or protected
    {
      //...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class Base
{
    protected Base()
    {
      //...
    }
}
</pre>Z
CODE_SMELL
ò
csharpsquid:S3443Ç
csharpsquidS34436Type should not be examined on "System.Type" instances"MAJOR*cs:£<p>If you call <code>GetType()</code> on a <code>Type</code> variable, the return value will always be <code>typeof(System.Type)</code>. So there's no
real point in making that call. The same applies to passing a type argument to <code>IsInstanceOfType</code>. In both cases the results are entirely
predictable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var type = typeof(int);
var ttype = type.GetType(); //Noncompliant, always typeof(System.Type)

var s = "abc";

if (s.GetType().IsInstanceOfType(typeof(string))) //Noncompliant; false
{ /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
var s = "abc";

if (s.GetType().IsInstanceOfType("ssss"))
{ /* ... */ }
</pre>ZBUG
ñ
csharpsquid:S3445Ä
csharpsquidS3445,Exceptions should not be explicitly rethrown"MAJOR*cs:´<p>When rethrowing an exception, you should do it by simply calling <code>throw;</code> and not <code>throw exc;</code>, because the stack trace is
reset with the second syntax, making debugging a lot harder.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{}
catch(ExceptionType1 exc)
{
  Console.WriteLine(exc);
  throw exc; // Noncompliant; stacktrace is reset
}
catch (ExceptionType2 exc)
{
  throw new Exception("My custom message", exc);  // Compliant; stack trace preserved
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{}
catch(ExceptionType1 exc)
{
  Console.WriteLine(exc);
  throw;
}
catch (ExceptionType2 exc)
{
  throw new Exception("My custom message", exc);
}
</pre>ZBUG
»
csharpsquid:S1944≤
csharpsquidS1944&Inappropriate casts should not be made"CRITICAL*cs:‡<p>Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as <code>InvalidCastException</code>s. The compiler
will catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that
are cast to their underlying value types anyway.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{ /* ... */ }

public class Implementer : IMyInterface
{ /* ... */ }

public class MyClass
{ /* ... */ }

public static class Program
{
  public static void Main()
  {
    var myclass = new MyClass();
    var x = (IMyInterface) myclass; // Noncompliant, InvalidCastException is being thrown
    var b = myclass is IMyInterface; // Noncompliant, always false

    int? i = null;
    var ii = (int)i; // Noncompliant, InvalidOperationException is being thrown
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{ /* ... */ }

public class Implementer : IMyInterface
{ /* ... */ }

public class MyClass
{ /* ... */ }

public static class Program
{
  public static void Main()
  {
    var myclass = new MyClass();
    var x = myclass as IMyInterface; // Compliant, but will always be null
    var b = false;

    int? i = null;
    if (i.HasValue)
    {
      var ii = (int)i;
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issue is reported if the interface has no implementing class in the assembly.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 11.4 - A cast should not be performed between a pointer to object type and an integral type. </li>
  <li> MISRA C++:2008, 5-2-3 - Casts to a base class from a derived class should not be performed on polymorphic types. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/tgAV">CERT, EXP36-C.</a> - Do not cast pointers into more strictly aligned pointer
  types </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/588.html">MITRE, CWE-588</a> - Attempt to Access Child of a Non-structure Pointer </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/704.html">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>
</ul>ZBUG
Õ
csharpsquid:S3440∑
csharpsquidS3440OVariables should not be checked against the values they're about to be assigned"MINOR*cs:∏<p>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the
assignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != a)  // Noncompliant; why bother?
{
  x = a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a;
</pre>Z
CODE_SMELL
‰
csharpsquid:S3441Œ
csharpsquidS3441?Redundant property names should be omitted in anonymous classes"MINOR*cs:ﬂ<p>When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's
property name and the assignment operator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var X = 5;

var anon = new
{
  X = X, //Noncompliant, the new object would have the same property without the "X =" part.
  Y = "my string"
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var X = 5;

var anon = new
{
  X,
  Y = "my string"
};
</pre>Z
CODE_SMELL
ƒ
csharpsquid:S1939Æ
csharpsquidS1939(Inheritance list should not be redundant"MINOR*cs:÷<p>An inheritance list entry is redundant if:</p>
<ul>
  <li> It is <code>Object</code> - all classes extend <code>Object</code> implicitly. </li>
  <li> It is <code>int</code> for an <code>enum</code> </li>
  <li> It is a base class of another listed inheritance. </li>
</ul>
<p>Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass : Object  // Noncompliant

enum MyEnum : int  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass

enum MyEnum
</pre>Z
CODE_SMELL
ß
csharpsquid:S3449ë
csharpsquidS34494Right operands of shift operators should be integers"CRITICAL*cs:±<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an
<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is
turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,
then a <code>RuntimeBinderException</code> will be raised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
dynamic d = 5;
var x = d &gt;&gt; 5.4; // Noncompliant
x = d &gt;&gt; null; // Noncompliant
x &lt;&lt;= new object(); // Noncompliant
</pre>ZBUG
≈
csharpsquid:S3655Ø
csharpsquidS3655+Empty nullable value should not be accessed"MAJOR*cs:€<p>Nullable value types can hold either a value or <code>null</code>. The value held in the nullable type can be accessed with the <code>Value</code>
property, but <code>.Value</code> throws an <code>InvalidOperationException</code> when the value is <code>null</code>. To avoid the exception, a
nullable type should always be tested before <code>.Value</code> is accessed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int? nullable = null;
...
UseValue(nullable.Value); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int? nullable = null;
...
if (nullable.HasValue)
{
  UseValue(nullable.Value);
}
</pre>
<p>or</p>
<pre>
int? nullable = null;
...
if (nullable != null)
{
  UseValue(nullable.Value);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
</ul>ZBUG
“
csharpsquid:S2325º
csharpsquidS2325GMethods and properties that don't access instance data should be static"MINOR*cs:≈<p>Class methods and properties that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the
method. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Utilities
{
  public int MagicNum // Noncompliant
  {
    get
    {
      return 42;
    }
  }

  private static string magicWord = "please";
  public string MagicWord  // Noncompliant
  {
    get
    {
      return magicWord;
    }
    set
    {
      magicWord = value;
    }
  }

  public int Sum(int a, int b)  // Noncompliant
  {
    return a + b;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Utilities
{
  public static int MagicNum
  {
    get
    {
      return 42;
    }
  }

  private static string magicWord = "please";
  public static string MagicWord
  {
    get
    {
      return magicWord;
    }
    set
    {
      magicWord = value;
    }
  }

  public static int Sum(int a, int b)
  {
    return a + b;
  }
}
</pre>Z
CODE_SMELL
Æ
csharpsquid:S3776ò
csharpsquidS37766Cognitive Complexity of methods should not be too high"CRITICAL*cs:Ø<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
´
csharpsquid:S3897ï
csharpsquidS3897`Classes that provide "Equals(<T>)" or override "Equals(Object)" should implement "IEquatable<T>""MAJOR*cs:Ö
<p>The <code>IEquatable&lt;T&gt;</code> interface has only one method in it: <code>Equals(&lt;T&gt;)</code>. If you've already written
<code>Equals(T)</code>, there's no reason not to explicitly implement <code>IEquatable&lt;T&gt;</code>. Doing so expands the utility of your class by
allowing it to be used where an <code>IEquatable</code> is called for.</p>
<p>Similarly, having written <code>Equals(&lt;T&gt;)</code>, it's not that much further to go to write <code>Equals(Object)</code> and vice versa;
just a couple more lines brings a large dividend of functionality. So this rule raises an issue when <code>Equals(&lt;T&gt;)</code> is not accompanied
by <code>IEquatable</code> and <code>Equals(Object)</code>, and vice versa.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass  // Noncompliant
{
  public override bool Equals(object other)
  {
    //...
  }
}
</pre>
<pre>
class MyClass  // Noncompliant
{
  public bool Equals(MyClass other)
  {
    //...
  }
}
</pre>
<pre>
class MyClass : IEquatable&lt;T&gt;  // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass : IEquatable&lt;MyClass&gt;
{
  public override bool Equals(object other)
  {
    return Equals(other as MyClass);
  }

  public bool Equals(MyClass other)
  {
    //...
  }
}
</pre>Z
CODE_SMELL
∂
csharpsquid:S3898†
csharpsquidS3898,Value types should implement "IEquatable<T>""MAJOR*cs:ƒ<p>If you're using a <code>struct</code>, it is likely because you're interested in performance. But by failing to implement
<code>IEquatable&lt;T&gt;</code> you're loosing performance when comparisons are made because without <code>IEquatable&lt;T&gt;</code>, boxing and
reflection are used to make comparisons. </p>
<h2>Noncompliant Code Example</h2>
<pre>
struct MyStruct  // Noncompliant
{
  private int i;
  public int I
  {
    //...
  }
}
</pre>Z
CODE_SMELL
„
csharpsquid:S2201Õ
csharpsquidS2201SReturn values should not be ignored when function calls don't have any side effects"MAJOR*cs:—<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected.</p>
<p>This rule raises an issue when the results of the following methods are ignored:</p>
<ul>
  <li> LINQ method, </li>
  <li> <code>[Pure]</code> method, </li>
  <li> any method on <code>string</code>, <code>int</code>, ..., <code>System.Collections.Immutable.ImmutableArray&lt;T&gt;</code>,
  <code>ImmutableHashSet&lt;T&gt;</code>, ... </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i); // Noncompliant
"this string".Equals("other string"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var res = coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i);
var isEqual = "this string".Equals("other string");
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't report issues on method calls with <code>out</code> or <code>ref</code> arguments.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
í	
csharpsquid:S2688¸
csharpsquidS2688'"NaN" should not be used in comparisons"MAJOR*cs:¨<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want. </p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = double.NaN;

if (a == double.NaN) // Noncompliant; always false
{
  Console.WriteLine("a is not a number");  // this is dead code
}
if (a != double.NaN)  // Noncompliant; always true
{
  Console.WriteLine("a is not NaN"); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (double.IsNaN(a))
{
  console.log("a is not a number");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>
</ul>ZBUG
ì
csharpsquid:S3532˝
csharpsquidS3532)Empty "default" clauses should be removed"MINOR*cs:§<p>The <code>default</code> clause should take appropriate action. Having an empty <code>default</code> is a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum Fruit
{
  Apple,
  Orange,
  Banana
}

void PrintName(Fruit fruit)
{
  switch(fruit)
  {
    case Fruit.Apple:
      Console.WriteLine("apple");
      break;
    default:  //Noncompliant
      break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
enum Fruit
{
  Apple,
  Orange,
  Banana
}

void PrintName(Fruit fruit)
{
  switch(fruit)
  {
    case Fruit.Apple:
      Console.WriteLine("apple");
      break;
    default:
      throw new NotSupportedException();
  }
}
</pre>
<p>or</p>
<pre>
void PrintName(Fruit fruit)
{
  switch(fruit)
  {
    case Fruit.Apple:
      Console.WriteLine("apple");
      break;
  }
}
</pre>Z
CODE_SMELL
Ù
csharpsquid:S1117ﬁ
csharpsquidS1117.Local variables should not shadow class fields"MAJOR*cs:Ä<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the
variable is being used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
  public int myField;

  public void DoSomething()
  {
    int myField = 0;  // Noncompliant
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
≠	
csharpsquid:S1118ó	
csharpsquidS11183Utility classes should not have public constructors"MAJOR*cs:¥<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even <code>abstract</code> utility
classes, which can be extended, should not have <code>public</code> constructors.</p>
<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one
<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to
the class declaration to prevent subclassing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class StringUtils // Noncompliant
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static class StringUtils
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
<p>or</p>
<pre>
public class StringUtils
{
  protected StringUtils()
  {
  }
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>Z
CODE_SMELL
£
csharpsquid:S2328ç
csharpsquidS23281"GetHashCode" should not reference mutable fields"MINOR*cs:≥<p><code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>. If <code>GetHashCode</code> uses
non-<code>readonly</code> fields and those fields change after the object is stored, the object immediately becomes mis-filed in the
<code>Hashtable</code>. Any subsequent test to see if the object is in the <code>Hashtable</code> will return a false negative.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
  public int age;
  public string name;

  public override int GetHashCode()
  {
    int hash = 12;
    hash += this.age.GetHashCode(); // Noncompliant
    hash += this.name.GetHashCode(); // Noncompliant
    return hash;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
  public readonly DateTime birthday;
  public string name;

  public override int GetHashCode()
  {
    int hash = 12;
    hash += this.birthday.GetHashCode();
    return hash;
  }
</pre>ZBUG
—

csharpsquid:S2681ª

csharpsquidS26813Multiline blocks should be enclosed in curly braces"MAJOR*cs:ﬂ	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the
omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  FirstActionInBlock();
  SecondAction();  // Noncompliant; executed unconditionally
ThirdAction();

string str = null;
for (int i = 0; i &lt; array.Length; i++)
  str = array[i];
  DoTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
{
  FirstActionInBlock();
  SecondAction();
}
ThirdAction();

string str = null;
for (int i = 0; i &lt; array.Length; i++)
{
  str = array[i];
  DoTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>ZBUG
ê
csharpsquid:S1116˙
csharpsquidS1116"Empty statements should be removed"MINOR*cs:Ø<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething()
{
  ; // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse()
{
  Console.WriteLine("Hello, world!");;  // Noncompliant - double ;
  ...
  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to
  // have side-effects outside of the loop:
  for (int i = 0; i &lt; 3; Console.WriteLine(i), i++); // Noncompliant
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething()
{
}

void doSomethingElse()
{
  Console.WriteLine("Hello, world!");
  ...
  for (int i = 0; i &lt; 3; i++)
  {
    Console.WriteLine(i);
   }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>ZBUG
ÿ
csharpsquid:S1479¬
csharpsquidS1479;"switch" statements should not have too many "case" clauses"MAJOR*cs:◊<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>No issue is reported on <code>switch</code> statements that work on <code>enum</code>s.</p>Z
CODE_SMELL
´
csharpsquid:S2326ï
csharpsquidS2326(Unused type parameters should be removed"MAJOR*cs:Ω<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MoreMath&lt;T&gt;   // Noncompliant; &lt;T&gt; is ignored
{
  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored
  {
    return a + b;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MoreMath
{
  public int Add (int a, int b)
  {
    return a + b;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ï	
csharpsquid:S1125ˇ
csharpsquidS1125(Boolean literals should not be redundant"MINOR*cs:ß<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;

for (var x = 0; true; x++)
{
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;

for (var x = 0; ; x++)
{
 ...
}
</pre>Z
CODE_SMELL
Ç
csharpsquid:S1905Ï
csharpsquidS1905"Redundant casts should not be used"MINOR*cs:ö<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int Example(int i)
{
  return (int) (i + 42); // Noncompliant
}
public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
  return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int Example(int i)
{
  return i + 42;
}
public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
  return coll.Reverse();
}
</pre>Z
CODE_SMELL
ˆ
csharpsquid:S2696‡
csharpsquidS26964Instance members should not write to "static" fields"CRITICAL*cs:˘<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. </p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private static int count = 0;

  public void DoSomething()
  {
    //...
    count++;  // Noncompliant
  }
}
</pre>Z
CODE_SMELL
™
csharpsquid:S1121î
csharpsquidS1121:Assignments should not be made from within sub-expressions"MAJOR*cs:™<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var result = str.Substring(index, length);
if (string.IsNullOrEmpty(result))
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments inside lambda and delegate expressions are allowed. </p>
<p>Furthermore, the following patterns are also accepted:</p>
<pre>
var a = b = c = 10;
</pre>
<pre>
while ((val = GetNewValue()) &gt; 0)
{
...
}
</pre>
<pre>
private MyClass instance;
public MyClass Instance
{
  get
  {
    return instance ?? (instance = new MyClass());
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>
</ul>Z
CODE_SMELL
ç
csharpsquid:S1244˜
csharpsquidS12448Floating point numbers should not be tested for equality"MAJOR*cs:ñ<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.100000001f; // 0.1
double d = 0.10000000000000001; // 0.1
</pre>
<p>(Results will vary based on compiler and compiler settings)</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error.</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146f;
if ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false
{
  // ...
}

if (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test
{
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test
{
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>
  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>
</ul>ZBUG
–
csharpsquid:S2333∫
csharpsquidS2333&Redundant modifiers should not be used"MINOR*cs:‰<p>Unnecessary keywords simply clutter the code and should be removed. Specifically:</p>
<ul>
  <li> <code>partial</code> on type declarations that are completely defined in one place </li>
  <li> <code>sealed</code> on members of <code>sealed</code> classes </li>
  <li> <code>unsafe</code> method or block inside construct already marked with <code>unsafe</code>, or when there are no <code>unsafe</code>
  constructs in the block </li>
  <li> <code>checked</code> and <code>unchecked</code> blocks with no integral-type arithmetic operations </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public partial class MyClass // Noncompliant
{
  public virtual void Method()
  {
  }
}

public sealed class MyOtherClass : MyClass
{
  public sealed override void Method() // Noncompliant
  {
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  public virtual void Method()
  {
  }
}

public sealed class MyOtherClass : MyClass
{
  public override void Method()
  {
  }
}
</pre>Z
CODE_SMELL
¶
csharpsquid:S2692ê
csharpsquidS26923"IndexOf" checks should not be for positive numbers"MINOR*cs:¥<p>Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values
<code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>string</code>,
<code>List</code>, or an array, consider using the <code>Contains</code> method instead.</p>
<p>This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>, or array is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string color = "blue";
string name = "ishmael";

List&lt;string&gt; strings = new List&lt;string&gt;();
strings.Add(color);
strings.Add(name);
string[] stringArray = strings.ToArray();

if (strings.IndexOf(color) &gt; 0) // Noncompliant
{
  // ...
}
if (name.IndexOf("ish") &gt; 0) // Noncompliant
{
  // ...
}
if (name.IndexOf("ae") &gt; 0) // Noncompliant
{
  // ...
}
if (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string color = "blue";
string name = "ishmael";

List&lt;string&gt; strings = new List&lt;string&gt; ();
strings.Add(color);
strings.Add(name);
string[] stringArray = strings.ToArray();

if (strings.IndexOf(color) &gt; -1)
{
  // ...
}
if (name.IndexOf("ish") &gt;= 0)
{
  // ...
}
if (name.Contains("ae"))
{
  // ...
}
if (Array.IndexOf(stringArray, color) &gt;= 0)
{
  // ...
}
</pre>ZBUG
ˆ
csharpsquid:S2219‡
csharpsquidS2219*Runtime type checking should be simplified"MINOR*cs:Ü<p>To check the type of an object there are several options:</p>
<ul>
  <li> <code>expr is SomeType</code> or <code>expr.GetType() == typeof(SomeType)</code> if the type is known at compile time, </li>
  <li> <code>typeInstance.IsInstanceOfType(expr)</code> if the type is calculated during runtime. </li>
</ul>
<p>If runtime calculated <code>Type</code>s need to be compared:</p>
<ul>
  <li> <code>typeInstance1.IsAssignableFrom(typeInstance2)</code>. </li>
</ul>
<p>Depending on whether the type is returned by a <code>GetType()</code> or <code>typeof()</code> call, the <code>IsAssignableFrom()</code> and
<code>IsInstanceOfType()</code> might be simplified. Similarly, if the type is <code>sealed</code>, the type comparison with <code>==</code> can be
converted to an <code>is</code> call. Simplifying the calls also make <code>null</code> checking unnecessary because both <code>is</code> and
<code>IsInstanceOfType</code> performs it already.</p>
<p>Finally, utilizing the most concise language constructs for type checking makes the code more readable, so</p>
<ul>
  <li> <code>expr as T != null</code> checks should be simplified to <code>expr is T</code>, and </li>
  <li> <code>expr is T</code> should be converted to <code>expr != null</code>, when <code>expr</code> is of type <code>T</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Fruit { }
sealed class Apple : Fruit { }

class Program
{
  static void Main()
  {
    var apple = new Apple();
    var b = apple != null &amp;&amp; apple.GetType() == typeof (Apple); // Noncompliant
    b = typeof(Apple).IsInstanceOfType(apple); // Noncompliant
    if (apple != null)
    {
      b = typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant
    }
    var appleType = typeof (Apple);
    if (apple != null)
    {
      b = appleType.IsAssignableFrom(apple.GetType()); // Noncompliant
    }

    Fruit f = apple;
    if (f as Apple != null) // Noncompliant
    {
    }
    if (apple is Apple) // Noncompliant
    {
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Fruit { }
sealed class Apple : Fruit { }

class Program
{
  static void Main()
  {
    var apple = new Apple();
    var b = apple is Apple;
    b = apple is Apple;
    b = apple is Apple;
    var appleType = typeof(Apple);
    b = appleType.IsInstanceOfType(apple);

    Fruit f = apple;
    if (f is Apple)
    {
    }
    if (apple != null)
    {
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>Calling <code>GetType</code> on an object of <code>Nullable&lt;T&gt;</code> type returns the underlying generic type parameter <code>T</code>, thus
a comparison with <code>typeof(Nullable&lt;T&gt;)</code> can't be simplified to use the <code>is</code> operator, which doesn't make difference
between <code>T</code> and <code>T?</code>.</p>
<pre>
int? i = 42;
bool condition = i.GetType() == typeof(int?); // false;
condition = i is int?; // true
</pre>
<p>No issue is reported on <code>expr is T</code> expressions if either operand of the <code>is</code> operator is a value type. In that case CS0183
or CS0184 reports.</p>Z
CODE_SMELL
“
csharpsquid:S2330º
csharpsquidS2330#Array covariance should not be used"CRITICAL*cs:Ê<p>Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to <code>B</code>, then the
same conversion exists from the array type <code>A[]</code> to <code>B[]</code>.</p>
<p>While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> where <code>B[]</code> is expected, it must
be used with care, since assigning an instance of <code>B</code> into an array of <code>A</code> will cause an <code>ArrayTypeMismatchException</code>
to be thrown at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
abstract class Fruit { }
class Apple : Fruit { }
class Orange : Fruit { }

class Program
{
  static void Main(string[] args)
  {
    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used
    FillWithOranges(fruits);
  }

  // Just looking at the code doesn't reveal anything suspicious
  static void FillWithOranges(Fruit[] fruits)
  {
    for (int i = 0; i &lt; fruits.Length; i++)
    {
      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class Fruit { }
class Apple : Fruit { }
class Orange : Fruit { }

class Program
{
  static void Main(string[] args)
  {
    Orange[] fruits = new Orange[1]; // Compliant
    FillWithOranges(fruits);
  }

  static void FillWithOranges(Orange[] fruits)
  {
    for (int i = 0; i &lt; fruits.Length; i++)
    {
      fruits[i] = new Orange();
    }
  }
}
</pre>Z
CODE_SMELL
ø

csharpsquid:S2339©

csharpsquidS2339*Public constant members should not be used"CRITICAL*cs:Ã	<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>
<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.
This library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,
<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to
be rebuilt against the new version of the library.</p>
<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases
are uncommon, and therefore it is generally better to avoid constant members.</p>
<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public const double Version = 1.0;           // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    public static double Version
    {
      get { return 1.0; }
    }
}
</pre>Z
CODE_SMELL
ﬁ
csharpsquid:S1006»
csharpsquidS10065Method overrides should not change parameter defaults"CRITICAL*cs:‡<p>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the
value used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </p>
<p>Default parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented
interface. Thus, specifying default values is useless and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 5) // Noncompliant
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 5
    Print(derived);  // writes 42; was that expected?
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Base
{
  public virtual void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Derived : Base
{
  public override void Write(int i = 42)
  {
    Console.WriteLine(i);
  }
}

public class Program
{
  public static void Main()
  {
    var derived = new Derived();
    derived.Write(); // writes 42
    Print(derived);  // writes 42
  }
  private void Print(Base item)
  {
    item.Write();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,
  or else shall not specify any default arguments. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/-YBS">CERT, OOP04-CPP.</a> - Prefer not to give virtual functions default argument
  initializers </li>
</ul>Z
CODE_SMELL
˛
csharpsquid:S1481Ë
csharpsquidS1481(Unused local variables should be removed"MINOR*cs:ê<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int NumberOfMinutes(int hours)
{
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int NumberOfMinutes(int hours)
{
  return hours * 60;
}
</pre>
<h2>Exceptions</h2>
<p>Unused locally created resources in a <code>using</code> statement are not reported.</p>
<pre>
using(var t = new TestTimer()) // t never used, but compliant.
{
  //...
}
</pre>Z
CODE_SMELL
≈
csharpsquid:S3427Ø
csharpsquidS3427AMethod overloads with default parameter values should not overlap"BLOCKER*cs:º<p>The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values
makes the matter even harder to understand. </p>
<p>This rule raises an issue when an overload with default parameter values is hidden by one without the optional parameters. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  void Print(string[] messages) {...}
  void Print(string[] messages, string delimiter = "\n") {...} // Noncompliant; default parameter value is hidden by overload
}

// ...
MyClass myClass = new MyClass();

myClass.Print(new string[3] {"yes", "no", "maybe"});  // which version of Print will be called?
</pre>Z
CODE_SMELL

csharpsquid:S3235⁄
csharpsquidS3235(Redundant parentheses should not be used"MINOR*cs:Ç<p>Redundant parentheses are simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[MyAttribute()] //Noncompliant
class MyClass
{
  public int MyProperty { get; set; }
  public static MyClass CreateNew(int propertyValue)
  {
    return new MyClass() //Noncompliant
    {
      MyProperty = propertyValue
    };
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[MyAttribute]
class MyClass
{
  public int MyProperty { get; set; }
  public static MyClass CreateNew(int propertyValue)
  {
    return new MyClass
    {
      MyProperty = propertyValue
    };
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
Û
csharpsquid:S3236›
csharpsquidS3236>Caller information arguments should not be provided explicitly"MINOR*cs:ˆ<p>Caller information attributes (<code>CallerFilePathAttribute</code>, <code>CallerLineNumberAttribute</code>, and
<code>CallerMemberNameAttribute</code>) provide a way to get information about the caller of a method through optional parameters. But the arguments
for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values defeats the
purpose of the attributes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void TraceMessage(string message,
  [CallerMemberName] string memberName = "",
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}

void MyMethod()
{
  TraceMessage("my message", "MyMethod"); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void TraceMessage(string message,
  [CallerMemberName] string memberName = "",
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}

void MyMethod()
{
  TraceMessage("my message");
}
</pre>ZBUG
À
csharpsquid:S3237µ
csharpsquidS3237!"value" parameters should be used"BLOCKER*cs:‚<p>In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit <code>value</code>
parameter holds the value the accessor was called with. Not using the <code>value</code> means that the accessor ignores the caller's intent which
could cause unexpected results at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private int count;
public int Count
{
  get { return count; }
  set { count = 42; } // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private int count;
public int Count
{
  get { return count; }
  set { count = value; }
}
</pre>
<p>or</p>
<pre>
public int Count
{
  get { return count; }
  set { throw new InvalidOperationException(); }
}
</pre>Z
CODE_SMELL
ª
csharpsquid:S3598•
csharpsquidS3598BOne-way "OperationContract" methods should have "void" return type"MAJOR*cs:∫<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,
not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return
type therefore does not make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[ServiceContract]
interface IMyService
{
  [OperationContract(IsOneWay = true)]
  int SomethingHappened(int parameter); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[ServiceContract]
interface IMyService
{
  [OperationContract(IsOneWay = true)]
  void SomethingHappened(int parameter);
}
</pre>
<h2>Exceptions</h2>
<p>The rule doens't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>ZBUG
î
csharpsquid:S2386˛
csharpsquidS2386,Mutable fields should not be "public static""MINOR*cs:ü<p><code>public static</code> mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by
reducing the accessibility of the field or by changing the return type to an immutable type.</p>
<p>This rule raises issues for <code>public static</code> fields with a type inheriting/implementing <code>System.Array</code> or
<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A
{
  public static string[] strings1 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new List&lt;String&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>The issue won't raise if the type of the field inherits/implements one (at least) of the following types:</p>
<ul>
  <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>
  <li> <code>System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;</code> </li>
  <li> <code>System.Collections.Immutable.IImmutableArray&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;</code> </li>
  <li> <code>System.Collections.Immutable.IImmutableList&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Immutable.IImmutableSet&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Immutable.IImmutableStack&lt;T&gt;</code> </li>
  <li> <code>System.Collections.Immutable.IImmutableQueue&lt;T&gt;</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/rwBc">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed
  </li>
</ul>ZVULNERABILITY
ö
csharpsquid:S3234Ñ
csharpsquidS3234I"GC.SuppressFinalize" should not be invoked for types without destructors"MINOR*cs:ã<p><code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the
dispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it has no effect if there is no finalizer
defined in the object's type, so using it in such cases is just confusing.</p>
<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
sealed class MyClass
{
  public void Method()
  {
    ...
    GC.SuppressFinalize(this); //Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
sealed class MyClass
{
  public void Method()
  {
    ...
  }
}
</pre>Z
CODE_SMELL
¶	
csharpsquid:S3597ê	
csharpsquidS3597L"ServiceContract" and "OperationContract" attributes should be used together"MAJOR*cs:õ<p>The <code>ServiceContract</code> attribute specifies that a class or interface defines the communication contract of a Windows Communication
Foundation (WCF) service. The service operations of this class or interface are defined by <code>OperationContract</code> attributes added to methods.
It doesn't make sense to define a contract without any service operations; thus, in a <code>ServiceContract</code> class or interface at least one
method should be annotated with <code>OperationContract</code>. Similarly, WCF only serves <code>OperationContract</code> methods that are defined
inside <code>ServiceContract</code> classes or interfaces; thus, this rule also checks that <code>ServiceContract</code> is added to the containing
type of <code>OperationContract</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[ServiceContract]
interface IMyService // Noncompliant
{
  int MyServiceMethod();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[ServiceContract]
interface IMyService
{
  [OperationContract]
  int MyServiceMethod();
}
</pre>ZBUG
˘	
csharpsquid:S1858„	
csharpsquidS1858*"ToString()" calls should not be redundant"MINOR*cs:ê	<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly
invoking <code>ToString()</code> when the compiler would do it implicitly is also needless code-bloat.</p>
<p>This rule raises an issue when <code>ToString()</code> is invoked:</p>
<ul>
  <li> on a <code>string</code> </li>
  <li> on a non-<code>string</code> operand to concatenation </li>
  <li> on an argument to <code>string.Format</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var s = "foo";
var t = "fee fie foe " + s.ToString();  // Noncompliant
var someObject = new object();
var u = "" + someObject.ToString(); // Noncompliant
var v = string.Format("{0}", someObject.ToString()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var s = "foo";
var t = "fee fie foe " + s;
var someObject = new object();
var u = "" + someObject;
var v = string.Format("{0}", someObject);
</pre>
<h2>Exceptions</h2>
<p>The rule does not report on value types, where leaving off the <code>ToString()</code> call would result in automatic boxing.</p>
<pre>
var v = string.Format("{0}", 1.ToString());
</pre>ZBUG
·	
csharpsquid:S2387À	
csharpsquidS23878Child class fields should not shadow parent class fields"BLOCKER*cs:·<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at
best, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripe; // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripened;
  private static Color FLESH_COLOR;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>private</code> parent class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit
{
  private Season ripe;
  // ...
}

public class Raspberry : Fruit
{
  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry
  // ...
}
</pre>Z
CODE_SMELL
Ä
csharpsquid:S1172Í
csharpsquidS1172*Unused method parameters should be removed"MAJOR*cs:ê<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void DoSomething(int a, int b) // "b" is unused
{
  Compute(a);
}

void DoSomething2(int a) // value of "a" is unused
{
  a = 10;
  Compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void DoSomething(int a)
{
  Compute(a);
}

void DoSomething2()
{
  var a = 10;
  Compute(a);
}
</pre>
<h2>Exceptions</h2>
<p><code>virtual</code>, <code>override</code> methods and interface implementations are ignored. </p>
<pre>
override void DoSomething(int a, int b) // no issue reported on b
{
  Compute(a);
}
</pre>
<p>Furthermore, the <code>this</code> parameter of extension methods is also ignored.</p>
<pre>
public static class Extensions
{
  public static void MyHelper(this HtmlHelper helper) //no issue reported here
  {
    // no use of helper here
  }
}
</pre>
<p>Methods that have attributes defined on them are ignored.</p>
<pre>
public class MyDto
{
  public string Name { get; set; }

  [OnDeserialized]
  private void OnDeserialized(StreamingContext context)
  {
    // ...
  }
}
</pre>
<p>Empty or unsupported methods are ignored.</p>
<pre>
public void DoSomething()
{}

public void Call()
{
  throw new NotImplementedException();
}
</pre>
<p>And obviously no issue is raised on the <code>static void Main(string[] args)</code> method</p>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
π
csharpsquid:S1854£
csharpsquidS1854Dead stores should be removed"MAJOR*cs:›<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void CalculateRate(int a, int b)
{
  int i;

  i = a + b; // Noncompliant; calculation result not used before value is overwritten
  i = DoSomething();  // Noncompliant; retrieved value not used
  for (i = 0; i &lt; 10; i++)
  {
    //  ...
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void CalculateRate(int a, int b)
{
  int i;

  i = DoSomething();
  i += a + b;
  StoreI(i);

  for (i = 0; i &lt; 10; i++)
  {
    //  ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when </p>
<ul>
  <li> the analyzed method body contains <code>try</code> blocks, </li>
  <li> a lambda expression captures the local variables, or </li>
  <li> the variable is unused (case covered by Rule S1481) </li>
  <li> initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>
  and <code>string.Empty</code>. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
»

csharpsquid:S3249≤

csharpsquidS3249WClasses directly extending "object" should not call "base" in "GetHashCode" or "Equals""MAJOR*cs:≤	<p>Making a <code>base</code> call in an overriding method is generally a good idea, but not in <code>GetHashCode</code> and <code>Equals</code> for
classes that directly extend <code>object</code> because those methods are based on the object reference. Meaning that no two <code>objects</code>
that use those <code>base</code> methods will ever be equal or have the same hash.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Point
{
  private readonly int x;
  public MyClass(int x)
  {
    this.x = x;
  }
  public override int GetHashCode()
  {
    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Point
{
  private readonly int x;
  public MyClass(int x)
  {
    this.x = x;
  }
  public override int GetHashCode()
  {
    return x.GetHashCode();
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't report on guard conditions checking for reference equality.</p>
<pre>
public class Point
{
  public override bool Equals(object obj)
  {
    if (base.Equals(obj)) // Compliant, although it could be replaced with object.ReferenceEquals(obj, this), which is clearer
    {
      return true;
    }
    ...
  }
}
</pre>ZBUG
”

csharpsquid:S2952Ω

csharpsquidS2952KClasses should "Dispose" of members from the classes' own "Dispose" methods"CRITICAL*cs:∆	<p>It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the contract of
<code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource
leaks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void CleanUp()
  {
    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method
  }

  public void Dispose()
  {
    // method added to satisfy demands of interface
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
µ

csharpsquid:S1862ü

csharpsquidS1862BRelated "if/else if" statements should not have the same condition"MAJOR*cs:¥	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
{
  OpenWindow();
}
else if (param == 2)
{
  CloseWindow();
}
else if (param == 1) // Noncompliant
{
  MoveWindowToTheBackground();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
{
  OpenWindow();
}
else if (param == 2)
{
  CloseWindow();
}
else if (param == 3)
{
  MoveWindowToTheBackground();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
∫
csharpsquid:S2278§
csharpsquidS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"BLOCKER*cs:®<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer
  provides the security that is needed to protect federal government information.</p>
  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<p>For similar reasons, RC2 should also be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using (var aes = new AesCryptoServiceProvider())
{
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>
</ul>ZVULNERABILITY
Œ
csharpsquid:S3005∏
csharpsquidS30056"ThreadStatic" should not be used on non-static fields"MAJOR*cs:Ÿ<p>When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the field can have different
values for different calling threads, but that's not the case, since the <code>ThreadStatic</code> attribute is simply ignored on
non-<code>static</code> fields. </p>
<p>So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class, which gives a similar
behavior for non-<code>static</code> fields.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  [ThreadStatic]  // Noncompliant
  private int count = 0;

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  private int count = 0;

  // ...
}
</pre>
<p>or</p>
<pre>
public class MyClass
{
  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();
  public int Count
  {
    get { return count.Value; }
    set { count.Value = value; }
  }
  // ...
}
</pre>ZBUG
∂
csharpsquid:S3246†
csharpsquidS3246@Generic type parameters should be co/contravariant when possible"MAJOR*cs:∞<p>In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the <code>out</code> and
<code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.</p>
<p>The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the
parameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most
notable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to
an <code>IEnumerable&lt;object&gt;</code> variable, for instance.</p>
<p>The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.
Doing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with
a sub-type. I.e. this is the inversion of covariance. The most notable example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows
the assignment of an <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface IConsumer&lt;T&gt;  // Noncompliant
{
    bool Eat(T fruit);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface IConsumer&lt;in T&gt;
{
    bool Eat(T fruit);
}
</pre>Z
CODE_SMELL
∆
csharpsquid:S1067∞
csharpsquidS1067%Expressions should not be too complex"CRITICAL*cs:ÿ<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ((MyFirstCondition() || MySecondCondition()) &amp;&amp; MyLastCondition()) { ... }
</pre>Z
CODE_SMELL
»	
csharpsquid:S3244≤	
csharpsquidS3244AAnonymous delegates should not be used to unsubscribe from Events"MAJOR*cs:»<p>It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the
process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove <em>this item</em> from the subscription
list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added.
The result: <code>NOOP</code>.</p>
<p>Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.</p>
<h2>Noncompliant Code Example</h2>
<pre>
listView.PreviewTextInput += (obj,args) =&gt;
        listView_PreviewTextInput(obj,args,listView);

// ...

listView.PreviewTextInput -= (obj, args) =&gt;
        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed
</pre>
<h2>Compliant Solution</h2>
<pre>
EventHandler func = (obj,args) =&gt; listView_PreviewTextInput(obj,args,listView);

listView.PreviewTextInput += func;

// ...

listView.PreviewTextInput -= func;
</pre>ZBUG
Ö
csharpsquid:S3247Ô
csharpsquidS3247"Duplicate casts should not be made"MINOR*cs:ù<p>Because the <code>is</code> operator performs a cast if the object is not null, using <code>is</code> to check type and then casting the same
argument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using <code>as</code>,
followed by a null-check.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x is Fruit)  // Noncompliant
{
  var f = (Fruit)x; // or x as Fruit
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var f = x as Fruit;
if (f != null)
{
  // code
}
</pre>Z
CODE_SMELL
à
csharpsquid:S1066Ú
csharpsquidS1066,Collapsible "if" statements should be merged"MAJOR*cs:ñ<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1)
{
  if (condition2)
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2)
{
  ...
}
</pre>Z
CODE_SMELL
¿
csharpsquid:S1186™
csharpsquidS1186Methods should not be empty"CRITICAL*cs:‹<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed. </li>
  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public override void DoSomething()
{
}

public override void DoSomethingElse()
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override void DoSomething()
{
  // Do nothing because of X and Y.
}

public override void DoSomethingElse()
{
  throw new NotSupportedException();
}
</pre>
<h2>Exceptions</h2>
<p>The following methods are ignored:</p>
<ul>
  <li> empty <code>virtual</code> methods, </li>
  <li> empty methods that override an <code>abstract</code> method, </li>
  <li> empty overrides in test assemblies. </li>
</ul>Z
CODE_SMELL
”
csharpsquid:S2156Ω
csharpsquidS21564"sealed" classes should not have "protected" members"MINOR*cs:Ÿ<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>sealed</code> class cannot have children, marking its members
<code>protected</code> is confusingly pointless.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public sealed class MySealedClass
{
    protected string name = "Fred";  // Noncompliant
    protected void SetName(string name) // Noncompliant
    {
        // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public sealed class MySealedClass
{
    private string name = "Fred";
    public void SetName(string name)
    {
        // ...
    }
}
</pre>Z
CODE_SMELL
Œ
csharpsquid:S1185∏
csharpsquidS1185TOverriding members should do more than simply call the same member in the base class"MINOR*cs:¥<p>Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time
this is justified is in <code>sealed</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides
of <code>Equals</code> and <code>GetHashCode</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public override void Method() // Noncompliant
{
  base.Method();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public override void Method()
{
  //do something else
}
</pre>
<h2>Exceptions</h2>
<p>If there is an attribute in any level of the overriding chain, then the overridden member is ignored.</p>
<pre>
public class Base
{
  [Required]
  public virtual string Name { get; set; }
}

public class Derived : Base
{
  public override string Name
  {
    get
    {
      return base.Name;
    }
    set
    {
      base.Name = value;
    }
  }
}
</pre>Z
CODE_SMELL
ç
csharpsquid:S2275˜
csharpsquidS2275JComposite format strings should not lead to unexpected behavior at runtime"BLOCKER*cs:Ç<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected
behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of
<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,
<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String,‚ÄÇObject[])</code>,
<code>Trace.TraceError(String,‚ÄÇObject[])</code>, <code>Trace.TraceInformation(String,‚ÄÇObject[])</code>,
<code>Trace.TraceWarning(String,‚ÄÇObject[])</code> and <code>TraceSource.TraceInformation(String,‚ÄÇObject[])</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
s = string.Format("[0}", arg0);
s = string.Format("{{0}", arg0);
s = string.Format("{0}}", arg0);
s = string.Format("{-1}", arg0);
s = string.Format("{0} {1}", arg0);
</pre>
<h2>Compliant Solution</h2>
<pre>
s = string.Format("{0}", 42); // Compliant
s = string.Format("{0,10}", 42); // Compliant
s = string.Format("{0,-10}", 42); // Compliant
s = string.Format("{0:0000}", 42); // Compliant
s = string.Format("{2}-{0}-{1}", 1, 2, 3); // Compliant
s = string.Format("no format"); // Compliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is raised if the format string is not a <code>const</code>. </li>
</ul>
<pre>
var pattern = "{0} {1} {2}";
var res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized
</pre>
<ul>
  <li> No issue is raised if the argument is not an inline creation array. </li>
</ul>
<pre>
var array = new int[] {};
var res = string.Format("{0} {1}", array); // Compliant we don't know the size of the array
</pre>
<ul>
  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>
</ul>ZBUG
˜

csharpsquid:S3926·

csharpsquidS3926FDeserialization methods should be provided for "OptionalField" members"MAJOR*cs:Î	<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are
ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to
set such fields during the deserialization process.</p>
<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one
(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or
<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[Serializable]
public class Foo
{
    [OptionalField(VersionAdded = 2)]
    int optionalField = 5;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
[Serializable]
public class Foo
{
    [OptionalField(VersionAdded = 2)]
    int optionalField = 5;

    [OnDeserializing]
    void OnDeserializing(StreamingContext context)
    {
	    optionalField = 5;
    }

    [OnDeserialized]
    void OnDeserialized(StreamingContext context)
    {
        // Set optionalField if dependent on other deserialized values.
    }
}
</pre>Z
CODE_SMELL
ï	
csharpsquid:S2953ˇ
csharpsquidS2953>Methods named "Dispose" should implement "IDisposable.Dispose""BLOCKER*cs:è<p><code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent any confusion.</p>
<p>It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and likely lead to problems in
production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class GarbageDisposal
{
  private int Dispose()  // Noncompliant
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class GarbageDisposal : IDisposable
{
  public void Dispose()
  {
    // ...
  }
}
</pre>
<p>or</p>
<pre>
public class GarbageDisposal
{
  private int Grind()
  {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.</p>
<pre>
public class GarbageDisposal  :  IDisposable
{
  protected virtual void Dispose(bool disposing)
  {
    //...
  }
  public void Dispose()
  {
    Dispose(true);
    GC.SuppressFinalize(this);
  }
}
</pre>Z
CODE_SMELL
ÿ
csharpsquid:S2955¬
csharpsquidS2955VGeneric parameters not constrained to reference types should not be compared to "null""MINOR*cs:√<p>When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a
<code>struct</code>, could also be passed. In such cases, comparing the type parameter to <code>null</code> would always be false, because a
<code>struct</code> can be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use
<code>default()</code>. If it's not, then constraints should be added so that no value type can be passed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private bool IsDefault&lt;T&gt;(T value)
{
  if (value == null) // Noncompliant
  {
    // ...
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private bool IsDefault&lt;T&gt;(T value)
{
  if(object.Equals(value, default(T)))
  {
    // ...
  }
  // ...
}
</pre>
<p>or</p>
<pre>
private bool IsDefault&lt;T&gt;(T value) where T : class
{
  if (value == null)
  {
    // ...
  }
  // ...
}
</pre>ZBUG
„
csharpsquid:S3240Õ
csharpsquidS32405The simplest possible condition syntax should be used"MINOR*cs:Ë<p>In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means </p>
<ul>
  <li> using the <code>??</code> operator for an assign-if-not-null operator, </li>
  <li> using the ternary operator <code>?:</code> for assignment to a single variable, and </li>
  <li> removing the <code>??</code> when the left operand is known to be <code>null</code>, or known to be definitely not <code>null</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
object a = null, b = null, x;

if (a != null) // Noncompliant; needlessly verbose
{
  x = a;
}
else
{
  x = b;
}

x = a != null ? a : b; // Noncompliant; better but could still be simplified

x = (a == null) ? new object() : a; // Noncompliant

if (condition) // Noncompliant
{
  x = a;
}
else
{
  x = b;
}

var y = null ?? new object(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
object x;

x = a ?? b;
x = a ?? b;
x = a ?? new object();
x = condition ? a : b;
var y = new object();
</pre>Z
CODE_SMELL
Ù
csharpsquid:S2368ﬁ
csharpsquidS2368@Public methods should not have multidimensional array parameters"BLOCKER*cs:Ï<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to
use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used
internally.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Program
{
    public void WriteMatrix(int[][] matrix) // Non-Compliant
    {
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Matrix
{
    // ...
}

public class Program
{
    public void WriteMatrix(Matrix matrix) // Compliant
    {
    }
}
</pre>Z
CODE_SMELL
æ
csharpsquid:S3241®
csharpsquidS32414Methods should not return values that are never used"MINOR*cs:ƒ<p>Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their
callers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
∫
csharpsquid:S3457§
csharpsquidS34571Composite format strings should be used correctly"MAJOR*cs:√<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected
behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of
<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,
<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String,‚ÄÇObject[])</code>,
<code>Trace.TraceError(String,‚ÄÇObject[])</code>, <code>Trace.TraceInformation(String,‚ÄÇObject[])</code>,
<code>Trace.TraceWarning(String,‚ÄÇObject[])</code> and <code>TraceSource.TraceInformation(String,‚ÄÇObject[])</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
s = string.Format("{0}", arg0, arg1); // Noncompliant, arg1 is declared but not used.
s = string.Format("{0} {2}", arg0, arg1, arg2); // Noncompliant, the format item with index 1 is missing so arg1 will not be used.
s = string.Format("foo"); // Noncompliant, there is no need to use string.Format here.
</pre>
<h2>Compliant Solution</h2>
<pre>
s = string.Format("{0}", arg0);
s = string.Format("{0} {1}", arg0, arg2);
s = "foo";
</pre>
<h2>Exceptions</h2>
<ul>
  <li> No issue is raised if the format string is not a <code>const</code>. </li>
</ul>
<pre>
var pattern = "{0} {1} {2}";
var res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized
</pre>
<ul>
  <li> No issue is raised if the argument is not an inline creation array. </li>
</ul>
<pre>
var array = new int[] {};
var res = string.Format("{0} {1}", array); // Compliant we don't know the size of the array
</pre>
<ul>
  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>
</ul>Z
CODE_SMELL
Ù	
csharpsquid:S3215ﬁ	
csharpsquidS3215:"interface" instances should not be cast to concrete types"CRITICAL*cs:Ò<p>Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in use, likely that
something is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing functionality should be added to the
<code>interface</code>. Otherwise there is a risk of runtime exceptions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
  void DoStuff();
}

public class MyClass1 : IMyInterface
{
  public int Data { get { return new Random().Next(); } }

  public void DoStuff()
  {
    // TODO...
  }
}

public static class DowncastExampleProgram
{
  static void EntryPoint(IMyInterface interfaceRef)
  {
    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant
    int privateData = class1.Data;

    class1 = interfaceRef as MyClass1;  // Noncompliant
    if (class1 != null)
    {
      // ...
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p>Casting to <code>object</code> doesn't raise an issue, because it can never fail.</p>
<pre>
static void EntryPoint(IMyInterface interfaceRef)
{
  var o = (object)interfaceRef;
  ...
}
</pre>Z
CODE_SMELL
ã
csharpsquid:S3216ı
csharpsquidS3216&"ConfigureAwait(false)" should be used"CRITICAL*cs:£<p>After an <code>await</code>ed <code>Task</code> has executed, you can continue execution in the original, calling thread or any arbitrary thread.
Unless the rest of the code needs the context from which the <code>Task</code> was spawned, <code>Task.ConfigureAwait(false)</code> should be used to
keep execution in the <code>Task</code> thread to avoid the need for context switching and the possibility of deadlocks.</p>
<p>This rule raises an issue when code in a class library <code>await</code>s a <code>Task</code> and continues execution in the original calling
thread.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var response = await httpClient.GetAsync(url);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var response = await httpClient.GetAsync(url).ConfigureAwait(false);
</pre>ZBUG
ó
csharpsquid:S3458Å
csharpsquidS3458IEmpty "case" clauses that fall through to the "default" should be omitted"MINOR*cs:à<p>Empty <code>case</code> clauses that fall through to the default are useless. Whether or not such a <code>case</code> is present, the
<code>default</code> clause will be invoked. Such <code>case</code>s simply clutter the code, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch(ch)
{
  case 'a' :
    HandleA();
    break;
  case 'b' :
    HandleB();
    break;
  case 'c' :  // Noncompliant
  default:
    HandleTheRest();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(ch)
{
  case 'a' :
    HandleA();
    break;
  case 'b' :
    HandleB();
    break;
  default:
    HandleTheRest();
    break;
}
</pre>Z
CODE_SMELL
™
csharpsquid:S3456î
csharpsquidS34567"string.ToCharArray()" should not be called redundantly"MINOR*cs:¥<p><code>ToCharArray</code> can be omitted when the operation on the array could have been done directly on the string, such as when iterating over
the characters in a string, and when accessing a character in a string via an array index. In those cases, explicit <code>ToCharArray</code> calls
should be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string str = "some string";
foreach (var c in str.ToCharArray()) // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string str = "some string";
foreach (var c in str)
{
  // ...
}
</pre>ZBUG
∏
csharpsquid:S1155¢
csharpsquidS1155,"Any()" should be used to test for emptiness"MINOR*cs:∆<p>Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer, and the code more readable.
However, there are some cases where special attention should be paid:</p>
<p>- if the collection is an <code>EntityFramework</code> or other ORM query, calling <code>.Count()</code> will cause executing a potentially massive
SQL query and could put a large overhead on the application database. Calling <code>.Any()</code> will also connect to the database, but will generate
much more efficient SQL.</p>
<p>- if the collection is part of a LINQ query that contains <code>.Select()</code> statements that create objects, a large amount of memory could be
unnecessarily allocated. Calling <code>.Any()</code> will be much more efficient because it will execute fewer iterations of the enumerable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static bool HasContent(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() &gt; 0;  // Noncompliant
}

private static bool HasContent2(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() &gt;= 1;  // Noncompliant
}

private static bool IsEmpty(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() == 0;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static bool HasContent(IEnumerable&lt;string&gt; strings)
{
  return strings.Any();
}

private static bool IsEmpty(IEnumerable&lt;string&gt; strings)
{
  return !strings.Any();
}
</pre>Z
CODE_SMELL
Å
csharpsquid:S131Ï
csharpsquidS131F"switch/Select" statements should end with "default/Case Else" clauses"CRITICAL*cs:Ù<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a
<code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo = 42;
switch (foo) // Noncompliant
{
  case 0:
    Console.WriteLine("foo = 0");
    break;
  case 42:
    Console.WriteLine("foo = 42");
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int foo = 42;
switch (foo) // Compliant
{
  case 0:
    Console.WriteLine("foo = 0");
    break;
  case 42:
    Console.WriteLine("foo = 42");
    break;
  default:
    throw new InvalidOperationException("Unexpected value foo = " + foo);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
å
csharpsquid:S2123ˆ
csharpsquidS2123*Values should not be uselessly incremented"MAJOR*cs:£<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int PickNumber()
{
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int PickNumber()
{
  int i = 0;
  int j = 0;

  i++;
  return ++j;
}
</pre>ZBUG
ü
csharpsquid:S3453â
csharpsquidS34533Classes should not have only "private" constructors"MAJOR*cs:≠<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass // Noncompliant
{
  private MyClass() { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  public MyClass() { ... }
}
</pre>
<h2>Exceptions</h2>
<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members
are also ignored because they are covered by Rule S1118.</p>ZBUG
ˇ
csharpsquid:S134Í
csharpsquidS134rControl flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply"CRITICAL*cs:∆<p>Nested <code>if</code>, <code>switch</code>, <code>for</code>, <code>foreach</code>, <code>while</code>, <code>do</code>, and <code>try</code>
statements are key ingredients for making what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) // Compliant - depth = 1
{
  /* ... */
  if (condition2) // Compliant - depth = 2
  {
    /* ... */
    for(int i = 0; i &lt; 10; i++) // Compliant - depth = 3, not exceeding the limit
    {
      /* ... */
      if (condition4) // Noncompliant - depth = 4
      {
        if (condition5) // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
        {
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>Z
CODE_SMELL
ˆ
csharpsquid:S2486‡
csharpsquidS2486(Generic exceptions should not be ignored"MINOR*cs:è<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>
<p>This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string text = "";
try
{
  text = File.ReadAllText(fileName);
}
catch (Exception exc) // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string text = "";
try
{
  text = File.ReadAllText(fileName);
}
catch (Exception exc)
{
  logger.Log(exc);
}
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, it is not considered to be empty.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>
</ul>ZBUG
ú
csharpsquid:S3451Ü
csharpsquidS3451K"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant"MAJOR*cs:í<p>The use of <code>[DefaultValue]</code> with <code>[Optional]</code> has no more effect than <code>[Optional]</code> alone. That's because
<code>[DefaultValue]</code> doesn't actually do anything; it merely indicates the intent for the value. More than likely, <code>[DefaultValue]</code>
was used in confusion instead of <code>[DefaultParameterValue]</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
    public void DoStuff([Optional][DefaultValue(4)]int i, int j = 5)  // Noncompliant
    {
        Console.WriteLine(i);
    }

    public static void Main()
    {
        new MyClass().DoStuff(); // prints 0
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
    public void DoStuff([Optional][DefaultParameterValue(4)]int i, int j = 5)
    {
        Console.WriteLine(i);
    }

    public static void Main()
    {
        new MyClass().DoStuff(); // prints 4
    }
}
</pre>ZBUG
∆
csharpsquid:S3217∞
csharpsquidS3217<"Explicit" conversions of "foreach" loops should not be used"CRITICAL*cs:¡<p>The <code>foreach</code> statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections
available at that time such as <code>ArrayList</code>. The <code>foreach</code> statements allows you to downcast elements of a collection of
<code>Object</code>s to any other type. The problem is that to achieve the cast, the <code>foreach</code> statements silently performs
<code>explicit</code> type conversion, which at runtime can result in an <code>InvalidCastException</code>.</p>
<p>C# code iterating on generic collections or arrays should not rely on <code>foreach</code> statement's silent <code>explicit</code>
conversions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit { }
public class Orange : Fruit { }
public class Apple : Fruit { }

class MyTest
{
  public void Test()
  {
    var fruitBasket = new List&lt;Fruit&gt;();
    fruitBasket.Add(new Orange());
    fruitBasket.Add(new Orange());
    // fruitBasket.Add(new Apple());  // uncommenting this line will make both foreach below throw an InvalidCastException

    foreach (Fruit fruit in fruitBasket)
    {
      var orange = (Orange)fruit; // This "explicit" conversion is hidden within the foreach loop below
      ...
    }

    foreach (Orange orange in fruitBasket) // Noncompliant
    {
      ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var fruitBasket = new List&lt;Orange&gt;();
fruitBasket.Add(new Orange());
fruitBasket.Add(new Orange());
// fruitBasket.Add(new Apple());  // uncommenting this line won't compile

foreach (Orange orange in fruitBasket)
{
  ...
}
</pre>
<p>or</p>
<pre>
var fruitBasket = new List&lt;Fruit&gt;();
fruitBasket.Add(new Orange());
fruitBasket.Add(new Orange());
fruitBasket.Add(new Apple());

foreach (Orange orange in fruitBasket.OfType&lt;Orange&gt;())
{
  ...
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores iterations on collections of <code>object</code>s. This includes legacy code that uses <code>ArrayList</code>. Furthermore, the
rule does not report on cases when user defined conversions are being called. </p>Z
CODE_SMELL
™

csharpsquid:S3218î

csharpsquidS3218JInner class members should not shadow outer class "static" or type members"CRITICAL*cs:ó	<p>It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class - possible, but a bad idea.
That's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the
references updated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int A; //Noncompliant
    public int MyProp
    {
      get { return A; }  // Returns inner A. Was that intended?
    }
  }
}
</pre>
<p>After a rename</p>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int B;
    public int MyProp
    {
      get { return A; }  // Still compiles and runs but functionality has changed
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int InnerA;
    public int MyProp
    {
      get { return InnerA; }
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>
</ul>Z
CODE_SMELL
·
csharpsquid:S3459À
csharpsquidS3459$Unassigned members should be removed"MINOR*cs:˜<p>Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,
mistakes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  private int field; // Noncompliant, shouldn't it be initialized? This way the value is always default(int), 0.
  private int Property { get; set; }  // Noncompliant
  public void Print()
  {
    Console.WriteLine(field); //Will always print 0
    Console.WriteLine(Property); //Will always print 0
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  private int field;
  private int Property { get; set; } = 42;
  public void Print()
  {
    field++;
    Console.WriteLine(field);
    Console.WriteLine(Property);
  }
}
</pre>Z
CODE_SMELL
√
csharpsquid:S125Æ
csharpsquidS125.Sections of code should not be "commented out""MAJOR*cs:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
‚

csharpsquid:S2360Ã

csharpsquidS2360&Optional parameters should not be used"CRITICAL*cs:Û	<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>
<ul>
  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need
  to be rebuilt, otherwise the original values will be used. </li>
  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify
  the values. </li>
  <li> The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only
  way to get the same behavior. </li>
  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,
  when one is defined, is the second one still optional or mandatory? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void Notify(string company, string office = "QJZ") // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Notify(string company)
{
  Notify(company, "QJZ");
}
void Notify(string company, string office = "QJZ")
{
}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores parameters with caller info attributes.</p>Z
CODE_SMELL
˛
csharpsquid:S3450Ë
csharpsquidS3450WParameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]""MINOR*cs:·<p>There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,
<code>[DefaultParameterValue]</code> should always be used in conjunction with <code>[Optional]</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless
{
  Console.WriteLine(j);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void MyMethod(int j = 5)
{
  Console.WriteLine(j);
}
</pre>
<p>or</p>
<pre>
public void MyMethod([DefaultParameterValue(5)][Optional] int j)
{
  Console.WriteLine(j);
}
</pre>Z
CODE_SMELL
ï
csharpsquid:S927Ä
csharpsquidS927-"partial" method parameter names should match"CRITICAL*cs:°<p>When the parameters to the implementation of a <code>partial</code> method don't match those in the signature declaration, then confusion is almost
guaranteed. Either the implementer was confused when he renamed, swapped or mangled the parameter names in the implementation, or callers will be
confused.</p>
<h2>Noncompliant Code Example</h2>
<pre>
partial class Point
{
  partial void MoveVertically(int z);
}

partial class Point
{
  int x = 0;
  int y = 0;
  int z = 0;

  partial void MoveVertically(int y)  // Noncompliant
  {
    this.y = y;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
partial class Point
{
  partial void MoveVertically(int z);
}

partial class Point
{
  int x = 0;
  int y = 0;
  int z = 0;

  partial void MoveVertically(int z)
  {
    this.z = z;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 8.3 - For each function parameter the type given in the declaration and definition shall be identical, and the return types shall
  also be identical </li>
  <li> MISRA C:2004, 16.4 - The identifiers used in the declaration and definition of a function shall be identical. </li>
  <li> MISRA C++:2008, 8-4-2 - The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the
  declaration. </li>
  <li> MISRA C:2012, 8.3 - All declarations of an object or function shall use the same names and type qualifiers. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwGTAw">CERT, DCL40-C.</a> - Do not create incompatible declarations of the same
  function or object </li>
</ul>Z
CODE_SMELL
ü
csharpsquid:S126ä
csharpsquidS126:"if ... else if" constructs should end with "else" clauses"CRITICAL*cs:û<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0)
{
  doSomething();
} else if (x == 1)
{
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0)
{
  doSomething();
} else if (x == 1)
{
  doSomethingElse();
} else
{
  throw new IllegalStateException();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
√
csharpsquid:S127Æ
csharpsquidS127."for" loop stop conditions should be invariant"MAJOR*cs:—<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
            if (condition)
            {
               i = 20;
           }
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the
  loop. </li>
  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>
</ul>Z
CODE_SMELL
´	
csharpsquid:S2259ï	
csharpsquidS2259(Null pointers should not be dereferenced"MAJOR*cs:ƒ<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullReferenceException</code> to be thrown. At
best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or
it could allow an attacker to bypass security measures.</p>
<h2>Noncompliant Code Example</h2>
<pre>
object o = null;
if (condition)
{
  M1(o.ToString()); // Noncompliant, always null
}
else
{
  o = new object();
}
M2(o.ToString());
</pre>
<h2>Exceptions</h2>
<p>Calls to extension methods are not reported as those can still operate on a <code>null</code> value.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
ﬂ
csharpsquid:S2376…
csharpsquidS2376(Write-only properties should not be used"MAJOR*cs:Ò<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be
replaced with a setter method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Program
{
    public int Foo  //Non-Compliant
    {
        set
        {
            // ... some code ...
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Program
{
    private int foo;

    public void SetFoo(int value)
    {
        // ... some code ...
        foo = value;
    }
}
</pre>
<p>or</p>
<pre>
class Program
{
  public int Foo { get; set; } // Compliant
}
</pre>Z
CODE_SMELL
ˇ 
csharpsquid:S2930È 
csharpsquidS2930!"IDisposables" should be disposed"BLOCKER*cs:ù <p>When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency
reasons, some objects such as <code>Bitmap</code> use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have
potentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed
footprint, and fails to reclaim the unmanaged memory (by calling <code>Bitmap</code>'s finalizer method) in a timely fashion. </p>
<p>Moreover, memory is not the only system resource which needs to be managed in a timely fashion: The operating system can only handle having so many
file descriptors (e.g. <code>FileStream</code>) or sockets (e.g. <code>WebClient</code>) open at any given time. Therefore, it is important to
<code>Dispose</code> of them as soon as they are no longer needed, rather than relying on the garbage collector to call these objects' finalizers at
some nondeterministic point in the future.</p>
<p>This rule tracks <code>private</code> fields and local variables of the following <code>IDisposable</code> types, which are never disposed, closed,
aliased, returned, or passed to other methods.</p>
<ul>
  <li> <code>System.IO</code> namespace
    <ul>
      <li> <code>System.IO.FileStream</code> </li>
      <li> <code>System.IO.StreamReader</code> </li>
      <li> <code>System.IO.StreamWriter</code> </li>
    </ul> </li>
  <li> <code>System.Net</code> namespace
    <ul>
      <li> <code>System.Net.WebClient</code> </li>
    </ul> </li>
  <li> <code>System.Net.Sockets</code> namespace
    <ul>
      <li> <code>System.Net.Sockets.Socket</code> </li>
      <li> <code>System.Net.Sockets.TcpClient</code> </li>
      <li> <code>System.Net.Sockets.UdpClient</code> </li>
    </ul> </li>
  <li> <code>System.Drawing</code> namespace
    <ul>
      <li> <code>System.Drawing.Image</code> </li>
      <li> <code>System.Drawing.Bitmap</code> </li>
    </ul> </li>
</ul>
<p>which are either instantiated directly using the <code>new</code> operator, or using one of the following factory methods:</p>
<ul>
  <li> <code>System.IO.File.Create()</code> </li>
  <li> <code>System.IO.File.Open()</code> </li>
  <li> <code>System.Drawing.Image.FromFile()</code> </li>
  <li> <code>System.Drawing.Image.FromStream()</code> </li>
</ul>
<p>on both private fields and local variables.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder
{
  private FileStream fs; // Noncompliant; Dispose or Close are never called

  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }

  public void WriteToFile(string path, string text)
  {
    var fs = new FileStream(path, FileMode.Open); // Noncompliant
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;

  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }

  public void WriteToFile(string path, string text)
  {
    using (var fs = new FileStream(path, FileMode.Open))
    {
      var bytes = Encoding.UTF8.GetBytes(text);
      fs.Write(bytes, 0, bytes.Length);
    }
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>IDisposable</code> variables returned from a method or passed to other methods are ignored, as are local <code>IDisposable</code>s that are
initialized with other <code>IDisposable</code>s.</p>
<pre>
public Stream WriteToFile(string path, string text)
{
  var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned
  var bytes = Encoding.UTF8.GetBytes(text);
  fs.Write(bytes, 0, bytes.Length);
  return fs;
}

public void ReadFromStream(Stream s)
{
  var sr = new StreamReader(s); // Compliant as it would close the underlying stream.
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
≠
csharpsquid:S3220ó
csharpsquidS3220FMethod calls should not resolve ambiguously to overloads with "params""MINOR*cs:®<p>The rules for method resolution are complex and perhaps not properly understood by all coders. The <code>params</code> keyword can make method
declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.</p>
<p>This rule raises an issue when an invocation resolves to a method declaration with <code>params</code>, but could also resolve to another
non-<code>params</code> method too.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private void Format(string a, params object[] b) { }

  private void Format(object a, object b, object c) { }
}

// ...
MyClass myClass = new MyClass();

myClass.Format("", null, null); //Noncompliant, resolves to the first Format with params, but was that intended?
</pre>ZBUG
å
csharpsquid:S3466ˆ

csharpsquidS34664Optional parameters should be passed to "base" calls"MAJOR*cs:ô
<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.
Unfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're
ignoring the value the caller passed in. The result will likely not be what the caller expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class BaseClass
{
    public virtual void MyMethod(int i = 1)
    {
        Console.WriteLine(i);
    }
}

public class DerivedClass : BaseClass
{
    public override void MyMethod(int i = 1)
    {
        // ...
        base.MyMethod(); // Noncompliant; caller's value is ignored
    }

    static int Main(string[] args)
    {
        DerivedClass dc = new DerivedClass();
        dc.MyMethod(12);  // prints 1
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class BaseClass
{
    public virtual void MyMethod(int i = 1)
    {
        Console.WriteLine(i);
    }
}

public class DerivedClass : BaseClass
{
    public override void MyMethod(int i = 1)
    {
        // ...
        base.MyMethod(i);
    }

    static int Main(string[] args)
    {
        DerivedClass dc = new DerivedClass();
        dc.MyMethod(12);  // prints 12
    }
}
</pre>ZBUG
›
csharpsquid:S1163«
csharpsquidS11631Exceptions should not be thrown in finally blocks"MAJOR*cs:Ì<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block.</p>
<p>The masked's exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try
{
  /* some work which end up throwing an exception */
  throw new ArgumentException();
}
finally
{
  /* clean up */
  throw new InvalidOperationException();       // Noncompliant; will mask the ArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try
{
  /* some work which end up throwing an exception */
  throw new ArgumentException();
}
finally
{
  /* clean up */                       // Compliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/soUbAQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block
  </li>
</ul>ZBUG
ﬁ
csharpsquid:S1848»
csharpsquidS1848JObjects should not be created to be dropped immediately without being used"MAJOR*cs:Œ<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and
called directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new ArgumentException("x must be nonnegative");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new ArgumentException("x must be nonnegative");
</pre>Z
CODE_SMELL
·
csharpsquid:S3903À
csharpsquidS3903+Types should be defined in named namespaces"MAJOR*cs:<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are
defined outside any named namespace are in a global namespace that cannot be referenced in code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo // Noncompliant
{
}

public struct Bar // Noncompliant
{
}
</pre>Z
CODE_SMELL
ú
csharpsquid:S2933Ü
csharpsquidS2933EFields that are only assigned in the constructor should be "readonly""MAJOR*cs:ë<p><code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's not marked <code>readonly</code> but is
only set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked
<code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  int _birthYear;  // Noncompliant
  Person(int birthYear)
  {
    _birthYear = birthYear;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  readonly int _birthYear;
  Person(int birthYear)
  {
    _birthYear = birthYear;
  }
}
</pre>
<h2>Exceptions</h2>
<p>Fields with attributes are ignored.</p>Z
CODE_SMELL
ﬁ
csharpsquid:S2934»
csharpsquidS2934`Property assignments should not be made for "readonly" fields not constrained to reference types"MINOR*cs:ø<p>While the properties of a <code>readonly</code> reference type field can still be changed after initialization, those of a <code>readonly</code>
value field, such as a <code>struct</code>, cannot. </p>
<p>If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties could be unreliable, working
sometimes but not others.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T: IPoint
{
  readonly T point;  // this could be a struct
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX)
  {
    point.X = newX; //Noncompliant; if point is a struct, then nothing happened
    Console.WriteLine(point.X);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T : IPoint
{
  readonly T point;  // this could be a struct
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX) // assignment has been removed
  {
    Console.WriteLine(point.X);
  }
}
</pre>
<p>or</p>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T : class, IPoint
{
  readonly T point;  // this can only be a class
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX)
  {
    point.X = newX;  // this assignment is guaranteed to work
    Console.WriteLine(point.X);
  }
}
</pre>ZBUG
ö
csharpsquid:S3902Ñ
csharpsquidS39024"Assembly.GetExecutingAssembly" should not be called"MAJOR*cs:†<p>Using <code>Type.Assembly</code> to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other
hand, <code>Assembly.GetExecutingAssembly()</code> can take up to 30 times as long because it walks up the call stack to find the assembly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = Assembly.GetExecutingAssembly(); // Noncompliant
      Console.WriteLine("Assembly name: {0}", assem.FullName);
   }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Example
{
   public static void Main()
   {
      Assembly assem = typeof(Example).Assembly; // Here we use the type of the current class
      Console.WriteLine("Assembly name: {0}", assem.FullName);
   }
}
</pre>Z
CODE_SMELL
¡
csharpsquid:S3904´
csharpsquidS3904*Assemblies should have version information"CRITICAL*cs:’<p>If no <code>AssemblyVersionAttribute</code> is provided, the same default version will be used for every build. Since the version number is used by
The .NET Framework to uniquely identify an assembly this can lead to broken dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
using System;
using System.Reflection;

[assembly: AssemblyTitle("MyAssembly")] // Noncompliant

namespace MyLibrary
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
using System;
using System.Reflection;

[assembly: AssemblyTitle("MyAssembly")]
[assembly: AssemblyVersionAttribute("1.2.125.0")]

namespace MyLibrary
{
}
</pre>
<h2>See</h2>
<p><a href="https://msdn.microsoft.com/en-us/library/51ket42z.aspx">Assembly Versioning (MSDN)</a></p>ZBUG
ë
csharpsquid:S2372˚
csharpsquidS23725Exceptions should not be thrown from property getters"MAJOR*cs:ù<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a
method. </p>
<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int Foo
{
  get
  {
    throw new Exception(); // Noncompliant
  }
  set
  {
    // do set ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void SetFoo(int foo)
{
  // do set ...
}
</pre>ZBUG
Û	
csharpsquid:S2931›	
csharpsquidS2931AClasses with "IDisposable" members should implement "IDisposable""BLOCKER*cs:Ò<p>Classes with <code>IDisposable</code> members are responsible for cleaning up those members by calling their <code>Dispose</code> methods. The best
practice here is for the owning class to itself implement <code>IDisposable</code> and call its members' <code>Dispose</code> methods from its own
<code>Dispose</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder   // Noncompliant; doesn't implement IDisposable
{
  private FileStream fs;  // This member is never Dispose'd
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>ZBUG
Î
csharpsquid:S818÷
csharpsquidS818%Literal suffixes should be upper case"MINOR*cs:Ç<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const long b = 0l;      // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const long b = 0L;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>
  <li> MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C.</a> - Use "L," not "l," to indicate a long value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP.</a> - Use "L," not "l," to indicate a long value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
´
csharpsquid:S110ñ
csharpsquidS1102Inheritance tree of classes should not be too deep"MAJOR*cs:µ<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object
oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>Z
CODE_SMELL
è	
csharpsquid:S112˙
csharpsquidS112)General exceptions should never be thrown"MAJOR*cs:©<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,
<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and
<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated
errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new NullReferenceException("obj");  // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(object obj)
{
  if (obj == null)
  {
    throw new ArgumentNullException("obj");
  }
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable
  </li>
</ul>ZBUG
•
csharpsquid:S2743è
csharpsquidS27431Static fields should not be used in generic types"MAJOR*cs:µ<p>A static field in a generic type is not shared among instances of different closed constructed types, thus
<code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code> and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will
point to different objects, even though <code>instances</code> is seemingly shared among all <code>LengthLimitedSingletonCollection&lt;&gt;</code>
generic classes.</p>
<p>If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static
members, then set your generic type to inherit from the base class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class LengthLimitedSingletonCollection&lt;T&gt; where T : new()
{
  protected const int MaxAllowedLength = 5;
  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant

  public static T GetInstance()
  {
    object instance;

    if (!instances.TryGetValue(typeof(T), out instance))
    {
      if (instances.Count &gt;= MaxAllowedLength)
      {
        throw new Exception();
      }
      instance = new T();
      instances.Add(typeof(T), instance);
    }
    return (T)instance;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class SingletonCollectionBase
{
  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();
}

public class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()
{
  protected const int MaxAllowedLength = 5;

  public static T GetInstance()
  {
    object instance;

    if (!instances.TryGetValue(typeof(T), out instance))
    {
      if (instances.Count &gt;= MaxAllowedLength)
      {
        throw new Exception();
      }
      instance = new T();
      instances.Add(typeof(T), instance);
    }
    return (T)instance;
  }
}
</pre>
<h2>Exceptions</h2>
<p>If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the
closed constructed types.</p>
<pre>
public class Cache&lt;T&gt;
{
   private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant
}
</pre>ZBUG
•
csharpsquid:S3397è
csharpsquidS3397f"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object""MINOR*cs:Ä<p><code>object.Equals()</code> overrides can be optimized by checking first for reference equality between <code>this</code> and the parameter. This
check can be implemented by calling <code>object.ReferenceEquals()</code> or <code>base.Equals()</code>, where <code>base</code> is
<code>object</code>. However, using <code>base.Equals()</code> is a maintenance hazard because while it works if you extend <code>Object</code>
directly, if you introduce a new base class that overrides <code>Equals</code>, it suddenly stops working.</p>
<p>This rule raises an issue if <code>base.Equals()</code> is used but <code>base</code> is not <code>object</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  private int baseField;

  public override bool Equals(object other)
  {
    if (base.Equals(other)) // Okay; base is object
    {
      return true;
    }

    return this.baseField == ((Base)other).baseField;
  }
}

class Derived : Base
{
  private int derivedField;

  public override bool Equals(object other)
  {
    if (base.Equals(other))  // Noncompliant
    {
      return true;
    }

    return this.derivedField == ((Derived)other).derivedField;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base
{
  private int baseField;

  public override bool Equals(object other)
  {
    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better
    {
      return true;
    }

    return this.baseField == ((Base)other).baseField;
  }
}

class Derived : Base
{
  private int derivedField;

  public override bool Equals(object other)
  {
    if (object.ReferenceEquals(this, other))
    {
      return true;
    }

    return base.Equals(other) &amp;&amp; this.derivedField == ((Derived)other).derivedField;
  }
}
</pre>ZBUG
”
csharpsquid:S1656Ω
csharpsquidS1656%Variables should not be self-assigned"MAJOR*cs:Ô<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void SetName(string name)
{
  name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void SetName(string name)
{
  this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
Ö	
csharpsquid:S1659Ô
csharpsquidS1659:Multiple variables should not be declared on the same line"MINOR*cs:Ö<p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  private int a, b; // Noncompliant

  public void Method()
  {
    int c, d; // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  private int a;
  private int b;

  public void Method()
  {
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator
  respectively </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fAAhAQ">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration
  </li>
</ul>Z
CODE_SMELL
¶
csharpsquid:S907ë
csharpsquidS907#"goto" statement should not be used"MAJOR*cs:ø<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such
as <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>
  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>
</ul>Z
CODE_SMELL
”
csharpsquid:S103æ
csharpsquidS103Lines should not be too long"MAJOR*cs:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
•
csharpsquid:S105ê
csharpsquidS105(Tabulation characters should not be used"MINOR*cs:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
æ
csharpsquid:S2184®
csharpsquidS2184NResults of integer division should not be assigned to floating point variables"MINOR*cs:±<p>When division is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a
<code>double</code>, <code>float</code> or <code>decimal</code> with automatic type conversion, but having started as an <code>int</code>, the result
will likely not be what you expect. If the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost
before the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main()
{
  decimal dec = 3/2; // Noncompliant
  Method(3/2); // Noncompliant
}

static void Method(float f) { }
</pre>
<h2>Compliant Solution</h2>
<pre>
static void Main()
{
  decimal dec = (decimal)3/2;
  Method(3.0F/2);
}

static void Method(float f) { }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue
  expression. </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/woIyAQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point
  operations </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/AxE">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before
  comparing or assigning to that size </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1IAyAQ">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before
  comparing or assigning to that size </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZBUG
È
csharpsquid:S104‘
csharpsquidS104,Files should not have too many lines of code"MAJOR*cs:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
»
csharpsquid:S107≥
csharpsquidS107+Methods should not have too many parameters"MAJOR*cs:Ÿ<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, string param4, long param5)
{
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, string param4)
{
...
}
</pre>Z
CODE_SMELL
Ë
csharpsquid:S108”
csharpsquidS108.Nested blocks of code should not be left empty"MAJOR*cs:ˆ<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
≠
csharpsquid:S1301ó
csharpsquidS13019"switch" statements should have at least 3 "case" clauses"MINOR*cs:Æ<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable)
{
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0)
{
  doSomething();
}
else
{
  doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>Z
CODE_SMELL
¡
csharpsquid:S2995´
csharpsquidS2995;"Object.ReferenceEquals" should not be used for value types"MAJOR*cs:«<p>Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the expected results most of the time
because such types are passed by value, not by reference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private MyStruct myStruct;

  public void DoSomething(MyStruct s1) {
    int a = 1;
    int b = 1;

    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true
    {
      // ...
    }
    else if (Object.ReferenceEquals(a,b)) // Noncompliant
    {
      // ...
    }
  }
}
</pre>ZBUG
ò
csharpsquid:S2996Ç
csharpsquidS2996/"ThreadStatic" fields should not be initialized"MAJOR*cs:™<p>When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread, but unique across threads. Since a
class' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial
values.</p>
<p>Instead, allow such fields to be initialized to their default values or make the initialization lazy.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  [ThreadStatic]
  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  [ThreadStatic]
  public static object _perThreadObject;
  public static object PerThreadObject
  {
    get
    {
      if (_perThreadObject == null)
      {
        _perThreadObject = new object();
      }
      return _perThreadObject;
    }
  }
}
</pre>ZBUG
ı
csharpsquid:S3600ﬂ
csharpsquidS3600."params" should not be introduced on overrides"CRITICAL*cs:˛<p>Adding <code>params</code> to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added
modifier.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  public virtual void Method(int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(params int[] numbers) // Noncompliant, method can't be called with params syntax.
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base
{
  public virtual void Method(int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(int[] numbers)
  {
    ...
  }
}
</pre>Z
CODE_SMELL
ƒ
csharpsquid:S121Ø
csharpsquidS121*Control structures should use curly braces"CRITICAL*cs:”<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// the two statements seems to be attached to the if statement, but that is only true for the first one:
if (condition)
  ExecuteSomething();
  CheckSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
{
  ExecuteSomething();
  CheckSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
≈
csharpsquid:S1541Ø
csharpsquidS15410Methods and properties should not be too complex"CRITICAL*cs:Ã<p>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be
difficult to understand and therefore to maintain.</p>Z
CODE_SMELL
ç
csharpsquid:S3169˜
csharpsquidS3169+Multiple "OrderBy" calls should not be used"MAJOR*cs:ú<p>There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result because each
subsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance issue as well, because all of the
sorting will be executed, but only the result of the last sort will be kept.</p>
<p>Instead, use <code>ThenBy</code> for each call after the first. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = personList
  .OrderBy(person =&gt; person.Age)
  .OrderBy(person =&gt; person.Name)  // Noncompliant
  .ToList();  // x is sorted by Name, not sub-sorted
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = personList
  .OrderBy(person =&gt; person.Age)
  .ThenBy(person =&gt; person.Name)
  .ToList();
</pre>Z
CODE_SMELL
ê
csharpsquid:S122˚
csharpsquidS122&Statements should be on separate lines"MAJOR*cs:¶<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) DoSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition)
{
  DoSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored. Block statements are not considered either.</p>
<pre>
Func&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant
Func&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant
</pre>Z
CODE_SMELL
√	
csharpsquid:S2197≠	
csharpsquidS21979Modulus results should not be checked for direct equality"MINOR*cs:À<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public bool IsOdd(int x)
{
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public bool IsOdd(int x)
{
  return x %2 != 0;
}
</pre>
<p>or</p>
<pre>
public bool IsOdd(uint x)
{
  return x %2 == 1;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/xAHAAQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQBi">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_YBLAQ">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %
  operator </li>
</ul>ZBUG
˛
csharpsquid:S3168Ë
csharpsquidS3168("async" methods should not return "void""MAJOR*cs:ó<p>An <code>async</code> method with a <code>void</code> return type is a "fire and forget" method best reserved for event handlers because there's no
way to wait for the method's execution to complete and respond accordingly. There's also no way to <code>catch</code> exceptions thrown from the
method.</p>
<p>Having an <code>async void</code> method that is not an event handler could mean your program works some times and not others because of timing
issues. Instead, <code>async</code> methods should return <code>Task</code>.</p>
<p>This rule raises an issue when non-event handler methods are both <code>async</code> and <code>void</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class HttpPrinter
{
  private string content;

  public async void CallNetwork(string url) //Noncompliant
  {
    var client = new HttpClient();
    var response = await client.GetAsync(url);
    content = await response.Content.ReadAsStringAsync();
  }

  public async Task PrintContent(string url)  // works correctly if web request finishes in under 1 second, otherwise content will be null
  {
    CallNetwork(url);
    await Task.Delay(1000);
    Console.Write(content);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class HttpPrinter
{
  private string content;

  public async Task CallNetwork(string url)
  {
    var client = new HttpClient();
    var response = await client.GetAsync(url);
    content = await response.Content.ReadAsStringAsync();
  }

  public async Task PrintContent(string url)
  {
    await CallNetwork(url); // &lt;----- call changed here. If await is not added warning CS4014 will be triggered
    await Task.Delay(1000);
    Console.Write(content);
  }
}
</pre>ZBUG
ë
csharpsquid:S1309˚
csharpsquidS1309*Track uses of in-source issue suppressions"INFO*cs:¢<p>This rule allows you to track the usage of the <code>SuppressMessage</code> attributes and <code>#pragma warning disable</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[SuppressMessage("", "S100")]
...

#pragma warning disable S100
...
#pragma warning restore S100
</pre>Z
CODE_SMELL
ò
csharpsquid:S2757Ç
csharpsquidS2757'"=+" should not be used instead of "+=""MAJOR*cs:≤<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used, but ignores the operators when they're spaced out:
<code>= +</code>, <code>= -</code>, and <code>= !</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>ZBUG
Ï
csharpsquid:S2758÷
csharpsquidS2758QThe ternary operator should not return the same value regardless of the condition"MAJOR*cs:’<p>When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition.
Either the operator itself is pointless, or a mistake was made in coding it. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public bool CanVote(Person person)
{
  return person.GetAge() &gt; 18 ? true : true; // Noncompliant; is this what was intended?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public bool CanVote(Person person)
{
  return person.GetAge() &gt; 18 ? true : false;
  // or even better:
  // return person.GetAge() &gt; 18;
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS1871'>S1871</a> instead.</p>Z
CODE_SMELL
˘
csharpsquid:S3604„
csharpsquidS36041Member initializer values should not be redundant"MINOR*cs:Ç<p>Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same
time is redundant; the inline initialization will be overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  int age = 42; // Noncompliant
  public Person(int age)
  {
    this.age = age;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  int age;
  public Person(int age)
  {
    this.age = age;
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn't report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then
<a href='/coding_rules#rule_key=csharpsquid%3AS3052'>S3052</a> already reports an issue on the initialization. </p>Z
CODE_SMELL
˜
csharpsquid:S2070·
csharpsquidS2070;SHA-1 and Message-Digest hash algorithms should not be used"CRITICAL*cs:<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6.</p>
<p>This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and
<code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5 or SHA-1 algorithms, and of derived class instances of
<code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("MD5"); //Noncompliant
var hashProvider3 = new SHA1Managed(); //Noncompliant
var hashProvider4 = HashAlgorithm.Create("SHA1"); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var hashProvider1 = new SHA256Managed();
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("SHA256Managed");
var hashProvider3 = HashAlgorithm.Create("SHA256Managed");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a> </li>
</ul>ZVULNERABILITY
Â
csharpsquid:S2997œ
csharpsquidS2997D"IDisposables" created in a "using" statement should not be returned"MAJOR*cs:‚<p>Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger disposal of the object when
control passes out of the block's scope. The exception to this rule is when your method returns that <code>IDisposable</code>. In that case
<code>using</code> disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove
<code>using</code> or avoid returning the <code>IDisposable</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public FileStream WriteToFile(string path, string text)
{
  using (var fs = File.Create(path)) // Noncompliant
  {
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
    return fs;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public FileStream WriteToFile(string path, string text)
{
  var fs = File.Create(path);
  var bytes = Encoding.UTF8.GetBytes(text);
  fs.Write(bytes, 0, bytes.Length);
  return fs;
}
</pre>ZBUG
◊
csharpsquid:S3603¡
csharpsquidS36033Methods with "Pure" attribute should return a value"MAJOR*cs:Â<p>Marking a method with the <code>[Pure]</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return
a result, otherwise the call to the method should be equal to no-operation. So <code>[Pure]</code> on a <code>void</code> method is either a mistake,
or the method doesn't do any meaningful task.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  private int age;
  [Pure] // Noncompliant. In this case the method makes a possibly visible state change
  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Person
{
  private int age;

  void ConfigureAge(int age)
  {
    ...
    this.age = age;
  }
  ...
}
</pre>ZBUG
Ò
csharpsquid:S1871€
csharpsquidS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*cs:‘<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure with the same
implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an
<code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall through to the other.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i)
{
  case 1:
    DoSomething();
    break;
  case 2:
    DoSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    DoSomething();
    break;
  default:
    DoTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10)
{
  DoTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20)
{
  DoTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50)
{
  DoTheThing();  // Noncompliant; duplicates first condition
}
else
{
  DoTheRest();
}

if (b == 0)
{
  DoOneMoreThing();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    DoSomething();
    break;
  case 2:
    DoSomethingDifferent();
    break;
  default:
    DoTheRest();
}

if ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50))
{
  DoTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20)
{
  DoTheOtherThing();
}
else
{
  DoTheRest();
}

DoOneMoreThing();
</pre>
<p>or</p>
<pre>
switch (i)
{
  case 1:
    DoSomething();
    break;
  case 2:
    DoSomethingDifferent();
    break;
  case 3:
    DoThirdThing();
    break;
  default:
    DoTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10)
{
  DoTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20)
{
  DoTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50)
{
  DoTheThirdThing();
}
else
{
  DoTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>Z
CODE_SMELL
¥
csharpsquid:S1994û
csharpsquidS1994\"for" loop incrementers should modify the variable being tested in the loop's stop condition"MAJOR*cs:ô<p>It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it
could confuse future maintainers of the code, and should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++)
{
  // ...
}
</pre>ZBUG
√
csharpsquid:S2190≠
csharpsquidS2190 Recursion should not be infinite"BLOCKER*cs:‚<p>Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other,
or when <code>goto</code>s are used to move between two segments of code. It can be a useful tool, but unless the method includes a provision to break
out of the recursion and <code>return</code>, the recursion will continue until the stack overflows and the program crashes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int Pow(int num, int exponent)   // Noncompliant; no condition under which pow isn't re-called
{
  num = num * Pow(num, exponent-1);
  return num;  // this is never reached
}

void InternalRecursion(int i)
{
  start:
    goto end;
  end:
    goto start; // Noncompliant; there's no way to break out of this method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Pow(int num, int exponent)
{
  if (exponent &gt; 1) // recursion now conditional and stop-able
  {
    num = num * Pow(num, exponent-1);
  }
  return num;
}
</pre>ZBUG
ç
csharpsquid:S3257˜
csharpsquidS3257ADeclarations and initializations should be as concise as possible"MINOR*cs:Ü<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.</p>
<p>Specifically the following should be omitted when they can be inferred:</p>
<ul>
  <li> array element type </li>
  <li> array size </li>
  <li> <code>new DelegateType</code> </li>
  <li> <code>new Nullable&lt;Type&gt;</code> </li>
  <li> object or collection initializers (<code>{</code>}) </li>
  <li> type of lambda expression parameters </li>
  <li> parameter declarations of anonymous methods when the parameters are not used. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var l = new List&lt;int&gt;() {}; // Noncompliant, {} can be removed
var o = new object() {}; // Noncompliant, {} can be removed

var ints = new int[] {1, 2, 3}; // Noncompliant, int can be omitted
ints = new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed

int? i = new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there's implicit conversion from T to T?
var j = new int?(5);

Func&lt;int, int&gt; f1 = (int i) =&gt; 1; //Noncompliant, can be simplified

class Class
{
    private event EventHandler MyEvent;

    public Class()
    {
        MyEvent += new EventHandler((a,b)=&gt;{ }); // Noncompliant, needlessly verbose
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var l = new List&lt;int&gt;();
var o = new object();

var ints = new [] {1, 2, 3};
ints = new [] {1, 2, 3};

int? i = 5;
var j = new int?(5);

Func&lt;int, int&gt; f1 = (i) =&gt; 1;

class Class
{
    private event EventHandler MyEvent;

    public Class()
    {
        MyEvent += (a,b)=&gt;{ };
    }
}
</pre>Z
CODE_SMELL
Á
csharpsquid:S3253—
csharpsquidS3253?Constructor and destructor declarations should not be redundant"MINOR*cs:‚<p>Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also,
when only a single <code>public</code> parameterless constructor is defined in a class, then that constructor can be removed because the compiler
would generate it automatically. Similarly, empty <code>static</code> constructors and empty destructors are also wasted keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class X
{
  public X() { } // Noncompliant
  static X() { }  // Noncompliant
  ~X() { } // Noncompliant

  ...
}

class Y : X
{
  public Y(int parameter) : base() // Noncompliant
  {
    /* does something with the parameter */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class X
{
  ...
}

class Y : X
{
  public Y(int parameter)
  {
    /* does something with the parameter */
  }
}
</pre>Z
CODE_SMELL
‘
csharpsquid:S3254æ
csharpsquidS3254:Default parameter values should not be passed as arguments"MINOR*cs:‘<p>Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void M(int x, int y=5, int z = 7) { /* ... */ }

// ...
M(1, 5); //Noncompliant, y has the default value
M(1, z: 7); //Noncompliant, z has the default value
</pre>
<h2>Compliant Solution</h2>
<pre>
public void M(int x, int y=5, int z = 7) { /* ... */ }

// ...
M(1);
M(1);
</pre>Z
CODE_SMELL
é
csharpsquid:S3256¯
csharpsquidS3256%"string.IsNullOrEmpty" should be used"MINOR*cs:£<p>Using <code>string.Equals</code> to determine if a string is empty is significantly slower than using <code>string.IsNullOrEmpty()</code> or
checking for <code>string.Length == 0</code>. <code>string.IsNullOrEmpty()</code> is both clear and concise, and therefore preferred to laborious,
error-prone, manual null- and emptiness-checking.</p>
<h2>Noncompliant Code Example</h2>
<pre>
"".Equals(name); // Noncompliant
!name.Equals(""); // Noncompliant
name.Equals(string.Empty); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
name != null &amp;&amp; name.Length &gt; 0 // Compliant but more error prone
!string.IsNullOrEmpty(name)
string.IsNullOrEmpty(name)
</pre>Z
CODE_SMELL
ó	
csharpsquid:S3376Å	
csharpsquidS3376VAttribute, EventArgs, and Exception type names should end with the type being extended"MINOR*cs:˚<p>Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, <code>class FirstAttribute :
Attribute</code> can be used simply with <code>First</code>, but you must use the full name for <code>class AttributeOne : Attribute</code>.</p>
<p>This rule raises an issue when classes extending <code>Attribute</code>, <code>EventArgs</code>, or <code>Exception</code>, do not end with their
parent class names.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class AttributeOne : Attribute  // Noncompliant
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FirstAttribute : Attribute
{
}
</pre>
<h2>Exceptions</h2>
<p>If a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of whether or not it
conforms to the convention.</p>
<pre>
class Timeout : Exception // Noncompliant
{
}
class ExtendedTimeout : Timeout // Ignored; doesn't conform to convention, but the direct base doesn't conform either
{
}
</pre>Z
CODE_SMELL
Ô
csharpsquid:S1643Ÿ
csharpsquidS16436Strings should not be concatenated using '+' in a loop"MINOR*cs:Û<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string str = "";
for (int i = 0; i &lt; arrayOfStrings.Length ; ++i)
{
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
for (int i = 0; i &lt; arrayOfStrings.Length; ++i)
{
  bld.Append(arrayOfStrings[i]);
}
string str = bld.ToString();
</pre>Z
CODE_SMELL
ì
csharpsquid:S3010˝
csharpsquidS30103Static fields should not be updated in constructors"MAJOR*cs:°<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
  private static DateTime dateOfBirth;
  private static int expectedFingers;

  public Person(DateTime birthday)
  {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person
{
  private DateTime dateOfBirth;
  private static int expectedFingers = 10;

  public Person(DateTime birthday)
  {
    this.dateOfBirth = birthday;
  }
}
</pre>ZBUG
≤
csharpsquid:S3251ú
csharpsquidS32518Implementations should be provided for "partial" methods"MINOR*cs:¥<p><code>partial</code> methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking
methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to
production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are
critical, missing functionality, the loss of which will lead to unexpected results at runtime.</p>
<p>This rule raises an issue for partial methods for which no implementation can be found in the assembly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
partial class C
{
  partial void M(); //Noncompliant

  void OtherM()
  {
    M(); //Noncompliant. Will be removed.
  }
}
</pre>Z
CODE_SMELL
œ
csharpsquid:S1764π
csharpsquidS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*cs:≈
<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, <code>=</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) // always true
{
  doZ();
}
if ( a != a ) // always false
{
  doY();
}
if ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too
{
  doX();
}
if ( a == b || a == b ) // if the first one is true, the second one is too
{
  doW();
}

int j = 5 / 5; / /always 1
int k = 5 - 5; // always 0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href='/coding_rules#rule_key=csharpsquid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
ƒ
csharpsquid:S2178Æ
csharpsquidS21786Short-circuit logic should be used in boolean contexts"BLOCKER*cs:Õ<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (GetTrue() | GetFalse()) // Noncompliant; both sides evaluated
{
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (GetTrue() || GetFalse()) // true short-circuit logic
{
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand
  </li>
</ul>ZBUG
’
csharpsquid:S2971ø
csharpsquidS2971("IEnumerable" LINQs should be simplified"MAJOR*cs:Á<p>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways <code>IEnumerable
LINQ</code>s can be simplified</p>
<ul>
  <li> Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then null-checking in a query
  expression to choose elements based on type. </li>
  <li> Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast in a <code>Select</code> </li>
  <li> Use an expression in <code>Any</code> instead of <code>Where(element =&gt; [expression]).Any()</code>. </li>
  <li> Use <code>Count</code> instead of <code>Count()</code> when it's available. </li>
  <li> Don't call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
seq1.Select(element =&gt; element as T).Any(element =&gt; element != null);  // Noncompliant; use OfType
seq2.Select(element =&gt; element as T).Any(element =&gt; element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType
seq3.Where(element =&gt; element is T).Select(element =&gt; element as T); // Noncompliant; use OfType
seq4.Where(element =&gt; element is T).Select(element =&gt; (T)element); // Noncompliant; use OfType
seq5.Where(element =&gt; [expression]).Any();  // Noncompliant; use Any([expression])

var num = seq6.Count(); // Noncompliant
var arr = seq.ToList().ToArray(); //Noncompliant
var count = seq.ToList().Count(x=&gt;[condition]); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
seq1.OfType&lt;T&gt;().Any();
seq2.OfType&lt;T&gt;().Any(element =&gt; CheckCondition(element));
seq3.OfType&lt;T&gt;();
seq4.OfType&lt;T&gt;();
seq5.Any(element =&gt; [expression])

var num = seq6.Count;
var arr = seq.ToArray();
var count = seq.Count(x=&gt;[condition]);
</pre>Z
CODE_SMELL
…
csharpsquid:S3264≥
csharpsquidS3264Events should be invoked"MAJOR*cs:Î<p>Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class UninvokedEventSample
{
    private event Action&lt;object, EventArgs&gt; Happened; //Noncompliant

    public void RegisterEventHandler(Action&lt;object, EventArgs&gt; handler)
    {
        Happened += handler; //we register some event handlers
    }

    public void RaiseEvent()
    {
        if (Happened != null)
        {
            // Happened(this, null); // the event is never triggered, because this line is commented out.
        }
    }
}
</pre>Z
CODE_SMELL
˘
csharpsquid:S101‰
csharpsquidS101#Types should be named in camel case"MINOR*cs:í<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are camel cased. To reduce noise, two
consecutive upper case characters are allowed unless they form the whole type name. So, <code>MyXClass</code> is compliant, but <code>XC</code> on its
own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class my_class {...}
class SOMEName42 {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
class SomeName42 {...}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. Furthermore, the rule allows to
have <code>'_'</code> characters in class names inside test projects.</p>
<pre>
class Some_Name___42 {...} // valid in test
class Some_name___42 {...} // still not valid
class Some_Name_XC {...} // invalid because of XC, should be Some_Name_Xc
</pre>Z
CODE_SMELL
∫
csharpsquid:S3265§
csharpsquidS32658Non-flags enums should not be used in bitwise operations"CRITICAL*cs:π<p><code>enum</code>s are usually used to identify distinct elements in a set of values. However <code>enum</code>s can be treated as bit fields and
bitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When
<code>enum</code>s are used this way, it is a best practice to mark the <code>enum</code> with the <code>FlagsAttribute</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
enum Permissions
{
  None = 0,
  Read = 1,
  Write = 2,
  Execute = 4
}
// ...

var x = Permissions.Read | Permissions.Write;  // Noncompliant; enum is not marked with [Flags]
</pre>
<h2>Compliant Solution</h2>
<pre>
[Flags]
enum Permissions
{
  None = 0,
  Read = 1,
  Write = 2,
  Execute = 4
}
// ...

var x = Permissions.Read | Permissions.Write;
</pre>Z
CODE_SMELL
å
csharpsquid:S100˜
csharpsquidS1004Methods and properties should be named in camel case"MINOR*cs:î<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are camel cased. To
reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <code>MyXMethod</code> is compliant, but
<code>XM</code> on its own is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int doSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int DoSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>The rule ignores members in types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. <code>extern</code>
methods are also excluded from the check. Furthermore, when <code>'_'</code> character is found in a name, the camel casing is not enforced.</p>
<pre>
void My_method(){...} // valid
void My_method_(){...} // invalid, leading and trailing underscores are reported
</pre>Z
CODE_SMELL
É
csharpsquid:S2737Ì
csharpsquidS2737+"catch" clauses should do more than rethrow"MINOR*cs:í<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
string s = "";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e)  // Noncompliant
{
  throw;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
string s = "";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e) // Compliant
{
  logger.LogError(e);
  throw;
}
</pre>
<p>or</p>
<pre>
string s = File.ReadAllText(fileName);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
Ú
csharpsquid:S3262‹
csharpsquidS3262$"params" should be used on overrides"MAJOR*cs:à<p>Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in the
overriding method as well.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  public virtual void Method(params int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(int[] numbers) // Noncompliant, the params is missing.
  {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Base
{
  public virtual void Method(params int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(params int[] numbers)
  {
    ...
  }
}
</pre>Z
CODE_SMELL
¶
csharpsquid:S3263ê
csharpsquidS3263AStatic fields should appear in the order they must be initialized"MAJOR*cs:¶<p>Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class
above the field or fields required for its initialization will yield unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0
  public static int Y = 42;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public static int Y = 42;
  public static int X = Y;
}
</pre>
<p>or</p>
<pre>
class MyClass
{
  public static int X;
  public static int Y = 42;

  static MyClass()
  {
    X = Y;
  }
}
</pre>ZBUG
˚
csharpsquid:S2290Â
csharpsquidS2290'Field-like events should not be virtual"CRITICAL*cs:ã<p>Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler generates a
<code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit <code>add</code> and <code>remove</code>
methods.</p>
<p>When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>, the behavior of the C# compiler
is to generate a new <code>private</code> <code>delegate</code> field in the derived class, separate from the parent's field. This results in multiple
and separate events being created, which is rarely what's actually intended.</p>
<p>To prevent this, remove the <code>virtual</code> designation from the parent class event.</p>
<h2>Noncompliant Code Example</h2>
<pre>
abstract class Car
{
  public virtual event EventHandler OnRefueled; // Noncompliant

  public void Refuel()
  {
    // This OnRefueld will always be null
     if (OnRefueled != null)
     {
       OnRefueled(this, null);
     }
  }
}

class R2 : Car
{
  public override event EventHandler OnRefueled;
}

class Program
{
  static void Main(string[] args)
  {
    var r2 = new R2();
    r2.OnRefueled += new EventHandler((o, a) =&gt;
    {
      Console.WriteLine("This event will never be called");
    });
    r2.Refuel();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class Car
{
  public event EventHandler OnRefueled; // Compliant

  public void Refuel()
  {
    if (OnRefueled != null)
    {
      OnRefueled(this, null);
    }
  }
}

class R2 : Car {}

class Program
{
  static void Main(string[] args)
  {
    var r2 = new R2();
    r2.OnRefueled += new EventHandler((o, a) =&gt;
    {
      Console.WriteLine("This event will be called");
    });
    r2.Refuel();
  }
}
</pre>Z
CODE_SMELL
∂

csharpsquid:S2291†

csharpsquidS2291=Overflow checking should not be disabled for "Enumerable.Sum""MINOR*cs:∫	<p><code>Enumerable.Sum()</code> always executes addition in a <code>checked</code> context, so an <code>OverflowException</code> will be thrown if
the value exceeds <code>MaxValue</code> even if an <code>unchecked</code> context was specified. Using an <code>unchecked</code> context anyway
represents a misunderstanding of how <code>Sum</code> works.</p>
<p>This rule raises an issue when an <code>unchecked</code> context is specified for a <code>Sum</code> on integer types.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void Add(List&lt;int&gt; list)
{
  int d = unchecked(list.Sum());  // Noncompliant

  unchecked
  {
    int e = list.Sum();  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Add(List&lt;int&gt; list)
{
  int d = list.Sum();

  try
  {
    int e = list.Sum();
  }
  catch (System.OverflowException e)
  {
    // exception handling...
  }
}
</pre>
<h2>Exceptions</h2>
<p>When the <code>Sum()</code> call is inside a <code>try-catch</code> block, no issues are reported.</p>
<pre>
void Add(List&lt;int&gt; list)
{
  unchecked
  {
    try
    {
      int e = list.Sum();
    }
    catch (System.OverflowException e)
    {
      // exception handling...
    }
  }
}
</pre>ZBUG
…
csharpsquid:S2292≥
csharpsquidS2292-Trivial properties should be auto-implemented"MINOR*cs:÷<p>Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding
cleaner and more readable code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car
{
  private string _make;
  public string Make // Noncompliant
  {
    get { return _make; }
    set { _make = value; }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car
{
  public string Make { get; set; }
}
</pre>Z
CODE_SMELL
≠
csharpsquid:S3261ó
csharpsquidS3261Namespaces should not be empty"MINOR*cs:…<p>Namespaces with no lines of code clutter a project and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
namespace MyEmptyNamespace // Noncompliant
{

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>Z
CODE_SMELL
à
csharpsquid:S1698Ú
csharpsquidS16983"==" should not be used when "Equals" is overridden"MAJOR*cs:ñ<p>Using the equality <code>==</code> and inequality <code>!=</code> operators to compare two objects generally works. The operators can be
overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then
<code>==</code> resolves to reference equality, which may result in unexpected behavior if implementing classes override <code>Equals</code>.
Similarly, when a class overrides <code>Equals</code>, but instances are compared with non-overloaded <code>==</code>, there is a high chance that
value comparison was meant instead of the reference one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
}

public class MyClass : IMyInterface
{
    public override bool Equals(object obj)
    {
        //...
    }
}

public class Program
{
    public static void Method(IMyInterface instance1, IMyInterface instance2)
    {
        if (instance1 == instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.
        {
            Console.WriteLine("Equal");
        }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface IMyInterface
{
}

public class MyClass : IMyInterface
{
    public override bool Equals(object obj)
    {
        //...
    }
}

public class Program
{
    public static void Method(IMyInterface instance1, IMyInterface instance2)
    {
        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals
        {
            Console.WriteLine("Equal");
        }
    }
}
</pre>
<h2>Exceptions</h2>
<p>The rule does not report on comparisons of <code>System.Type</code> instances and on comparisons inside <code>Equals</code> overrides.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of
  boxed primitives </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference
  equality </li>
</ul>ZBUG
œ
csharpsquid:S3875π
csharpsquidS38758"operator==" should not be overloaded on reference types"BLOCKER*cs:œ<p>The use of <code>==</code> to compare to objects is expected to do a reference comparison. That is, it is expected to return <code>true</code> if
and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by
callers. On the other hand, overloading it to do exactly that is pointless; that's what <code>==</code> does by default.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static bool operator== (MyType x, MyType y) // Noncompliant
{
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Classes with overloaded <code>operator +</code> or <code>operator -</code> methods are ignored. </li>
  <li> Classes that implement <code>IComparable&lt;T&gt;</code> or <code>IEquatable&lt;T&gt;</code> most probably behave as a value-type objects and
  so are ignored. </li>
</ul>Z
CODE_SMELL
–
csharpsquid:S3876∫
csharpsquidS38765Strings or integral types should be used for indexers"MINOR*cs:’<p>Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and
potentially a situation where a method should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int this[MyCustomClass index]  // Noncompliant
{
    // get and set accessors
}
</pre>Z
CODE_SMELL
˜
csharpsquid:S1210·
csharpsquidS1210Z"Equals" and the comparison operators should be overridden when implementing "IComparable""MINOR*cs:ﬁ<p>When you implement <code>IComparable</code> or <code>IComparable&lt;T&gt;</code> on a class you should also override <code>Equals(object)</code>
and overload the comparison operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,
<code>&gt;=</code>). That's because the CLR cannot automatically call your <code>CompareTo</code> implementation from <code>Equals(object)</code> or
from the base comparison operator implementations. Additionally, it is best practice to override <code>GetHashCode</code> along with
<code>Equals</code>.</p>
<p>This rule raises an issue when a class implements <code>IComparable</code> without also overriding <code>Equals(object)</code> and the comparison
operators.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo: IComparable  // Noncompliant
{
  public int CompareTo(object obj) { /* ... */ }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo: IComparable
{
  public int CompareTo(object obj) { /* ... */ }
  public override bool Equals(object obj)
  {
    var other = obj as Foo;
    if (object.ReferenceEquals(other, null))
    {
      return false;
    }
    return this.CompareTo(other) == 0;
  }
  public int GetHashCode() { /* ... */ }
  public static bool operator == (Foo left, Foo right)
  {
    if (object.ReferenceEquals(left, null))
    {
      return object.ReferenceEquals(right, null);
    }
    return left.Equals(right);
  }
  public static bool operator &gt; (Foo left, Foo right)
  {
    return Compare(left, right) &gt; 0;
  }
  public static bool operator &lt; (Foo left, Foo right)
  {
    return Compare(left, right) &lt; 0;
  }
  public static bool operator != (Foo left, Foo right)
  {
    return !(left == right);
  }
}
</pre>ZBUG
≈
csharpsquid:S1697Ø
csharpsquidS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*cs:Ø<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null || str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str == null || str.Length == 0)
{
  Console.WriteLine("String is empty");
}

if (str != null &amp;&amp; str.Length &gt; 0)
{
  Console.WriteLine("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=csharpsquid%3AS2259'>S2259</a> instead.</p>ZBUG
∆
csharpsquid:S3871∞
csharpsquidS3871"Exception types should be "public""MAJOR*cs:ﬁ<p>The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be
<code>public</code> for that to work. </p>
<p>If a method throws a non-public exception, the best you can do on the caller's side is to <code>catch</code> the closest <code>public</code> base
of the class. That is, you lose all that custom information you created the exception type to pass. </p>
<h2>Noncompliant Code Example</h2>
<pre>
internal class MyException : Exception   // Noncompliant
{
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException : Exception
{
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores Exception types that are not derived directly from <code>System.Exception</code>, <code>System.SystemException</code>, or
<code>System.ApplicationException</code>.</p>Z
CODE_SMELL
⁄
csharpsquid:S3874ƒ
csharpsquidS3874-"out" and "ref" parameters should not be used"MAJOR*cs:Á
<p>Passing a parameter by reference, which is what happens when you use the <code>out</code> or <code>ref</code> parameter modifiers, means that the
method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change
the argument's values. If it was a reference type, then the method receives a pointer to a pointer, is is usually not what was intended. Even when it
is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</p>
<p>This rule raises an issue when <code>out</code> or <code>ref</code> is used on a non-<code>Optional</code> parameter in a public method.
<code>Optional</code> parameters are covered by S3447.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void GetReply(
         ref MyClass input, // Noncompliant
         out string reply)  // Noncompliant
{ ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
public string GetReply(MyClass input)
{ ... }

public bool TryGetReply(MyClass input, out string reply)
{ ... }

public ReplyData GetReply(MyClass input)
{ ... }

internal void GetReply(ref MyClass input, out string reply)
{ ... }
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise issues for:</p>
<p>- non-public methods</p>
<p>- methods with only 'out' parameters, name starting with "Try" and return type bool.</p>Z
CODE_SMELL
ˇ	
csharpsquid:S1451È	
csharpsquidS1451+Track lack of copyright and license headers"BLOCKER*cs:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
≥
csharpsquid:S1694ù
csharpsquidS1694@An abstract class should have both abstract and concrete methods"MINOR*cs:≠
<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the
<code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal //Noncompliant; should be an interface
{
  abstract void Move();
  abstract void Feed();
}

public abstract class Color //Noncompliant; should be concrete with a private constructor
{
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int GetRed()
  {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal
{
  void Move();
  void Feed();
}

public class Color
{
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color()
  {}

  public int GetRed()
  {
    return red;
  }
}

public abstract class Lamp
{
  private bool switchLamp = false;

  public abstract void Glow();

  public void FlipSwitch()
  {
    switchLamp = !switchLamp;
    if (switchLamp)
    {
      Glow();
    }
  }
}
</pre>Z
CODE_SMELL
∫
csharpsquid:S3872§
csharpsquidS3872?Parameter names should not duplicate the names of their methods"MINOR*cs:µ<p>The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its
parameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language
that's not the case, it is still likely to confuse callers and maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void Login(string login)  // Noncompliant
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void Login(string userName)
{
  //...
}
</pre>Z
CODE_SMELL
‡
csharpsquid:S1215 
csharpsquidS1215!"GC.Collect" should not be called"MINOR*cs:˘<p>Calling <code>GC.Collect</code> is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking
operation that examines <em>every object in memory</em> for cleanup. Further, you don't have control over when this blocking cleanup will actually
run.</p>
<p>As a general rule, the consequences of calling this method far outweigh the benefits unless perhaps you've just triggered some event that is unique
in the run of your program that caused a lot of long-lived objects to die.</p>
<p>This rule raises an issue when <code>GC.Collect</code> is invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
  // ...
  GC.Collect(2, GCCollectionMode.Optimized); // Noncompliant
}
</pre>Z
CODE_SMELL
û
csharpsquid:S1450à
csharpsquidS1450TPrivate fields only used as local variables in methods should become local variables"MINOR*cs:Ñ<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private int singularField;

  public void DoSomething(int x)
  {
    singularField = x + 5;

    if (singularField == 0) { /* ... */ }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public void DoSomething(int x)
  {
    int localVariable = x + 5;

    if (localVariable == 0) { /* ... */ }
  }
}
</pre>Z
CODE_SMELL
û
csharpsquid:S2306à
csharpsquidS23065"async" and "await" should not be used as identifiers"BLOCKER*cs:°<p>Since C# 5.0, <code>async</code> and <code>await</code> are contextual keywords. Contextual keywords do have a particular meaning in some contexts,
but can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any
confusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int await = 42; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int someOtherName = 42;
</pre>Z
CODE_SMELL
∂

csharpsquid:S3877†

csharpsquidS38777Exceptions should not be thrown from unexpected methods"BLOCKER*cs:∑	<p>It is expected that some methods should be called with caution, but others, such as <code>ToString</code>, are expected to "just work". Throwing an
exception from such a method is likely to break callers' code unexpectedly.</p>
<p>An issue is raised when an exception is thrown from any of the following: </p>
<ul>
  <li> Event accessors </li>
  <li> <code>Object.Equals</code> </li>
  <li> <code>IEquatable.Equals</code> </li>
  <li> <code>GetHashCode</code> </li>
  <li> <code>ToString</code> </li>
  <li> <code>static</code> constructors </li>
  <li> <code>IDisposable.Dispose</code> </li>
  <li> <code>operator ==, !=, &lt;, &gt;, &lt;=, &gt;=</code> </li>
  <li> <code>implicit</code> cast operators </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public override string ToString()
{
  if (string.IsNullOrEmpty(Name))
  {
    throw new ArgumentException("...");  // Noncompliant
  }
  //...
</pre>
<h2>Exceptions</h2>
<p><code>System.NotImplementedException</code> and its derivatives are ignored.</p>
<p><code>System.InvalidOperationException</code>, <code>System.NotSupportedException</code>, and <code>System.ArgumentException</code> and their
derivatives are ignored in event accessors.</p>Z
CODE_SMELL
£
csharpsquid:S1104ç
csharpsquidS1104+Fields should not have public accessibility"MINOR*cs:Ø
<p>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>
</ul>
<p>By using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional
protection (security) features such as Link Demands.</p>
<p>Note that due to optimizations on simple properties, public fields provide only very little performance gain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public int instanceData = 32; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo
{
    private int instanceData = 32;

    public int InstanceData
    {
        get { return instanceData; }
	set { instanceData = value ; }
    }
}
</pre>
<h2>Exceptions</h2>
<p>Fields marked as <code>readonly</code> or <code>const</code> are ignored by this rule.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>ZVULNERABILITY
Í
csharpsquid:S1699‘
csharpsquidS16995Constructors should only call non-overridable methods"CRITICAL*cs:Ï<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullReferenceException</code>) can result, because the fields aren't initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent
{
  public Parent()
  {
    DoSomething();  // Noncompliant
  }

  public virtual void DoSomething() // can be overridden
  {
    ...
  }
}

public class Child : Parent
{
  private string foo;

  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized
  {
    this.foo = foo;
  }

  public override void DoSomething()
  {
    Console.WriteLine(this.foo.Length);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/MYYbAQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/TQBi">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or
  destructors </li>
</ul>Z
CODE_SMELL
Ì
csharpsquid:S2674◊
csharpsquidS26748The length returned from a stream read should be checked"MINOR*cs:ˆ
<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method with the number of bytes requested.
Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both
harmful and difficult to reproduce.</p>
<p>This rule raises an issue when a <code>Stream.Read</code> or a <code>Stream.ReadAsync</code> method is called, but the return value is not
checked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(string fileName)
{
  using (var stream = File.Open(fileName, FileMode.Open))
  {
    var result = new byte[stream.Length];
    stream.Read(result, 0, (int)stream.Length); // Noncompliant
    // ... do something with result
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void DoSomething(string fileName)
{
  using (var stream = File.Open(fileName, FileMode.Open))
  {
    var buffer = new byte[1024];
    using (var ms = new MemoryStream())
    {
        int read;
        while ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)
        {
            ms.Write(buffer, 0, read);
        }
        // ... do something with ms
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/XACSAQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an
  array </li>
</ul>ZBUG
≥
csharpsquid:S3887ù
csharpsquidS38874Mutable, non-private fields should not be "readonly""MINOR*cs:π<p>Using the <code>readonly</code> keyword on a field means that it can't be changed after initialization. However, when applied to collections or
arrays, that's only partly true. <code>readonly</code> enforces that another instance can't be assigned to the field, but it cannot keep the contents
from being updated. That means that in practice, the field value really can be changed, and the use of <code>readonly</code> on such a field is
misleading, and you're likely to not be getting the behavior you expect.</p>
<p>This rule raises an issue when a non-private, <code>readonly</code> field is an array or collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  public readonly string[] strings;  // Noncompliant

  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  public string[] strings;

  // ...
</pre>
<p>or</p>
<pre>
public class MyClass
{
  private readonly string[] strings;

  // ...
</pre>Z
CODE_SMELL
÷
csharpsquid:S2551¿
csharpsquidS2551/Types and "this" should not be used for locking"CRITICAL*cs:Â<p>Locking on the current object instance (i.e. <code>this</code>), or on a <code>Type</code> object increases the chance of deadlocks because any
other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. </p>
<p>Instead, a new, private <code>object</code> should be created and used for the lock.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void MyLockingMethod()
{
  lock (this) // Noncompliant
  {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
object lockObj = new object();

public void MyLockingMethod()
{
  lock (lockObj)
  {
    // ...
  }
}
</pre>ZBUG
ì
csharpsquid:S3884˝
csharpsquidS3884A"CoSetProxyBlanket" and "CoInitializeSecurity" should not be used"BLOCKER*cs:ä<p><code>CoSetProxyBlanket</code> and <code>CoInitializeSecurity</code> both work to set the permissions context in which the process invoked
immediately after is executed. Calling them from within that process is useless because it's to late at that point; the permissions context has
already been set.</p>
<p>Specifically, these methods are meant to be called from a non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
[DllImport("ole32.dll")]
static extern int CoSetProxyBlanket([MarshalAs(UnmanagedType.IUnknown)]object pProxy, uint dwAuthnSvc, uint dwAuthzSvc,
	[MarshalAs(UnmanagedType.LPWStr)] string pServerPrincName, uint dwAuthnLevel, uint dwImpLevel, IntPtr pAuthInfo,
	uint dwCapabilities);

public enum RpcAuthnLevel
{
	Default = 0,
	None = 1,
	Connect = 2,
	Call = 3,
	Pkt = 4,
	PktIntegrity = 5,
	PktPrivacy = 6
}

public enum RpcImpLevel
{
	Default = 0,
	Anonymous = 1,
	Identify = 2,
	Impersonate = 3,
	Delegate = 4
}

public enum EoAuthnCap
{
	None = 0x00,
	MutualAuth = 0x01,
	StaticCloaking = 0x20,
	DynamicCloaking = 0x40,
	AnyAuthority = 0x80,
	MakeFullSIC = 0x100,
	Default = 0x800,
	SecureRefs = 0x02,
	AccessControl = 0x04,
	AppID = 0x08,
	Dynamic = 0x10,
	RequireFullSIC = 0x200,
	AutoImpersonate = 0x400,
	NoCustomMarshal = 0x2000,
	DisableAAA = 0x1000
}

[DllImport("ole32.dll")]
public static extern int CoInitializeSecurity(IntPtr pVoid, int cAuthSvc, IntPtr asAuthSvc, IntPtr pReserved1,
	RpcAuthnLevel level, RpcImpLevel impers, IntPtr pAuthList, EoAuthnCap dwCapabilities, IntPtr pReserved3);

static void Main(string[] args)
{
	var hres1 = CoSetProxyBlanket(null, 0, 0, null, 0, 0, IntPtr.Zero, 0); // Noncompliant

	var hres2 = CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None,
		RpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero); // Noncompliant
}
</pre>Z
CODE_SMELL
≥
csharpsquid:S3885ù
csharpsquidS3885"Assembly.Load" should be used"MAJOR*cs:œ<p>The parameter to <code>Assembly.Load</code> includes the full specification of the dll to be loaded. Use another method, and you might end up with
a dll other than the one you expected. </p>
<p>This rule raises an issue when <code>Assembly.LoadFrom</code>, <code>Assembly.LoadFile</code>, or <code>Assembly.LoadWithPartialName</code> is
called.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
    Assembly.LoadFrom(...); // Noncompliant
    Assembly.LoadFile(...); // Noncompliant
    Assembly.LoadWithPartialName(...); // Noncompliant + deprecated
}
</pre>Z
CODE_SMELL
˘
csharpsquid:S1109„
csharpsquidS1109@A close curly brace should be located at the beginning of a line"MINOR*cs:Û<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>Z
CODE_SMELL
ˇ
csharpsquid:S3880È
csharpsquidS3880Finalizers should not be empty"MAJOR*cs:õ<p>Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no
benefit or justification.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    ~Foo() // Noncompliant
    {
    }
}
</pre>Z
CODE_SMELL
ô
csharpsquid:S3881É
csharpsquidS3881-"IDisposable" should be implemented correctly"MAJOR*cs:¶<p>The <code>IDisposable</code> interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource
leaks or more severe bugs.</p>
<p>This rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to.</p>
<p>In particular the <code>Dispose()</code> method should only contain the following code:</p>
<pre>
public void Dispose()
{
    Dispose(true);
    GC.SuppressFinalize(this);
}
</pre>
<p>Specifically this rule checks for these problems:</p>
<ul>
  <li> <code>Dispose()</code> is virtual. </li>
  <li> <code>Dispose()</code> is not public. </li>
  <li> An exception is thrown inside <code>Dispose()</code> or <code>Dispose(bool)</code>. </li>
  <li> This is an unsealed type and <code>Dispose(bool)</code> is not <code>protected virtual</code>. </li>
  <li> This is an unsealed type and <code>Dispose()</code> doesn't match the implementation above. </li>
  <li> This is an unsealed type and the finalizer doesn't call <code>Dispose(bool)</code> or the class finalizer. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo : IDisposable // Noncompliant - provide protected overridable implementation of Dispose(bool) on Foo or mark the type as sealed.
{
    public void Dispose() // Noncompliant - should contain only a call to Dispose(true) and then GC.SuppressFinalize(this)
    {
        // Cleanup
    }
}

public class Foo : IDisposable
{
    void IDisposable.Dispose() // Noncompliant - Dispose() should be public
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    public virtual void Dispose() // Noncompliant - Dispose() should be sealed
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
}

public class Foo : IDisposable
{
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        // Cleanup
    }

    ~Foo() // Noncompliant - Modify Foo.~Foo() so that it calls Dispose(false) and then returns.
    {
        // Cleanup
    }
}{code}
</pre>
<h2>Compliant Solution</h2>
<pre>
public sealed class Foo : IDisposable
{
    public void Dispose()
    {
        // Cleanup
    }
}

public class Foo : IDisposable
{
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        // Cleanup
    }
}

public class Foo : IDisposable
{
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        // Cleanup
    }

    ~Foo()
    {
        Dispose(false);
    }
}
</pre>Z
CODE_SMELL
≈
csharpsquid:S1227Ø
csharpsquidS1227;break statements should not be used except for switch cases"MINOR*cs:ƒ<p><code>break;</code> is an unstructured control flow statement which makes code harder to read.</p>
<p>Ideally, every loop should have a single termination condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 0;
while (true)
{
  if (i == 10)
  {
    break;      // Non-Compliant
  }

  Console.WriteLine(i);
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 0;
while (i != 10) // Compliant
{
  Console.WriteLine(i);
  i++;
}
</pre>Z
CODE_SMELL
Ô
csharpsquid:S2436Ÿ
csharpsquidS2436?Classes and methods should not have too many generic parameters"MAJOR*cs:Í<p>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default parameter value of 2:</p>
<pre>
&lt;S, T, U, V&gt; void foo() {} // Noncompliant; not really readable
&lt;String, Integer, Object, String&gt;foo(); // especially on invocations
</pre>Z
CODE_SMELL
É
csharpsquid:S3889Ì
csharpsquidS3889;Neither "Thread.Resume" nor "Thread.Suspend" should be used"BLOCKER*cs:Ä<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if
<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer
synchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
  // ...
  Thread.CurrentThread.Suspend(); // Noncompliant
  Thread.CurrentThread.Resume(); // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx">Thread.Resume Method ()</a> </li>
  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx">Thread.Suspend Method ()</a> </li>
</ul>Z
CODE_SMELL
‰
csharpsquid:S1226Œ
csharpsquidS1226@Method parameters and caught exceptions should not be reassigned"MINOR*cs:Â<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate
results.</p>
<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when
<code>this</code> was forgotten.</p>
<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or
some temporary variable is being accessed without going through the whole method.</p>
<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse
them.</p>
<p>All parameters should be treated as <code>readonly</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  public string name;

  public MyClass(string name)
  {
    name = name;                    // Noncompliant - useless identity assignment
  }

  public int Add(int a, int b)
  {
    a = a + b;                      // Noncompliant

    /* additional logic */

    return a;                       // Seems like the parameter is returned as is, what is the point?
  }

  public static void Main()
  {
    MyClass foo = new MyClass();
    int a = 40;
    int b = 2;
    foo.Add(a, b);                  // Variable "a" will still hold 40 after this call
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public string name;

  public MyClass(string name)
  {
    this.name = name;               // Compliant
  }

  public int Add(int a, int b)
  {
    return a + b;                   // Compliant
  }

  public static void Main()
  {
    MyClass foo = new MyClass();
    int a = 40;
    int b = 2;
    foo.Add(a, b);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>ZBUG
º
csharpsquid:S1313¶
csharpsquidS1313$IP addresses should not be hardcoded"MAJOR*cs:œ<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>
<ul>
  <li> a recompile is required if the address changes </li>
  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>
  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>
  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var ip = "127.0.0.1";
var address = IPAddress.Parse(ip);
</pre>
<h2>Compliant Solution</h2>
<pre>
var ip = ConfigurationManager.AppSettings["myapplication.ip"];
var address = IPAddress.Parse(ip);
</pre>
<h2>Exceptions</h2>
<p>Although "::" is a valid IPv6 address, the rule doesn't report on it. </p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>ZVULNERABILITY
Ö
csharpsquid:S2437Ô
csharpsquidS2437,Silly bit operations should not be performed"MAJOR*cs:ö<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>ZBUG
π
csharpsquid:S3610£
csharpsquidS36100Nullable type comparison should not be redundant"MAJOR*cs: <p>Calling <code>GetType()</code> on a nullable object returns the underlying value type. Thus, comparing the returned <code>Type</code> object to
<code>typeof(Nullable&lt;SomeType&gt;)</code> doesn't make sense. The comparison either throws an exception or the result can be known at compile
time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int? nullable = 42;
bool comparison = nullable.GetType() == typeof(Nullable&lt;int&gt;); // Noncompliant, always false
comparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, always true

nullable = null;
comparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, calling GetType on a null always throws an exception
</pre>ZBUG
©
csharpsquid:S2760ì
csharpsquidS27604Sequential tests should not check the same condition"MINOR*cs:Ø<p>When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should
have been checked in the second test.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b)
{
  doTheThing(b);
}
if (a == b) // Noncompliant; is this really what was intended?
{
  doTheThing(c);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a == b)
{
  doTheThing(b);
  doTheThing(c);
}
</pre>
<p>or</p>
<pre>
if (a == b)
{
  doTheThing(b);
}
if (b == c)
{
  doTheThing(c);
}
</pre>
<h2>Exceptions</h2>
<p>Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.</p>Z
CODE_SMELL
√
csharpsquid:S2761≠
csharpsquidS27619Doubled prefix operators "!!" and "~~" should not be used"MAJOR*cs:À<p>Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are
typically caused by accidentally double-tapping the key in question without noticing.</p>
<p>Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int v1 = 0;
bool v2 = false;

var v3 = !!v1; // Noncompliant
var v4 = ~~v2; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int v1 = 0;
bool v2 = false;

var v3 = !v1;
var v4 = ~v2;
</pre>ZBUG
∏
csharpsquid:S3052¢
csharpsquidS30523Members should not be initialized to default values"MINOR*cs:ø<p>The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization
values, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's
considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class X
{
  public int field = 0; // Noncompliant
  public object o = null; // Noncompliant
  public object MyProperty { get; set; } = null; // Noncompliant
  public event EventHandler MyEvent = null;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class X
{
  public int field;
  public object o;
  public object MyProperty { get; set; }
  public event EventHandler MyEvent;
}
</pre>
<h2>Exceptions</h2>
<p><code>const</code> fields are ignored.</p>Z
CODE_SMELL
”
csharpsquid:S3172Ω
csharpsquidS3172"Delegates should not be subtracted"MAJOR*cs:Ú
<p>In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.</p>
<p>Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyDelegate first, second, third, fourth;
first = () =&gt; Console.Write("1");
second = () =&gt; Console.Write("2");
third = () =&gt; Console.Write("3");
fourth = () =&gt; Console.Write("4");

MyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = "1234"
MyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = "12"


MyDelegate chain14 = first + fourth; // creates a new MyDelegate instance which is a list under the covers
MyDelegate chain23 = chain1234 - chain14; // Noncompliant; (first + fourth) doesn't exist in chain1234


// The chain sequence of "chain23" will be "1234" instead of "23"!
// Indeed, the sequence "1234" does not contain the subsequence "14", so nothing is subtracted
// (but note that "1234" contains both the "1" and "4" subsequences)
chain23 = chain1234 - (first + fourth); // Noncompliant

chain23(); // will print "1234"!
</pre>
<h2>Compliant Solution</h2>
<pre>
MyDelegate chain23 = chain1234 - first - fourth; // Compliant - "1" is first removed, followed by "4"

chain23(); // will print "23"
</pre>ZBUG
ﬁ

csharpsquid:S1206»

csharpsquidS1206B"Equals(Object)" and "GetHashCode()" should be overridden in pairs"MINOR*cs:›	<p>There is a contract between <code>Equals(object)</code> and <code>GetHashCode()</code>: If two objects are equal according to the
<code>Equals(object)</code> method, then calling <code>GetHashCode()</code> on each of them must yield the same result. If this is not the case, many
collections won't handle class instances correctly.</p>
<p>In order to comply with the contract, <code>Equals(object)</code> and <code>GetHashCode()</code> should be either both inherited, or both
overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {    // Noncompliant - should also override "hashCode()"

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {    // Compliant

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

  @Override
  public int hashCode() {
    /* ... */
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYYbAQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a
  hashCode() method </li>
</ul>ZBUG
ù
csharpsquid:S1449á
csharpsquidS14493Culture should be specified for "string" operations"MINOR*cs:´<p><code>string.ToLower()</code>, <code>ToUpper</code>, <code>IndexOf</code>, <code>LastIndexOf</code>, and <code>Compare</code> are all
culture-dependent, as are some (floating point number and <code>DateTime</code>-related) calls to <code>ToString</code>. Fortunately, all have
variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default
culture, possibly creating problems with international characters.</p>
<p><code>string.CompareTo()</code> is also culture specific, but has no overload that takes a culture information, so instead it's better to use
<code>CompareOrdinal</code>, or <code>Compare</code> with culture.</p>
<p>Calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var lowered = someString.ToLower(); //Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var lowered = someString.ToLower(CultureInfo.InvariantCulture);
</pre>
<p>or</p>
<pre>
var lowered = someString.ToLowerInvariant();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing
  locale-dependent data </li>
</ul>ZBUG
®
csharpsquid:S3626í
csharpsquidS3626'Jump statements should not be redundant"MINOR*cs:ª<p>Jump statements, such as <code>return</code>, <code>yield break</code>, <code>goto</code>, and <code>continue</code> let you change the default
flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void Foo()
{
  goto A; // Noncompliant
  A:
  while (condition1)
  {
    if (condition2)
    {
      continue; // Noncompliant
    }
    else
    {
      DoTheThing();
    }
  }
  return; // Noncompliant; this is a void method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void Foo()
{
  while (condition1)
  {
    if (!condition2)
    {
      DoTheThing();
    }
  }
}
</pre>Z
CODE_SMELL
Ÿ
csharpsquid:S3869√
csharpsquidS38694"SafeHandle.DangerousGetHandle" should not be called"BLOCKER*cs:›<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can
lead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should
simply be avoided altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static void Main(string[] args)
{
    System.Reflection.FieldInfo fieldInfo = ...;
    SafeHandle handle = (SafeHandle)fieldInfo.GetValue(rKey);
    IntPtr dangerousHandle = handle.DangerousGetHandle();  // Noncompliant
}
</pre>Z
CODE_SMELL
Ω
xml:IllegalTabCheck•
xmlIllegalTabCheck(Tabulation characters should not be used"MINOR*xml2IllegalTabCheck:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
Ç
xml:XmlSchemaCheckÎ
xmlXmlSchemaCheckXML files should be valid"MAJOR*xml2XmlSchemaCheck:ï<p>This rule allows validation of XML files against XML Schema using Xerces parser.</p>
<p>The "schemas" parameter can be set to:</p>
<ul>
  <li> the namespace or short name of a built-in schema (ex: xhtml1-strict or http://www.w3.org/1999/xhtml) </li>
  <li> the URL to a schema (ex: http://www.springframework.org/schema/beans/spring-beans-3.2.xsd) </li>
  <li> the relative path to a schema on the filesystem (ex: schemas/xsd/mycustomschema.xsd) </li>
</ul>
<p>Default value: <code>autodetect</code>. In this case, the parser will try to load the schema based on the doctype or the namespace declaration in
the document.</p>
<p>Files to be validated by the schema can be specified through inclusion pattern using the "filePattern" parameter.</p>
<p>Built-in schemas:</p>
<table>
  <tbody>
    <tr>
      <th>DESCRIPTION</th>
      <th>NAMESPACE OR SHORT NAME</th>
      <th>DOCTYPE</th>
    </tr>
    <tr>
      <td>XML</td>
      <td>http://www.w3.org/2001/xml.xsd</td>
      <td> </td>
    </tr>
    <tr>
      <td>XML</td>
      <td>http://www.w3.org/XML/1998/namespace</td>
      <td> </td>
    </tr>
    <tr>
      <td>XHTML1.0 Strict</td>
      <td>http://www.w3.org/1999/xhtml</td>
      <td> </td>
    </tr>
    <tr>
      <td>XHTML1.0 Strict</td>
      <td>xhtml1-strict</td>
      <td>-//W3C//DTD XHTML 1.0 Strict//EN</td>
    </tr>
    <tr>
      <td>XHTML1.0 Transitional</td>
      <td>xhtml1-transitional</td>
      <td>-//W3C//DTD XHTML 1.0 Transitional//EN</td>
    </tr>
    <tr>
      <td>XHTML1.0 Frameset</td>
      <td>xhtml1-frameset</td>
      <td>-//W3C//DTD XHTML 1.0 Frameset//EN</td>
    </tr>
    <tr>
      <td>XHTML1.1</td>
      <td> </td>
      <td>-//W3C//DTD XHTML 1.1 Strict//EN</td>
    </tr>
    <tr>
      <td>JSF Core</td>
      <td>http://java.sun.com/jsf/core</td>
      <td> </td>
    </tr>
    <tr>
      <td>JSF HTML Basic</td>
      <td>http://java.sun.com/jsf/html</td>
      <td> </td>
    </tr>
    <tr>
      <td>JSF Facelets</td>
      <td>http://java.sun.com/jsf/facelets</td>
      <td> </td>
    </tr>
    <tr>
      <td>Maven Project Model</td>
      <td>http://maven.apache.org/POM/4.0.0</td>
      <td> </td>
    </tr>
  </tbody>
</table>@ZBUG
∂
	xml:S2260®
xmlS2260XML parser failure"MAJOR*xml2S2260:Ê<p>When the XML parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
◊
xml:XPathCheckƒ
xml
XPathCheckTrack breaches of an XPath rule"MAJOR*xml2
XPathCheck:È<p>This rule allows the definition of custom rules using XPath expressions.</p>
<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>
<ul>
  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>
  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>
  <li> anything else, no issue is created </li>
</ul>
<p>Here is an example of an XPath expression to log an issue on each 'td' tag using the 'nowrap' deprecated attribute: </p>
<pre>
//td[@nowrap]
</pre>@Z
CODE_SMELL
¸
xml:NewlineCheckÁ
xmlNewlineCheck#Newlines should follow each element"MAJOR*xml2NewlineCheck:Ü<p>Each element should be on a line to itself.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;parent&gt;&lt;child /&gt;&lt;/parent&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;parent&gt;
  &lt;child /&gt;
&lt;/parent&gt;
</pre>Z
CODE_SMELL
ı
xml:IndentCheck·
xmlIndentCheck+Source code should be indented consistently"MINOR*xml2IndentCheck:˙<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier. </p>
<p>By default this rule checks that each block of code is indented, although it does not check the size of the indent. Parameter "indentSize" allows
the expected indent size to be defined. Only the first line of a badly indented section is reported.</p>Z
CODE_SMELL
≠
	xml:S1778ü
xmlS1778IXML files containing a prolog header should start with "<?xml" characters"CRITICAL*xml2S1778:™<p>The prolog header is the following piece of code that some XML documents start with:</p>
<pre>
&lt;?xml version="y.x" encoding="zzzzz"?&gt;
</pre>
<p>When the prolog exists in an XML document, it should be at the beginning of the file to enable programs to determine the encoding of non-UTF-8,
non-UTF-16 files.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Generated file --&gt;  &lt;!--  Noncompliant  --&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;firstNode&gt;
  content
&lt;/firstNode&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- Generated file --&gt;
&lt;firstNode&gt;
  content
&lt;/firstNode&gt;
</pre>ZBUG
Æ

flex:S1454ü
flexS1454ZMultiple "++" or "--" unary operators should not be used in a single arithmetic expression"MINOR*flex:ö<p>
  Using several "--" or "++" unary operators in the same arithmetic expression can quickly make the expression unreadable.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
 var j:int = foo++ - --bar;
</pre>

<h2>Compliant Solution</h2>
<pre>
bar--;
var j:int = foo++ - bar;
</pre>Z
CODE_SMELL
◊

flex:S1455»
flexS1455;Package definition should be separate from Class definition"MINOR*flex:‚<p>Declaring the package and class together has been deprecated since ActionScript 3. The package definition should be declared outside of the class definition even if the old syntax is still supported. </p>

<h2>Noncompliant Code Example</h2>

<pre>
class P.A {...} 
</pre>

<h2>Compliant Solution</h2>

<pre>
package P {    
    class A {...}
}

</pre>Z
CODE_SMELL
Ì	

flex:S1176ﬁ	
flexS1176PPublic classes, methods, properties and metadata should be documented with ASDoc"MAJOR*flex:„<p>
  Try to imagine using the standard Flex API without ASDoc. It would be a nightmare, because ASDoc is the only way to understand of the contract of the API.</br>
  Documenting an API with ASDoc increases the productivity of the developers use it.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  public var myLabel:String;

  public function myMethod(param1:String):Boolean {...}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
/**
 * my doc
 */
public class MyClass {
  /**
   * my doc
   */
  public var myLabel:String;

  /**
   * my doc
   * @param param1 my doc
   * @return my doc
   */
  public function myMethod(param1:String):Boolean {...}
}
</pre>

<h2>Exceptions</h2>
<p>Classes or class elements with an ASDoc <code>@private</code> comment are ignored by this rule.</p>
<pre>
/**
 * @private  // This class and all its elements are ignored
 */
public class MyClass {  // Compliant

  public var myLabel:String;   // Compliant
}

public class AnotherClass {  // Noncompliant; class not @private and not documented

  /**
   * @private
   */
  public var name:String;  // Compliant
}
</pre>Z
CODE_SMELL
ƒ
flex:ParsingErrorÆ
flexParsingErrorFlex parser failure"MAJOR*flex:È<p>
When the Flex parser fails, it is possible to record the failure as a violation on the file.
This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.
</p>Z
CODE_SMELL
˚	

flex:S1451Ï	
flexS1451/Copyright and license headers should be defined"BLOCKER*flex:ê	<p>
  Each source file should start with a header stating file ownership and the license which must be used to distribute the application.<br/>
  This rule must be fed with the header text that is expected at the beginning of every file.
</p>

<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
◊
flex:LineLength√
flex
LineLengthLines should not be too long"MINOR*flex:x<p>
  Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.
</p>Z
CODE_SMELL
ß


flex:S1172ò

flexS1172,Unused function parameters should be removed"MAJOR*flex:¡	<p>
  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a:int, b:int):void      // "b" is unused
{
  compute(a);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
function doSomething(a:int):void
{
  compute(a);
}
</pre>

<h2>Exceptions</h2>
<p>The following cases are ignored</p>
<ul>
  <li>event handlers.</li>
  <li>overriding methods.</li>
  <li>all methods in classes implementing one or more interfaces.</li>
  <li>methods which are empty or where the body consists of a single comment or a single throw statement (i.e. where the intention is apparently to simulate an abstract class).</li>
</ul>
<pre>
override function doSomething(a:int):void {    // ignored
  compute(a);
}

...

class AbstractSomething {
  public function doSomething(a:int) {  // ignored
    throw new IllegalOperationError("doSomething() is abstract");
  }

...

interface I {
  function action(a:int, b:int);
}

class C extends I {
  function action(a:int, b:int) { // ignored
    return doSomethignWith(a);
  }
}
</pre>

<h2>See</h2>

<ul>
  <li> MISRA C++:2008, 0-1-11
  </li><li> MISRA C:2012, 2.7
</li></ul>Z
CODE_SMELL
Ó

flex:S1170ﬂ
flexS1170jPublic constants and fields initialized at declaration should be "const static" rather than merely "const""MINOR*flex: <p>
  Making a public constant just <code>const</code> as opposed to <code>static const</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass
{
  public const THRESHOLD:int = 3;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Myclass
{
  public static const THRESHOLD:int = 3;
}
</pre>Z
CODE_SMELL
∑
	flex:S107©
flexS107-Functions should not have too many parameters"MAJOR*flex:“<p>
A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.
</p>

<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public function addData(p1 : int, p2 : int, p3 : int, p4 : int, p5 : int): void  {
...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public function addData(p1 : int, p2 : int, p3 : int, p4 : int): void  {
...
}
</pre>Z
CODE_SMELL
õ
	flex:S108ç
flexS108.Nested blocks of code should not be left empty"MAJOR*flex:µ<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>

<h2>Noncompliant Code Example</h2>

<pre>
for (var i:int = 0; i &lt; 42; i++){}  // Noncompliant

try {                               // Noncompliant
} catch (error)
{
    ...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
for (var i:int = 0; i &lt; 42; i++);

for (var i:int = 0; i &lt; 42; i++) {
  trace(i);
}
</pre>

<h2>Exceptions</h2>

<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
ä

flex:XPath˚
flexXPath
XPath rule"MAJOR*flex:ƒ<p>This rule allows the definition of custom rules using XPath expressions.</p>

<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>

<ul>
  <li> a single or list of AST nodes, then a line issue with the given message is created for each node
  </li><li> a boolean, then a file issue with the given message is created only if the boolean is true
</li><li> anything else, no issue is created
</li></ul>

<p>Here is an example of an XPath expression to log an issue on each if statement:</p>

<pre>
//IF_STATEMENT
</pre>@Z
CODE_SMELL
å

flex:S1466˝
flexS1466MThe flash.system.Security.exactSettings property should never be set to false"CRITICAL*flex:ˇ<p>
  The security.exactSettings value should remain set at the default value of true. Setting this value to false could make the SWF vulnerable to cross-domain attacks.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
Security.exactSettings = false;
</pre>ZVULNERABILITY
ò

flex:S1467â
flexS1467'Constructors should not dispatch events"BLOCKER*flex:º<p>
  A listener can be attached to an object only after it has been constructed. So dispatching an event in a constructor is useless and error prone.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  public function MyClass()
  {
    dispatchEvent( new Event( "uselessEvent" ) ); 
  }
}
</pre>ZBUG
ü

flex:S1301ê
flexS13019"switch" statements should have at least 3 "case" clauses"MINOR*flex:¨<p>
  <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.
  For just one or two cases however, the code will be more readable with <code>if</code> statements.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>

<h2>See</h2>

<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.
  </li><li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.
</li><li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses
</li></ul>Z
CODE_SMELL
û

flex:S1982è
flexS19829"MovieClip.onEnterFrame" event handler should not be used"MAJOR*flex:´<p>
  The <code>onEnterFrame</code> event handler is continually invoked at the frame rate of the SWF file, regardless of which individual movie frame it is set for. Having too many <code>onEnterFrame</code> handlers can seriously degrade performance.
</p>
<p>
  If the use of this event handler cannot be avoided entirely, then it should be created as close to its use as possible, and then destroyed as soon as possible afterward.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
movieClip.onEnterFrame = function () {   // Noncompliant
   // ...
}
</pre>Z
CODE_SMELL
ú

flex:S1465ç
flexS1465áLocalConnection should be configured to narrowly specify the domains with which local connections to other Flex application are allowed"CRITICAL*flex:‘<p>
  A LocalConnection object is used to invoke a method in another LocalConnection object, either within a single SWF file or between multiple SWF files. This kind of local connection should be authorized only when the origin (domain) of the other Flex applications is perfectly defined.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
localConnection.allowDomain("*");
</pre>

<h2>Compliant Solution</h2>
<pre>
localConnection.allowDomain("www.myDomain.com");
</pre>ZVULNERABILITY
ˇ

flex:S1784
flexS1784/Method visibility should be explicitly declared"MINOR*flex:ñ<p>
  Access modifiers define which classes can access properties, variables, methods, and other classes. If an access modifier is not specified, the access level defaults to <code>internal</code>, which grants access to all classes in the same package. This may be what is intended, but it should be specified explicitly to avoid confusion.
</p>
<p>
  Available access modifiers are:
</p>
<ul>
    <li><code>internal</code> - access allowed within the same package</li>
    <li><code>private</code> - access allowed only within the same class</li>
    <li><code>protected</code> - access allowed to the class and its child classes</li>
    <li><code>public</code> - unfettered access by all</li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
function checkResources():Boolean {
  ...
  return true;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public function checkResources():Boolean {
  ...
  return true;
}
</pre>Z
CODE_SMELL
î

flex:S1068Ö
flexS1068'Unused private fields should be removed"MAJOR*flex:≥<p>
  If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
 public class MyClass {
  private var foo:int = 4;                       //foo is unused

  public function compute(a:int):int{
    return a * 4;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public function compute(a:int):int{
    return a * 4;
  }
}
</pre>Z
CODE_SMELL
Û

flex:S1144‰
flexS1144)Unused private function should be removed"MAJOR*flex:ê<p>
  Private functions that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static function doSomething():void
  {
    var foo:Foo = new Foo();
    ...
  }
  private function unusedPrivateFunction():void {...}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static function doSomething():void
  {
    var foo:Foo = new Foo();
    ...
  }
}
</pre>Z
CODE_SMELL
Á


flex:S1145ÿ

flexS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*flex:Á	<p>
  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional.
  <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.
</p>

<p>There are three possible causes for the presence of such code: </p>

<ul>
  <li> An if statement was changed during debugging and that debug code has been committed.</li>
  <li> Some value was left unset.</li>
  <li> Some logic is not doing what the programmer thought it did.</li>
</ul>

<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>

<h2>Noncompliant Code Example</h2>

<pre>
if (true) {  
  doSomething(); 
}
...
if (false) {  
  doSomethingElse(); 
}
</pre>

<h2>Compliant Solution</h2>

<pre>
doSomething(); 
...
</pre>

<h2>See</h2>

<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code
  </li><li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False
</li><li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True
</li><li> MISRA C:2004, 13.7
</li><li> MISRA C:2012, 14.3
</li></ul>Z
CODE_SMELL
´

flex:S1464ú
flexS1464JEach ManagedEvents metadata tag should have a companion Event metadata tag"BLOCKER*flex:¨<p>
  The "ManagedEvents" metadata tag allows you to flag an event as being managed. By definition this "ManageEvents" metadata tag should be used in pair with an "Event" metadata tag.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
[Event(name="message", type="my.package.MyEvemt")]
[ManagedEvents("mes")]       //This "mes" event is not defined with the "Event" metadata tag
public class MyClass {...}
</pre>

<h2>Compliant Solution</h2>
<pre>
[Event(name="message", type="my.package.MyEvemt")]
[ManagedEvents("message")]
public class MyClass {...}
</pre>ZBUG
ø	

flex:S1462∞	
flexS14626Event names should not be hardcoded in event listeners"MAJOR*flex:œ<p>
  Using plain string event names in even listeners is an anti-pattern; if the event is renamed, the application can start behaving unexpectedly. A constant variable should be used instead.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite
{
    public function ChildSprite()
    {
        ...
        addEventListener("CustomEvent", clickHandler);
    }
}

function clickHandler(event:CustomEvent):void
{
    trace("clickHandler detected an event of type: " + event.type);
    trace("the this keyword refers to: " + this);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite
{
   public const CUSTOM_EVENT:String = "CustomEvent";

    public function ChildSprite()
    {
        ...
        addEventListener(CUSTOM_EVENT, clickHandler);
    }
}

function clickHandler(event:CustomEvent):void
{
    trace("clickHandler detected an event of type: " + event.type);
    trace("the this keyword refers to: " + this);
}
</pre>Z
CODE_SMELL
Å

flex:S1463Ú
flexS1463.Event types should be defined in metadata tags"MAJOR*flex:ô<p>
  According to the Flex documentation :
</p>

<blockquote>
  <p>
    In an ActionScript file, when you define component events or other aspects of a component that affect more than a single property, you add the metadata tag outside the class definition so that the metadata is bound to the entire class, as the following example shows:
  </p>

  <pre>
  // Add the [Event] metadata tag outside of the class file.
  [Event(name="enableChange", type="flash.events.Event")]
  public class ModalText extends TextArea {

      ...

      // Define class properties/methods
      private var _enableTA:Boolean;

      // Add the [Inspectable] metadata tag before the individual property.
      [Inspectable(defaultValue="false")]
      public function set enableTA(val:Boolean):void {
          _enableTA = val;
          this.enabled = val;

          // Define event object, initialize it, then dispatch it.
          var eventObj:Event = new Event("enableChange");
          dispatchEvent(eventObj);
      }
  }
  </pre>
</blockquote>
<p>
  In this example, the "enableChange" event must be considered part of the API. Therefore, it should be strongly typed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
[Event(name="enableChange")]
public class ModalText extends TextArea {...}
</pre>

<h2>Compliant Solution</h2>
<pre>
[Event(name="enableChange", type="flash.events.Event")]
public class ModalText extends TextArea {...}
</pre>Z
CODE_SMELL
î

flex:S1066Ö
flexS1066,Collapsible "if" statements should be merged"MAJOR*flex:Æ<p>
  Merging collapsible <code>if</code> statements increases the code's readability.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  if (condition2) {             // NonCompliant
    ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (condition1 && condition2) {
  ...
}
</pre>Z
CODE_SMELL
¸
	flex:S120Ó
flexS1204Package names should comply with a naming convention"MINOR*flex:ê<p>
  Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z]+(\[a-z][a-z0-9]*)*$</code>:</p>
<pre>
package org.Example { // Noncompliant
...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
package org.example {
...
}
</pre>Z
CODE_SMELL
µ

flex:S1186¶
flexS1186Methods should not be empty"MAJOR*flex:‡<p>
  There are several reasons for a method not to have a method body:
</p>

<ul>
    <li>It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.</li>
    <li>It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown.</li>
    <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>
</ul>

<h2>Noncompliant Code Example</h2>

<pre>
public override function doSomething():void {
}

public function doSomethingElse():void {
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public override function doSomething():void {
  throw new IllegalOperationError("doSomething cannot be performed because ...");
}

public function doSomethingElse():void {
  //This method is empty because ...
}
</pre>Z
CODE_SMELL
≥

flex:S1142§
flexS11427Functions should not contain too many return statements"MAJOR*flex:¬<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.</p>

<h2>Noncompliant Code Example</h2>

<p>With the default threshold of 3:</p>

<pre>
function myFunction():boolean { // Noncompliant as there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
˜
flex:OneStatementPerLine⁄
flexOneStatementPerLine&Statements should be on separate lines"MINOR*flex:˚<p>
  For better readability, do not put more than one statement on a single line.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>


<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>Z
CODE_SMELL
ê

flex:S1185Å
flexS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*flex:Å<p>
  Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
override public function doSomething() : void
{
  super.doSomething();
}

override public function isLegal(action:Action) : Boolean
{
  return super.isLegal(action);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
override public function doSomething() : void
{
  super.doSomething();                             // Compliant - not simply forwarding the call
  doSomethingElse();
}

override public function isLegal(action:Action) : Boolean
{
  return super.isLegal(new Action(...));   // Compliant - not simply forwarding the call
}

[Deprecated(replacement="isAuthorized")]
override public function isLegal(action:Action) : Boolean
{
  return super.isLegal(action);   // Compliant as there is a metadata
}
</pre>Z
CODE_SMELL
Â

flex:S1469÷
flexS14696The element type of an array field should be specified"MAJOR*flex:ı<p>
  Quoted from the Flex documentation :
</p>
<blockquote>
  <p>
    When you define an Array variable in ActionScript, you specify Array as the data type of the variable. However, you cannot specify the data type of the elements of the Array.
  </p>
  <p>
    To allow the Flex MXML compiler to perform type checking on Array elements, you can use the [ArrayElementType] metadata tag to specify the allowed data type of the Array elements.
  </p>
</blockquote>

<h2>Noncompliant Code Example</h2>
<pre>
public var newStringProperty:Array;
public var newNumberProperty:Array;
</pre>

<h2>Compliant Solution</h2>
<pre>
[ArrayElementType("String")]
public var newStringProperty:Array;

[ArrayElementType("Number")]
public var newNumberProperty:Array;
</pre>Z
CODE_SMELL
ª

flex:S1821¨
flexS1821("switch" statements should not be nested"MAJOR*flex:Ÿ
<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving the inner <code>switch</code> to another function.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public function func(foo:Number, bar:Number):void
{
  switch (foo)
  { 
    case 1:
      // do something
      break;
    case 2:
      switch (bar)  // Noncompliant
      {
        case 89:  // It's easy to lose sight of what's being tested; is it foo or bar?
          // ...
          break;
        case 90:
          // ...
          break;
      }
      break;
    case 3:
      // do something
      break;
    default:
      break;
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>

public function func(foo:Number, bar:Number):void
{
  switch (foo)
  { 
    case 1:
      // ...
      break;
    case 2:
      handleBar(bar);
      break;
    case 3:
      // ...
      break;
    default:
      break;
  }
}

public function handleBar(bar:Number):void
{
  switch (bar)
  {
    case 89:
      // ...
      break;
    case 90:
      // ...
      break;
  }
}
</pre>Z
CODE_SMELL
Æ

flex:S1468ü
flexS1468ISecurity.allowDomain(...) should only be used in a tightly focused manner"CRITICAL*flex:•<p>
  Calling Security.allowDomain("*") lets any domain cross-script into the domain of this SWF and exercise its functionality.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
Security.allowDomain("*");
</pre>

<h2>Compliant Solution</h2>
<pre>
Security.allowDomain("www.myDomain.com");
</pre>ZVULNERABILITY
”

flex:S1820ƒ
flexS1820'Classes should not have too many fields"MAJOR*flex:Ú<p>
  A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and having a lot of fields is an indication that a class has grown too large.
</p>
<p>
  Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.
</p>Z
CODE_SMELL
Æ
flex:ClassComplexityï
flexClassComplexity!Classes should not be too complex"MAJOR*flex:ø<p>
The cyclomatic complexity of a class should not exceed a defined threshold.
Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
</p>Z
CODE_SMELL
ª
	flex:S116≠
flexS1162Field names should comply with a naming convention"MINOR*flex:—<p>
  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>

<pre>
class MyClass {
  public var my_field:int;
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class MyClass {
   public var myField:int;
}
</pre>Z
CODE_SMELL
ê
	flex:S115Ç
flexS1155Constant names should comply with a naming convention"MINOR*flex:£<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>

<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>

<pre>
public static const first:String = "first";
</pre>

<h2>Compliant Solution</h2>

<pre>
public static const FIRST:String = "first";
</pre>Z
CODE_SMELL
¶
	flex:S117ò
flexS117RLocal variable and function parameter names should comply with a naming convention"MINOR*flex:ú<p>
  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public function doSomething(my_param:int):void
{
  var LOCAL:int;
  ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public function doSomething(myParam):void
{
  var local;
  ...
}
</pre>Z
CODE_SMELL
–

flex:S1434¡
flexS14341Variables of the "Object" type should not be used"MAJOR*flex:Â<p>Creating a new variable with the type "Object" means that it may be used to store any kind of object. This feature may be required in some specific contexts, but it leaves the compiler unable to do any kind of type checking, and is therefore a hazardous practice.  </p>
<h2>Noncompliant Code Example</h2>

<pre>
var obj:Object = new String(); // Noncompliant; Object used explicitly
var foo = new Object(); // Noncompliant; Object used explicitly
var bar = {name:String, age:int};  // Noncompliant; Object implicitly created
</pre>
<h2>Compliant Solution</h2>

<pre>
var obj:String = new String();
var foo:IPortfolio = new Portfolio();
class Person {
  public var name:String;
  public var age:int;
}
var bar:Person = new Person();
</pre>Z
CODE_SMELL
‹

flex:S1951Õ
flexS1951'The "trace" function should not be used"CRITICAL*flex:ı<p>The <code>trace()</code> function outputs debug statements, which can be read by anyone with a debug version of the Flash player. Because sensitive information could easily be exposed in this manner, <code>trace()</code> should never appear in production code.</p>
<h2>Noncompliant Code Example</h2>

<pre>
    var val:Number = doCalculation();
    trace("Calculation result: " + val);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
    var val:Number = doCalculation();
</pre>
<h2>See</h2>

<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code
  </li></ul>ZVULNERABILITY
‚

flex:S1950”
flexS19506Cases in a "switch" should not have the same condition"CRITICAL*flex:Ô<p>
  Having multiple cases in a <code>switch</code> with the same condition is confusing at best. At worst, it's a bug that is likely to induce further bugs as the code is maintained.
</p>

<h2>Extended desc for languages with <code>break</code></h2>

<p>
  If the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.
</p>
<p>
  On the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch(i) {
  case 1:
    //...
    break;
  case 5:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch(i) {
  case 1:
    //...
    break;
  case 5:
    //...
    break;
  case 3:
    //...
    break;
}
</pre>Z
CODE_SMELL
Ã

flex:S1312Ω
flexS1312MLoggers should be "private static const" and should share a naming convention"MINOR*flex:≈<p>Loggers should:</p>
<ul>
  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.
  </li><li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.
</li><li> <code>(final|const)</code>: be created once and only once per class.
</li></ul>

<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>LOG(?:GER)?</code>:</p>

<pre>
public const logger:ILogger = LogUtil.getLogger(MyClass);
</pre>

<h2>Compliant Solution</h2>

<pre>
private static const LOG:ILogger = LogUtil.getLogger(MyClass);
</pre>Z
CODE_SMELL
≤
flex:FunctionSinglePointOfExitè
flexFunctionSinglePointOfExitHA function should have a single point of exit at the end of the function"MINOR*flex:à<p>This is required by IEC 61508, under good programming style.</p>

<h2>Noncompliant Code Example</h2>

<pre>
function func1() { // Noncompliant - there are two points of exit
  if (false) {
    return;
  }
}

function func2() { // Noncompliant - there are two points of exit
  if (a &gt; 0) {
    return 0;
  }
  return -1;
}
</pre>

<h2>Compliant Solution</h2>

<pre>
function func1() {
  return;
}

function func2() {
}

function func3();
</pre>
<h2>See</h2>

<ul>
  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function.
  </li><li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function
</li><li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end
</li></ul>Z
CODE_SMELL
´

flex:S1871ú
flexS1871^Two branches in the same conditional structure should not have exactly the same implementation"MAJOR*flex:ìp>Having two <code>cases</code> in the same <code>switch</code> statement with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then one should fall through to the other.</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doSomething();
    break;
  default:
    doTheRest();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}
</pre>

<p>or</p>

<pre>
switch (i) {
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doThirdThing();
    break;
  default:
    doTheRest();
}
</pre>Z
CODE_SMELL
˙
	flex:S134Ï
flexS134YControl flow statements "if", "for", "while" and "switch" should not be nested too deeply"MAJOR*flex:È<p>
  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>do while</code> and <code>switch</code> statements is a key ingredient for making what's known as "Spaghetti code".
</p>

<p>
  Such code is hard to read, refactor and therefore maintain.
</p>

<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Noncompliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>Z
CODE_SMELL
†

flex:S1439ë
flexS1439:Only "while", "do" and "for" statements should be labelled"MAJOR*flex:¨<p>
  Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
myLabel:if (i % 2 == 0) {            // Noncompliant
  if (i == 12) {
    print("12");
    break myLabel;
  }
  print("Odd number, but not 12");
}
</pre>

<h2>Compliant Solution</h2>
<pre>
myLabel:for (i = 0; i < 10; i++) {   // Compliant
  print("Loop");
  break myLabel;
}
</pre>Z
CODE_SMELL
Õ

flex:S1438æ
flexS1438%Statements should end with semicolons"MINOR*flex:Ó<p>In Flex, the semicolon is optional as a statement separator, but omitting semicolons can be confusing.</p>

<h2>Noncompliant Code Example</h2>

<pre>
function fun() {
  return   // Noncompliant
       5   // Noncompliant
}
print(fun());  // prints "undefined", not "5"
</pre>

<h2>Compliant Solution</h2>

<pre>
function fun() {
  return 5;
}
print(fun());
</pre>Z
CODE_SMELL
¯
flex:SwitchWithoutDefault⁄
flexSwitchWithoutDefault6"switch" statements should end with a "default" clause"MAJOR*flex:Í<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>

<h2>Noncompliant Code Example</h2>

<pre>
switch (param) { // Noncompliant - default clause is missing
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // Noncompliant - default clause should be the last one
    doSomething();
    break;
  case 0:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
switch (param) {
  case 0:
    doSomethingElse();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>

<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.
  </li><li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause
</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.
</li><li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause
</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed
</li><li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label
</li><li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
</li><li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness
</li></ul>Z
CODE_SMELL
ø

flex:S1117∞
flexS1117.Local variables should not shadow class fields"MAJOR*flex:◊<p>Shadowing fields with a local variable or with a function parameter is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.</p>

<h2>Noncompliant Code Example</h2>

<pre>
class Foo {
  public var myField:int;

  public function doSomething():String {
    var myField:int = 0;
    ...
  }

  public function doSomethingElse(myField:int):String {
    ...
  }
}
</pre>

<h2>Exceptions</h2>

<p>Constructors and setters are exceptions; it is common practice to name arguments for the fields the values will be assigned to. Static methods are also ignored.</p>

<pre>
class Foo {
  public var myField:int;

  public function Foo(myField:int) {
    this.myField = myField;
  }

  public static function build(myField:int):Foo {
    ...
  }

  public function setMyField(int myField):void{
    this.myField = myField;
  } 

  public function set myField(int myField):void{ 
    this.myField = myField;
  } 
}
</pre>Z
CODE_SMELL
∏
flex:FunctionComplexityú
flexFunctionComplexity#Functions should not be too complex"MAJOR*flex:¡<p>
The cyclomatic complexity of functions should not exceed a defined threshold.
Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
</p>Z
CODE_SMELL
ì

flex:S1952Ñ
flexS19520Objects should not be instantiated inside a loop"MAJOR*flex:©<p>
  It can be expensive to instantiate a new object, and doing so inside a loop is typically an error. Instead, create the object once, before the loop.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (var i:int = 0; i < 10; i++) {
  var temp:MyObj = new MyObject();  // Noncompliant
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var temp:MyObj = new MyObject();
for (var i:int = 0; i < 10; i++) {
  //...
}
</pre>Z
CODE_SMELL
 

flex:S1116ª
flexS1116"Empty statements should be removed"MINOR*flex:Ó<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten.
  </li><li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.
</li></ul>

<h2>Noncompliant Code Example</h2>

<pre>
function doSomething():void {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

function doSomethingElse():void {
  trace("Hello, world!");;                     // Noncompliant - double ;
  ...
  for (var i:int = 0; i &lt; 3; trace(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
  ...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
function doSomething():void {}

function doSomethingElse():void {
  trace("Hello, world!");
  ...
  for (var i:int = 0; i &lt; 3; i++){
    trace(i);
  }
  ...
}
</pre>

<h2>See</h2>

<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.
  </li><li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect
</li></ul>Z
CODE_SMELL
´

flex:S1314ú
flexS1314Octal values should not be used"MAJOR*flex:“<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>

<h2>Noncompliant Code Example</h2>

<pre>
var myNumber:int = 010;  // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>

<h2>Compliant Solution</h2>

<pre>
var myNumber:int = 8;
</pre>

<h2>See</h2>

<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.
  </li><li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used
</li><li> MISRA C:2012, 7.1 - Octal constants shall not be used
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value
</li></ul>Z
CODE_SMELL
ß

flex:S1435ò
flexS1435*The special "star" type should not be used"MAJOR*flex:√
<p>
  According to the ActionScript language reference, the star type:
</p>

<p>
  <blockquote>
  Specifies that a property is untyped. Use of the asterisk symbol for a type annotation is equivalent to using no type annotation. Expressions that read from untyped properties are considered untyped expressions. Use of untyped expressions or properties is recommended in the following circumstances:
    <ul>
      <li>When you want to defer type checking to runtime. You can use an untyped property or expression to circumvent compile-time type checking in strict mode. Note, however, that runtime type checking of assignment statements occurs whether you use strict mode or not.</li>
      <li>When you want to store the value undefined in a property. Unlike previous versions of ActionScript, the value undefined is not a member of the Object data type. You must use an untyped property to store the value undefined.</li>
    </ul>
  </blockquote>
</p>

<p>
But deferring type checking to runtime can highly impact the robustness of the application because the compiler is unable to assist the developer.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var obj:*;                   // Noncompliant
var foo:* = new Something(); // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
var obj:Something;
var foo:Something = new Something();
</pre>Z
CODE_SMELL
»
flex:CommentRegularExpression¶
flexCommentRegularExpression8Comments matching a regular expression should be handled"MAJOR*flex:Æ<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression "<code>.*TODO.*</code>" to match all comment containing "TODO".</p>
<p>Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in <code>(?i).*TODO.*</code>.</p>@Z
CODE_SMELL
æ
flex:CommentedCodeß
flexCommentedCode.Sections of code should not be "commented out""MAJOR*flex:∆<p>
Programmers should not comment out code as it bloats programs and reduces readability.
Unused code should be deleted and can be retrieved from source control history if required.
</p>

<h2>See</h2>

<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".
  </li><li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.
</li><li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.
</li><li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"
</li></ul>Z
CODE_SMELL
Ä
flex:WithStatementÈ
flexWithStatement$"with" statements should not be used"MAJOR*flex:ô<p>Never use <code>with</code> statements, since they decrease readability. When you do not specify a variable's scope, you do not always know where you are setting properties, so your code can be confusing.</p>

<h2>Noncompliant Code Example</h2>

<pre>
with (foo) { // Noncompliant
  return x;  // is it a property of foo or local variable ?
}
</pre>

<h2>Compliant Solution</h2>

<pre>
return foo.x;
</pre>ZBUG
∫
flex:NonEmptyCaseWithoutBreakò
flexNonEmptyCaseWithoutBreak?Switch cases should end with an unconditional "break" statement"CRITICAL*flex:ò<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>

<pre>
switch (myVariable) {
  case 1:                              
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:                               
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
switch (myVariable) {
  case 1:                              
    foo();
    break;
  case 2: 
    doSomething();
    break;
  default:                               
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>

<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:                               
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw new IllegalStateException();
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional 
    doSomethingElse();
}
</pre>
<h2>See</h2>

<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.
  </li><li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause
</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.
</li><li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause
</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed
</li><li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause
</li><li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement
</li></ul>Z
CODE_SMELL
è

flex:S1470Ä
flexS1470AAny class extending the Event class should override Event.clone()"CRITICAL*flex:ò<p>
  Overriding Event.clone() is a required part of the API contract:
</p>
<blockquote>
  You are required to override the Event.clone() method in your Event subclass. The clone() method returns a cloned copy of the event object by setting the type property and any new properties in the clone. Typically, you define the clone() method to return an event instance created with the new operator.
</blockquote>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyEvent extends Event {...}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyEvent extends Event
{
...
  override public function clone():Event {
    return new MyEvent(...);
  }
...
}
</pre>ZBUG
≈

flex:S1151∂
flexS11514"switch case" clauses should not have too many lines"MAJOR*flex:◊<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow.
  As soon as a <code>case</code> clause contains too many statements this highly decreases the readability of the overall control flow statement.
  In such case, the content of <code>case</code> clause should be extracted in a dedicated function.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0:       // Noncompliant - 6 lines till next case or default case
    trace("");
    trace("");
    trace("");
    trace("");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
switch (myVariable) {
  case 0:
    printSomething()
    break;
  case 1:
  ...
}
...
private function printSomething() {
  trace("");
  trace("");
  trace("");
  trace("");
}
</pre>Z
CODE_SMELL
â	
flex:ActionScript2Ú
flexActionScript2PStatements, operators and keywords specific to ActionScript 2 should not be used"BLOCKER*flex:Ì<p>
Usage of statements, operators and keywords specific to ActionScript 2 does not allow to migrate to ActionScript 3.
This includes "intrinsic" keyword, set variable statement and following list of operators:
</p>

<ul>
  <li><> (inequality) - use != instead</li>
  <li>add (concatenation (strings)) - use + instead</li>
  <li>eq (equality (strings)) - use == instead</li>
  <li>ne (not equal (strings)) - use != instead</li>
  <li>lt (less than (strings)) - use < instead</li>
  <li>le (less than or equal to (strings)) - use <= instead</li>
  <li>gt (greater than (strings)) - use > instead</li>
  <li>ge (greater than or equal to (strings)) - use >= instead</li>
  <li>and (logical and) - use && instead</li>
  <li>or (logical or) - use || instead</li>
  <li>not (logical not) - use ! instead</li>
</ul>


<h2>Noncompliant Code Example</h2>

<pre>
if (true != false) { // Compliant
}

if (true <> false) { // Noncompliant
}

set("varName", value); // Noncompliant
varName = value; // Compliant
</pre>Z
CODE_SMELL
“
	flex:S127ƒ
flexS127."for" loop stop conditions should be invariant"MAJOR*flex:Ï
<p><code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop
  </li><li> When the stop condition depend upon a method call
</li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.
</li></ul>

<h2>Noncompliant Code Example</h2>

<pre>
for (var i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant 
  ...
} 

for (var i = 0; i &lt; getMaximumNumber(); i++) {...} 
</pre>

<h2>Compliant Solution</h2>

<pre>
int stopCondition = getMaximumNumber();
for (var i = 0; i &lt; stopCondition; i++) {...} 
</pre>

<h2>See</h2>

<ul>
  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.
  </li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.
</li></ul>Z
CODE_SMELL
¿

flex:S1444±
flexS1444)"public static" fields should be constant"CRITICAL*flex:◊<p>There is no good reason to declare a field "public" and "static" without also declaring it "const". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>. </p>

<h2>Noncompliant Code Example</h2>

<pre>
public class Greeter {
  public static var foo:Foo = new Foo(...);
  ...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class Greeter {
  public static const FOO:Foo = new Foo(...);
  ...
}
</pre>

<h2>See</h2>

<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final
  </li><li> <a href="https://www.securecoding.cert.org/confluence/display/java/OBJ10-J.">CERT OBJ10-J</a> - Do not use public static nonfinal variables
</li></ul>ZVULNERABILITY
±

flex:S1445¢
flexS14451Constructors should not have a "void" return type"MINOR*flex:∆<p>
  Even though this is syntactically correct, the "void" return type should not be used in the signature of a constructor. Indeed some developers might be confused by this syntax, believing that the constructor is in fact a standard function.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public function Foo() : void
  {...}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public function Foo()
  {...}
}
</pre>Z
CODE_SMELL
‰

flex:S1125’
flexS1125BLiteral boolean values should not be used in condition expressions"MINOR*flex:Ë<p>
  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
  if (booleanVariable == true) { /* ... */ }
  if (booleanVariable != true) { /* ... */ }
</pre>

<h2>Compliant Solution</h2>
<pre>
  if (booleanVariable) { /* ... */ }
  if (!booleanVariable) { /* ... */ }
</pre>Z
CODE_SMELL
°

flex:S1442í
flexS1442$"Alert.show(...)" should not be used"MAJOR*flex:¿<p>Alert.show(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>

<h2>Noncompliant Code Example</h2>

<pre>
if(unexpectedCondition)
{
  Alert.show("Unexpected Condition");
}
</pre>

<h2>See</h2>

<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code
  </li></ul>ZVULNERABILITY
‹

flex:S1440Õ
flexS14407"===" and "!==" should be used instead of "==" and "!=""MAJOR*flex:Î<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>

<h2>Noncompliant Code Example</h2>

<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>

<h2>Compliant Solution</h2>

<pre>
if (var === 'howdy') {...}
</pre>Z
CODE_SMELL
î
	flex:S101Ü
flexS1012Class names should comply with a naming convention"MINOR*flex:™<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</p>

<h2>Noncompliant Code Example</h2>

<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>

<pre>
public class myClass {...}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class MyClass {...}
</pre>Z
CODE_SMELL
‡
	flex:S100“
flexS1005Function names should comply with a naming convention"MINOR*flex:Û<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>

<h2>Noncompliant Code Example</h2>

<p>With default provided regular expression: ^[a-z][a-zA-Z0-9]*$</p>

<pre>
function DoSomething(){...} 
</pre>

<h2>Compliant Solution</h2>

<pre>
function doSomething(){...} 
</pre>Z
CODE_SMELL
Å

flex:S1448Ú
flexS1448(Classes should not have too many methods"MAJOR*flex:ü<p>
  A class that grows too much tends to aggregate too many responsibilities
  and inevitably becomes harder to understand and therefore to maintain.
  Above a specific threshold, it is strongly advised to refactor the class
  into smaller ones which focus on well defined topics.
</p>Z
CODE_SMELL
°

flex:S1446í
flexS1446"Dynamic classes should not be used"MAJOR*flex:≈<p>
  A dynamic class defines an object that can be altered at run time by adding or changing properties and methods. This extremely powerful mechanism should be used very carefully, and only in very limited use cases.
</p>
<p>
  Indeed, by definition dynamic classes make refactoring difficult and prevent the compiler from raising potential errors at compile time.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
dynamic public class DynamicFoo
{...}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Foo //Note that the class has been renamed to avoid confusion
{...}
</pre>Z
CODE_SMELL
Ë

flex:S1447Ÿ
flexS14477Constructor bodies should be as lightweight as possible"MAJOR*flex:˜<p>
  In ActionScript 3, constructor code is always interpreted rather than compiled by the JIT at runtime, which is why the body of a constructor should be as lightweight as possible. As soon as a constructor contains branches ("if", "for", "switch", ...) an issue is logged.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public function Foo()
  {
    ... //lot of logic and control flow statements
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public function Foo()
  {
    init()
  }

  private function init():void
  {
    ... //lot of logic and control flow statements
  }
}
</pre>Z
CODE_SMELL
≈

flex:S1481∂
flexS1481(Unused local variables should be removed"MAJOR*flex:„<p>
  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public function numberOfMinutes(hours:int):int
{
  var seconds:int = 0;  // seconds is never used
  return hours * 60;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public function numberOfMinutes(hours:int):int
{
  return hours * 60;
}
</pre>Z
CODE_SMELL
¯
	flex:S138Í
flexS138(Functions should not have too many lines"MAJOR*flex:ò<p>
  A function that grows too large tends to aggregate too many responsibilities.
  Such function inevitably become harder to understand and therefore harder to maintain.
</p>
<p>
  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.
  Those smaller functions will not only be easier to understand, but also probably easier to test.
</p>Z
CODE_SMELL
ˇ	
"findsecbugs:SPRING_FILE_DISCLOSUREÿ	
findsecbugsSPRING_FILE_DISCLOSURE!Security - Spring File Disclosure"MAJOR*java2SPRING_FILE_DISCLOSURE:Ÿ<p>
Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>
An attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting "http://example.com/?returnURL=WEB-INF/applicationContext.xml" would display the application's applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>... 
String returnURL = request.getParameter("returnURL");
return new ModelAndView(returnURL); 
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid constructing server-side redirects using user controlled input.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/552.html">CWE-552: Files or Directories Accessible to External Parties</a><br/>
</p>ZVULNERABILITY
ê
$findsecbugs:WEAK_MESSAGE_DIGEST_SHA1Á
findsecbugsWEAK_MESSAGE_DIGEST_SHA1(Security - SHA-1 is a weak hash function"MAJOR*java2WEAK_MESSAGE_DIGEST_SHA1:›<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other
uses. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "<b>SHA-1 for digital signature generation:</b><br/>
    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.
    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>
    <b>SHA-1 for digital signature verification:</b><br/>
    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>
    [...]<br/>
    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>

</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest sha1Digest = MessageDigest.getInstance("SHA1");
    sha1Digest.update(password.getBytes());
    byte[] hashValue = sha1Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>
<a href="https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>
<a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="http://stackoverflow.com/questions/22580853/reliable-implementation-of-pbkdf2-hmac-sha256-for-java">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>ZVULNERABILITY
π
findsecbugs:HARD_CODE_PASSWORDñ
findsecbugsHARD_CODE_PASSWORDSecurity - Hard Coded Password"MAJOR*java2HARD_CODE_PASSWORD:¢<p>
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://cwe.mitre.org/data/definitions/259.html">CWE-259: Use of Hard-coded Password</a>
</p>ZVULNERABILITY
Ì
findsecbugs:NULL_CIPHER—
findsecbugsNULL_CIPHER!Security - NullCipher is insecure"MAJOR*java2NULL_CIPHER:Ë<p>
The NullCipher is rarely used intentionally in production applications. It implements the Cipher interface by returning ciphertext 
identical to the supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>Cipher doNothingCihper = new NullCipher();
[...]
//The ciphertext produced will be identical to the plaintext.
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b><br/>
    Avoid using the NullCipher. Its accidental use can introduce a significant confidentiality risk.
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>ZVULNERABILITY
∫
findsecbugs:XSS_REQUEST_WRAPPERñ
findsecbugsXSS_REQUEST_WRAPPER5Security - XSSRequestWrapper is a weak XSS protection"MAJOR*java2XSS_REQUEST_WRAPPER:â<p>
An implementation of <code>HttpServletRequestWrapper</code> called <code>XSSRequestWrapper</code> was published through
various blog sites. <sup><a href="http://java.dzone.com/articles/stronger-anti-cross-site">[1]</a></sup>
<sup><a href="http://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html">[2]</a></sup>
</p>
<p>
The filtering is weak for a few reasons:
<ul>
<li>It covers only parameters not headers and side-channel inputs</li>
<li>The replace chain can be bypassed easily (see example below)</li>
<li>It's a black list of very specific bad patterns (rather than a white list of good/valid input)</li>
</ul>
</p>
<p>
<b>Example of bypass:</b><br/>
</p>
<pre>&lt;scrivbscript:pt&gt;alert(1)&lt;/scrivbscript:pt&gt;</pre>
<p>
The previous input will be transformed into <b><code>"&lt;script&gt;alert(1)&lt;/script&gt;"</code></b>.
The removal of <code>"vbscript:"</code> is after the replacement of <code>"&lt;script&gt;.*&lt;/script&gt;"</code>.
</p>
<p>
For stronger protection, choose a solution that encodes characters automatically in the <b><u>view</u></b> (template, jsp, ...) following
the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a>
</p>ZVULNERABILITY
ƒ
findsecbugs:COOKIE_PERSISTENT¢
findsecbugsCOOKIE_PERSISTENT"Security - Persistent Cookie Usage"MAJOR*java2COOKIE_PERSISTENT:¨<p>
Storing sensitive data in a persistent cookie for an extended period of time can lead to a breach of confidentiality or account compromise. 
</p>
<p>
    <b>Explanation:</b><br/>
If private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are generally stored in a text file on the client and an attacker with access to the victim's machine can steal this information.<br/>
Persistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users' privacy.
</p>
<p>
    <b>Vulnerable Code:</b> The following code sets a cookie to expire in 1 year.<br/>
<pre>[...]
Cookie cookie = new Cookie("email", email);
cookie.setMaxAge(60*60*24*365);
[...]</pre>
</p>
<p>
    <b>Solution:</b><br/>
<ul>
    <li>Use persistent cookies only if necessary and limit their maximum age.</li>
    <li>Don't use persistent cookies for sensitive data.</li>
</ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://tomcat.apache.org/tomcat-5.5-doc/servletapi/javax/servlet/http/Cookie.html#setMaxAge%28int%29">Class Cookie setMaxAge documentation</a><br/>
<a href="https://cwe.mitre.org/data/definitions/539.html">CWE-539: Information Exposure Through Persistent Cookies</a><br/>
</p>ZVULNERABILITY
è
!findsecbugs:CUSTOM_MESSAGE_DIGESTÈ
findsecbugsCUSTOM_MESSAGE_DIGEST#Security - Message digest is custom"MAJOR*java2CUSTOM_MESSAGE_DIGEST:Í<p>Implementing a custom MessageDigest is error-prone.</p>
<p><a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html">NIST</a> recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.</p>
<blockquote>
    "<b>SHA-1 for digital signature generation:</b><br/>
    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.
    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>
    <b>SHA-1 for digital signature verification:</b><br/>
    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>
    [...]<br/>
    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>MyProprietaryMessageDigest extends MessageDigest {
    @Override
    protected byte[] engineDigest() {
        [...]
        //Creativity is a bad idea
        return [...];
    }
}</pre>
</p>
<p>
<p>Upgrade your implementation to use one of the approved algorithms. Use an algorithm that is sufficiently strong for your specific security needs.</p>
<p>
    <b>Example Solution:</b><br/>
<pre>MessageDigest sha256Digest = MessageDigest.getInstance("SHA256");
sha256Digest.update(password.getBytes());</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html">NIST Approved Hashing Algorithms</a><br/>
<a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>ZVULNERABILITY
Ü
%findsecbugs:PLAY_UNVALIDATED_REDIRECT‹
findsecbugsPLAY_UNVALIDATED_REDIRECT0Security - Unvalidated Redirect (Play Framework)"MAJOR*java2PLAY_UNVALIDATED_REDIRECT:»<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>def login(redirectUrl:String) = Action {
    [...]
    Redirect(url)
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>ZVULNERABILITY
√
 findsecbugs:LDAP_ENTRY_POISONINGû
findsecbugsLDAP_ENTRY_POISONINGSecurity - LDAP Entry Poisoning"CRITICAL*java2LDAP_ENTRY_POISONING:¢<p>
JNDI API support the binding of serialize object in LDAP directories. If certain attributes are presented, the deserialization
of object will be made in the application querying the directory (See Black Hat USA 2016 white paper for details).
Object deserialization should be threated as risky operation that can lead to remote code execution.
</p>
<p>
The exploitation of the vulnerability will be possible if the attacker has an entry point in an LDAP base query, by adding
attributes to an existing LDAP entry or by configuring the application to use a malicious LDAP server.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>
DirContext ctx = new InitialDirContext();
//[...]

ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            true, //Enable object deserialization if bound in directory
            deref));
</pre>
</p>
<p>
    <b>Solution:</b>
<pre>
DirContext ctx = new InitialDirContext();
//[...]

ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            false, //Disable
            deref));
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf">Black Hat USA 2016: A Journey From JNDI/LDAP Manipulation to Remote Code Execution Dream Land</a>
(<a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf">slides</a> &amp; <a href="https://www.youtube.com/watch?v=Y8a5nB-vy78">video</a>) by Alvaro Mu&#xF1;oz and Oleksandr Mirosh<br/>
<a href="https://community.hpe.com/t5/Security-Research/Introducing-JNDI-Injection-and-LDAP-Entry-Poisoning/ba-p/6885118">HP Enterprise: Introducing JNDI Injection and LDAP Entry Poisoning</a> by Alvaro Mu&#xF1;oz<br/>
<a href="http://blog.trendmicro.com/trendlabs-security-intelligence/new-headaches-how-the-pawn-storm-zero-day-evaded-javas-click-to-play-protection/">TrendMicro: How The Pawn Storm Zero-Day Evaded Java's Click-to-Play Protection</a> by Jack Tang
</p>ZVULNERABILITY
∏
"findsecbugs:SERVLET_HEADER_REFERERë
findsecbugsSERVLET_HEADER_REFERER#Security - Untrusted Referer header"INFO*java2SERVLET_HEADER_REFERER:ë<p>
Behavior:
<ul>
<li>Any value can be assigned to this header if the request is coming from a malicious user.</li>
<li>The "Referer" will not be present if the request was initiated from another origin that is secure (https).</li>
</ul>
</p>
<p>
Recommendations:
<ul>
<li>No access control should be based on the value of this header.</li>
<li>No CSRF protection should be based only on this value (<a href="http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14">because it is optional</a>).</li>
</ul>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>ZVULNERABILITY
Ù
4findsecbugs:SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPINGª
findsecbugs(SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING2Security - Spring CSRF unrestricted RequestMapping"MAJOR*java2(SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING:á<p>Methods annotated with <code>RequestMapping</code> are by default mapped to all the HTTP request methods.
However, Spring Security's CSRF protection is not enabled by default
for the HTTP request methods <code>GET</code>, <code>HEAD</code>, <code>TRACE</code>, and <code>OPTIONS</code>
(as this could cause the tokens to be leaked).
Therefore, state-changing methods annotated with <code>RequestMapping</code> and not narrowing the mapping
to the HTTP request methods <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, or <code>PATCH</code>
are vulnerable to CSRF attacks.</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>@Controller
public class UnsafeController {

    @RequestMapping("/path")
    public void writeData() {
        // State-changing operations performed within this method.
    }
}</pre>
</p>
<p>
    <b>Solution (Spring Framework 4.3 and later):</b><br/>
<pre>@Controller
public class SafeController {

    /**
     * For methods without side-effects use @GetMapping.
     */
    @GetMapping("/path")
    public String readData() {
        // No state-changing operations performed within this method.
        return "";
    }

    /**
     * For state-changing methods use either @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.
     */
    @PostMapping("/path")
    public void writeData() {
        // State-changing operations performed within this method.
    }
}</pre>
</p>
<p>
    <b>Solution (Before Spring Framework 4.3):</b><br/>
<pre>@Controller
public class SafeController {

    /**
     * For methods without side-effects use either
     * RequestMethod.GET, RequestMethod.HEAD, RequestMethod.TRACE, or RequestMethod.OPTIONS.
     */
    @RequestMapping(value = "/path", method = RequestMethod.GET)
    public String readData() {
        // No state-changing operations performed within this method.
        return "";
    }

    /**
     * For state-changing methods use either
     * RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE, or RequestMethod.PATCH.
     */
    @RequestMapping(value = "/path", method = RequestMethod.POST)
    public void writeData() {
        // State-changing operations performed within this method.
    }
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#csrf-use-proper-verbs">Spring Security Official Documentation: Use proper HTTP verbs (CSRF protection)</a><br/>
<a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29">OWASP: Cross-Site Request Forgery</a><br/>
<a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet">OWASP: CSRF Prevention Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/352.html">CWE-352: Cross-Site Request Forgery (CSRF)</a>
</p>ZVULNERABILITY
ç
findsecbugs:HARD_CODE_KEYÔ
findsecbugsHARD_CODE_KEYSecurity - Hard Coded Key"MAJOR*java2HARD_CODE_KEY:ä<p>
Cryptographic keys should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
(Hard coded passwords are reported separately by <i>Hard Coded Password</i> pattern)
</p>
<p>
<p><b>Vulnerable Code:</b><br/>

<pre>byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
SecretKeySpec spec = new SecretKeySpec(key, "AES");
Cipher aes = Cipher.getInstance("AES");
aes.init(Cipher.ENCRYPT_MODE, spec);
return aesCipher.doFinal(secretData);</pre> 
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://cwe.mitre.org/data/definitions/321.html">CWE-321: Use of Hard-coded Cryptographic Key</a><br/>
</p>ZVULNERABILITY
π
findsecbugs:SPEL_INJECTIONö
findsecbugsSPEL_INJECTION@Security - Potential code injection when using Spring Expression"CRITICAL*java2SPEL_INJECTION:â<p>
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>
public void parseExpressionInterface(Person personObj,String property) {

        ExpressionParser parser = new SpelExpressionParser();

        //Unsafe if the input is control by the user..
        Expression exp = parser.parseExpression(property+" == 'Albert'");

        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);
        boolean result = exp.getValue(testContext, Boolean.class);
[...]</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
    <a href="http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html">Spring Expression Language (SpEL) - Official Documentation</a><br/>
    <a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf">Minded Security: Expression Language Injection</a><br/>
    <a href="http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
</p>ZVULNERABILITY
—
findsecbugs:PERMISSIVE_CORS±
findsecbugsPERMISSIVE_CORS(Security - Overly permissive CORS policy"MAJOR*java2PERMISSIVE_CORS:π<p>
Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for JavaScript to access the contents of a Web page, both the JavaScript and the Web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, cull through it, and communicate it back to the attacker. HTML5 makes it possible for JavaScript to access data across domains if a new HTTP header called Access-Control-Allow-Origin is defined. With this header, a Web server defines which other domains are allowed to access its domain using cross-origin requests. However, caution should be taken when defining the header because an overly permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>response.addHeader("Access-Control-Allow-Origin", "*");</pre>
</p>
<p>
    <b>Solution:</b>
<br/>
Avoid using * as the value of the Access-Control-Allow-Origin header, which indicates that the application's data is accessible to JavaScript running on any domain.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.w3.org/TR/cors/">W3C Cross-Origin Resource Sharing</a><br/>
<a href="http://enable-cors.org/">Enable Cross-Origin Resource Sharing</a><br/>
</p>ZVULNERABILITY
≥

findsecbugs:TAPESTRY_ENDPOINTë

findsecbugsTAPESTRY_ENDPOINTSecurity - Found Tapestry page"INFO*java2TAPESTRY_ENDPOINT:†	<p>A Tapestry endpoint was discovered at application startup. Tapestry apps are structured with a backing Java class and a corresponding 
Tapestry Markup Language page (a .tml file) for each page. When a request is received, the GET/POST parameters are mapped to specific 
inputs in the backing Java class. The mapping is either done with fieldName:</p>
<pre><code>
    [...]
    protected String input;
    [...]
</code></pre>
<p>or the definition of an explicit annotation:
</p>
<pre><code>
    [...]
    @org.apache.tapestry5.annotations.Parameter
    protected String parameter1;

    @org.apache.tapestry5.annotations.Component(id = "password")
    private PasswordField passwordField;
    [...]
</code></pre>
<p>The page is mapped to the view <code>[/resources/package/PageName].tml.</code></p>
<p>Each Tapestry page in this application should be researched to make sure all inputs that are automatically 
mapped in this way are properly validated before they are used.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://tapestry.apache.org/">Apache Tapestry Home Page</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
· 
#findsecbugs:WEAK_MESSAGE_DIGEST_MD5π 
findsecbugsWEAK_MESSAGE_DIGEST_MD53Security - MD2, MD4 and MD5 are weak hash functions"MAJOR*java2WEAK_MESSAGE_DIGEST_MD5:¶<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="http://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="http://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="http://stackoverflow.com/questions/22580853/reliable-implementation-of-pbkdf2-hmac-sha256-for-java">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>ZVULNERABILITY
⁄
#findsecbugs:HTTP_RESPONSE_SPLITTING≤
findsecbugsHTTP_RESPONSE_SPLITTING,Security - Potential HTTP Response Splitting"INFO*java2HTTP_RESPONSE_SPLITTING:ß<p>
    When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream
    that is interpreted as two different HTTP responses (instead of one).
    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.
    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.
    If you are concerned about this risk, you should test on the platform of concern to see
    if the underlying platform allows for CR or LF characters to be injected into headers.
    This weakness is reported with lower priority than SQL injection etc.,
    if you are using a vulnerable platform, please check low-priority warnings too.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String author = request.getParameter(AUTHOR_PARAMETER);
// ...
Cookie cookie = new Cookie("author", author);
response.addCookie(cookie);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.owasp.org/index.php/HTTP_Response_Splitting">OWASP: HTTP Response Splitting</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/113.html">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>
    <a href="http://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
</p>ZVULNERABILITY
≥
findsecbugs:PATH_TRAVERSAL_OUTê
findsecbugsPATH_TRAVERSAL_OUT0Security - Potential Path Traversal (file write)"MAJOR*java2PATH_TRAVERSAL_OUT:ä<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter. 
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="http://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="http://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>ZVULNERABILITY
≠
findsecbugs:SEAM_LOG_INJECTIONä
findsecbugsSEAM_LOG_INJECTION8Security - Potential code injection in Seam logging call"CRITICAL*java2SEAM_LOG_INJECTION:˘
<p>
    Seam Logging API support an expression language to introduce bean property to log messages. The expression language can
    also be the source to unwanted code execution.
</p>
<p>
    In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>public void logUser(User user) {
    log.info("Current logged in user : " + user.getUsername());
    //...
}</pre>
</p>
<p><b>Solution:</b></p>
<p>
<pre>public void logUser(User user) {
    log.info("Current logged in user : #0", user.getUsername());
    //...
}</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://issues.jboss.org/browse/JBSEAM-5130">JBSEAM-5130: Issue documenting the risk</a><br/>
    <a href="https://docs.jboss.org/seam/2.3.1.Final/reference/html_single/#d0e4185">JBoss Seam: Logging (Official documentation)</a><br/>
    <a href="https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html">The Java EE 6 Tutorial: Expression Language</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>

</p>ZVULNERABILITY
¨
findsecbugs:RSA_NO_PADDINGç
findsecbugsRSA_NO_PADDING*Security - RSA with no padding is insecure"MAJOR*java2RSA_NO_PADDING:ï<p>
The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>Cipher.getInstance("RSA/NONE/NoPadding")</pre>
</p>
<p>
<b>Solution:</b><br/>
The code should be replaced with:<br/>
<pre>Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding")</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://cwe.mitre.org/data/definitions/780.html">CWE-780: Use of RSA Algorithm without OAEP</a><br/>
<a href="http://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/">Root Labs: Why RSA encryption padding is critical</a>
</p>ZVULNERABILITY
‘	
findsecbugs:URL_REWRITING∂	
findsecbugsURL_REWRITINGSecurity - URL rewriting method"MAJOR*java2URL_REWRITING:À<p>
The implementation of this method includes the logic to determine whether the session ID needs to be encoded in the URL.<br/>
URL rewriting has significant security risks. Since session ID appears in the URL, it may be easily seen by third parties. Session ID in the URL can be disclosed in many ways, for example:<br/>
<ul>
    <li>Log files,</li>
    <li>The browser history,</li>
    <li>By copy-and-pasting it into an e-mail or posting,</li>
    <li>The HTTP Referrer.</li>
</ul>
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>out.println("Click &lt;a href=" + 
                res.encodeURL(HttpUtils.getRequestURL(req).toString()) + 
                "&gt;here&lt;/a&gt;");</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using those methods. If you are looking to encode a URL String or form parameters do not confuse the URL rewriting methods with the URLEncoder class.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management">OWASP Top 10 2010-A3-Broken Authentication and Session Management</a><br/>
</p>ZVULNERABILITY
Ø
findsecbugs:WEAK_TRUST_MANAGERå
findsecbugsWEAK_TRUST_MANAGER4Security - TrustManager that accept any certificates"MAJOR*java2WEAK_TRUST_MANAGER:Ç<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
<a href="http://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>. As a consequence, this is vulnerable to
<a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a truststore for example) should be built.
Detailed information for a proper implementation is available at:
<a href="http://stackoverflow.com/a/6378872/89769">[1]</a> 
<a href="http://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any client connecting (no certificate validation)
    }

    @Override
    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
        //Trust any remote server (no certificate validation)
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>ZVULNERABILITY
˙	
1findsecbugs:ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACEƒ	
findsecbugs%ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE6Security - WebView with JavaScript interface (Android)"INFO*java2%ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE:ì<p>
    The use of JavaScript Interface could expose the WebView to risky API. If an XSS is triggered in the WebView, the class
    could be called by the malicious JavaScript code.
</p>

<p>
    <b>Code at risk:</b><br/>
    <pre>
WebView myWebView = (WebView) findViewById(R.id.webView);

myWebView.addJavascriptInterface(new FileWriteUtil(this), "fileWriteUtil");

WebSettings webSettings = myWebView.getSettings();
webSettings.setJavaScriptEnabled(true);

[...]
class FileWriteUtil {
    Context mContext;

    FileOpenUtil(Context c) {
        mContext = c;
    }

    public void writeToFile(String data, String filename, String tag) {
        [...]
    }
}
    </pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29">Android Official Doc: WebView.addJavascriptInterface()</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/749.html">CWE-749: Exposed Dangerous Method or Function</a>
</p>ZVULNERABILITY
Û
findsecbugs:INSECURE_COOKIE”
findsecbugsINSECURE_COOKIE)Security - Cookie without the secure flag"MAJOR*java2INSECURE_COOKIE:⁄<p>
A new cookie is created without the <code>Secure</code> flag set.
The <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure
communication (<code>http://</code>).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("userName",userName);
cookie.setSecure(true); // Secure flag
cookie.setHttpOnly(true);
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="https://cwe.mitre.org/data/definitions/614.html">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a><br/>
<a href="https://cwe.mitre.org/data/definitions/315.html">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>
<a href="https://cwe.mitre.org/data/definitions/311.html">CWE-311: Missing Encryption of Sensitive Data</a><br/>
<a href="https://www.owasp.org/index.php/SecureFlag">OWASP: Secure Flag</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag">Rapid7: Missing Secure Flag From SSL Cookie</a>
</p>ZVULNERABILITY
§
findsecbugs:REDOSé
findsecbugsREDOSSecurity - Regex DOS (ReDOS)"MAJOR*java2REDOS:∂<p>
    Regular expressions (regexs) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines 
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
<p>
    For example, for the regex: <b>^(a+)+$</b>, the input "<code>aaaaaaaaaaaaaaaaX</code>" will cause the regex engine to analyze 65536 
different paths.<sup>[1] Example taken from OWASP references</sup></p>
<p>
Therefore, it is possible that a single request may cause a large amount of computation on the server side. 
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the 
Regex due to the + (or a *) inside the parenthesis, and the + (or a *) outside the parenthesis. The way this is written, either + could 
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be 
rewritten as: <b>^a+$</b>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original 
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://www.jroller.com/sebastianKuebeck/entry/detecting_and_preventing_redos_vulnerabilities">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>
<sup>[1]</sup> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP: Regular expression Denial of Service</a><br/>
<a href="http://cwe.mitre.org/data/definitions/400.html">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>
</p>ZVULNERABILITY
ø
findsecbugs:BLOWFISH_KEY_SIZEù
findsecbugsBLOWFISH_KEY_SIZE(Security - Blowfish usage with short key"MAJOR*java2BLOWFISH_KEY_SIZE:°<p>
The Blowfish cipher supports keysizes from 32 bits to 448 bits. A small key size makes the ciphertext vulnerable to brute force attacks.
At least 128 bits of entropy should be used when generating the key if use of Blowfish is required.
</p>
<p>
If the algorithm can be changed, the AES block cipher should be used instead.
</p>

<p><b>Vulnerable Code:</b><br/>
<pre>KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");
keyGen.init(64);</pre>
</p>

<p><b>Solution:</b><br/>
<pre>KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");
keyGen.init(128);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://en.wikipedia.org/wiki/Blowfish_(cipher)">Blowfish (cipher)</a><br/>
<a href="http://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a>
</p>ZVULNERABILITY
‡
"findsecbugs:OBJECT_DESERIALIZATIONπ
findsecbugsOBJECT_DESERIALIZATION0Security - Object deserialization is used in {1}"CRITICAL*java2OBJECT_DESERIALIZATION:®<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class java.util.HashSet</a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>ZVULNERABILITY
â	
)findsecbugs:TEMPLATE_INJECTION_FREEMARKER€
findsecbugsTEMPLATE_INJECTION_FREEMARKER7Security - Potential template injection with Freemarker"CRITICAL*java2TEMPLATE_INJECTION_FREEMARKER:µ<p>
Freemarker template engine is powerful. It is possible to add logic including condition statements, loops and external calls.
It is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code
on the server-side. Freemarker templates should be seen as scripts.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>Template template = cfg.getTemplate(inputTemplate);
[...]
template.process(data, swOut);</pre>
</p>
<p>
    <b>Solution:</b>
<br/>
Avoid letting end users manipulate templates with Freemarker. If you need to expose template editing to your users,
prefer logic-less template engines such as Handlebars or Moustache (See references).
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://blog.portswigger.net/2015/08/server-side-template-injection.html">PortSwigger: Server-Side Template Injection </a><br/>
<a href="https://jknack.github.io/handlebars.java/">Handlebars.java</a><br/>
</p>ZVULNERABILITY
™	
findsecbugs:LDAP_INJECTIONã	
findsecbugsLDAP_INJECTION#Security - Potential LDAP Injection"CRITICAL*java2LDAP_INJECTION:ó<p>
Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL.
Therefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.
</p>
<p>
    <b>Code at risk:</b><br/>
    <pre>NamingEnumeration&lt;SearchResult&gt; answers = context.search("dc=People,dc=example,dc=com",
        "(uid=" + username + ")", ctrls);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection">WASC-29: LDAP Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/90.html">CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</a><br/>
<a href="http://www.veracode.com/security/ldap-injection">LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP Security</a>
</p>ZVULNERABILITY
ÿ
findsecbugs:SERVLET_HEADERπ
findsecbugsSERVLET_HEADER!Security - HTTP headers untrusted"INFO*java2SERVLET_HEADER:À<p>Request headers can easily be altered by the requesting user. In general, no assumption should be made that 
the request came from a regular browser without modification by an attacker. As such, it is recommended that you 
not trust this value in any security decisions you make with respect to a request.</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>ZVULNERABILITY
†
findsecbugs:SQL_INJECTION_JPA˛
findsecbugsSQL_INJECTION_JPA-Security - Potential SQL/JPQL Injection (JPA)"CRITICAL*java2SQL_INJECTION_JPA:˙<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>
EntityManager pm = getEM();

TypedQuery&lt;UserEntity&gt; q = em.createQuery(
    String.format("select * from Users where name = %s", username),
    UserEntity.class);

UserEntity res = q.getSingleResult();</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>
TypedQuery&lt;UserEntity&gt; q = em.createQuery(
    "select * from Users where name = usernameParam",UserEntity.class)
    .setParameter("usernameParam", username);

UserEntity res = q.getSingleResult();</pre>
</p>
<br/>
<p>
<b>References (JPA)</b><br/>
<a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html">The Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
ˇ	
findsecbugs:BAD_HEXA_CONVERSION€	
findsecbugsBAD_HEXA_CONVERSION(Security - Bad hexadecimal concatenation"MAJOR*java2BAD_HEXA_CONVERSION:€<p>When converting a byte array containing a hash signature to a human readable string, a conversion mistake can be made if 
the array is read byte by byte. The following sample illustrates the use of Integer.toHexString() which will trim any leading zeroes
from each byte of the computed hash value.
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] resultBytes = md.digest(password.getBytes("UTF-8"));

StringBuilder stringBuilder = new StringBuilder();
for(byte b :resultBytes) {
    stringBuilder.append( Integer.toHexString( b & 0xFF ) );
}

return stringBuilder.toString();</pre>
</p>
<p>
This mistake weakens the hash value computed since it introduces more collisions. 
For example, the hash values "0x0679" and "0x6709" would both output as "679" for the above function.
</p>

<p>
In this situation, the use of toHexString() should be replaced with String.format() as follows:
<pre>stringBuilder.append( String.format( "%02X", b ) );</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://cwe.mitre.org/data/definitions/704.html">CWE-704: Incorrect Type Conversion or Cast</a>
</p>ZVULNERABILITY
»
*findsecbugs:JACKSON_UNSAFE_DESERIALIZATIONô
findsecbugsJACKSON_UNSAFE_DESERIALIZATION7Security - Unsafe Jackson deserialization configuration"CRITICAL*java2JACKSON_UNSAFE_DESERIALIZATION:Ò<p>When the Jackson databind library is used incorrectly the deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows the trigger of malicious operation.

<p>
<b>Solutions:</b><br/>
<p>
Explicitly define what types and subtypes you want to be available when using polymorphism through JsonTypeInfo.Id.NAME.
Also, never call ObjectMapper.<strong>enableDefaultTyping</strong> (and then readValue a type that holds a Object or Serializable or Comparable or a known deserialization type).
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public class Example {
    static class ABean {
        public int id;
        public Object obj;
    }

    static class AnotherBean {
        @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS) // or JsonTypeInfo.Id.MINIMAL_CLASS
        public Object obj;
    }

    public void example(String json) throws JsonMappingException {
         ObjectMapper mapper = new ObjectMapper();
         mapper.enableDefaultTyping();
         mapper.readValue(json, ABean.class);
    }

    public void exampleTwo(String json) throws JsonMappingException {
         ObjectMapper mapper = new ObjectMapper();
         mapper.readValue(json, AnotherBean.class);
    }

}
</pre>
</p>

<p>
<b>References</b><br/>
<a href="https://github.com/FasterXML/jackson-databind/issues/1599">Jackson Deserializer security vulnerability</a><br>
<a href="https://github.com/mbechler/marshalsec">Java Unmarshaller Security - Turning your data into code execution</a><br>
</p>ZVULNERABILITY
ñ
findsecbugs:XSS_SERVLET˙
findsecbugsXSS_SERVLET#Security - Potential XSS in Servlet"MAJOR*java2XSS_SERVLET:è<p>
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}</pre>
</p>
<p>
    <b>Solution:</b>
<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}</pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider: 
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing 
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>ZVULNERABILITY
Ó
!findsecbugs:SQL_INJECTION_ANDROID»
findsecbugsSQL_INJECTION_ANDROID*Security - Potential Android SQL Injection"CRITICAL*java2SQL_INJECTION_ANDROID:ø<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>String query = "SELECT * FROM  messages WHERE uid= '"+userInput+"'" ;
Cursor cursor = this.getReadableDatabase().rawQuery(query,null);</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>String query = "SELECT * FROM  messages WHERE uid= ?" ;
Cursor cursor = this.getReadableDatabase().rawQuery(query,new String[] {userInput});</pre>
</p>
<br/>

<b>References (Android SQLite)</b><br/>
<a href="http://www.informit.com/articles/article.aspx?p=2268753&seqNum=5">InformIT.com: Practical Advice for Building Secure Android Databases in SQLite</a><br/>
<a href="https://www.packtpub.com/books/content/knowing-sql-injection-attacks-and-securing-our-android-applications-them">Packtpub.com: Knowing the SQL-injection attacks and securing our Android applications from them</a><br/>
<a href="https://books.google.ca/books?id=SXlMAQAAQBAJ&lpg=PR1&pg=PA64#v=onepage&q&f=false">Android Database Support (Enterprise Android: Programming Android Database Applications for the Enterprise)</a><br/>
<a href="https://stackoverflow.com/a/29797229/89769">Safe example of Insert, Select, Update and Delete queryies provided by Suragch</a><br/>

<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
Ú
findsecbugs:STATIC_IVÿ
findsecbugs	STATIC_IVSecurity - Static IV"MAJOR*java2	STATIC_IV:Ä<p>
    Initialization vector must be regenerated for each message to be encrypted.
</p>
<p><b>Vulnerable Code:</b></p>
<p>
<pre>
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
</pre>
<p><b>Solution:</b></p>
<p>
<pre>
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://en.wikipedia.org/wiki/Initialization_vector">Wikipedia: Initialization vector</a><br/>
<a href="http://cwe.mitre.org/data/definitions/329.html">CWE-329: Not Using a Random IV with CBC Mode</a><br/>
<a href="https://defuse.ca/cbcmodeiv.htm">Encryption - CBC Mode IV: Secret or Not?</a>
</p>ZVULNERABILITY
“
findsecbugs:WICKET_ENDPOINT≤
findsecbugsWICKET_ENDPOINTSecurity - Found Wicket WebPage"INFO*java2WICKET_ENDPOINT:ƒ<p>This class represents a Wicket WebPage. Input is automatically read from a PageParameters instance passed to the constructor. 
The current page is mapped to the view [/package/WebPageName].html.</p>
<p>Each Wicket page in this application should be researched to make sure all inputs that are automatically 
mapped in this way are properly validated before they are used.</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://wicket.apache.org/">Apache Wicket Home Page</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
è
findsecbugs:CRLF_INJECTION_LOGSÎ
findsecbugsCRLF_INJECTION_LOGS,Security - Potential CRLF Injection for logs"INFO*java2CRLF_INJECTION_LOGS:Ë<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the replace function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="http://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
</p>ZVULNERABILITY
Ú
%findsecbugs:UNENCRYPTED_SERVER_SOCKET»
findsecbugsUNENCRYPTED_SERVER_SOCKET$Security - Unencrypted Server Socket"MAJOR*java2UNENCRYPTED_SERVER_SOCKET:¿<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain server socket (Cleartext communication):
<pre>ServerSocket soc = new ServerSocket(1234);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Server Socket (Secure communication):
<pre>ServerSocket soc = SSLServerSocketFactory.getDefault().createServerSocket(1234);</pre>
</p>
<p>Beyond using an SSL server socket, you need to make sure your use of SSLServerSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>ZVULNERABILITY
¥
findsecbugs:XML_DECODERò
findsecbugsXML_DECODERSecurity - XMLDecoder usage"CRITICAL*java2XML_DECODER:≤<p>
    XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution.
    This is possible because XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods,
    but in practice, any method can be called.
</p>
<p>
    <b>Malicious XML example:</b>
</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;
  &lt;object class="java.io.PrintWriter"&gt;
    &lt;string>/tmp/Hacked.txt&lt;/string&gt;
    &lt;void method="println"&gt;
      &lt;string>Hello World!&lt;/string&gt;
    &lt;/void&gt;
    &lt;void method="close"/&gt;
  &lt;/object&gt;
&lt;/java&gt;
</pre>
<p>
The XML code above will cause the creation of a file with the content "Hello World!".
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>XMLDecoder d = new XMLDecoder(in);
try {
    Object result = d.readObject();
}
[...]</pre>
</p>
<p>
<b>Solution:</b></br/>
The solution is to avoid using XMLDecoder to parse content from an untrusted source.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html">Dinis Cruz Blog: Using XMLDecoder to execute server-side Java Code on an Restlet application</a><br/>
<a href="https://securityblog.redhat.com/2014/01/23/java-deserialization-flaws-part-2-xml-deserialization/">RedHat blog : Java deserialization flaws: Part 2, XML deserialization</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
î
findsecbugs:DES_USAGE˙
findsecbugs	DES_USAGE!Security - DES/DESede is insecure"MAJOR*java2	DES_USAGE:ï<p>
DES and DESede (3DES) are not considered strong ciphers for modern applications. Currently, NIST recommends the 
usage of AES block ciphers instead of DES/3DES.
</p>
<p>
    <b>Example weak code:</b>
<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Example solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://www.nist.gov/itl/fips/060205_des.cfm">NIST Withdraws Outdated Data Encryption Standard</a><br/>
<a href="http://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a>
</p>ZVULNERABILITY
œ
%findsecbugs:SQL_INJECTION_SPRING_JDBC•
findsecbugsSQL_INJECTION_SPRING_JDBC1Security - Potential JDBC Injection (Spring JDBC)"CRITICAL*java2SQL_INJECTION_SPRING_JDBC:ç<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = '"+paramName+"'", Integer.class);
</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>JdbcTemplate jdbc = new JdbcTemplate();
int count = jdbc.queryForObject("select count(*) from Users where name = ?", Integer.class, paramName);</pre>
</p>
<br/>

<b>References (Spring JDBC)</b><br/>
<a href="http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/jdbc.html">Spring Official Documentation: Data access with JDBC</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
Ω
findsecbugs:UNENCRYPTED_SOCKETö
findsecbugsUNENCRYPTED_SOCKETSecurity - Unencrypted Socket"MAJOR*java2UNENCRYPTED_SOCKET:ß<p>
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
</p>
<p>
<b>Vulnerable Code:</b><br/>
Plain socket (Cleartext communication):
<pre>Socket soc = new Socket("www.google.com",80);</pre>
</p>
<p>
<b>Solution:</b><br/>
SSL Socket (Secure communication):
<pre>Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);</pre>
</p>
<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Top_10_2010-A9">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>
<a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">OWASP: Transport Layer Protection Cheat Sheet</a><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/319.html">CWE-319: Cleartext Transmission of Sensitive Information</a>
</p>ZVULNERABILITY
Ç
findsecbugs:ANDROID_GEOLOCATIONﬁ

findsecbugsANDROID_GEOLOCATION7Security - WebView with geolocation activated (Android)"INFO*java2ANDROID_GEOLOCATION:–	<p>
    It is suggested to ask the user for a confirmation about obtaining its geolocation.
</p>
<p>
    <b>Code at risk:</b><br/>
<pre>
webView.setWebChromeClient(new WebChromeClient() {
    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
        callback.invoke(origin, true, false);
    }
});
</pre>
</p>
<p>
    <b>Suggested code:</b><br/>

    Limit the sampling of geolocation and ask the user for confirmation.
<pre>
webView.setWebChromeClient(new WebChromeClient() {
    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
        callback.invoke(origin, true, false);

        //Ask the user for confirmation
    }
});
</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.securecoding.cert.org/confluence/display/java/DRD15-J.+Consider+privacy+concerns+when+using+Geolocation+API">CERT: DRD15-J. Consider privacy concerns when using Geolocation API</a><br/>
    <a href="http://en.wikipedia.org/wiki/W3C_Geolocation_API">Wikipedia: W3C Geolocation API</a><br/>
    <a href="http://dev.w3.org/geo/api/spec-source.html">W3C: Geolocation Specification</a><br/>
</p>ZVULNERABILITY
¨
"findsecbugs:DESERIALIZATION_GADGETÖ
findsecbugsDESERIALIZATION_GADGET=Security - This class could be used as deserialization gadget"INFO*java2DESERIALIZATION_GADGET:Î<p>
Deserialization gadget are class that could be used by an attacker to take advantage of a remote API using Native Serialization.
This class is either adding custom behavior to deserialization with the readObject method (Serializable) or can be called
 from a serialized object (InvocationHandler).
</p>
<p>
This detector is intended to be used mostly by researcher. The real issue is using deserialization for remote operation.
Removing gadget is an hardening practice to reduce the risk of being exploited.
</p>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class java.util.HashSet</a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>ZVULNERABILITY
∞
findsecbugs:SQL_INJECTIONí
findsecbugsSQL_INJECTION"Security - Potential SQL Injection"CRITICAL*java2SQL_INJECTION:°
<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
Alternatively to prepare statements, each parameter can be escaped manually.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>
createQuery("select * from User where id = '"+inputId+"'");
</pre>
</p>
<p>
    <b>Solution:</b><br/>

    <pre>
import org.owasp.esapi.Encoder;

createQuery("select * from User where id = '"+Encoder.encodeForSQL(inputId)+"'");
</pre>
</p>
<br/>
<p>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
ﬁ
findsecbugs:COMMAND_INJECTIONº
findsecbugsCOMMAND_INJECTION&Security - Potential Command Injection"CRITICAL*java2COMMAND_INJECTION:ø<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>import java.lang.Runtime;

Runtime r = Runtime.getRuntime();
r.exec("/bin/sh -c some_tool" + input);</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP: Command Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/78.html">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>
</p>ZVULNERABILITY
º
'findsecbugs:SPRING_UNVALIDATED_REDIRECTê
findsecbugsSPRING_UNVALIDATED_REDIRECT&Security - Spring Unvalidated Redirect"MAJOR*java2SPRING_UNVALIDATED_REDIRECT:Ç<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>@RequestMapping("/redirect")
public String redirect(@RequestParam("url") String url) {
    [...]
    return "redirect:" + url;
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>ZVULNERABILITY
»
"findsecbugs:STRUTS_FORM_VALIDATION°
findsecbugsSTRUTS_FORM_VALIDATION/Security - Struts Form without input validation"INFO*java2STRUTS_FORM_VALIDATION:ï<p>
Form inputs should have minimal input validation. Preventive validation helps provide defense in depth against a variety of risks.
</p>
<p>
Validation can be introduce by implementing a <code>validate</code> method.
<pre>
public class RegistrationForm extends ValidatorForm {

    private String name;
    private String email;

    [...]

    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
        //Validation code for name and email parameters passed in via the HttpRequest goes here
    }
}
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a><br/>
<a href="http://cwe.mitre.org/data/definitions/106.html">CWE-106: Struts: Plug-in Framework not in Use</a>
</p>ZVULNERABILITY
—
&findsecbugs:FORMAT_STRING_MANIPULATION¶
findsecbugsFORMAT_STRING_MANIPULATION%Security - Format String Manipulation"INFO*java2FORMAT_STRING_MANIPULATION:ú<p>
Allowing user input to control format parameters could enable an attacker to cause exceptions to be thrown or leak information.<br/>
Attackers may be able to modify the format string argument, such that an exception is thrown. If this exception is left uncaught, it may crash the application. Alternatively, if sensitive information is used within the unused arguments, attackers may change the format string to reveal this information.<br/>
The example code below lets the user specify the decimal points to which it shows the balance. The user can in fact specify anything causing an exception to be thrown which could lead to application failure. Even more critical within this example, if an attacker can specify the user input "2f %3$s %4$.2", the format string would be "The customer: %s %s has the balance %4$.2f %3$s %4$.2". This would then lead to the sensitive accountNo to be included within the resulting string.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>Formatter formatter = new Formatter(Locale.US);
String format = "The customer: %s %s has the balance %4$." + userInput + "f";
formatter.format(format, firstName, lastName, accountNo, balance);</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using user controlled values in the format string argument.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://cwe.mitre.org/data/definitions/134.html">CWE-134: Use of Externally-Controlled Format String</a><br/>
</p>ZVULNERABILITY
ß
findsecbugs:SPRING_ENDPOINTá
findsecbugsSPRING_ENDPOINT Security - Found Spring endpoint"INFO*java2SPRING_ENDPOINT:ò<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely.
This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p>ZVULNERABILITY
ù
findsecbugs:XXE_XMLREADERˇ
findsecbugsXXE_XMLREADER4Security - XML parsing vulnerable to XXE (XMLReader)"CRITICAL*java2XXE_XMLREADER:¸<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setContentHandler(customHandler);
reader.parse(new InputSource(inputStream));</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
reader.setContentHandler(customHandler);

reader.parse(new InputSource(inputStream));</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
reader.setContentHandler(customHandler);

reader.parse(new InputSource(inputStream));</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="http://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces-j/features.html">Xerces complete features list</a>
</p>ZVULNERABILITY
£
"findsecbugs:ANDROID_WORLD_WRITABLE¸
findsecbugsANDROID_WORLD_WRITABLE(Security - World writable file (Android)"MAJOR*java2ANDROID_WORLD_WRITABLE:ˆ<p>
    The file written in this context is using the creation mode <code>MODE_WORLD_READABLE</code>. It might not be the
    expected behavior to exposed the content being written.
</p>
<p>
    <b>Code at risk:</b><br/>
<pre>
fos = openFileOutput(filename, MODE_WORLD_READABLE);
fos.write(userInfo.getBytes());
</pre>
</p>
<br/>
<p>
    <b>Solution (using MODE_PRIVATE):</b><br/>
<pre>
fos = openFileOutput(filename, MODE_PRIVATE);
</pre>
</p>
<p>
    <b>Solution (using local SQLite Database):</b><br/>

Using a local SQLite database is probably the best solution to store structured data. Make sure the database file is not
create on external storage. See references below for implementation guidelines.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.securecoding.cert.org/confluence/display/java/DRD11-J.+Ensure+that+sensitive+data+is+kept+secure">CERT: DRD11-J. Ensure that sensitive data is kept secure</a><br/>
    <a href="http://developer.android.com/training/articles/security-tips.html#InternalStorage">Android Official Doc: Security Tips</a><br/>
    <a href="http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE">Android Official Doc: Context.MODE_PRIVATE</a><br/>
    <a href="http://www.vogella.com/tutorials/AndroidSQLite/article.html#databasetutorial_database">vogella.com: Android SQLite database and content provider - Tutorial</a><br/>
    <a href="https://www.owasp.org/index.php/Mobile_Top_10_2014-M2">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/312.html">CWE-312: Cleartext Storage of Sensitive Information</a>
</p>ZVULNERABILITY
è
findsecbugs:ECB_MODEˆ
findsecbugsECB_MODESecurity - ECB mode is insecure"MAJOR*java2ECB_MODE:ï<p>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Codebook (ECB) mode, 
which does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So, 
for example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept 
and replay the data.</p>
<p>
To fix this, something like Galois/Counter Mode (GCM) should be used instead.
</p>
<p>
<b>Code at risk:</b>
    <pre>Cipher c = Cipher.getInstance("AES/ECB/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
<a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01">NIST: Authenticated Encryption Modes</a><br/>
<a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29">Wikipedia: Block cipher modes of operation</a><br/>
<a href="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf">NIST: Recommendation for Block Cipher Modes of Operation</a>
</p>ZVULNERABILITY
Â
findsecbugs:PREDICTABLE_RANDOM¬
findsecbugsPREDICTABLE_RANDOM4Security - Predictable pseudorandom number generator"MAJOR*java2PREDICTABLE_RANDOM:∏<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>
<ul>
<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>
<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the change password form</li>
<li>any other secret value</li>
</ul>
<p>
A quick fix could be to replace the use of <b>java.util.Random</b> with something stronger, such as <b>java.security.SecureRandom</b>.
</p>
<p>
<b>Vulnerable Code:</b><br/>
<pre>String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}</pre>
</p>
<p>
<b>Solution:</b>
<pre>import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a><br/>
<a href="http://cwe.mitre.org/data/definitions/330.html">CWE-330: Use of Insufficiently Random Values</a><br/>
<a href="http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>
</p>ZVULNERABILITY
€
 findsecbugs:UNVALIDATED_REDIRECT∂
findsecbugsUNVALIDATED_REDIRECTSecurity - Unvalidated Redirect"MAJOR*java2UNVALIDATED_REDIRECT:Ω<p>
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
</p>
<p>
    <b>Scenario</b><br/>
    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>
    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>
    3. The user enters his credentials.<br/>
    4. The evil site steals the user's credentials and redirects him to the original website.<br/>
    <br/>
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
</p>
<p>
    <b>Vulnerable Code:</b></br/>
    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept redirection destinations from users</li>
        <li>Accept a destination key, and use it to look up the target (legal) destination</li>
        <li>Accept only relative paths</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse">WASC-38: URL Redirector Abuse</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>
<a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>
</p>ZVULNERABILITY
ª	
findsecbugs:XPATH_INJECTIONõ	
findsecbugsXPATH_INJECTION$Security - Potential XPath Injection"CRITICAL*java2XPATH_INJECTION:§<p>
XPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete datasource
could be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-39: XPath Injection</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/643.html">CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250">CERT: IDS09-J. Prevent XPath Injection (archive)</a><br/>
<a href="http://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf">Black Hat Europe 2012: Hacking XPath 2.0</a><br/>
<a href="http://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html">Balisage: XQuery Injection</a>
</p>ZVULNERABILITY
˚

findsecbugs:JAXRS_ENDPOINT‹

findsecbugsJAXRS_ENDPOINT%Security - Found JAX-RS REST endpoint"INFO*java2JAXRS_ENDPOINT:Í	<p>This method is part of a REST Web Service (JSR311).</p>
<p>
<b>The security of this web service should be analyzed. For example:</b>
<ul>
<li>Authentication, if enforced, should be tested.</li>
<li>Access control, if enforced, should be tested.</li>
<li>The inputs should be tracked for potential vulnerabilities.</li>
<li>The communication should ideally be over SSL.</li>
<li>If the service supports writes (e.g., via POST), its vulnerability to CSRF should be investigated.<sup>[1]</sup></li>
</ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet">OWASP: REST Assessment Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet">OWASP: REST Security Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet">OWASP: Web Service Security Cheat Sheet</a><br/>
1. <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)">OWASP: Cross-Site Request Forgery</a><br/>
<a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet">OWASP: CSRF Prevention Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
ı
!findsecbugs:SQL_INJECTION_TURBINEœ
findsecbugsSQL_INJECTION_TURBINE/Security - Potential SQL Injection with Turbine"CRITICAL*java2SQL_INJECTION_TURBINE:¡<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
Turbine API provide a DSL to build query with Java code.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>
List&lt;Record&gt; BasePeer.executeQuery( "select * from Customer where id=" + inputId );
</pre>
</p>
<p>
    <b>Solution (using Criteria DSL):</b><br/>

    <pre>
Criteria c = new Criteria();
c.add( CustomerPeer.ID, inputId );

List&lt;Customer&gt; customers = CustomerPeer.doSelect( c );
</pre>

    <b>Solution (using specialized method):</b><br/>

<pre>
Customer customer = CustomerPeer.retrieveByPK( new NumberKey( inputId ) );
</pre>

    <b>Solution (using OWASP Encoder):</b><br/>

    <pre>
import org.owasp.esapi.Encoder;

BasePeer.executeQuery("select * from Customer where id = '"+Encoder.encodeForSQL(inputId)+"'");
</pre>
</p>
<br/>
<p>
<b>References (Turbine)</b><br/>
<a href="https://turbine.apache.org/turbine/turbine-2.1/howto/criteria-howto.html">Turbine Documentation: Criteria Howto</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
„
#findsecbugs:BEAN_PROPERTY_INJECTIONª
findsecbugsBEAN_PROPERTY_INJECTION'Security - JavaBeans Property Injection"CRITICAL*java2BEAN_PROPERTY_INJECTION:±<p>
An attacker can set arbitrary bean properties that can compromise system integrity. Bean population functions allow to set a bean property or a nested property. An attacker can leverage this functionality to access special bean properties like class.classLoader that will allow him to override system properties and potentially execute arbitrary code.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>MyBean bean = ...;
HashMap map = new HashMap();
Enumeration names = request.getParameterNames();
while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    map.put(name, request.getParameterValues(name));
}
BeanUtils.populate(bean, map);</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid using user controlled values to populate Bean property names.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/15.html">CWE-15: External Control of System or Configuration Setting</a><br/>
</p>ZVULNERABILITY
¿
findsecbugs:SSL_CONTEXT§
findsecbugsSSL_CONTEXTSecurity - Weak SSLContext"MAJOR*java2SSL_CONTEXT:¬<p>
    <b>Vulnerable Code:</b><br/>
<pre>
    SSLContext.getInstance("SSL");
</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to the following, and configure https.protocols JVM option to include TLSv1.2:</p>
<pre>
    SSLContext.getInstance("TLS");
</pre>
<p>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>ZVULNERABILITY
ù
findsecbugs:WEAK_FILENAMEUTILS˙
findsecbugsWEAK_FILENAMEUTILS1Security - FilenameUtils not filtering null bytes"INFO*java2WEAK_FILENAMEUTILS:Ù
<p>Some FilenameUtils' methods don't filter NULL bytes (<code>0x00</code>).</p>
<p>If a null byte is injected into a filename, if this filename is passed to the underlying OS, the file retrieved will be the
name of the file that is specified prior to the NULL byte, since at the OS level, all strings are terminated by a null byte even
though Java itself doesn't care about null bytes or treat them special. This OS behavior can be used to bypass filename validation 
that looks at the end of the filename (e.g., endswith ".log") to make sure its a safe file to access.</p>
<p>To fix this, two things are recommended:
<ul>
<li>Upgrade to Java 7 update 40 or later, or Java 8+ since  
<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8014846">NULL byte injection in filenames is fixed in those versions</a>.</li>
<li>Strongly validate any filenames provided by untrusted users to make sure they are valid (i.e., don't contain null, don't include path characters, etc.)</li>
</ul>
<p>If you know you are using a modern version of Java immune to NULL byte injection, you can probably disable this rule.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection">WASC-28: Null Byte Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/158.html">CWE-158: Improper Neutralization of Null Byte or NUL Character</a>
</p>ZVULNERABILITY
¬
findsecbugs:ESAPI_ENCRYPTOR¢
findsecbugsESAPI_ENCRYPTOR!Security - Use of ESAPI Encryptor"INFO*java2ESAPI_ENCRYPTOR:≤<p>
    The ESAPI has a small history of vulnerabilities within the cryptography component. Here is a quick validation list to
    make sure the Authenticated Encryption is working as expected.
</p>
<p><b>1. Library Version</b></p>
<p>
    This issue is corrected in ESAPI version 2.1.0. Versions <= 2.0.1 are vulnerable to a MAC bypass (CVE-2013-5679).<br/>
</p>
<p>
    For Maven users, the plugin <a href="http://mojo.codehaus.org/versions-maven-plugin/">versions</a> can be called using the
    following command. The effective version of ESAPI will be available in the output.<br/>
    <pre>$ mvn versions:display-dependency-updates</pre>
    <br/>Output:<br/>
    <pre>
[...]
[INFO] The following dependencies in Dependencies have newer versions:
[INFO]   org.slf4j:slf4j-api ................................... 1.6.4 -> 1.7.7
[INFO]   org.owasp.esapi:esapi ................................. 2.0.1 -> 2.1.0
[...]
    </pre>
</p>
<p>
    or by looking at the configuration directly.<br/>
    <pre>
&lt;dependency&gt;
    &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;
    &lt;artifactId&gt;esapi&lt;/artifactId&gt;
    &lt;version&gt;2.1.0&lt;/version&gt;
&lt;/dependency&gt;</pre>
</p>
<p>
    For Ant users, the jar used should be <a href="http://repo1.maven.org/maven2/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar">esapi-2.1.0.jar</a>.
</p>
<p><b>2. Configuration:</b></p>
    <p>
    The library version 2.1.0 is still vulnerable to key size being changed in the ciphertext definition (CVE-2013-5960). Some precautions need to be taken.<br/>
    <br/>
    <div><b>The cryptographic configuration of ESAPI can also be vulnerable if any of these elements are present:</b><br/>
    <b>Insecure configuration:</b><br/>
    <pre>
Encryptor.CipherText.useMAC=false

Encryptor.EncryptionAlgorithm=AES
Encryptor.CipherTransformation=AES/CBC/PKCS5Padding

Encryptor.cipher_modes.additional_allowed=CBC</pre>
    </div>
</p>
<p>
    <div>
    <b>Secure configuration:</b><br/>
    <pre>
#Needed
Encryptor.CipherText.useMAC=true

#Needed to have a solid auth. encryption
Encryptor.EncryptionAlgorithm=AES
Encryptor.CipherTransformation=AES/GCM/NoPadding

#CBC mode should be removed to avoid padding oracle
Encryptor.cipher_modes.additional_allowed=</pre>
    </div>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/ESAPI-security-bulletin1.pdf">ESAPI Security bulletin 1 (CVE-2013-5679)</a><br/>
    <a href="http://nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-5679">Vulnerability Summary for CVE-2013-5679</a><br/>
    <a href="http://www.synacktiv.com/ressources/synacktiv_owasp_esapi_hmac_bypass.pdf">Synactiv: Bypassing HMAC validation in OWASP ESAPI symmetric encryption</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/310.html">CWE-310: Cryptographic Issues</a><br/>
    <a href="http://lists.owasp.org/pipermail/esapi-dev/2015-March/002533.html">ESAPI-dev mailing list: Status of CVE-2013-5960</a><br/>
</p>ZVULNERABILITY
ˇ
 findsecbugs:SERVLET_QUERY_STRING⁄
findsecbugsSERVLET_QUERY_STRING!Security - Untrusted query string"INFO*java2SERVLET_QUERY_STRING:‡<p>The query string is the concatenation of the GET parameter names and values. Parameters other than those intended can
be passed in.</p>
<p>For the URL request <code>/app/servlet.htm?a=1&b=2</code>, the query string extract will be <code>a=1&b=2</code></p>
<p>Just as is true for individual parameter values retrieved via methods like <code>HttpServletRequest.getParameter()</code>, 
the value obtained from <code>HttpServletRequest.getQueryString()</code> should be considered unsafe.
You may need to validate or sanitize anything pulled from the query string before passing it to sensitive APIs. 
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
…
findsecbugs:SQL_INJECTION_JDBC¶
findsecbugsSQL_INJECTION_JDBC#Security - Potential JDBC Injection"CRITICAL*java2SQL_INJECTION_JDBC:™<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>

<p>
    <b>Vulnerable Code:</b><br/>
    <pre>Connection conn = [...];
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery("update COFFEES set SALES = "+nbSales+" where COF_NAME = '"+coffeeName+"'");</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>Connection conn = [...];
conn.prepareStatement("update COFFEES set SALES = ? where COF_NAME = ?");
updateSales.setInt(1, nbSales);
updateSales.setString(2, coffeeName);</pre>
</p>
<br/>

<b>References (JDBC)</b><br/>
<a href="http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
æ
'findsecbugs:ANDROID_WEB_VIEW_JAVASCRIPTí
findsecbugsANDROID_WEB_VIEW_JAVASCRIPT4Security - WebView with JavaScript enabled (Android)"INFO*java2ANDROID_WEB_VIEW_JAVASCRIPT:˜<p>
    Enabling JavaScript for the WebView means that it is now susceptible to XSS. The page render should be inspected
    for potential reflected XSS, stored XSS and DOM XSS.<br/>
<pre>
WebView myWebView = (WebView) findViewById(R.id.webView);
WebSettings webSettings = myWebView.getSettings();
webSettings.setJavaScriptEnabled(true);
</pre>
</p>

<p>
    <b>Code at risk:</b><br/>
Enabling JavaScript is not a bad practice. It just means that the backend code need to be audited for potential XSS.
The XSS can also be introduce client-side with DOM XSS.
<pre>
function updateDescription(newDescription) {
    $("#userDescription").html("&lt;p&gt;"+newDescription+"&lt;/p&gt;");
}
</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://www.technotalkative.com/issue-using-setjavascriptenabled-can-introduce-xss-vulnerabilities-application-review-carefully/">Issue: Using setJavaScriptEnabled can introduce XSS vulnerabilities</a><br/>
    <a href="http://developer.android.com/guide/webapps/webview.html#UsingJavaScript">Android Official Doc: WebView</a><br/>
    <a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
    <a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
    <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a>
</p>ZVULNERABILITY
¥
findsecbugs:EL_INJECTIONó
findsecbugsEL_INJECTIONGSecurity - Potential code injection when using Expression Language (EL)"CRITICAL*java2EL_INJECTION:É<p>
    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>public void evaluateExpression(String expression) {
    FacesContext context = FacesContext.getCurrentInstance();
    ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();
    ELContext elContext = context.getELContext();
    ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);
    return (String) vex.getValue(elContext);
}</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html">Minded Security: Abusing EL for executing OS commands</a><br/>
    <a href="https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html">The Java EE 6 Tutorial: Expression Language</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
    <a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf">Minded Security: Expression Language Injection</a><br/>
    <a href="http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/">Dan Amodio's blog: Remote Code with Expression Language Injection</a><br/>
    <a href="http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
</p>ZVULNERABILITY
ﬂ
#findsecbugs:SCRIPT_ENGINE_INJECTION∑
findsecbugsSCRIPT_ENGINE_INJECTION<Security - Potential code injection when using Script Engine"CRITICAL*java2SCRIPT_ENGINE_INJECTION:ò<p>
    Dymanic code is being evaluate. A careful analysis of the code construction should be made. Malicious code execution
    could lead to data leakage or operating system compromised.
</p>
<p>
    If the evaluation of user code is intended, a proper sandboxing should be applied (see references).
</p>

<p><b>Code at risk:</b></p>
<p>
<pre>
public void runCustomTrigger(String script) {
    ScriptEngineManager factory = new ScriptEngineManager();
    ScriptEngine engine = factory.getEngineByName("JavaScript");

    engine.eval(script); //Bad things can happen here.
}</pre>
</p>

<p><b>Solution:</b></p>
<p>
Safe evaluation of Javascript code using "Cloudbees Rhino Sandbox" library.<br/>
<pre>
public void runCustomTrigger(String script) {
    SandboxContextFactory contextFactory = new SandboxContextFactory();
    Context context = contextFactory.makeContext();
    contextFactory.enterContext(context);
    try {
        ScriptableObject prototype = context.initStandardObjects();
        prototype.setParentScope(null);
        Scriptable scope = context.newObject(prototype);
        scope.setPrototype(prototype);

        context.evaluateString(scope,script, null, -1, null);
    } finally {
        context.exit();
    }
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://github.com/cloudbees/rhino-sandbox">Cloudbees Rhino Sandbox</a>: Utility to create sandbox with Rhino (block access to all classes)<br/>
<a href="http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/">CodeUtopia.net: Sandboxing Rhino in Java</a><br/>
<a href="http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>
<a href="http://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
<a href="https://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
</p>ZVULNERABILITY
Ú
findsecbugs:MALICIOUS_XSLT”
findsecbugsMALICIOUS_XSLT-Security - A malicious XSLT could be provided"CRITICAL*java2MALICIOUS_XSLT:’<p>
    "XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents".<sup>[1]</sup><br/>
    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the
    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>
</p>
<p>
<b>Code at risk:</b><br/>
<pre>
Source xslt = new StreamSource(new FileInputStream(inputUserFile)); //Dangerous source to validate

Transformer transformer = TransformerFactory.newInstance().newTransformer(xslt);

Source text = new StreamSource(new FileInputStream("/data_2_process.xml"));
transformer.transform(text, new StreamResult(...));
</pre>
</p>
<p>
<b>Solution:</b><br/>
<p>
The solution would be to make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as
Path traversal <sup>[3][4]</sup> are not possible.
</p>
<p>
<b>References</b><br/>
[1] <a href="https://en.wikipedia.org/wiki/XSLT">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>
<a href="https://prezi.com/y_fuybfudgnd/offensive-xslt/">Offensive XSLT</a> by Nicolas Gregoire<br/>
[2] <a href="http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>
<a href="http://xhe.myxwiki.org/xwiki/bin/view/Main/">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>
<a href="http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>
<a href="https://www.w3.org/TR/xslt">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>
[3] <a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
[4] <a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
</p>ZVULNERABILITY
ó
findsecbugs:PATH_TRAVERSAL_INı
findsecbugsPATH_TRAVERSAL_IN/Security - Potential Path Traversal (file read)"MAJOR*java2PATH_TRAVERSAL_IN:Ú<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter. 
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="http://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="http://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>ZVULNERABILITY
õ
findsecbugs:STRUTS2_ENDPOINT˙
findsecbugsSTRUTS2_ENDPOINT"Security - Found Struts 2 endpoint"INFO*java2STRUTS2_ENDPOINT:á<p>In Struts 2, the endpoints are Plain Old Java Objects (POJOs) which means no Interface/Class needs to be implemented/extended.</p>
<p>When a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for
the class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn't include those values. 
An attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has
such a setter. The use of these parameters should be reviewed to make sure they are used safely.</p>ZVULNERABILITY
„
%findsecbugs:SERVLET_HEADER_USER_AGENTπ
findsecbugsSERVLET_HEADER_USER_AGENT&Security - Untrusted User-Agent header"INFO*java2SERVLET_HEADER_USER_AGENT:∞<p>The header "User-Agent" can easily be spoofed by the client. Adopting different behaviors based on the User-Agent (for
crawler UA) is not recommended.</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>ZVULNERABILITY
Å

"findsecbugs:STRUTS_FILE_DISCLOSURE⁄	
findsecbugsSTRUTS_FILE_DISCLOSURE!Security - Struts File Disclosure"MAJOR*java2STRUTS_FILE_DISCLOSURE:€<p>
Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.<br/>
An attacker may be able to forge a request parameter to match sensitive file locations. For example, requesting "http://example.com/?returnURL=WEB-INF/applicationContext.xml" would display the application's applicationContext.xml file. The attacker would be able to locate and download the applicationContext.xml referenced in the other configuration files, and even class files or jar files, obtaining sensitive information and launching other types of attacks.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>... 
String returnURL = request.getParameter("returnURL"); 
Return new ActionForward(returnURL); 
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Avoid constructing server-side redirects using user controlled input.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/552.html">CWE-552: Files or Directories Accessible to External Parties</a><br/>
</p>ZVULNERABILITY
Ô
findsecbugs:XXE_SAXPARSER—
findsecbugsXXE_SAXPARSER4Security - XML parsing vulnerable to XXE (SAXParser)"CRITICAL*java2XXE_SAXPARSER:Œ<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();

parser.parse(inputStream, customHandler);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
SAXParserFactory spf = SAXParserFactory.newInstance();
spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
SAXParser parser = spf.newSAXParser();

parser.parse(inputStream, customHandler);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
SAXParserFactory spf = SAXParserFactory.newInstance();
spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
SAXParser parser = spf.newSAXParser();

parser.parse(inputStream, customHandler);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="http://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces-j/features.html">Xerces complete features list</a>
</p>ZVULNERABILITY
£
#findsecbugs:SQL_INJECTION_HIBERNATE˚
findsecbugsSQL_INJECTION_HIBERNATE2Security - Potential SQL/HQL Injection (Hibernate)"CRITICAL*java2SQL_INJECTION_HIBERNATE:Ê<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
Alternatively to prepare statements, Hibernate Criteria can be used.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>
Session session = sessionFactory.openSession();
Query q = session.createQuery("select t from UserEntity t where id = " + input);
q.execute();</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>
Session session = sessionFactory.openSession();
Query q = session.createQuery("select t from UserEntity t where id = :userId");
q.setString("userId",input);
q.execute();</pre>
</p>
<p>
    <b>Solution for dynamic queries (with Hibernate Criteria):</b><br/>
    <pre>
Session session = sessionFactory.openSession();
Query q = session.createCriteria(UserEntity.class)
    .add( Restrictions.like("id", input) )
    .list();
q.execute();</pre>
</p>
<br/>
<p>
<b>References (Hibernate)</b><br/>
<a href="https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querycriteria.html">Hibernate Documentation: Query Criteria</a><br/>
<a href="https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html">Hibernate Javadoc: Query Object</a><br/>
<a href="http://blog.h3xstream.com/2014/02/hql-for-pentesters.html">HQL for pentesters</a>: Guideline to test if the suspected code is exploitable.<br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
Í
findsecbugs:XXE_XMLSTREAMREADER∆
findsecbugsXXE_XMLSTREAMREADER:Security - XML parsing vulnerable to XXE (XMLStreamReader)"CRITICAL*java2XXE_XMLSTREAMREADER:±<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one property or both.
</p>

<p><b>Solution disabling External Entities:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
<pre>public void parseXML(InputStream input) throws XMLStreamException {

    XMLInputFactory factory = XMLInputFactory.newFactory();
    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);
    XMLStreamReader reader = factory.createXMLStreamReader(input);
    [...]
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="http://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://openjdk.java.net/jeps/185">JEP 185: Restrict Fetching of External XML Resources</a>
</p>ZVULNERABILITY
‚
findsecbugs:DEFAULT_HTTP_CLIENTæ
findsecbugsDEFAULT_HTTP_CLIENTTSecurity - DefaultHttpClient with default constructor is not compatible with TLS 1.2"MAJOR*java2DEFAULT_HTTP_CLIENT:í<p>
    <b>Vulnerable Code:</b><br/>
<pre>
    HttpClient client = new DefaultHttpClient();
</pre>
</p>
<p>
<p><b>Solution:</b><br/>

Upgrade your implementation to use one of the recommended constructs and configure https.protocols JVM option to include TLSv1.2:</p>

<p>
<ul>
  <li>Use <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/SystemDefaultHttpClient.html">SystemDefaultHttpClient</a> instead</li>
<p>
    <b>Sample Code:</b><br/>
<pre>
    HttpClient client = new SystemDefaultHttpClient();
</pre>
</p>
  <li>Create an HttpClient based on SSLSocketFactory - get an SSLScoketFactory instance with <a href="https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLSocketFactory.html#getSystemSocketFactory()">getSystemSocketFactory()</a> and use this instance for HttpClient creation</li>
  <li>Create an HttpClient based on SSLConnectionSocketFactory - get an instance with <a href="https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/conn/ssl/SSLConnectionSocketFactory.html#getSystemSocketFactory()">getSystemSocketFactory()</a> and use this instance for HttpClient creation</li>
  <li>Use HttpClientBuilder - call <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html#useSystemProperties()">useSystemProperties()</a> before calling build()</li>
<p>
    <b>Sample Code:</b><br/>
<pre>
    HttpClient client = HttpClientBuilder.create().useSystemProperties().build();
</pre>
</p>
  <li>HttpClients - call <a href="https://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/impl/client/HttpClients.html#createSystem()">createSystem()</a> to create an instance</li>
<p>
    <b>Sample Code:</b><br/>
<pre>
    HttpClient client = HttpClients.createSystem();
</pre>
</p>
</ul>
</p>
<br/>

<p>
<b>References</b><br/>
<a href="https://blogs.oracle.com/java-platform-group/entry/diagnosing_tls_ssl_and_https">Diagnosing TLS, SSL, and HTTPS</a>
</p>ZVULNERABILITY
…
 findsecbugs:SERVLET_CONTENT_TYPE§
findsecbugsSERVLET_CONTENT_TYPE(Security - Untrusted Content-Type header"INFO*java2SERVLET_CONTENT_TYPE:£<p>
The HTTP header Content-Type can be controlled by the client. As such, its value should not be used in any security critical decisions.
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>ZVULNERABILITY
Ã
findsecbugs:SERVLET_SERVER_NAME®
findsecbugsSERVLET_SERVER_NAME$Security - Untrusted Hostname header"INFO*java2SERVLET_SERVER_NAME:≠<p>The hostname header can be controlled by the client. As such, its value should not be used in any security critical decisions. 
Both <code>ServletRequest.getServerName()</code> and <code>HttpServletRequest.getHeader("Host")</code> have the same 
behavior which is to extract the <code>Host</code> header.</p>
<pre>
GET /testpage HTTP/1.1
Host: www.example.com
[...]</pre>
<p>
The web container serving your application may redirect requests to your application by default. This would allow
a malicious user to place any value in the Host header. It is recommended that you do not trust this value in any security
decisions you make with respect to a request.
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/807.html">CWE-807: Untrusted Inputs in a Security Decision</a>
</p>ZVULNERABILITY
ﬁ
findsecbugs:CIPHER_INTEGRITYΩ
findsecbugsCIPHER_INTEGRITY#Security - Cipher with no integrity"MAJOR*java2CIPHER_INTEGRITY:»<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the 
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to used a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the 
    existing cipher is prone to error <sup><a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>ZVULNERABILITY
◊
*findsecbugs:HAZELCAST_SYMMETRIC_ENCRYPTION®
findsecbugsHAZELCAST_SYMMETRIC_ENCRYPTION)Security - Hazelcast symmetric encryption"MAJOR*java2HAZELCAST_SYMMETRIC_ENCRYPTION:ë<p>The network communications for Hazelcast is configured to use a symmetric cipher (probably DES or blowfish).</p>
<p>Those ciphers alone do not provide integrity or secure authentication. The use of asymmetric encryption is preferred.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="http://docs.hazelcast.org/docs/3.5/manual/html/encryption.html">Hazelcast Documentation: Encryption</a><br/>
<a href="http://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a>
</p>ZVULNERABILITY
î
findsecbugs:JAXWS_ENDPOINTı
findsecbugsJAXWS_ENDPOINT%Security - Found JAX-WS SOAP endpoint"INFO*java2JAXWS_ENDPOINT:É<p>This method is part of a SOAP Web Service (JSR224).</p>
<p>
<b>The security of this web service should be analyzed. For example:</b>
<ul>
<li>Authentication, if enforced, should be tested.</li>
<li>Access control, if enforced, should be tested.</li>
<li>The inputs should be tracked for potential vulnerabilities.</li>
<li>The communication should ideally be over SSL.</li>
</ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet">OWASP: Web Service Security Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
ƒ

findsecbugs:INSECURE_SMTP_SSL¢

findsecbugsINSECURE_SMTP_SSL'Security - Insecure SMTP SSL connection"MAJOR*java2INSECURE_SMTP_SSL:ß	<p>
Server identity verification is disabled when making SSL connections. Some email libraries that enable SSL connections do not verify the server certificate by default. This is equivalent to trusting all certificates. When trying to connect to the server, this application would readily accept a certificate issued to "hackedserver.com". The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>...
Email email = new SimpleEmail();
email.setHostName("smtp.servermail.com");
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true);
email.setFrom("user@gmail.com");
email.setSubject("TestMail");
email.setMsg("This is a test mail ... :-)");
email.addTo("foo@bar.com");
email.send();
...</pre>
</p>
<p>
    <b>Solution:</b><br/>
Please add the following check to verify the server cerfiticate:
<pre>email.setSSLCheckServerIdentity(true);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/297.html">CWE-297: Improper Validation of Certificate with Host Mismatch</a><br/>
</p>ZVULNERABILITY
⁄
findsecbugs:SERVLET_PARAMETER∏
findsecbugsSERVLET_PARAMETER&Security - Untrusted servlet parameter"INFO*java2SERVLET_PARAMETER:ø<p>The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.
You may need to validate or sanitize those values before passing them to sensitive APIs such as:</p>
<ul>
<li>SQL query (May lead to SQL injection)</li>
<li>File opening (May lead to path traversal)</li>
<li>Command execution (Potential Command injection)</li>
<li>HTML construction (Potential XSS)</li>
<li>etc...</li>
</ul>

<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>
</p>ZVULNERABILITY
‘
findsecbugs:SQL_INJECTION_JDO≤
findsecbugsSQL_INJECTION_JDO.Security - Potential SQL/JDOQL Injection (JDO)"CRITICAL*java2SQL_INJECTION_JDO:≠<p>
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>
PersistenceManager pm = getPM();

Query q = pm.newQuery("select * from Users where name = " + input);
q.execute();</pre>
</p>
<p>
    <b>Solution:</b><br/>
    <pre>
PersistenceManager pm = getPM();

Query q = pm.newQuery("select * from Users where name = nameParam");
q.declareParameters("String nameParam");
q.execute(input);</pre>
</p>
<br/>
<p>
<b>References (JDO)</b><br/>
<a href="https://db.apache.org/jdo/object_retrieval.html">JDO: Object Retrieval</a><br/>
<b>References (SQL injection)</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a><br/>
<a href="http://capec.mitre.org/data/definitions/66.html">CAPEC-66: SQL Injection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/89.html">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP: Top 10 2013-A1-Injection</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">OWASP: Query Parameterization Cheat Sheet</a><br/>
</p>ZVULNERABILITY
ﬂ
'findsecbugs:TEMPLATE_INJECTION_VELOCITY≥
findsecbugsTEMPLATE_INJECTION_VELOCITY5Security - Potential template injection with Velocity"CRITICAL*java2TEMPLATE_INJECTION_VELOCITY:ì<p>
Velocity template engine is powerful. It is possible to add logic including condition statements, loops and external calls.
It is not design to be sandbox to templating operations. A malicious user in control of a template can run malicious code
on the server-side. Velocity templates should be seen as scripts.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>[...]

Velocity.evaluate(context, swOut, "test", userInput);</pre>
</p>
<p>
    <b>Solution:</b>
<br/>
Avoid letting end users manipulate templates with Velocity. If you need to expose template editing to your users,
prefer logic-less template engines such as Handlebars or Moustache (See references).
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://blog.portswigger.net/2015/08/server-side-template-injection.html">PortSwigger: Server-Side Template Injection </a><br/>
<a href="https://jknack.github.io/handlebars.java/">Handlebars.java</a><br/>
</p>ZVULNERABILITY
å
findsecbugs:XXE_DOCUMENTÔ
findsecbugsXXE_DOCUMENT:Security - XML parsing vulnerable to XXE (DocumentBuilder)"CRITICAL*java2XXE_DOCUMENT:Ë<!--XXE_GENERIC_START-->
<h3>Attack</h3>
<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.</p>
<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;
&lt;!DOCTYPE foo [
   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;
&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>
</p>
<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>
<p>
<pre>
&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
 &lt;!ENTITY lol &quot;lol&quot;&gt;
 &lt;!ELEMENT lolz (#PCDATA)&gt;
 &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
 &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
 &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
[...]
 &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>
</p>

<h3>Solution</h3>
<p>
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
</p>
<!--XXE_GENERIC_END-->

<p><b>Vulnerable Code:</b></p>
<p>
<pre>
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
The following snippets show two available solutions. You can set one feature or both.
</p>

<p><b>Solution using "Secure processing" mode:</b></p>
<p>
This setting will protect you against Denial of Service attack and remote file access.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>

<p><b>Solution disabling DTD:</b></p>
<p>
By disabling DTD, almost all XXE attacks will be prevented.
<pre>
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<!--XXE_GENERIC_START-->
<a href="http://cwe.mitre.org/data/definitions/611.html">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>
<a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing">OWASP.org: XML External Entity (XXE) Processing</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion">WS-Attacks.org: XML Entity Expansion</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS">WS-Attacks.org: XML External Entity DOS</a><br/>
<a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack">WS-Attacks.org: XML Entity Reference Attack</a><br/>
<a href="http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>
<!--XXE_GENERIC_END-->
<a href="http://xerces.apache.org/xerces2-j/features.html">Xerces2 complete features list</a>
</p>ZVULNERABILITY
ß
findsecbugs:ANDROID_BROADCASTÖ
findsecbugsANDROID_BROADCASTSecurity - Broadcast (Android)"INFO*java2ANDROID_BROADCAST:î<p>
    Broadcast intents can be listen by any application with the appropriate permission. It is suggested to avoid transmitting
    sensitive information when possible.
</p>
<p>
    <b>Code at risk:</b><br/>
<pre>
Intent i = new Intent();
i.setAction("com.insecure.action.UserConnected");
i.putExtra("username", user);
i.putExtra("email", email);
i.putExtra("session", newSessionId);

this.sendBroadcast(v1);
</pre>
</p>
<br/>
<p>
    <b>Solution (if possible):</b><br/>
<pre>
Intent i = new Intent();
i.setAction("com.secure.action.UserConnected");

sendBroadcast(v1);
</pre>
</p>
<br/>
<p>
    <b>Configuration (receiver)<sup>[1] Source: StackOverflow</sup>:</b><br/>
<pre>
&lt;manifest ...&gt;

    &lt;!-- Permission declaration --&gt;
    &lt;permission android:name="my.app.PERMISSION" /&gt;

    &lt;receiver
        android:name="my.app.BroadcastReceiver"
        android:permission="my.app.PERMISSION"&gt; &lt;!-- Permission enforcement --&gt;
        &lt;intent-filter>
            &lt;action android:name="com.secure.action.UserConnected" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;

    ...
&lt;/manifest>
</pre>
</p>
<p>
    <b>Configuration (sender)<sup>[1] Source: StackOverflow</sup>:</b><br/>
<pre>
&lt;manifest&gt;
    &lt;!-- We declare we own the permission to send broadcast to the above receiver --&gt;
    &lt;uses-permission android:name="my.app.PERMISSION"/&gt;

    &lt;!-- With the following configuration, both the sender and the receiver apps need to be signed by the same developer certificate. --&gt;
    &lt;permission android:name="my.app.PERMISSION" android:protectionLevel="signature"/&gt;
&lt;/manifest&gt;
</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent">CERT: DRD03-J. Do not broadcast sensitive information using an implicit intent</a><br/>
    <a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html#Security">Android Official Doc: BroadcastReceiver (Security)</a><br/>
    <a href="http://developer.android.com/guide/topics/manifest/receiver-element.html">Android Official Doc: Receiver configuration (see <code>android:permission</code>)</a><br/>
    <sup>[1]</sup> <a href="http://stackoverflow.com/a/21513368/89769">StackOverflow: How to set permissions in broadcast sender and receiver in android</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/925.html">CWE-925: Improper Verification of Intent by Broadcast Receiver</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/927.html">CWE-927: Use of Implicit Intent for Sensitive Communication</a>
</p>ZVULNERABILITY
Ò

findsecbugs:AWS_QUERY_INJECTIONÕ

findsecbugsAWS_QUERY_INJECTIONSecurity - AWS Query Injection"CRITICAL*java2AWS_QUERY_INJECTION:‘	<p>
Constructing SimpleDB queries containing user input can allow an attacker to view unauthorized records.<br/>
The following example dynamically constructs and executes a SimpleDB select() query allowing the user to specify the productCategory. The attacker can modify the query, bypass the required authentication for customerID and view records matching any customer.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>...
String customerID = getAuthenticatedCustomerID(customerName, customerCredentials);
String productCategory = request.getParameter("productCategory");
...
AmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);
String query = "select * from invoices where productCategory = '"
            + productCategory + "' and customerID = '"
            + customerID + "' order by '"
            + sortColumn + "' asc";
SelectResult sdbResult = sdbc.select(new SelectRequest(query));
</pre>
</p>
<p>
    <b>Solution:</b><br/>
This issue is analogical to SQL Injection. Sanitize user input before using it in a SimpleDB query.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/943.html">CWE-943: Improper Neutralization of Special Elements in Data Query Logic</a><br/>
</p>ZVULNERABILITY
ı
findsecbugs:PADDING_ORACLE÷
findsecbugsPADDING_ORACLE2Security - Cipher is susceptible to Padding Oracle"MAJOR*java2PADDING_ORACLE:÷
<p>
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the
    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between
    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.
</p>
<p>
    <b>Code at risk:</b>
    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://www.infobytesec.com/down/paddingoracle_openjam.pdf">Padding Oracles for the masses (by Matias Soler)</a><br/>
    <a href="http://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="http://capec.mitre.org/data/definitions/463.html">CAPEC: Padding Oracle Crypto Attack</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/696.html">CWE-696: Incorrect Behavior Order</a>
</p>ZVULNERABILITY
˘
#findsecbugs:EXTERNAL_CONFIG_CONTROL—
findsecbugsEXTERNAL_CONFIG_CONTROL6Security - Potential external control of configuration"INFO*java2EXTERNAL_CONFIG_CONTROL:º<p>
    Allowing external control of system settings can disrupt service or cause an application
    to behave in unexpected, and potentially malicious ways. 
    An attacker could cause an error by providing a nonexistent catalog name
    or connect to an unauthorized portion of the database.
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>conn.setCatalog(request.getParameter("catalog"));</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://cwe.mitre.org/data/definitions/15.html">CWE-15: External Control of System or Configuration Setting</a><br/>
</p>ZVULNERABILITY
ﬁ
findsecbugs:RSA_KEY_SIZE¡
findsecbugsRSA_KEY_SIZE#Security - RSA usage with short key"MAJOR*java2RSA_KEY_SIZE:‘<p>
    The NIST recommends the use of <u>2048 bits and higher</u> keys for the RSA algorithm.
</p>
<blockquote>
    "Digital Signature Verification | RSA: 1024 &le; len(n) &lt; 2048 | Legacy-use"<br/>
    "Digital Signature Verification | RSA: len(n) &ge; 2048 | Acceptable"<br/>
    - <a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a>
</blockquote>

<p><b>Vulnerable Code:</b><br/>
<pre>
KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
keyGen.initialize(512);
</pre>
</p>

<p><b>Solution:</b><br/>
The KeyPairGenerator creation should be as follows with at least 2048 bit key size.<br/>
<pre>
KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
keyGen.initialize(2048);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://csrc.nist.gov/groups/ST/toolkit/key_management.html">NIST: Latest publication on key management</a><br/>
<a href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a><br/>
<a href="http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/how-large-a-key-should-be-used.htm">RSA Laboratories: 3.1.5 How large a key should be used in the RSA cryptosystem?</a><br/>
<a href="http://en.wikipedia.org/wiki/Key_size#Asymmetric%5Falgorithm%5Fkey%5Flengths">Wikipedia: Asymmetric algorithm key lengths</a><br/>
<a href="http://cwe.mitre.org/data/definitions/326.html">CWE-326: Inadequate Encryption Strength</a><br/>
<a href="http://www.keylength.com/en/compare/">Keylength.com (BlueKrypt): Aggregate key length recommendations.</a>
</p>ZVULNERABILITY
ñ
findsecbugs:STRUTS1_ENDPOINTı
findsecbugsSTRUTS1_ENDPOINT"Security - Found Struts 1 endpoint"INFO*java2STRUTS1_ENDPOINT:Ç<p>This class is a Struts 1 Action.</p>
<p>Once a request is routed to this controller, a Form object will automatically be instantiated that contains the HTTP parameters. 
The use of these parameters should be reviewed to make sure they are used safely.</p>ZVULNERABILITY
µ
findsecbugs:COOKIE_USAGEò
findsecbugsCOOKIE_USAGE1Security - Potentially sensitive data in a cookie"INFO*java2COOKIE_USAGE:û<p>The information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session
and referenced by the user's session cookie. See HttpSession (HttpServletRequest.getSession())</p>
<p>Custom cookies can be used for information that needs to live longer than and is independent of a specific session.</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://cwe.mitre.org/data/definitions/315.html">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a>
</p>ZVULNERABILITY
»

findsecbugs:OGNL_INJECTION©

findsecbugsOGNL_INJECTION>Security - Potential code injection when using OGNL expression"CRITICAL*java2OGNL_INJECTION:ö	<p>
    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
</p>
<p><b>Code at risk:</b></p>
<p>
<pre>
public void getUserProperty(String property) {
  [...]
  //The first argument is the dynamic expression.
  return ognlUtil.getValue("user."+property, ctx, root, String.class);
}
</pre>
</p>
<p><b>Solution:</b></p>
<p>
In general, method evaluating OGNL expression should not received user input. It is intented to be used in static configurations and JSP.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://community.saas.hpe.com/t5/Security-Research/Struts-2-OGNL-Expression-Injections/ba-p/288881">HP Enterprise: Struts 2 OGNL Expression Injections by Alvaro Mu&Atilde;&plusmn;oz</a><br/>
    <a href="https://blog.gdssecurity.com/labs/2017/3/27/an-analysis-of-cve-2017-5638.html">Gotham Digital Science: An Analysis Of CVE-2017-5638</a><br/>
    <a href="http://struts.apache.org/docs/s2-016.html">Apache Struts2: Vulnerability S2-016</a><br/>
    <a href="https://struts.apache.org/docs/ognl.html">Apache Struts 2 Documentation: OGNL</a><br/>
</p>ZVULNERABILITY
¢
$findsecbugs:TRUST_BOUNDARY_VIOLATION˘
findsecbugsTRUST_BOUNDARY_VIOLATION#Security - Trust Boundary Violation"MAJOR*java2TRUST_BOUNDARY_VIOLATION:Ù
<p>
    "A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted.
    On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data
    to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a
    program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the
    same data structure, it becomes easier for programmers to mistakenly trust unvalidated data." <sup>[1]</sup>
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public void doSomething(HttpServletRequest req, String activateProperty) {
    //..

    req.getSession().setAttribute(activateProperty,"true");

}
</pre>
<br/>
<pre>
public void loginEvent(HttpServletRequest req, String userSubmitted) {
    //..

    req.getSession().setAttribute("user",userSubmitted);
}
</pre>
</p>

<p>
<b>Solution:</b><br/>
<p>
The solution would be to add validation prior setting a new session attribute. When possible, prefer data from
safe location rather than using direct user input.
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://cwe.mitre.org/data/definitions/501.html">CWE-501: Trust Boundary Violation</a><br/>
<a href="https://www.owasp.org/index.php/Trust_Boundary_Violation">OWASP : Trust Boundary Violation</a>
</p>ZVULNERABILITY
 
(findsecbugs:ANDROID_EXTERNAL_FILE_ACCESSù
findsecbugsANDROID_EXTERNAL_FILE_ACCESS)Security - External file access (Android)"MAJOR*java2ANDROID_EXTERNAL_FILE_ACCESS:ä<p>
    The application write data to external storage (potentially SD card). There are multiple security implication to this
    action. First, file store on SD card will be accessible to the application having the
    <a href="http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE"><code>READ_EXTERNAL_STORAGE</code></a> permission.
    Also, if the data persisted contains confidential information about the user, encryption would be needed.
</p>
<p>
    <b>Code at risk:</b><br/>
<pre>
file file = new File(getExternalFilesDir(TARGET_TYPE), filename);
fos = new FileOutputStream(file);
fos.write(confidentialData.getBytes());
fos.flush();
</pre>
</p>
<p>
    <b>Better alternative:</b><br/>
<pre>
fos = openFileOutput(filename, Context.MODE_PRIVATE);
fos.write(string.getBytes());
</pre>
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="http://developer.android.com/training/articles/security-tips.html#ExternalStorage">Android Official Doc: Security Tips</a><br/>
    <a href="https://www.securecoding.cert.org/confluence/display/java/DRD00-J.+Do+not+store+sensitive+information+on+external+storage+%28SD+card%29+unless+encrypted+first">CERT: DRD00-J: Do not store sensitive information on external storage [...]</a><br/>
    <a href="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal">Android Official Doc: Using the External Storage</a><br/>
    <a href="https://www.owasp.org/index.php/Mobile_Top_10_2014-M2">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/312.html">CWE-312: Cleartext Storage of Sensitive Information</a>
</p>ZVULNERABILITY
ó
findsecbugs:SERVLET_SESSION_IDÙ
findsecbugsSERVLET_SESSION_ID)Security - Untrusted session cookie value"INFO*java2SERVLET_SESSION_ID:ˆ
<p>
The method <a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId()"><code>HttpServletRequest.getRequestedSessionId()</code></a>
typically returns the value of the cookie <code>JSESSIONID</code>. This value is normally only accessed by the session management logic and not normal developer code.
</p>
<p>
The value passed to the client is generally an alphanumeric value (e.g., <code>JSESSIONID=jp6q31lq2myn</code>). However, the value can be altered by the client. 
The following HTTP request illustrates the potential modification.
<pre>
GET /somePage HTTP/1.1
Host: yourwebsite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Any value of the user&#39;s choice!!??'''&quot;&gt;
</pre>
</p>
<p>As such, the JSESSIONID should only be used to see if its value matches an existing session ID. If it does not, the user should be 
considered an unauthenticated user. In addition, the session ID value should never be logged. If it is, then the log file could contain 
valid active session IDs, allowing an insider to hijack any sessions whose IDs have been logged and are still active.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet">OWASP: Session Management Cheat Sheet</a><br/>
<a href="http://cwe.mitre.org/data/definitions/20.html">CWE-20: Improper Input Validation</a>

</p>ZVULNERABILITY
ø
"findsecbugs:WEAK_HOSTNAME_VERIFIERò
findsecbugsWEAK_HOSTNAME_VERIFIER?Security - HostnameVerifier that accept any signed certificates"MAJOR*java2WEAK_HOSTNAME_VERIFIER:˚<p>A <code>HostnameVerifier</code> that accept any host are often use because of certificate reuse on many hosts.
As a consequence, this is vulnerable to
<a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attacks</a>
since the client will trust any certificate.
</p>
<p>
A TrustManager allowing specific certificates (based on a truststore for example) should be built.
Wildcard certificates should be created for reused on multiples subdomains.
Detailed information for a proper implementation is available at:
<a href="http://stackoverflow.com/a/6378872/89769">[1]</a>
<a href="http://stackoverflow.com/a/5493452/89769">[2]</a>
</p>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>public class AllHosts implements HostnameVerifier {
    public boolean verify(final String hostname, final SSLSession session) {
        return true;
    }
}</pre>
</p>
<br/>
<p>
    <b>Solution (TrustMangager based on a keystore):</b><br/>
<pre>KeyStore ks = //Load keystore containing the certificates trusted

SSLContext sc = SSLContext.getInstance("TLS");

TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
tmf.init(ks);

sc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);
</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection">WASC-04: Insufficient Transport Layer Protection</a><br/>
<a href="http://cwe.mitre.org/data/definitions/295.html">CWE-295: Improper Certificate Validation</a>
</p>ZVULNERABILITY
‚

$findsecbugs:HTTP_PARAMETER_POLLUTIONπ

findsecbugsHTTP_PARAMETER_POLLUTION#Security - HTTP Parameter Pollution"MAJOR*java2HTTP_PARAMETER_POLLUTION:¥	<p>
Concatenating unvalidated user input into a URL can allow an attacker to override the value of a request parameter. Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach. HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks.<br/>
In the following example the programmer has not considered the possibility that an attacker could provide a lang such as en&user_id=1, which would enable him to change the user_id at will.
</p>
<p>
    <b>Vulnerable Code:</b><br/>
<pre>String lang = request.getParameter("lang");
GetMethod get = new GetMethod("http://www.host.com");
get.setQueryString("lang=" + lang + "&user_id=" + user_id);
get.execute();</pre>
<p>
    <b>Solution:</b><br/>
Sanitize user input before using it in HTTP parameters.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://capec.mitre.org/data/definitions/460.html">CAPEC-460: HTTP Parameter Pollution (HPP)</a>
</p>ZVULNERABILITY
Ñ
findsecbugs:LDAP_ANONYMOUSÂ
findsecbugsLDAP_ANONYMOUSSecurity - Anonymous LDAP bind"MAJOR*java2LDAP_ANONYMOUS:˘<p>
Without proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to abuse poorly configured LDAP environment. All LDAP queries executed against ctx will be performed without authentication and access control. An attacker may be able to manipulate one of these queries in an unexpected way to gain access to records that would otherwise be protected by the directory's access control mechanism.
</p>
<p>
    <b>Vulnerable Code:</b>
<pre>...
env.put(Context.SECURITY_AUTHENTICATION, "none");
DirContext ctx = new InitialDirContext(env);
...</pre>
</p>
<p>
    <b>Solution:</b>
<br/>
Consider other modes of authentication to LDAP and ensure proper access control mechanism.

</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html">Ldap Authentication Mechanisms</a><br/>
</p>ZVULNERABILITY
∂

+findsecbugs:SPRING_CSRF_PROTECTION_DISABLEDÜ

findsecbugsSPRING_CSRF_PROTECTION_DISABLED*Security - Spring CSRF protection disabled"MAJOR*java2SPRING_CSRF_PROTECTION_DISABLED:Ï<p>Disabling Spring Security's CSRF protection is unsafe for standard web applications.</p>
<p>A valid use case for disabling this protection would be a service exposing state-changing operations
that is guaranteed to be used only by non-browser clients.</p>
<p>
    <b>Insecure configuration:</b><br/>
<pre>@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
    }
}</pre>
</p>
<p>
<b>References</b><br/>
<a href="https://docs.spring.io/spring-security/site/docs/current/reference/html/csrf.html#when-to-use-csrf-protection">Spring Security Official Documentation: When to use CSRF protection</a><br/>
<a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29">OWASP: Cross-Site Request Forgery</a><br/>
<a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet">OWASP: CSRF Prevention Cheat Sheet</a><br/>
<a href="https://cwe.mitre.org/data/definitions/352.html">CWE-352: Cross-Site Request Forgery (CSRF)</a>
</p>ZVULNERABILITY
Â
 findsecbugs:FILE_UPLOAD_FILENAME¿
findsecbugsFILE_UPLOAD_FILENAME Security - Tainted filename read"INFO*java2FILE_UPLOAD_FILENAME:«
<p>The filename provided by the FileUpload API can be tampered with by the client to reference unauthorized files.</p>
<p>For example:</p>
<ul>
<li><code>"../../../config/overide_file"</code></li>
<li><code>"shell.jsp\u0000expected.gif"</code></li>
</ul>
<p>Therefore, such values should not be passed directly to the filesystem API. If acceptable, the application should generate its 
own file names and use those. Otherwise, the provided filename should be properly validated to ensure it's properly structured, 
contains no unauthorized path characters (e.g., / \), and refers to an authorized file.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://blogs.securiteam.com/index.php/archives/1268">Securiteam: File upload security recommendations</a><br/>
<a href="http://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="http://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="http://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>ZVULNERABILITY
„
findsecbugs:HTTPONLY_COOKIE√
findsecbugsHTTPONLY_COOKIE+Security - Cookie without the HttpOnly flag"MAJOR*java2HTTPONLY_COOKIE:»
<p>
A new cookie is created without the <code>HttpOnly</code> flag set.
The <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by
malicious script. When a user is the target of a "Cross-Site Scripting", the attacker would benefit greatly from getting
the session id for example.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
response.addCookie(cookie);
</pre>
</p>

<p>
<b>Solution (Specific configuration):</b><br/>
<pre>
Cookie cookie = new Cookie("email",userName);
cookie.setSecure(true);
cookie.setHttpOnly(true); //HttpOnly flag
</pre>
</p>

<p>
<b>Solution (Servlet 3.0 configuration):</b><br/>
<pre>
&lt;web-app xmlns="http://java.sun.com/xml/ns/javaee" version="3.0"&gt;
[...]
&lt;session-config&gt;
 &lt;cookie-config&gt;
  &lt;http-only&gt;true&lt;/http-only&gt;
  &lt;secure&gt;true&lt;/secure&gt;
 &lt;/cookie-config&gt;
&lt;/session-config&gt;
&lt;/web-app&gt;
</pre>
</p>
<br/>
<p>
<b>Reference</b><br/>
<a href="http://blog.codinghorror.com/protecting-your-cookies-httponly/">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>
<a href="https://www.owasp.org/index.php/HttpOnly">OWASP: HttpOnly</a><br/>
<a href="https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag">Rapid7: Missing HttpOnly Flag From Cookie</a>
</p>ZVULNERABILITY
Ú
1pmd-unit-tests:UseAssertTrueInsteadOfAssertEqualsº
pmd-unit-tests"UseAssertTrueInsteadOfAssertEquals(Use Assert True Instead Of Assert Equals"MINOR*java2:rulesets/java/junit.xml/UseAssertTrueInsteadOfAssertEquals:ÜWhen asserting a value is the same as a boolean literal, use assertTrue/assertFalse, instead of assertEquals. Example: 
<pre>
public class MyTestCase extends TestCase {
	public void testMyCase() {
		boolean myVar = true;
		// Ok
		assertTrue("myVar is true", myVar);
		// Bad
		assertEquals("myVar is true", true, myVar);
		// Bad
		assertEquals("myVar is false", false, myVar);
	}
}
</pre>Z
CODE_SMELL
∆
,pmd-unit-tests:JUnitTestsShouldIncludeAssertï
pmd-unit-testsJUnitTestsShouldIncludeAssert$JUnit tests should include an assert"MAJOR*java25rulesets/java/junit.xml/JUnitTestsShouldIncludeAssert:ÌJUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.
<pre>
public class Foo extends TestCase {
  public void testSomething() {
    Bar b = findBar();
    b.work();
    // violation, we could use assertNotNull("bar not found", b);
  }
}
</pre>Z
CODE_SMELL
¿
(pmd-unit-tests:TestClassWithoutTestCasesì
pmd-unit-testsTestClassWithoutTestCases.Test class without test cases (JUnit 3.x only)"MAJOR*java21rulesets/java/junit.xml/TestClassWithoutTestCases:ÈTest classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.
Beware: This rule doesn't support JUnit 4.x's @Test annotation.
<pre>
public class CarTest { // violation, consider changing the name of the class if it is not a test
  // consider adding test methods if it is a test
  public static void main(String[] args) {
    // do something
  }
}
</pre>Z
CODE_SMELL
≤
1pmd-unit-tests:UseAssertEqualsInsteadOfAssertTrue¸
pmd-unit-tests"UseAssertEqualsInsteadOfAssertTrue&Use assertEquals instead of assertTrue"MINOR*java2:rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue:»This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.
<pre>
public class FooTest extends TestCase {
  void testCode() {
    Object a, b;

    assertTrue(a.equals(b)); // violation
    assertEquals("a should equals b", a, b); // good usage
  }
}</pre>Z
CODE_SMELL
Ó
1pmd-unit-tests:JUnit4TestShouldUseAfterAnnotation∏
pmd-unit-tests"JUnit4TestShouldUseAfterAnnotation'JUnit4 Test Should Use After Annotation"MAJOR*java2>rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation:ˇIn JUnit 3, the tearDown method was used to clean up all data entities required in running tests. 
JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test Example: 
<pre>
public class MyTest {
    public void tearDown() {
        bad();
    }
}
public class MyTest2 {
    @After public void tearDown() {
        good();
    }
}
</pre>Z
CODE_SMELL
ã
pmd-unit-tests:JUnitSpellingÍ
pmd-unit-testsJUnitSpellingJUnit spelling"MAJOR*java2%rulesets/java/junit.xml/JUnitSpelling:¯Some JUnit framework methods are easy to misspell.
<pre>
import junit.framework.*;

public class Foo extends TestCase {
  public void setup() {} // violation, should be setUp()
  public void TearDown() {} // violation, should be tearDown()
}
</pre>Z
CODE_SMELL
“
'pmd-unit-tests:SimplifyBooleanAssertion¶
pmd-unit-testsSimplifyBooleanAssertionSimplify boolean assertion"MINOR*java20rulesets/java/junit.xml/SimplifyBooleanAssertion:íAvoid negation in an assertTrue or assertFalse test. For example, rephrase: assertTrue(!expr); as: assertFalse(expr);
<pre>
public class SimpleTest extends TestCase {
  public void testX() {
    assertTrue("not empty", !r.isEmpty()); // violation, replace with assertFalse("not empty", r.isEmpty())
    assertFalse(!r.isEmpty()); // violation, replace with assertTrue("empty", r.isEmpty())
  }
}
</pre>Z
CODE_SMELL
Ä
/pmd-unit-tests:UseAssertNullInsteadOfAssertTrueÃ
pmd-unit-tests UseAssertNullInsteadOfAssertTrue$Use assertNull instead of assertTrue"MINOR*java28rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue:ûThis rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.
<pre>
public class FooTest extends TestCase {
  void testCode() {
    Object a = doSomething();

    assertTrue(a==null); // violation
    assertNull(a);  // good usage
    assertTrue(a != null); // violation
    assertNotNull(a);  // good usage
  }
}
</pre>Z
CODE_SMELL
¿
0pmd-unit-tests:JUnit4TestShouldUseTestAnnotationã
pmd-unit-tests!JUnit4TestShouldUseTestAnnotation&JUnit4 Test Should Use Test Annotation"MAJOR*java2=rulesets/java/migrating.xml/JUnit4TestShouldUseTestAnnotation:’In JUnit 3, the framework executed all methods which started with the word test as a unit test. 
In JUnit 4, only methods annotated with the @Test annotation are executed. Example: 
<pre>
public class MyTest {
    public void testBad() {
        doSomething();
    }

	@Test
    public void testGood() {
        doSomething();
    }
}
</pre>Z
CODE_SMELL
¨
pmd-unit-tests:JUnitStaticSuiteà
pmd-unit-testsJUnitStaticSuiteJUnit static suite"MAJOR*java2(rulesets/java/junit.xml/JUnitStaticSuite:åThe suite() method in a JUnit test needs to be both public and static.
<pre>
import junit.framework.*;

public class Foo extends TestCase {
  public void suite() {} // violation, should be static
  private static void suite() {} // violation, should be public
}
</pre>Z
CODE_SMELL
ı
*pmd-unit-tests:UnnecessaryBooleanAssertion∆
pmd-unit-testsUnnecessaryBooleanAssertionUnnecessary boolean assertion"MINOR*java23rulesets/java/junit.xml/UnnecessaryBooleanAssertion:©A JUnit test assertion with a boolean literal is unnecessary since it always will eval to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt, use the fail method.
<pre>
public class SimpleTest extends TestCase {
  public void testX() {
    assertTrue(true); // violation
  }
}</pre>Z
CODE_SMELL
Á
3pmd-unit-tests:JUnit4SuitesShouldUseSuiteAnnotationØ
pmd-unit-tests$JUnit4SuitesShouldUseSuiteAnnotation)JUnit4 Suites Should Use Suite Annotation"MAJOR*java2@rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation:In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated
through the @RunWith(Suite.class) annotation. Example: 
<pre>
public class BadExample extends TestCase{

    public static Test suite(){
    	return new Suite();
    }
}

@RunWith(Suite.class)
@SuiteClasses( { TestOne.class, TestTwo.class })
public class GoodTest {
}
</pre>Z
CODE_SMELL
ﬂ
2pmd-unit-tests:JUnit4TestShouldUseBeforeAnnotation®
pmd-unit-tests#JUnit4TestShouldUseBeforeAnnotation(JUnit4 Test Should Use Before Annotation"MAJOR*java2?rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation:ÏIn JUnit 3, the setUp method was used to set up all data entities required in running tests. 
JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests Example: 
<pre>
public class MyTest {
    public void setUp() {
        bad();
    }
}
public class MyTest2 {
    @Before public void setUp() {
        good();
    }
}
</pre>Z
CODE_SMELL
†
2pmd-unit-tests:JUnitAssertionsShouldIncludeMessageÈ
pmd-unit-tests#JUnitAssertionsShouldIncludeMessage)JUnit assertions should include a message"MINOR*java2;rulesets/java/junit.xml/JUnitAssertionsShouldIncludeMessage:∞JUnit assertions should include a message - i.e., use the three argument version of assertEquals(), not the two argument version.
<pre>
public class Foo extends TestCase {
  public void testSomething() {
    assertEquals("foo", "bar"); // violation, should be assertEquals("Foo does not equals bar", "foo", "bar");
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2698'>S2698</a> instead.
</p>Z
CODE_SMELL
°
.pmd-unit-tests:JUnitTestContainsTooManyAssertsÓ
pmd-unit-testsJUnitTestContainsTooManyAsserts$JUnit Test Contains Too Many Asserts"MAJOR*java27rulesets/java/junit.xml/JUnitTestContainsTooManyAsserts:¬JUnit tests should not contain too many asserts.  Many asserts are indicative of a complex test, for which 
it is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.  
Customize the maximum number of assertions used by this Rule to suit your needs. Example: 
<pre>
public class MyTestCase extends TestCase {
	// Ok
	public void testMyCaseWithOneAssert() {
		boolean myVar = false;		
		assertFalse("should be false", myVar);
	}

	// Bad, too many asserts (assuming max=1)
	public void testMyCaseWithMoreAsserts() {
		boolean myVar = false;		
		assertFalse("myVar should be false", myVar);
		assertEquals("should equals false", false, myVar);
	}
}
</pre>Z
CODE_SMELL
ª
pmd-unit-tests:JUnitUseExpectedó
pmd-unit-testsJUnitUseExpectedJUnit Use Expected"MAJOR*java2,rulesets/java/migrating.xml/JUnitUseExpected:óIn JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions. Example: 
<pre>
public class MyTest {
	@Test
    public void testBad() {
        try {
            doSomething();
            fail("should have thrown an exception");
        } catch (Exception e) {
        }
    }

	@Test(expected=Exception.class)
    public void testGood() {
        doSomething();
    }
}
</pre>Z
CODE_SMELL
•
/pmd-unit-tests:UseAssertSameInsteadOfAssertTrueÒ
pmd-unit-tests UseAssertSameInsteadOfAssertTrue$Use assertSame instead of assertTrue"MINOR*java28rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue:√This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.
<pre>
public class FooTest extends TestCase {
  void testCode() {
    Object a, b;

    assertTrue(a==b); // violation
    assertSame(a, b); // good usage
  }
}
</pre>Z
CODE_SMELL
Ç
Pylint:W0701r
PylintW0701Raising a string exception"MINOR*py2W0701:'Used when a string exception is raised.Z
CODE_SMELL
•
Pylint:F0220î
PylintF0220Failed to resolve interfaces"MAJOR*py2F0220:GUsed when a Pylint as failed to find interfaces implemented by a class.Z
CODE_SMELL
ª
Pylint:W0301™
PylintW0301Unnecessary semicolon"MINOR*py2W0301:dUsed when a statement is ended by a semi-colon (";"), which isn't necessary(that's python, not C ;).Z
CODE_SMELL
Ô
Pylint:W0142ﬁ
PylintW0142Used * or ** magic"MINOR*py2W0142:öUsed when a function or method is called using `*args` or `**kwargs` to dispatch arguments. This doesn't improve readability and should be used with care.Z
CODE_SMELL
⁄
Pylint:W1111…
PylintW11112Assigning to function call which only returns None"MINOR*py2W1111:fUsed when an assignment is done on a function call but the inferred function returns nothing but None.Z
CODE_SMELL
∂
Pylint:I0010•
PylintI0010 Unable to consider inline option"INFO*py2I0010:UUsed when an inline option is either badly formatted or can't be used inside modules.Z
CODE_SMELL
æ
Pylint:W0141≠
PylintW0141"Used black listed builtin function"MINOR*py2W0141:ŸUsed when a black listed builtin function is used (see the bad-function option). Usual black listed functions are the ones like map, or filter, where Python offers now some cleaner alternative like list comprehension.Z
CODE_SMELL
ü
Pylint:I0011é
PylintI0011Locally disabling message"INFO*py2I0011:EUsed when an inline option disables a message or a messages category.Z
CODE_SMELL
ù
Pylint:I0012å
PylintI0012Locally enabling message"INFO*py2I0012:DUsed when an inline option enables a message or a messages category.Z
CODE_SMELL
Ö
Pylint:I0013u
PylintI0013Ignoring entire file"INFO*py2I0013:1Used to inform that the file will not be checked.Z
CODE_SMELL
õ
Pylint:E0701ä
PylintE0701Bad except clauses order"MAJOR*py2E0701:¿Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be catched by the most specific handler.Z
CODE_SMELL
Ï
Pylint:E0702€
PylintE07026Raising only allowed for classes, instances or strings"MAJOR*py2E0702:tUsed when something which is neither a class, an instance or a string is raised (i.e. a 'TypeError' will be raised).Z
CODE_SMELL
∏
Pylint:C1001ß
PylintC1001Old-style class defined"MINOR*py2C1001:ﬁ<p>Used when a class is defined that does not inherit from another class and does not inherit explicitly from ‚Äúobject‚Äù.
      This message can‚Äôt be emitted when using Python >= 3.0.</p>
      <p>This rule was added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1722'>S1722</a> instead.</p>Z
CODE_SMELL
÷
Pylint:E1111≈
PylintE1111/Assigning to function call which doesn't return"MAJOR*py2E1111:eUsed when an assignment is done on a function call but the inferred function doesn't return anything.Z
CODE_SMELL
ı
Pylint:W0711‰
PylintW07116Exception to catch is the result of a binary operation"MINOR*py2W0711:}Used when the exception to catch is of the form "except A or B:". If intending to catch multiple, rewrite as "except (A, B):"Z
CODE_SMELL
Û
Pylint:W0712‚
PylintW0712=Implicit unpacking of exceptions is not supported in Python 3"MINOR*py2W0712:ÛPython3 will not allow implicit unpacking of exceptions in except clauses.
        See http://www.python.org/dev/peps/pep-3110/ This message
        can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL
ﬂ
Pylint:W0710Œ
PylintW07109Exception doesn't inherit from standard "Exception" class"MINOR*py2W0710:dUsed when a custom exception class is raised but doesn't inherit from the builtin "Exception" class.Z
CODE_SMELL
Ì
Pylint:W1402‹
PylintW1402'Anomalous Unicode escape in byte string"MINOR*py2W1402:ÉUsed when an escape like u is encountered in a byte string where it has no effect.
    <p>This rule was added in Pylint 0.26.0.</p>Z
CODE_SMELL
Ã
Pylint:W0312ª
PylintW0312Mixed tabs/spaces indentation"MAJOR*py2W0312:ÏUsed when there are some mixed tabs and spaces in a
               module.
               <p>As indentation is part of Python's syntax,
               inconsistencies in its usage are usually considered a
               major issue.</p>Z
CODE_SMELL
ª
Pylint:W1401™
PylintW1401Anomalous backslash escape"MINOR*py2W1401:ﬁUsed when a backslash is in a literal string but not as an escape.
    <p>This rule was added in Pylint 0.26.0.</p>
    <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1717'>S1717</a> instead.</p>Z
CODE_SMELL
¶
Pylint:W0311ï
PylintW0311Bad indentation"MINOR*py2W0311:UUsed when an unexpected number of indentation's tabulations or spaces has been found.Z
CODE_SMELL
Ô
Pylint:W1001ﬁ
PylintW1001'Use of "property" on an old style class"MINOR*py2W1001:ÖUsed when Pylint detects the use of the builtin "property" on an old style class while this is relying on new style classes features.Z
CODE_SMELL
Ì
Pylint:E0712‹
PylintE0712DAvoid catching an exception which doesn't inherit from BaseException"MINOR*py2E0712:gUsed when a class which doesn't inherit from BaseException is used as an exception in an except clause.Z
CODE_SMELL
¿
Pylint:I0001Ø
PylintI0001-Unable to run raw checkers on built-in module"INFO*py2I0001:RUsed to inform that a built-in module has not been checked using the raw checkers.Z
CODE_SMELL
∂
Pylint:W0150•
PylintW01500Statement in finally block may swallow exception"MINOR*py2W0150:√Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.Z
CODE_SMELL
∂
Pylint:C0303•
PylintC0303Trailing whitespace"MINOR*py2C0303:‡<p>Used when there is whitespace between the end of a line and the newline.</p>
      <p>Added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1131'>S1131</a> instead.</p>Z
CODE_SMELL
º
Pylint:E0711´
PylintE07118NotImplemented raised - should raise NotImplementedError"MAJOR*py2E0711:BUsed when NotImplemented is raised instead of NotImplementedError.Z
CODE_SMELL
Ü
Pylint:C0302ı
PylintC0302Too many lines in module"MINOR*py2C0302:´Used when a module has too much lines, reducing its readability.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS104'>S104</a> instead.</p>Z
CODE_SMELL
€
Pylint:R0401 
PylintR0401Cyclic import"MINOR*py2R0401:ãUsed when a cyclic import between two or more modules is detected.
               <p>While cyclic imports terminate and execute without
               surprises in most cases, the circular dependency often indicates a
               design issue in the code base.</p>Z
CODE_SMELL
ß
Pylint:C0304ñ
PylintC0304Final newline missing"MINOR*py2C0304:œ<p>Used when the last line in a file is missing a newline.</p>
               <p>While Python interpreters typically do not require line
               end character(s) on the last line, other programs processing Python
               source files may do, and it is simply good practice to have it.</p>
               <p>Added in Pylint 1.0.0.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS113'>S113</a> instead.</p>Z
CODE_SMELL
Ã
Pylint:E1004ª
PylintE1004Missing argument to super()"MINOR*py2E1004:oUsed when the super builtin didn't receive an argument. This message can't be emitted when using Python >= 3.0.Z
CODE_SMELL
”
Pylint:E0710¬
PylintE0710BRaising a new style class which doesn't inherit from BaseException"MAJOR*py2E0710:OUsed when a new style class which doesn't inherit from BaseException is raised.Z
CODE_SMELL
∞
Pylint:E1121ü
PylintE1121/Too many positional arguments for function call"MAJOR*py2E1121:?Used when a function call passes too many positional arguments.Z
CODE_SMELL
∑
Pylint:E1122¶
PylintE1122+Duplicate keyword argument in function call"MAJOR*py2E1122:JUsed when a function call passes the same keyword argument multiple times.Z
CODE_SMELL
î
Pylint:R0923É
PylintR0923Interface not implemented"MINOR*py2R0923:9Used when an interface class is not implemented anywhere.Z
CODE_SMELL
¢
Pylint:E1001ë
PylintE1001&Use of __slots__ on an old style class"MAJOR*py2E1001::Used when an old style class uses the __slots__ attribute.Z
CODE_SMELL
Î
Pylint:E1123⁄
PylintE11234Passing unexpected keyword argument in function call"MAJOR*py2E1123:uUsed when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.Z
CODE_SMELL
ò
Pylint:E1002á
PylintE1002"Use of super on an old style class"MAJOR*py2E1002:4Used when an old style class uses the super builtin.Z
CODE_SMELL
ö
Pylint:E1124â
PylintE11245Multiple values passed for parameter in function call"MAJOR*py2E1124:¢Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.Z
CODE_SMELL
≈
Pylint:E1003¥
PylintE1003!Bad first argument given to super"MAJOR*py2E1003:bUsed when another argument than the current class is given as first argument of the super builtin.Z
CODE_SMELL
≠
Pylint:W0704ú
PylintW0704Except doesn't do anything"MINOR*py2W0704:QUsed when an except clause does nothing but "pass" and there is no "else" clause.Z
CODE_SMELL
•
Pylint:R0922î
PylintR0922!Abstract class used too few times"MINOR*py2R0922:BUsed when an abstract class is used less than X times as ancestor.Z
CODE_SMELL
â
Pylint:W0703¯
PylintW0703Catching too general exception"MINOR*py2W0703:®Used when an except catches a too general exception, possibly burying unrelated errors.
               <p>Catching exceptions should be as precise as possible. The type of
               exceptions that can be raised should be known in advance. Using a
               catch-all Exception instance defeats the purpose of knowing the type
               of error that occur-ed, and prohibits the use of tailored responses.</p>Z
CODE_SMELL
Ñ
Pylint:C0301Û
PylintC0301Line too long"MINOR*py2C0301:¥Used when a line is longer than a given number of characters.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3ALineLength'>LineLength</a> instead.</p>Z
CODE_SMELL
Û
Pylint:R0801‚
PylintR0801Similar lines"MINOR*py2R0801:£Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=common-py%3ADuplicatedBlocks'>DuplicatedBlocks</a> instead.</p>Z
CODE_SMELL
…
Pylint:W0702∏
PylintW0702No exception type(s) specified"MINOR*py2W0702:ËUsed when an except clause doesn't specify exceptions
               type to catch.
               <p>Catching exceptions should be as precise as
               possible. The type of exceptions that can be raised should be known in
               advance. Using catch-all-constructs hides potential
               errors (including syntax ones), defeats the purpose of
               knowing the type of error that occurred, and prohibits the use of
               tailored responses.</p>Z
CODE_SMELL
ú
Pylint:R0921ã
PylintR0921Abstract class not referenced"MINOR*py2R0921:=Used when an abstract class is not used as ancestor anywhere.Z
CODE_SMELL
Ö
Pylint:E1120u
PylintE1120Too few arguments"MAJOR*py2E1120:3Used when a function call passes too few arguments.Z
CODE_SMELL
‚
Pylint:W0601—
PylintW0601-Global variable undefined at the module level"MINOR*py2W0601:sUsed when a variable is defined through the "global" statement but the variable is not defined in the module scope.Z
CODE_SMELL
∆
Pylint:W0602µ
PylintW0602Unassigned global variable"MINOR*py2W0602:jUsed when a variable is defined through the "global" statement but no assignment to this variable is done.Z
CODE_SMELL
å
Pylint:F0401|
PylintF0401Unable to import module"MAJOR*py2F0401:4Used when Pylint has been unable to import a module.Z
CODE_SMELL
´
Pylint:W0201ö
PylintW0201"Attribute defined outside __init__"MINOR*py2W0201:GUsed when an instance attribute is defined outside the __init__ method.Z
CODE_SMELL
Ó
Pylint:F0002›
PylintF0002Internal Pylint error"MAJOR*py2F0002:ñUsed when an unexpected error occurred while building the ASTNG representation. This is usually accompanied by a traceback. Please report such errors!Z
CODE_SMELL
∞
Pylint:F0003ü
PylintF0003Ignored builtin module"MAJOR*py2F0003:XUsed to indicate that the user asked to analyze a builtin module which has been skipped.Z
CODE_SMELL
§
Pylint:F0004ì
PylintF0004Unexpected inferred value"MAJOR*py2F0004:IUsed to indicate that some value of an unexpected type has been inferred.Z
CODE_SMELL

Pylint:E0602o
PylintE0602Undefined variable"MAJOR*py2E0602:,Used when an undefined variable is accessed.Z
CODE_SMELL
¡
Pylint:F0001∞
PylintF0001Analysis failed"MAJOR*py2F0001:pUsed when an error occurred preventing the analysis of a
               module (unable to find it for instance).Z
CODE_SMELL
†
Pylint:E0601è
PylintE0601 Using variable before assignment"MAJOR*py2E0601:>Used when a local variable is accessed before it's assignment.Z
CODE_SMELL
Â
Pylint:E0604‘
PylintE06044Invalid object in __all__, must contain only strings"MINOR*py2E0604:oUsed when an invalid (non-string) object occurs in __all__.
       <p>This rule was added in Pylint 0.27.0.</p>Z
CODE_SMELL
Œ
Pylint:E0202Ω
PylintE0202)Method hidden by attribute of super class"MAJOR*py2E0202:cUsed when a class defines a method which is hidden by an instance attribute from an ancestor class.Z
CODE_SMELL
¢
Pylint:E0603ë
PylintE0603"Undefined variable name in __all__"MINOR*py2E0603:>Used when an undefined variable name is referenced in __all__.Z
CODE_SMELL
Ø
Pylint:E0203û
PylintE0203&Access to member before its definition"MAJOR*py2E0203:GUsed when an instance member is accessed before it's actually assigned.Z
CODE_SMELL
¯
Pylint:R0913Á
PylintR0913Too many arguments"MINOR*py2R0913:£Used when a function or method takes too many arguments.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS107'>S107</a> instead.</p>Z
CODE_SMELL
∏
Pylint:C0330ß
PylintC0330Bad continuation"MINOR*py2C0330:f<p>Used when continued lines are badly indented.</p>
      <p>This rule was added in Pylint 1.2.1.</p>Z
CODE_SMELL
≥
Pylint:R0912¢
PylintR0912Too many branches"MINOR*py2R0912:ﬂUsed when a function or method has too many branches, making it hard to follow.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AFunctionComplexity'>FunctionComplexity</a> instead.</p>Z
CODE_SMELL
≈
Pylint:R0915¥
PylintR0915Too many statements"MINOR*py2R0915:pUsed when a function or method has too many statements. You should then split it in smaller functions / methods.Z
CODE_SMELL
°
Pylint:R0911ê
PylintR0911Too many return statements"MINOR*py2R0911:ƒUsed when a function or method has too many return statement, making it hard to follow.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1142'>S1142</a> instead.</p>Z
CODE_SMELL
ñ
Pylint:R0914Ö
PylintR0914Too many local variables"MINOR*py2R0914:<Used when a function or method has too many local variables.Z
CODE_SMELL
}
Pylint:W0612m
PylintW0612Unused variable"MINOR*py2W0612:-Used when a variable is defined but not used.Z
CODE_SMELL
Ñ
Pylint:W0613t
PylintW0613Unused argument"MINOR*py2W0613:4Used when a function or method argument is not used.Z
CODE_SMELL
É
Pylint:W0611s
PylintW0611Unused import"MINOR*py2W0611:5Used when an imported module or variable is not used.Z
CODE_SMELL
˛
Pylint:W1301Ì
PylintW1301&Unused key in format string dictionary"MINOR*py2W1301:ïUsed when a format string that uses named conversion
      specifiers is used with a dictionary that contains keys not required by the format string.Z
CODE_SMELL
ó
Pylint:W0212Ü
PylintW0212.Access to a protected member of a client class"MINOR*py2W0212:¶Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.Z
CODE_SMELL
π
Pylint:W0333®
PylintW0333Use of the `` operator"MINOR*py2W0333:‡Used when the deprecated "``" (backtick) operator is used instead of the str() function.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3ABackticksUsage'>BackticksUsage</a> instead.</p>Z
CODE_SMELL
∂
Pylint:W0211•
PylintW02114Static method with "self" or "cls" as first argument"MINOR*py2W0211:@Used when a static method has "self" or "cls" as first argument.Z
CODE_SMELL
ˆ
Pylint:W0332Â
PylintW0332 Use l as long integer identifier"MINOR*py2W0332:ìUsed when a lower case "l" is used to mark a long integer. You should use an upper case "L" since the letter "l" looks too much like the digit "1".Z
CODE_SMELL
¢
Pylint:W0331ë
PylintW0331Use of the <> operator"MINOR*py2W0331:…Used when the deprecated "<>" operator is used instead of "!=".
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AInequalityUsage'>InequalityUsage</a> instead.</p>Z
CODE_SMELL
Í
Pylint:W1300Ÿ
PylintW1300/Format string dictionary key should be a string"MINOR*py2W1300:yUsed when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.Z
CODE_SMELL
„
Pylint:C0204“
PylintC0204%Metaclass class method first argument"MINOR*py2C0204:˚Used when a metaclass class method has a first argument named differently than the value specified
      in valid-metaclass-classmethod-first-arg option (defaults to "mcs"),
      recommended to easily differentiate them from regular instance methods.Z
CODE_SMELL
Ã
Pylint:C0325ª
PylintC0325Unnecessary parentheses"MINOR*py2C0325:Ú<p>Used when a single item in parentheses follows an if, for, or other keyword.</p>
      <p>This rule was added in Pylint 1.1.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1110'>S1110</a> instead.</p>Z
CODE_SMELL
¬
Pylint:F0010±
PylintF0010Error while code parsing"MAJOR*py2F0010:hUsed when an exception occurred while building the ASTNG representation which could be handled by ASTNG.Z
CODE_SMELL
√
Pylint:E1305≤
PylintE1305$Too many arguments for format string"MAJOR*py2E1305:]Used when a format string that uses unnamed conversion specifiers is given too few arguments.Z
CODE_SMELL
∆
Pylint:E1306µ
PylintE1306&Not enough arguments for format string"MAJOR*py2E1306:^Used when a format string that uses unnamed conversion specifiers is given too many arguments.Z
CODE_SMELL
 
Pylint:C0203π
PylintC02034Metaclass method should have "mcs" as first argument"MINOR*py2C0203:TUsed when a metaclass method has an attribute different the "mcs" as first argument.Z
CODE_SMELL
í
Pylint:C0324Å
PylintC0324Comma not followed by a space"MINOR*py2C0324:3Used when a comma (",") is not followed by a space.Z
CODE_SMELL
ó
Pylint:C0326Ü
PylintC0326\Wrong number of spaces around an operator, bracket, or comma, or before a block opener colon"MINOR*py2C0326:¯<p>Used when a wrong number of spaces is used around an operator, bracket, or comma, or before a block opener colon.</p>
        <p>This message belongs to the format checker.</p>
        <p>In Pylint 1.1.0, this message replaced the older whitespace-related messages
        <a href='/coding_rules#rule_key=Pylint%3AC0322'>C0322</a>, <a href='/coding_rules#rule_key=Pylint%3AC0323'>C0323</a>, and <a href='/coding_rules#rule_key=Pylint%3AC0324'>C0324</a>, and now reports some additional situations.</p>Z
CODE_SMELL
ƒ
Pylint:E1301≥
PylintE13014Format string ends in middle of conversion specifier"MAJOR*py2E1301:NUsed when a format string terminates before the end of a conversion specifier.Z
CODE_SMELL
ö
Pylint:E0213â
PylintE0213+Method should have "self" as first argument"MAJOR*py2E0213:¨Used when a method has an attribute different the "self" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!Z
CODE_SMELL
‹
Pylint:E1302À
PylintE1302?Mixing named and unnamed conversion specifiers in format string"MAJOR*py2E1302:⁄Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.Z
CODE_SMELL
|
Pylint:E0611l
PylintE0611Undefined name"MAJOR*py2E0611:-Used when a name cannot be found in a module.Z
CODE_SMELL
”
Pylint:E1303¬
PylintE1303"Expected mapping for format string"MAJOR*py2E1303:oUsed when a format string that uses named conversion specifiers is used with an argument that is not a mapping.Z
CODE_SMELL
Ñ
Pylint:E1304Û
PylintE1304'Missing key in format string dictionary"MAJOR*py2E1304:öUsed when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.Z
CODE_SMELL
’
Pylint:R0902ƒ
PylintR0902Too many instance attributes"MINOR*py2R0902:wUsed when class has too many instance attributes, try to reduce this to get a more simple (and so easier to use) class.Z
CODE_SMELL
∆
Pylint:R0901µ
PylintR0901Too many ancestors"MINOR*py2R0901:rUsed when class has too many parent classes, try to reduce this to get a more simple (and so easier to use) class.Z
CODE_SMELL
À
Pylint:R0904∫
PylintR0904Too many public methods"MINOR*py2R0904:rUsed when class has too many public methods, try to reduce this to get a more simple (and so easier to use) class.Z
CODE_SMELL
∫
Pylint:E0211©
PylintE0211Method has no argument"MAJOR*py2E0211:bUsed when a method which should have the bound instance as first argument has no argument defined.Z
CODE_SMELL
§
Pylint:R0903ì
PylintR0903Too few public methods"MINOR*py2R0903:LUsed when class has too few public methods, so be sure it's really worth it.Z
CODE_SMELL
∏
Pylint:C0321ß
PylintC0321(More than one statement on a single line"MINOR*py2C0321:Õ<p>Used when more than one statement are found on the same line.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AOneStatementPerLine'>OneStatementPerLine</a> instead.</p>Z
CODE_SMELL
ƒ
Pylint:W0604≥
PylintW0604.Using the global statement at the module level"MINOR*py2W0604:TUsed when you use the "global" statement at the module level since it has no effect.Z
CODE_SMELL
Ä
Pylint:C0202Ô
PylintC02020Class method should have "cls" as first argument"MINOR*py2C0202:çUsed when a class method has an attribute different than "cls" as first argument, to easily differentiate them from regular instance methods.Z
CODE_SMELL
ﬁ
Pylint:C0323Õ
PylintC0323 Operator not followed by a space"MINOR*py2C0323:|Used when one of the following operator (!= | <= | == | >= | < | > | = | \+= |-= | \*= | /= | %) is not followed by a space.Z
CODE_SMELL
ﬁ
Pylint:C0322Õ
PylintC0322 Operator not preceded by a space"MINOR*py2C0322:|Used when one of the following operator (!= | <= | == | >= | < | > | = | \+= |-= | \*= | /= | %) is not preceded by a space.Z
CODE_SMELL
Ù
Pylint:W0603„
PylintW0603Using the global statement"MINOR*py2W0603:óUsed when you use the "global" statement to update a global variable. Pylint just tries to discourage this usage. That doesn't mean you can not use it!Z
CODE_SMELL
ä
Pylint:W0107˘
PylintW0107Unnecessary pass statement"MINOR*py2W0107:≠Used when a "pass" statement that can be avoided is encountered.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2772'>S2772</a> instead.</p>Z
CODE_SMELL
Ø
Pylint:W0623û
PylintW0623$Redefining name in exception handler"MINOR*py2W0623:IUsed when an exception handler assigns the exception to an existing name.Z
CODE_SMELL
‘
Pylint:W0106√
PylintW0106!Expression is assigned to nothing"MINOR*py2W0106:qUsed when an expression that is not a function call is assigned to nothing. Probably something else was intended.Z
CODE_SMELL
â
Pylint:W0622y
PylintW0622Redefining built-in"MINOR*py2W0622:5Used when a variable or function override a built-in.Z
CODE_SMELL
≈
Pylint:W0105¥
PylintW0105String statement has no effect"MINOR*py2W0105:‰Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.Z
CODE_SMELL
¶
Pylint:W0621ï
PylintW0621 Redefining name from outer scope"MINOR*py2W0621:DUsed when a variable's name hides a name defined in the outer scope.Z
CODE_SMELL
®
Pylint:W0104ó
PylintW0104!Statement seems to have no effect"MINOR*py2W0104:EUsed when a statement doesn't have (or at least seems to) any effect.Z
CODE_SMELL
≈
Pylint:W0223¥
PylintW0223!Abstract method is not overridden"MINOR*py2W0223:bUsed when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.Z
CODE_SMELL
”
Pylint:W0102¬
PylintW0102#Dangerous default value as argument"MINOR*py2W0102:nUsed when a mutable value as list or dictionary is
               detected in a default value for an argument.Z
CODE_SMELL
æ
Pylint:W0222≠
PylintW0222Signature discrepancy"MINOR*py2W0222:gUsed when a method signature is different than in the implemented interface or in an overridden method.Z
CODE_SMELL
¢
Pylint:W0101ë
PylintW0101Unreachable code"MINOR*py2W0101:œUsed when there is some code behind a "return" or "raise" statement, which will never be accessed.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1763'>S1763</a> instead.</p>Z
CODE_SMELL
“
Pylint:W0221¡
PylintW0221Arguments number discrepancy"MINOR*py2W0221:tUsed when a method has a different number of arguments than in the implemented interface or in an overridden method.Z
CODE_SMELL
Ó
Pylint:E0107›
PylintE0107Use of a non-existent operator"MAJOR*py2E0107:çUsed when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which dont exist in Python.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3APreIncrementDecrement'>PreIncrementDecrement</a> instead.</p>Z
CODE_SMELL
õ
Pylint:E0503ä
PylintE0503Unknown encoding specified"MAJOR*py2E0503:?Used when an encoding is specified, but it's unknown to Python.Z
CODE_SMELL
‹
Pylint:E0106À
PylintE0106%Return with argument inside generator"MAJOR*py2E0106:ÙUsed when a "return" statement with an argument is found outside in a generator function or method (e.g. with some "yield" statements).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2712'>S2712</a> instead.</p>Z
CODE_SMELL
¬
Pylint:E0502±
PylintE0502Wrong encoding specified"MAJOR*py2E0502:hUsed when a known encoding is specified but the file
      doesn't seem to be actually in this encoding.Z
CODE_SMELL
Ë
Pylint:E0108◊
PylintE0108.Duplicate argument name in function definition"MINOR*py2E0108:xDuplicate argument names in function definitions are syntax errors.
        <p>This rule was added in Pylint 0.28.0.</p>Z
CODE_SMELL
ò
Pylint:E0109á
PylintE0109Missing argument to reversed()"MINOR*py2E0109:8Used when reversed() builtin didn't receive an argument.Z
CODE_SMELL
î
Pylint:E0102É
PylintE0102Redefined function/class/method"MAJOR*py2E0102:3Used when a function / class / method is redefined.Z
CODE_SMELL
ù
Pylint:E0103å
PylintE01030Usage of 'break' or 'continue' outside of a loop"MAJOR*py2E0103:™Used when break or continue keywords are used outside a loop.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1716'>S1716</a> instead.</p>Z
CODE_SMELL
ä
Pylint:E0105˘
PylintE0105Yield outside function"MAJOR*py2E0105:±Used when a "yield" statement is found outside a function or method.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2711'>S2711</a> instead.</p>Z
CODE_SMELL
Ó
Pylint:E0501›
PylintE0501>Non-ASCII characters found but no encoding specified (PEP 263)"MAJOR*py2E0501:nUsed when some non-ASCII characters are detected but no
      encoding is specified, as stated in the PEP 263.Z
CODE_SMELL
å
Pylint:E0104˚
PylintE0104Return outside function"MAJOR*py2E0104:≤Used when a "return" statement is found outside a function or method.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2711'>S2711</a> instead.</p>Z
CODE_SMELL
ﬁ
Pylint:E1310Õ
PylintE1310$Suspicious argument in lstrip/rstrip"MINOR*py2E1310:xThe argument to a str.{l,r}strip call contains a duplicate character.
      <p>This rule was added in Pylint 0.28.0.</p>Z
CODE_SMELL
Î
Pylint:E0101⁄
PylintE0101Explicit return in __init__"MAJOR*py2E0101:çUsed when the special class method __init__ has an
               explicit return value.
               <p>The __init__() method is required to return
               nothing. Python raises a TypeError when __init__() is
               called and executes a return statement with a value other than
               None. Pylint reports this error without depending on the actual
               invocation.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2734'>S2734</a> instead.</p>Z
CODE_SMELL
ø
Pylint:E0222Æ
PylintE0222Missing method from interface"MAJOR*py2E0222:`Used when a method declared in an interface is missing from a class implementing this interface.Z
CODE_SMELL
·
Pylint:E0100–
PylintE0100__init__ method is a generator"MAJOR*py2E0100:ÄUsed when the special class method __init__ is turned
               into a generator by a yield in its body.
               <p>The __init__() method is required to return nothing. Python 2.7 and 3.x
               raise a TypeError when __init__() is called and executes a yield
               statement. Pylint reports this error without depending on the actual
               invocation.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2734'>S2734</a> instead.</p>Z
CODE_SMELL
Ø
Pylint:E0221û
PylintE0221%Implemented interface must be a class"MAJOR*py2E0221:HUsed when a class claims to implement an interface which is not a class.Z
CODE_SMELL
ù
Pylint:C0112å
PylintC0112Empty docstring"MINOR*py2C0112:ÀUsed when a module, function, class or method has an empty docstring (it would be too easy ;).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1720'>S1720</a> instead.</p>Z
CODE_SMELL
 
Pylint:C0111π
PylintC0111Missing docstring"MINOR*py2C0111:ˆUsed when a module, function, class or method has no docstring. Some special methods like __init__ doesn't necessary require a docstring.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1720'>S1720</a> instead.</p>Z
CODE_SMELL
æ
Pylint:W0614≠
PylintW0614"Unused import from wildcard import"MINOR*py2W0614:ZUsed when an imported module or variable is not used from a 'from X import *'style import.Z
CODE_SMELL
–
Pylint:W0512ø
PylintW0512FSource line cannot be decoded using the specified source file encoding"MINOR*py2W0512:«Used when a source line cannot be decoded using the specified source file encoding.
        This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL
Ê
Pylint:W0633’
PylintW0633#Attempting to unpack a non-sequence"MINOR*py2W0633:ÄUsed when something which is not a sequence is used in an unpack assignment.
        <p>This rule was added in Pylint 1.1.0.</p>Z
CODE_SMELL
á
Pylint:W0511w
PylintW0511Task marker found"MINOR*py2W0511:5Used when a warning note as FIXME or XXX is detected.Z
CODE_SMELL
ÿ
Pylint:W0632«
PylintW0632#Possible unbalanced tuple unpacking"MINOR*py2W0632:sUsed when there is an unbalanced tuple unpacking in assignment.
        <p>This rule was added in Pylint 1.1.0.</p>Z
CODE_SMELL
Ê
Pylint:W0233’
PylintW02336__init__ method from a non direct base class is called"MINOR*py2W0233:nUsed when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.Z
CODE_SMELL
¯
Pylint:W0234Á
PylintW0234__iter__ returns non-iterator"MINOR*py2W0234:òUsed when an __iter__ method returns something which is not an iterable (i.e. has no `next` method).
        <p>This rule was added in Pylint 1.1.0.</p>Z
CODE_SMELL
Ï
Pylint:W0631€
PylintW0631&Using possibly undefined loop variable"MINOR*py2W0631:ÉUsed when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.Z
CODE_SMELL
£
Pylint:W0232í
PylintW0232Class has no __init__ method"MINOR*py2W0232:EUsed when a class has no __init__ method, neither its parent classes.Z
CODE_SMELL
ã
Pylint:W1201˙
PylintW1201>Specify string format arguments as logging function parameters"MINOR*py2W1201:äUsed when a logging statement has a call form of
               "logging.<loggingmethod>(format_string % (format_args...))". Such
               calls should leave string interpolation to the logging method itself
               and be written "logging.<loggingmethod>(format_string,
               format_args...)" so that the program may avoid incurring the cost of
               the interpolation in those cases in which no message will be
               logged. For more, see http://www.python.org/dev/peps/pep-0282/.Z
CODE_SMELL
ˆ
Pylint:W0199Â
PylintW0199Assert called on a 2-uple"MINOR*py2W0199:öA call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is. Did you mean 'assert x,y'?Z
CODE_SMELL
Ú
Pylint:W0110·
PylintW01107map/filter on lambda could be replaced by comprehension"MINOR*py2W0110:¯Used when a lambda is the first argument to "map" or "filter".
        It could be clearer as a list comprehension or generator expression. This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 0.27.0.</p>Z
CODE_SMELL
–
Pylint:W0231ø
PylintW0231-__init__ method from base class is not called"MINOR*py2W0231:aUsed when an ancestor class method has an __init__ method which is not called by a derived class.Z
CODE_SMELL
Æ
Pylint:E1206ù
PylintE1206.Not enough arguments for logging format string"MAJOR*py2E1206:>Used when a logging format string is given too many arguments.Z
CODE_SMELL
Ù
Pylint:R0201„
PylintR0201Method could be a function"MINOR*py2R0201:óUsed when a method doesn't use its bound instance, and
               so could be written as a function.
               <p>If the class method does not reference any of the class
               attributes it may be more clear to define the method as a static
               function instead.</p>
         <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2325'>S2325</a> instead.</p>Z
CODE_SMELL
ö
Pylint:E0235â
PylintE02358__exit__ must accept 3 arguments: type, value, traceback"MINOR*py2E0235:üUsed when the __exit__ special method, belonging to a context manager, does not accept 3 arguments (type, value, traceback).
        <p>This rule was added in Pylint 1.1.0.</p>
        <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2733'>S2733</a> instead.</p>Z
CODE_SMELL
˜
Pylint:E0238Ê
PylintE0238Invalid __slots__ object"MINOR*py2E0238:úUsed when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.
        <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
Û
Pylint:E0236‚
PylintE0236@Invalid object in __slots__, must contain only non empty strings"MINOR*py2E0236:qUsed when an invalid (non-string) object occurs in __slots__.
        <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
´
Pylint:E1205ö
PylintE1205,Too many arguments for logging format string"MAJOR*py2E1205:=Used when a logging format string is given too few arguments.Z
CODE_SMELL
´
Pylint:E0111ö
PylintE0111/The first reversed() argument is not a sequence"MINOR*py2E0111:πUsed when the first argument to reversed() builtin isn't a sequence
      (does not implement __reversed__, nor __getitem__ and __len__
      <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
Ã
Pylint:E1200ª
PylintE1200$Unsupported logging format character"MAJOR*py2E1200:fUsed when an unsupported format character is used in a
               logging statement format string.Z
CODE_SMELL
œ
Pylint:C0103æ
PylintC0103Invalid name"MINOR*py2C0103:ÄUsed when the name doesn't match the regular expression associated to its type (constant, variable, class...).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS116'>S116</a>, <a href='/coding_rules#rule_key=python%3AS117'>S117</a>, <a href='/coding_rules#rule_key=python%3AS101'>S101</a>,
      <a href='/coding_rules#rule_key=python%3AS100'>S100</a>, <a href='/coding_rules#rule_key=python%3AS1542'>S1542</a>, <a href='/coding_rules#rule_key=python%3AS1578'>S1578</a> instead.</p>Z
CODE_SMELL
Ì
Pylint:E1201‹
PylintE1201<Logging format string ends in middle of conversion specifier"MAJOR*py2E1201:oUsed when a logging statement format string terminates
               before the end of a conversion specifier.Z
CODE_SMELL
°
Pylint:W0109ê
PylintW0109Duplicate key in dictionary"MINOR*py2W0109:DUsed when a dictionary expression binds the same key multiple times.Z
CODE_SMELL
ô
Pylint:C0102à
PylintC0102Black listed name"MINOR*py2C0102:≈Used when the name is listed in the black list
               (unauthorized names).
               <p>Pylint can be customized to help enforce coding
               guidelines that discourage or forbid use of certain names for
               variables, functions, etc. These names are specified with the
               bad-names option. This message is raised whenever a name is in the
               list of names defined with the bad-names option.</p>Z
CODE_SMELL
√
Pylint:W0108≤
PylintW0108Lambda may not be necessary"MINOR*py2W0108:ÂUsed when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.Z
CODE_SMELL
ì
Pylint:W0403Ç
PylintW0403Relative import"MINOR*py2W0403:BUsed when an import relative to the package directory is detected.Z
CODE_SMELL
y
Pylint:W0404i
PylintW0404Reimport"MINOR*py2W0404:0Used when a module is reimported multiple times.Z
CODE_SMELL
}
Pylint:W0401m
PylintW0401Wildcard import"MINOR*py2W0401:-Used when `from module import *` is detected.Z
CODE_SMELL
ã
Pylint:W0402{
PylintW0402Uses of a deprecated module"MINOR*py2W0402:/Used a module marked as deprecated is imported.Z
CODE_SMELL
˛
Pylint:F0202Ì
PylintF0202!Unable to check methods signature"MAJOR*py2F0202:öUsed when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.Z
CODE_SMELL
Ã
Pylint:F0321ª
PylintF0321Format detection error"MAJOR*py2F0321:tUsed when an unexpected error occurred in bad format
               detection. Please report the error if it occurs.Z
CODE_SMELL
«
Pylint:W0123∂
PylintW0123Use of eval"MINOR*py2W0123:˘Used when you use the "eval" function, to discourage its usage.
        Consider using `ast.literal_eval` for safely evaluating
        strings containing Python expressions from untrusted sources.
        <p>This rule was added in Pylint 1.2.0.</p>Z
CODE_SMELL
’
Pylint:W0120ƒ
PylintW0120-Else clause on loop without a break statement"MINOR*py2W0120:ÂLoops should only have an else clause if they can exit early with a break statement,
        otherwise the statements under else should be on the same scope as the loop itself.
        <p>This rule was added in Pylint 0.28.0.</p>Z
CODE_SMELL
Œ
Pylint:W0121Ω
PylintW0121=Use raise ErrorClass(args) instead of raise ErrorClass, args."MINOR*py2W0121:ŒUsed when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.
        This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL
“
Pylint:W0122¡
PylintW0122Use of the exec statement"MINOR*py2W0122:ˆUsed when you use the "exec" statement, to discourage its usage. That doesn't mean you can not use it!
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AExecStatementUsage'>ExecStatementUsage</a> instead.</p>Z
CODE_SMELL
}
Pylint:E0001m
PylintE0001Syntax error"MAJOR*py2E0001:0Used when a syntax error is raised for a module.Z
CODE_SMELL
Ö
Pylint:W1501Ù
PylintW1501Invalid mode for open"MINOR*py2W1501:≠Python supports: r, w, a modes with b, +, and U options.
        See http://docs.python.org/2/library/functions.html#open
        <p>This rule was added in Pylint 1.0.0.</p>Z
CODE_SMELL
Ç
Pylint:E1103Ò
PylintE1103:Accessing nonexistent member (type information incomplete)"MAJOR*py2E1103:ÖUsed when a variable is accessed for an nonexistent member, but Pylint was not able to interpret all possible types of this variable.Z
CODE_SMELL
„
Pylint:W0410“
PylintW0410:__future__ import is not the first non docstring statement"MINOR*py2W0410:gPython 2.5 and greater require __future__ import to be the first non docstring statement in the module.Z
CODE_SMELL
ö
Pylint:E0011â
PylintE0011Unrecognized file option"MAJOR*py2E0011:øUsed when an unknown inline option is encountered.
               <p>Note that options can be specified in the
               configuration file and can be overridden on the command line.</p>Z
CODE_SMELL
ô
Pylint:E1101à
PylintE1101Access of nonexistent member"MAJOR*py2E1101:;Used when a variable is accessed for an nonexistent member.Z
CODE_SMELL
ì
Pylint:C0121Ç
PylintC0121Missing required attribute"MINOR*py2C0121:7Used when an attribute required for modules is missing.Z
CODE_SMELL
•
Pylint:E1102î
PylintE1102Calling of not callable"MAJOR*py2E1102:LUsed when an object being called has been inferred to a non callable object.Z
CODE_SMELL
ﬂ
Pylint:E0012Œ
PylintE0012Bad option value"MAJOR*py2E0012:åUsed when a bad value for an inline option is encountered.
               <p>The option exists but its value is not valid. The options can be
               specified in the Pylint configuration file and can be overridden in
               the Pylint command line.</p>Z
CODE_SMELL
¢
Pylint:E9900ë
PylintE9900Unsupported format character"MAJOR*py2E1300:DUsed when a unsupported format character is used in a format string.Z
CODE_SMELL
}
Pylint:W0406m
PylintW0406Module imports itself"MINOR*py2W0406:'Used when a module is importing itself.Z
CODE_SMELL
±
findbugs:UC_USELESS_VOID_METHODç
findbugsUC_USELESS_VOID_METHOD%Style - Useless non-empty void method"INFO*java2UC_USELESS_VOID_METHOD:ë<p>Our analysis shows that this non-empty void method does not actually perform any useful work.
Please check it: probably there's a mistake in its code or its body can be fully removed.
</p>
<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.
Common false-positive cases include:</p>
<ul>
<li>The method is intended to trigger loading of some class which may have a side effect.</li>
<li>The method is intended to implicitly throw some obscure exception.</li>
</ul>Z
CODE_SMELL
…
Bfindbugs:DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADSÇ
findbugs9DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADSLCorrectness - Creation of ScheduledThreadPoolExecutor with zero core threads"MAJOR*java29DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS:ü<p>(<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29">Javadoc</a>)
A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.
</p>ZBUG
õ
&findbugs:IM_MULTIPLYING_RESULT_OF_IREM
findbugsIM_MULTIPLYING_RESULT_OF_IREM=Correctness - Integer multiply of result of integer remainder"MAJOR*java2IM_MULTIPLYING_RESULT_OF_IREM:‘<p>
The code multiplies the result of an integer remaining by an integer constant.
Be sure you don't have your operator precedence confused. For example
i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).
</p>ZBUG
˚
findbugs:NM_LCASE_HASHCODE‹
findbugsNM_LCASE_HASHCODE@Correctness - Class defines hashcode(); should it be hashCode()?"MAJOR*java2NM_LCASE_HASHCODE:’<p> This class defines a method called <code>hashcode()</code>.&nbsp; This method
  does not override the <code>hashCode()</code> method in <code>java.lang.Object</code>,
  which is probably what was intended.</p>ZBUG
™
2findbugs:ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATHÛ
findbugs)ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATHFBad practice - Method may fail to close database resource on exception"MAJOR*java2)ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH:Ø<p> The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all exception paths out of the method.&nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.</p>Z
CODE_SMELL
î
#findbugs:LI_LAZY_INIT_UPDATE_STATICÏ
findbugsLI_LAZY_INIT_UPDATE_STATICJMulti-threading - Incorrect lazy initialization and update of static field"MAJOR*java2LI_LAZY_INIT_UPDATE_STATIC:…<p> This method contains an unsynchronized lazy initialization of a static field.
After the field is set, the object stored into that location is further updated or accessed.
The setting of the field is visible to other threads as soon as it is set. If the
further accesses in the method that set the field serve to initialize the object, then
you have a <em>very serious</em> multithreading bug, unless something else prevents
any other thread from accessing the stored object until it is fully initialized.
</p>
<p>Even if you feel confident that the method is never called by multiple
threads, it might be better to not set the static field until the value
you are setting it to is fully populated/initialized.ZBUG
¬
)findbugs:MS_MUTABLE_COLLECTION_PKGPROTECTî
findbugs MS_MUTABLE_COLLECTION_PKGPROTECTPMalicious code - Field is a mutable collection which should be package protected"INFO*java2 MS_MUTABLE_COLLECTION_PKGPROTECT:Ÿ<p>A mutable collection instance is assigned to a final static field,
   thus can be changed by malicious code or by accident from another package.
   The field could be made package protected to avoid this vulnerability.
   Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc.
   to avoid this vulnerability.</p>Z
CODE_SMELL
≥	
4findbugs:WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL˙
findbugs+WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERALGMulti-threading - Synchronization on getClass rather than class literal"MAJOR*java2+WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL:∏<p>
     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,
     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.
     For example, consider this code from java.awt.Label:</p>
<pre><code>private static final String base = "label";
private static int nameCounter = 0;

String constructComponentName() {
    synchronized (getClass()) {
        return base + nameCounter++;
    }
}
</code></pre>
     <p>Subclasses of <code>Label</code> won't synchronize on the same subclass, giving rise to a datarace.
     Instead, this code should be synchronizing on <code>Label.class</code></p>
<pre><code>private static final String base = "label";
private static int nameCounter = 0;

String constructComponentName() {
    synchronized (Label.class) {
        return base + nameCounter++;
    }
}
</code></pre>
      <p>Bug pattern contributed by Jason Mehrens</p>ZBUG
à
Tfindbugs:DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTORØ
findbugsKDMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTORSCorrectness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor"MAJOR*java2KDMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR:°<p>(<a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html">Javadoc</a>)
While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.
    </p>ZBUG
≤
findbugs:IJU_BAD_SUITE_METHODê
findbugsIJU_BAD_SUITE_METHOD2Correctness - TestCase declares a bad suite method"MAJOR*java2IJU_BAD_SUITE_METHOD:ë<p> Class is a JUnit TestCase and defines a suite() method.
However, the suite method needs to be declared as either</p>
<pre><code>public static junit.framework.Test suite()
</code></pre>
<p>
or
</p>
<pre><code>public static junit.framework.TestSuite suite()
</code></pre>ZBUG
Î
'findbugs:NS_DANGEROUS_NON_SHORT_CIRCUITø
findbugsNS_DANGEROUS_NON_SHORT_CIRCUIT<Style - Potentially dangerous use of non-short-circuit logic"INFO*java2NS_DANGEROUS_NON_SHORT_CIRCUIT:ú<p> This code seems to be using non-short-circuit logic (e.g., &amp;
or |)
rather than short-circuit logic (&amp;&amp; or ||). In addition,
it seem possible that, depending on the value of the left hand side, you might not
want to evaluate the right hand side (because it would have side effects, could cause an exception
or could be expensive.</p>
<p>
Non-short-circuit logic causes both sides of the expression
to be evaluated even when the result can be inferred from
knowing the left-hand side. This can be less efficient and
can result in errors if the left-hand side guards cases
when evaluating the right-hand side can generate an error.
</p>

<p>See <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2">the Java
Language Specification</a> for details.

</p>Z
CODE_SMELL
ﬁ
findbugs:EQ_SELF_USE_OBJECTæ
findbugsEQ_SELF_USE_OBJECTPCorrectness - Covariant equals() method defined, Object.equals(Object) inherited"MAJOR*java2EQ_SELF_USE_OBJECT:•<p> This class defines a covariant version of the <code>equals()</code>
  method, but inherits the normal <code>equals(Object)</code> method
  defined in the base <code>java.lang.Object</code> class.&nbsp;
  The class should probably define a <code>boolean equals(Object)</code> method.
  </p>ZBUG
‰
)findbugs:RV_DONT_JUST_NULL_CHECK_READLINE∂
findbugs RV_DONT_JUST_NULL_CHECK_READLINEKStyle - Method discards result of readLine after checking if it is non-null"INFO*java2 RV_DONT_JUST_NULL_CHECK_READLINE:Ä<p> The value returned by readLine is discarded after checking to see if the return
value is non-null. In almost all situations, if the result is non-null, you will want
to use that non-null value. Calling readLine again will give you a different line.</p>Z
CODE_SMELL
ä
!findbugs:SA_LOCAL_SELF_ASSIGNMENT‰
findbugsSA_LOCAL_SELF_ASSIGNMENT)Style - Self assignment of local variable"INFO*java2SA_LOCAL_SELF_ASSIGNMENT:‡<p> This method contains a self assignment of a local variable; e.g.</p>
<pre><code>public void foo() {
    int x = 3;
    x = x;
}
</code></pre>
<p>
Such assignments are useless, and may indicate a logic error or typo.
</p>Z
CODE_SMELL
∞
findbugs:BIT_ANDõ
findbugsBIT_AND$Correctness - Incompatible bit masks"MAJOR*java2BIT_AND:ƒ<p> This method compares an expression of the form (e &amp; C) to D,
which will always compare unequal
due to the specific values of constants C and D.
This may indicate a logic error or typo.</p>ZBUG
°
findbugs:NP_NULL_ON_SOME_PATHˇ
findbugsNP_NULL_ON_SOME_PATH/Correctness - Possible null pointer dereference"MAJOR*java2NP_NULL_ON_SOME_PATH:É<p> There is a branch of statement that, <em>if executed,</em>  guarantees that
a null value will be dereferenced, which
would generate a <code>NullPointerException</code> when the code is executed.
Of course, the problem might be that the branch or statement is infeasible and that
the null pointer exception can't ever be executed; deciding that is beyond the ability of SpotBugs.
</p>ZBUG
à
9findbugs:RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION 
findbugs0RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION8Correctness - File.separator used for regular expression"MAJOR*java20RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION:ç<p>
The code here uses <code>File.separator</code>
where a regular expression is required. This will fail on Windows
platforms, where the <code>File.separator</code> is a backslash, which is interpreted in a
regular expression as an escape character. Among other options, you can just use
<code>File.separatorChar=='\\' ? "\\\\" : File.separator</code> instead of
<code>File.separator</code>

</p>ZBUG
π
findbugs:DM_NUMBER_CTORù
findbugsDM_NUMBER_CTORWPerformance - Method invokes inefficient Number constructor; use static valueOf instead"MAJOR*java2DM_NUMBER_CTOR:Ö<p>
      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas
      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.
      Using of cached values avoids object allocation and the code will be faster.
      </p>
      <p>
      Values between -128 and 127 are guaranteed to have corresponding cached instances
      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.
      For values outside the constant range the performance of both styles is the same.
      </p>
      <p>
      Unless the class must be compatible with JVMs predating Java 1.5,
      use either autoboxing or the <code>valueOf()</code> method when creating instances of
      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.
      </p>ZBUG
Œ
"findbugs:FI_FINALIZER_NULLS_FIELDSß
findbugsFI_FINALIZER_NULLS_FIELDS%Bad practice - Finalizer nulls fields"MAJOR*java2FI_FINALIZER_NULLS_FIELDS:§<p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,
  and the object is going to be garbage collected anyway.</p>Z
CODE_SMELL
•
findbugs:MS_OOI_PKGPROTECTÜ
findbugsMS_OOI_PKGPROTECTUMalicious code - Field should be moved out of an interface and made package protected"INFO*java2MS_OOI_PKGPROTECT:‰<p>
 A final static field that is
defined in an interface references a mutable
   object such as an array or hashtable.
   This mutable object could
   be changed by malicious code or
        by accident from another package.
   To solve this, the field needs to be moved to a class
   and made package protected
   to avoid
        this vulnerability.</p>Z
CODE_SMELL
›
'findbugs:STCAL_STATIC_CALENDAR_INSTANCE±
findbugsSTCAL_STATIC_CALENDAR_INSTANCE'Multi-threading - Static Calendar field"MAJOR*java2STCAL_STATIC_CALENDAR_INSTANCE:©<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.
Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the
application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see
random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>
<p>You may also experience serialization problems.</p>
<p>Using an instance field is recommended.</p>
<p>For more information on this see <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579">JDK Bug #6231579</a>
and <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997">JDK Bug #6178997</a>.</p>ZBUG
”
findbugs:BC_UNCONFIRMED_CAST≤
findbugsBC_UNCONFIRMED_CAST"Style - Unchecked/unconfirmed cast"INFO*java2BC_UNCONFIRMED_CAST:ø<p>
This cast is unchecked, and not all instances of the type casted from can be cast to
the type it is being cast to. Check that your program logic ensures that this
cast will not fail.
</p>Z
CODE_SMELL
∆
1findbugs:RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUESê
findbugs(RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES/Style - Redundant comparison of two null values"INFO*java2(RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES:g<p> This method contains a redundant comparison of two references known to
both be definitely null.</p>Z
CODE_SMELL
ª
.findbugs:RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUEà
findbugs%RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE5Style - Redundant nullcheck of value known to be null"INFO*java2%RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE:_<p> This method contains a redundant check of a known null value against
the constant null.</p>Z
CODE_SMELL
Ò
findbugs:DMI_UNSUPPORTED_METHODÕ
findbugsDMI_UNSUPPORTED_METHOD"Style - Call to unsupported method"INFO*java2DMI_UNSUPPORTED_METHOD:U<p>All targets of this method invocation throw an UnsupportedOperationException.
</p>Z
CODE_SMELL
œ
findbugs:NM_CONFUSINGµ
findbugsNM_CONFUSING%Bad practice - Confusing method names"MAJOR*java2NM_CONFUSING:M<p> The referenced methods have names that differ only by capitalization.</p>Z
CODE_SMELL
ê
2findbugs:NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUSŸ
findbugs)NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS<Correctness - Method call passes null for non-null parameter"MAJOR*java2)NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS:¶<p>
      A possibly-null value is passed at a call site where all known
      target methods require the parameter to be non-null.
    Either the parameter is annotated as a parameter that should
    always be non-null, or analysis has shown that it will always be
    dereferenced.
      </p>ZBUG
Œ
>findbugs:TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERSã
findbugs5TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS@Correctness - Comparing values with incompatible type qualifiers"MAJOR*java25TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS:º<p>
        A value specified as carrying a type qualifier annotation is
        compared with a value that doesn't ever carry that qualifier.
        </p>

        <p>
        More precisely, a value annotated with a type qualifier specifying when=ALWAYS
        is compared with a value that where the same type qualifier specifies when=NEVER.
        </p>

        <p>
        For example, say that @NonNegative is a nickname for
        the type qualifier annotation @Negative(when=When.NEVER).
        The following code will generate this warning because
        the return statement requires a @NonNegative value,
        but receives one that is marked as @Negative.
        </p>
<pre><code>public boolean example(@Negative Integer value1, @NonNegative Integer value2) {
    return value1.equals(value2);
}
</code></pre>ZBUG
Ë
findbugs:ME_MUTABLE_ENUM_FIELD≈
findbugsME_MUTABLE_ENUM_FIELD/Bad practice - Enum field is public and mutable"MAJOR*java2ME_MUTABLE_ENUM_FIELD:¿<p>A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package.
  Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world.
  Consider declaring this field final and/or package-private.</p>Z
CODE_SMELL
ä
findbugs:MF_METHOD_MASKS_FIELDÁ
findbugsMF_METHOD_MASKS_FIELD=Correctness - Method defines a variable that obscures a field"MAJOR*java2MF_METHOD_MASKS_FIELD:€<p> This method defines a local variable with the same name as a field
in this class or a superclass.  This may cause the method to
read an uninitialized value from the field, leave the field uninitialized,
or both.</p>ZBUG
◊
<findbugs:NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLEñ
findbugs3NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE<Style - Parameter must be non-null but is marked as nullable"INFO*java23NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE:…<p> This parameter is always used in a way that requires it to be non-null,
but the parameter is explicitly annotated as being Nullable. Either the use
of the parameter or the annotation is wrong.
</p>Z
CODE_SMELL
⁄
findbugs:DM_GC«
findbugsDM_GCXPerformance - Explicit garbage collection; extremely dubious except in benchmarking code"MAJOR*java2DM_GC:¿<p> Code explicitly invokes garbage collection.
  Except for specific use in benchmarking, this is very dubious.</p>
  <p>In the past, situations where people have explicitly invoked
  the garbage collector in routines such as close or finalize methods
  has led to huge performance black holes. Garbage collection
   can be expensive. Any situation that forces hundreds or thousands
   of garbage collections will bring the machine to a crawl.</p>ZBUG
√
findbugs:NM_WRONG_PACKAGE•
findbugsNM_WRONG_PACKAGE]Correctness - Method doesn't override method in superclass due to wrong package for parameter"MAJOR*java2NM_WRONG_PACKAGE:É<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match
the type of the corresponding parameter in the superclass. For example, if you have:</p>
<pre><code>import alpha.Foo;

public class A {
    public int f(Foo x) { return 17; }
}
----
import beta.Foo;

public class B extends A {
    public int f(Foo x) { return 42; }
}
</code></pre>
<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't
override the
<code>f(Foo)</code> method defined in class <code>A</code>, because the argument
types are <code>Foo</code>'s from different packages.
</p>ZBUG
õ
)findbugs:STI_INTERRUPTED_ON_CURRENTTHREADÌ
findbugs STI_INTERRUPTED_ON_CURRENTTHREADICorrectness - Unneeded use of currentThread() call, to call interrupted()"MAJOR*java2 STI_INTERRUPTED_ON_CURRENTTHREAD:ø<p>
This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a
static method, is more simple and clear to use Thread.interrupted().
</p>ZBUG
¥
findbugs:TLW_TWO_LOCK_NOTIFYì
findbugsTLW_TWO_LOCK_NOTIFY,Multi-threading - Notify with two locks held"MAJOR*java2TLW_TWO_LOCK_NOTIFY:ú<p> The code calls notify() or notifyAll() while two locks
  are held. If this notification is intended to wake up a wait()
  that is holding the same locks, it may deadlock, since the wait
  will only give up one lock and the notify will be unable to get both locks,
  and thus the notify will not succeed.
   &nbsp; If there is also a warning about a two lock wait, the
   probably of a bug is quite high.
</p>ZBUG
á
$findbugs:USM_USELESS_SUBCLASS_METHODﬁ
findbugsUSM_USELESS_SUBCLASS_METHOD=Style - Method superfluously delegates to parent class method"INFO*java2USM_USELESS_SUBCLASS_METHOD:¿<p>
      This derived method merely calls the same superclass method passing in the exact parameters
      received. This method can be removed, as it provides no additional value.
      </p>Z
CODE_SMELL
õ
-findbugs:UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELDÈ
findbugs$UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD(Style - Unused public or protected field"INFO*java2$UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD:Œ<p> This field is never used.&nbsp;
The field is public or protected, so perhaps
    it is intended to be used with classes not seen as part of the analysis. If not,
consider removing it from the class.</p>Z
CODE_SMELL
’
(findbugs:HSC_HUGE_SHARED_STRING_CONSTANT®
findbugsHSC_HUGE_SHARED_STRING_CONSTANTMPerformance - Huge string constants is duplicated across multiple class files"MAJOR*java2HSC_HUGE_SHARED_STRING_CONSTANT:¯<p>
    A large String constant is duplicated across multiple class files.
    This is likely because a final field is initialized to a String constant, and the Java language
    mandates that all references to a final field from other classes be inlined into
that classfile. See <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475">JDK bug 6447475</a>
    for a description of an occurrence of this bug in the JDK and how resolving it reduced
    the size of the JDK by 1 megabyte.
</p>ZBUG
∂
-findbugs:IIL_PATTERN_COMPILE_IN_LOOP_INDIRECTÑ
findbugs$IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT>Performance - Method compiles the regular expression in a loop"MAJOR*java2$IIL_PATTERN_COMPILE_IN_LOOP_INDIRECT:Ÿ<p> The method creates the same regular expression inside the loop, so it will be compiled every iteration.
It would be more optimal to precompile this regular expression using Pattern.compile outside of the loop.</p>ZBUG
•
0findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH
findbugs'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH=Correctness - Dead store due to switch statement fall through"MAJOR*java2'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH:¿<p> A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that
    you forgot to put a break or return at the end of the previous case.
</p>ZBUG
Ô
findbugs:FI_EXPLICIT_INVOCATIONÀ
findbugsFI_EXPLICIT_INVOCATION/Bad practice - Explicit invocation of finalizer"MAJOR*java2FI_EXPLICIT_INVOCATION:ƒ<p> This method contains an explicit invocation of the <code>finalize()</code>
  method on an object.&nbsp; Because finalizer methods are supposed to be
  executed once, and only by the VM, this is a bad idea.</p>
<p>If a connected set of objects beings finalizable, then the VM will invoke the
finalize method on all the finalizable object, possibly at the same time in different threads.
Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize
on objects referenced by X, because they may already be getting finalized in a separate thread.</p>Z
CODE_SMELL
û
&findbugs:FL_MATH_USING_FLOAT_PRECISIONÛ
findbugsFL_MATH_USING_FLOAT_PRECISIONACorrectness - Method performs math using floating point precision"MAJOR*java2FL_MATH_USING_FLOAT_PRECISION:”<p>
   The method performs math operations using floating point precision.
   Floating point precision is very imprecise. For example,
   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>ZBUG
¬	
$findbugs:ICAST_INT_2_LONG_AS_INSTANTô	
findbugsICAST_INT_2_LONG_AS_INSTANTCCorrectness - int value converted to long and used as absolute time"MAJOR*java2ICAST_INT_2_LONG_AS_INSTANT:˚<p>
This code converts a 32-bit int value to a 64-bit long value, and then
passes that value for a method parameter that requires an absolute time value.
An absolute time value is the number
of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT.
For example, the following method, intended to convert seconds since the epoch into a Date, is badly
broken:</p>
<pre><code>Date getDate(int seconds) { return new Date(seconds * 1000); }
</code></pre>
<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value.
When a 32-bit value is converted to 64-bits and used to express an absolute time
value, only dates in December 1969 and January 1970 can be represented.</p>

<p>Correct implementations for the above method are:</p>
<pre><code>// Fails for dates after 2037
Date getDate(int seconds) { return new Date(seconds * 1000L); }

// better, works for all dates
Date getDate(long seconds) { return new Date(seconds * 1000); }
</code></pre>ZBUG
π
5findbugs:UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTORˇ
findbugs,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTORVCorrectness - Uninitialized read of field method called from constructor of superclass"MAJOR*java2,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR:¨<p> This method is invoked in the constructor of the superclass. At this point,
    the fields of the class have not yet initialized.</p>
<p>To make this more concrete, consider the following classes:</p>
<pre><code>abstract class A {
    int hashCode;
    abstract Object getValue();

    A() {
        hashCode = getValue().hashCode();
    }
}

class B extends A {
    Object value;

    B(Object v) {
        this.value = v;
    }

    Object getValue() {
        return value;
    }
}
</code></pre>
<p>When a <code>B</code> is constructed,
the constructor for the <code>A</code> class is invoked
<em>before</em> the constructor for <code>B</code> sets <code>value</code>.
Thus, when the constructor for <code>A</code> invokes <code>getValue</code>,
an uninitialized value is read for <code>value</code>.
</p>ZBUG
À
$findbugs:FB_MISSING_EXPECTED_WARNING¢
findbugsFB_MISSING_EXPECTED_WARNING?Correctness - Missing expected or desired warning from SpotBugs"MAJOR*java2FB_MISSING_EXPECTED_WARNING:à<p>SpotBugs didn't generate generated a warning that, according to a @ExpectedWarning annotated,
            is expected or desired.</p>ZBUG
Ç
6findbugs:RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE«
findbugs-RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE8Correctness - Nullcheck of value previously dereferenced"MAJOR*java2-RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE:ê<p> A value is checked here to see whether it is null, but this value can't
be null because it was previously dereferenced and if it were null a null pointer
exception would have occurred at the earlier dereference.
Essentially, this code and the previous dereference
disagree as to whether this value is allowed to be null. Either the check is redundant
or the previous dereference is erroneous.</p>ZBUG
»
findbugs:URF_UNREAD_FIELD™
findbugsURF_UNREAD_FIELDPerformance - Unread field"MAJOR*java2URF_UNREAD_FIELD:L<p> This field is never read.&nbsp; Consider removing it from the class.</p>ZBUG
π
findbugs:DE_MIGHT_IGNOREú
findbugsDE_MIGHT_IGNORE,Bad practice - Method might ignore exception"MAJOR*java2DE_MIGHT_IGNORE:¶<p> This method might ignore an exception.&nbsp; In general, exceptions
  should be handled or reported in some way, or they should be thrown
  out of the method.</p>Z
CODE_SMELL
˝
"findbugs:DM_RUN_FINALIZERS_ON_EXIT÷
findbugsDM_RUN_FINALIZERS_ON_EXITBBad practice - Method invokes dangerous method runFinalizersOnExit"MAJOR*java2DM_RUN_FINALIZERS_ON_EXIT:∂<p> <em>Never call System.runFinalizersOnExit
or Runtime.runFinalizersOnExit for any reason: they are among the most
dangerous methods in the Java libraries.</em> -- Joshua Bloch</p>Z
CODE_SMELL
ô
2findbugs:IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD‚
findbugs)IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHODHCorrectness - JUnit assertion in run method will not be noticed by JUnit"MAJOR*java2)IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD:£<p> A JUnit assertion is performed in a run method. Failed JUnit assertions
just result in exceptions being thrown.
Thus, if this exception occurs in a thread other than the thread that invokes
the test method, the exception will terminate the thread but not result
in the test failing.
</p>ZBUG
‹
,findbugs:INT_BAD_COMPARISON_WITH_SIGNED_BYTE´
findbugs#INT_BAD_COMPARISON_WITH_SIGNED_BYTE+Correctness - Bad comparison of signed byte"MAJOR*java2#INT_BAD_COMPARISON_WITH_SIGNED_BYTE:ï<p> Signed bytes can only have a value in the range -128 to 127. Comparing
a signed byte with a value outside that range is vacuous and likely to be incorrect.
To convert a signed byte <code>b</code> to an unsigned value in the range 0..255,
use <code>0xff &amp; b</code>.
</p>ZBUG
ô
"findbugs:CAA_COVARIANT_ARRAY_FIELDÚ
findbugsCAA_COVARIANT_ARRAY_FIELD-Style - Covariant array assignment to a field"INFO*java2CAA_COVARIANT_ARRAY_FIELD:Ë<p>Array of covariant type is assigned to a field. This is confusing and may lead to ArrayStoreException at runtime
if the reference of some other type will be stored in this array later like in the following code:
</p>
<pre><code>Number[] arr = new Integer[10];
arr[0] = 1.0;
</code></pre>
<p>Consider changing the type of created array or the field type.</p>Z
CODE_SMELL
Ë
!findbugs:NP_ALWAYS_NULL_EXCEPTION¬
findbugsNP_ALWAYS_NULL_EXCEPTIONBCorrectness - Null pointer dereference in method on exception path"MAJOR*java2NP_ALWAYS_NULL_EXCEPTION:´<p> A pointer which is null on an exception path is dereferenced here.&nbsp;
This will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;
Note that because SpotBugs currently does not prune infeasible exception paths,
this may be a false warning.</p>

<p> Also note that SpotBugs considers the default case of a switch statement to
be an exception path, since the default case is often infeasible.</p>ZBUG
â
#findbugs:SA_FIELD_DOUBLE_ASSIGNMENT·
findbugsSA_FIELD_DOUBLE_ASSIGNMENT"Style - Double assignment of field"INFO*java2SA_FIELD_DOUBLE_ASSIGNMENT:‡<p> This method contains a double assignment of a field; e.g.
</p>
<pre><code>int x,y;
public void foo() {
    x = x = 17;
}
</code></pre>
<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>Z
CODE_SMELL
ﬂ
'findbugs:DLS_DEAD_LOCAL_STORE_IN_RETURN≥
findbugsDLS_DEAD_LOCAL_STORE_IN_RETURN.Style - Useless assignment in return statement"INFO*java2DLS_DEAD_LOCAL_STORE_IN_RETURN:û<p>
This statement assigns to a local variable in a return statement. This assignment
has effect. Please verify that this statement does the right thing.
</p>Z
CODE_SMELL
Õ
'findbugs:DMI_INVOKING_TOSTRING_ON_ARRAY°
findbugsDMI_INVOKING_TOSTRING_ON_ARRAY0Correctness - Invocation of toString on an array"MAJOR*java2DMI_INVOKING_TOSTRING_ON_ARRAY:ê<p>
The code invokes toString on an array, which will generate a fairly useless result
such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable
String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
</p>ZBUG
â
!findbugs:SWL_SLEEP_WITH_LOCK_HELD„
findbugsSWL_SLEEP_WITH_LOCK_HELD>Multi-threading - Method calls Thread.sleep() with a lock held"MAJOR*java2SWL_SLEEP_WITH_LOCK_HELD:–<p>
      This method calls Thread.sleep() with a lock held.  This may result
      in very poor performance and scalability, or a deadlock, since other threads may
      be waiting to acquire the lock.  It is a much better idea to call
      wait() on the lock, which releases the lock and allows other threads
      to run.
      </p>ZBUG
Ò
$findbugs:UPM_UNCALLED_PRIVATE_METHOD»
findbugsUPM_UNCALLED_PRIVATE_METHOD,Performance - Private method is never called"MAJOR*java2UPM_UNCALLED_PRIVATE_METHOD:¡<p> This private method is never called. Although it is
possible that the method will be invoked through reflection,
it is more likely that the method is never used, and should be
removed.
</p>ZBUG
˚
findbugs:BC_IMPOSSIBLE_DOWNCAST◊
findbugsBC_IMPOSSIBLE_DOWNCAST!Correctness - Impossible downcast"CRITICAL*java2BC_IMPOSSIBLE_DOWNCAST:‚<p>
This cast will always throw a ClassCastException.
The analysis believes it knows
the precise type of the value being cast, and the attempt to
downcast it to a subtype will always fail by throwing a ClassCastException.
</p>ZBUG
∞
*findbugs:GC_UNCHECKED_TYPE_IN_GENERIC_CALLÅ
findbugs!GC_UNCHECKED_TYPE_IN_GENERIC_CALL-Bad practice - Unchecked type in generic call"MAJOR*java2!GC_UNCHECKED_TYPE_IN_GENERIC_CALL:Ê<p> This call to a generic collection method passes an argument
    while compile type Object where a specific type from
    the generic type parameters is expected.
    Thus, neither the standard Java type system nor static analysis
    can provide useful information on whether the
    object being passed as a parameter is of an appropriate type.
    </p>Z
CODE_SMELL
Õ
-findbugs:IO_APPENDING_TO_OBJECT_OUTPUT_STREAMõ
findbugs$IO_APPENDING_TO_OBJECT_OUTPUT_STREAMACorrectness - Doomed attempt to append to an object output stream"MAJOR*java2$IO_APPENDING_TO_OBJECT_OUTPUT_STREAM:Ì<p>
     This code opens a file in append mode and then wraps the result in an object output stream.
     This won't allow you to append to an existing object output stream stored in a file. If you want to be
     able to append to an object output stream, you need to keep the object output stream open.
      </p>
      <p>The only situation in which opening a file in append mode and the writing an object output stream
      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset
      where the append started.
      </p>

      <p>
      TODO: example.
      </p>ZBUG
Ü
findbugs:MS_CANNOT_BE_FINALÊ
findbugsMS_CANNOT_BE_FINALMMalicious code - Field isn't final and can't be protected from malicious code"INFO*java2MS_CANNOT_BE_FINAL: <p>
 A mutable static field could be changed by malicious code or
        by accident from another package.
   Unfortunately, the way the field is used doesn't allow
   any easy fix to this problem.</p>Z
CODE_SMELL
Ñ
"findbugs:NP_ARGUMENT_MIGHT_BE_NULL›
findbugsNP_ARGUMENT_MIGHT_BE_NULL5Correctness - Method does not check for null argument"MAJOR*java2NP_ARGUMENT_MIGHT_BE_NULL:—<p>
    A parameter to this method has been identified as a value that should
    always be checked to see whether or not it is null, but it is being dereferenced
    without a preceding null check.
      </p>ZBUG
Ç
$findbugs:SE_NONFINAL_SERIALVERSIONIDŸ
findbugsSE_NONFINAL_SERIALVERSIONID+Bad practice - serialVersionUID isn't final"MAJOR*java2SE_NONFINAL_SERIALVERSIONID:Ã<p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;
  The field should be made final
   if it is intended to specify
   the version UID for purposes of serialization.</p>Z
CODE_SMELL
Ò
'findbugs:EQ_COMPARETO_USE_OBJECT_EQUALS≈
findbugsEQ_COMPARETO_USE_OBJECT_EQUALSDBad practice - Class defines compareTo(...) and uses Object.equals()"MAJOR*java2EQ_COMPARETO_USE_OBJECT_EQUALS:ô<p> This class defines a <code>compareTo(...)</code> method but inherits its
  <code>equals()</code> method from <code>java.lang.Object</code>.
    Generally, the value of compareTo should return zero if and only if
    equals returns true. If this is violated, weird and unpredictable
    failures will occur in classes such as PriorityQueue.
    In Java 5 the PriorityQueue.remove method uses the compareTo method,
    while in Java 6 it uses the equals method.</p>

<p>From the JavaDoc for the compareTo method in the Comparable interface:
<blockquote>
It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.
Generally speaking, any class that implements the Comparable interface and violates this condition
should clearly indicate this fact. The recommended language
is "Note: this class has a natural ordering that is inconsistent with equals."
</blockquote></p>Z
CODE_SMELL
¡
'findbugs:EQ_DONT_DEFINE_EQUALS_FOR_ENUMï
findbugsEQ_DONT_DEFINE_EQUALS_FOR_ENUM8Correctness - Covariant equals() method defined for enum"MAJOR*java2EQ_DONT_DEFINE_EQUALS_FOR_ENUM:¸<p> This class defines an enumeration, and equality on enumerations are defined
using object identity. Defining a covariant equals method for an enumeration
value is exceptionally bad practice, since it would likely result
in having two different enumeration values that compare as equals using
the covariant enum method, and as not equal when compared normally.
Don't do it.
</p>ZBUG
‹
!findbugs:QF_QUESTIONABLE_FOR_LOOP∂
findbugsQF_QUESTIONABLE_FOR_LOOP:Style - Complicated, subtle or wrong increment in for-loop"INFO*java2QF_QUESTIONABLE_FOR_LOOP:°<p>Are you sure this for loop is incrementing the correct variable?
   It appears that another variable is being initialized and checked
   by the for loop.
</p>Z
CODE_SMELL
®
.findbugs:DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVEı
findbugs%DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE4Multi-threading - Synchronization on boxed primitive"MAJOR*java2%DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE:“<p> The code synchronizes on a boxed primitive constant, such as an Integer.</p>
<pre><code>private static Integer count = 0;
...
synchronized(count) {
    count++;
}
...
</code></pre>
<p>Since Integer objects can be cached and shared,
this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness
and possible deadlock.</p>
<p>See CERT <a href="https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>ZBUG
Ü
findbugs:DM_STRING_TOSTRINGÊ
findbugsDM_STRING_TOSTRING:Performance - Method invokes toString() method on a String"MAJOR*java2DM_STRING_TOSTRING:d<p> Calling <code>String.toString()</code> is just a redundant operation.
  Just use the String.</p>ZBUG
´
findbugs:RC_REF_COMPARISONå
findbugsRC_REF_COMPARISON-Correctness - Suspicious reference comparison"MAJOR*java2RC_REF_COMPARISON:ò<p> This method compares two reference values using the == or != operator,
where the correct way to compare instances of this type is generally
with the equals() method.
It is possible to create distinct instances that are equal but do not compare as == since
they are different objects.
Examples of classes which should generally
not be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>ZBUG
û
findbugs:BIT_AND_ZZÜ
findbugs
BIT_AND_ZZ.Correctness - Check to see if ((...) & 0) == 0"MAJOR*java2
BIT_AND_ZZ:ü<p> This method compares an expression of the form <code>(e &amp; 0)</code> to 0,
which will always compare equal.
This may indicate a logic error or typo.</p>ZBUG
À
$findbugs:DM_BOXED_PRIMITIVE_TOSTRING¢
findbugsDM_BOXED_PRIMITIVE_TOSTRINGFPerformance - Method allocates a boxed primitive just to call toString"MAJOR*java2DM_BOXED_PRIMITIVE_TOSTRING:Å<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static
  form of toString which takes the primitive value. So,</p>
  <table>
     <tr><th>Replace...</th><th>With this...</th></tr>
     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>
     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>
     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>
     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>
     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>
     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>
     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>
  </table>ZBUG
À
.findbugs:SIC_INNER_SHOULD_BE_STATIC_NEEDS_THISò
findbugs%SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS;Performance - Could be refactored into a static inner class"MAJOR*java2%SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS:Ó<p> This class is an inner class, but does not use its embedded reference
  to the object which created it except during construction of the
inner object.&nbsp; This reference makes the instances
  of the class larger, and may keep the reference to the creator object
  alive longer than necessary.&nbsp; If possible, the class should be
  made into a <em>static</em> inner class. Since the reference to the
   outer object is required during construction of the inner instance,
   the inner class will need to be refactored so as to
   pass a reference to the outer instance to the constructor
   for the inner class.</p>ZBUG
ˇ
'findbugs:EQ_GETCLASS_AND_CLASS_CONSTANT”
findbugsEQ_GETCLASS_AND_CLASS_CONSTANT/Bad practice - equals method fails for subtypes"MAJOR*java2EQ_GETCLASS_AND_CLASS_CONSTANT:º<p> This class has an equals method that will be broken if it is inherited by subclasses.
It compares a class literal with the class of the argument (e.g., in class <code>Foo</code>
it might check if <code>Foo.class == o.getClass()</code>).
It is better to check if <code>this.getClass() == o.getClass()</code>.
</p>Z
CODE_SMELL
‹
$findbugs:NP_NONNULL_RETURN_VIOLATION≥
findbugsNP_NONNULL_RETURN_VIOLATION>Correctness - Method may return null, but is declared @Nonnull"MAJOR*java2NP_NONNULL_RETURN_VIOLATION:ö<p>
      This method may return a null value, but the method (or a superclass method
      which it overrides) is declared to return @Nonnull.
      </p>ZBUG
Ì
&findbugs:NP_TOSTRING_COULD_RETURN_NULL¬
findbugsNP_TOSTRING_COULD_RETURN_NULL.Bad practice - toString method may return null"MAJOR*java2NP_TOSTRING_COULD_RETURN_NULL:Æ<p>
    This toString method seems to return null in some circumstances. A liberal reading of the
    spec could be interpreted as allowing this, but it is probably a bad idea and could cause
    other code to break. Return the empty string or some other appropriate string rather than null.
      </p>Z
CODE_SMELL
≈
/findbugs:RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECTë
findbugs&RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT=Style - Return value of method without side effect is ignored"INFO*java2&RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT:›<p>This code calls a method and ignores the return value. However our analysis shows that
the method (including its implementations in subclasses if any) does not produce any effect
other than return value. Thus this call can be removed.
</p>
<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.
Common false-positive cases include:</p>
<p>- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.</p>
<p>- The method is called to trigger the class loading which may have a side effect.</p>
<p>- The method is called just to get some exception.</p>
<p>If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation
to instruct SpotBugs that ignoring the return value of this method is acceptable.
</p>Z
CODE_SMELL
î
"findbugs:ICAST_IDIV_CAST_TO_DOUBLEÌ
findbugsICAST_IDIV_CAST_TO_DOUBLE8Style - Integral division result cast to double or float"INFO*java2ICAST_IDIV_CAST_TO_DOUBLE:ÿ<p>
This code casts the result of an integral division (e.g., int or long division)
operation to double or
float.
Doing division on integers truncates the result
to the integer value closest to zero.  The fact that the result
was cast to double suggests that this precision should have been retained.
What was probably meant was to cast one or both of the operands to
double <em>before</em> performing the division.  Here is an example:
</p>
<pre><code>int x = 2;
int y = 5;
// Wrong: yields result 0.0
double value1 = x / y;

// Right: yields result 0.4
double value2 = x / (double) y;
</code></pre>Z
CODE_SMELL
¡
)findbugs:NM_SAME_SIMPLE_NAME_AS_INTERFACEì
findbugs NM_SAME_SIMPLE_NAME_AS_INTERFACEPBad practice - Class names shouldn't shadow simple name of implemented interface"MAJOR*java2 NM_SAME_SIMPLE_NAME_AS_INTERFACE:◊<p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except
that the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).
This can be exceptionally confusing, create lots of situations in which you have to look at import statements
to resolve references and creates many
opportunities to accidentally define methods that do not override methods in their superclasses.
</p>Z
CODE_SMELL
•
findbugs:SE_BAD_FIELD_STOREÖ
findbugsSE_BAD_FIELD_STOREXBad practice - Non-serializable value stored into instance field of a serializable class"MAJOR*java2SE_BAD_FIELD_STORE:^<p> A non-serializable value is stored into a non-transient field
of a serializable class.</p>Z
CODE_SMELL
†
&findbugs:EC_INCOMPATIBLE_ARRAY_COMPAREı
findbugsEC_INCOMPATIBLE_ARRAY_COMPARE=Correctness - equals(...) used to compare incompatible arrays"MAJOR*java2EC_INCOMPATIBLE_ARRAY_COMPARE:Ÿ<p>
This method invokes the .equals(Object o) to compare two arrays, but the arrays of
of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).
They will never be equal. In addition, when equals(...) is used to compare arrays it
only checks to see if they are the same array, and ignores the contents of the arrays.
</p>ZBUG
⁄	
=findbugs:IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHODò	
findbugs4IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHODOStyle - Potentially ambiguous invocation of either an inherited or outer method"INFO*java24IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD:∂<p>
An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.
For example, you invoke <code>foo(17)</code>, which is defined in both a superclass and in an outer method.
By the Java semantics,
it will be resolved to invoke the inherited method, but this may not be what
you intend.
</p>
<p>If you really intend to invoke the inherited method,
invoke it by invoking the method on super (e.g., invoke super.foo(17)), and
thus it will be clear to other readers of your code and to SpotBugs
that you want to invoke the inherited method, not the method in the outer class.
</p>
<p>If you call <code>this.foo(17)</code>, then the inherited method will be invoked. However, since SpotBugs only looks at
classfiles, it
can't tell the difference between an invocation of <code>this.foo(17)</code> and <code>foo(17)</code>, it will still
complain about a potential ambiguous invocation.
</p>Z
CODE_SMELL
≤
&findbugs:OS_OPEN_STREAM_EXCEPTION_PATHá
findbugsOS_OPEN_STREAM_EXCEPTION_PATH;Bad practice - Method may fail to close stream on exception"MAJOR*java2OS_OPEN_STREAM_EXCEPTION_PATH:Ê<p> The method creates an IO stream object, does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
it on all possible exception paths out of the method.&nbsp;
This may result in a file descriptor leak.&nbsp; It is generally a good
idea to use a <code>finally</code> block to ensure that streams are
closed.</p>Z
CODE_SMELL
≈
<findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINKÑ
findbugs3TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINKHStyle - Value required to not have type qualifier, but marked as unknown"INFO*java23TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK:´<p>
      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but
    there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.
    Either the usage or the annotation is incorrect.
      </p>Z
CODE_SMELL
˜
"findbugs:DLS_OVERWRITTEN_INCREMENT–
findbugsDLS_OVERWRITTEN_INCREMENT#Correctness - Overwritten increment"MAJOR*java2DLS_OVERWRITTEN_INCREMENT:÷<p>
The code performs an increment operation (e.g., <code>i++</code>) and then
immediately overwrites it. For example, <code>i = i++</code> immediately
overwrites the incremented value with the original value.
</p>ZBUG
≥
findbugs:EQ_ALWAYS_TRUEó
findbugsEQ_ALWAYS_TRUE/Correctness - equals method always returns true"MAJOR*java2EQ_ALWAYS_TRUE:ß<p> This class defines an equals method that always returns true. This is imaginative, but not very smart.
Plus, it means that the equals method is not symmetric.
</p>ZBUG
∏
8findbugs:NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR˚
findbugs/NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR/Correctness - Non-null field is not initialized"MAJOR*java2/NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR:…<p> The field is marked as non-null, but isn't written to by the constructor.
    The field might be initialized elsewhere during constructor, or might always
    be initialized before use.
       </p>ZBUG
ï
findbugs:NP_NULL_INSTANCEOFı
findbugsNP_NULL_INSTANCEOFQCorrectness - A known null value is checked to see if it is an instance of a type"MAJOR*java2NP_NULL_INSTANCEOF:€<p>
This instanceof test will always return false, since the value being checked is guaranteed to be null.
Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
</p>ZBUG

findbugs:DM_USELESS_THREAD—
findbugsDM_USELESS_THREADIMulti-threading - A thread was created using the default empty run method"MAJOR*java2DM_USELESS_THREAD:¡<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or
  by passing a Runnable object. This thread, then, does nothing but waste time.
</p>ZBUG
⁄
)findbugs:EC_UNRELATED_CLASS_AND_INTERFACE¨
findbugs EC_UNRELATED_CLASS_AND_INTERFACEFCorrectness - Call to equals() comparing unrelated class and interface"MAJOR*java2 EC_UNRELATED_CLASS_AND_INTERFACE:Å<p>
This method calls equals(Object) on two references,  one of which is a class
and the other an interface, where neither the class nor any of its
non-abstract subclasses implement the interface.
Therefore, the objects being compared
are unlikely to be members of the same class at runtime
(unless some application classes were not analyzed, or dynamic class
loading can occur at runtime).
According to the contract of equals(),
objects of different
classes should always compare as unequal; therefore, according to the
contract defined by java.lang.Object.equals(Object),
the result of this comparison will always be false at runtime.
</p>ZBUG
≥
findbugs:FI_MISSING_SUPER_CALLê
findbugsFI_MISSING_SUPER_CALL;Bad practice - Finalizer does not call superclass finalizer"MAJOR*java2FI_MISSING_SUPER_CALL:ˇ<p> This <code>finalize()</code> method does not make a call to its
  superclass's <code>finalize()</code> method.&nbsp; So, any finalizer
  actions defined for the superclass will not be performed.&nbsp;
  Add a call to <code>super.finalize()</code>.</p>Z
CODE_SMELL
„
findbugs:EC_BAD_ARRAY_COMPARE¡
findbugsEC_BAD_ARRAY_COMPAREKCorrectness - Invocation of equals() on an array, which is equivalent to =="MAJOR*java2EC_BAD_ARRAY_COMPARE:©<p>
This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals
method of Object, calling equals on an array is the same as comparing their addresses. To compare the
contents of the arrays, use <code>java.util.Arrays.equals(Object[], Object[])</code>.
To compare the addresses of the arrays, it would be
less confusing to explicitly check pointer equality using <code>==</code>.
</p>ZBUG
Ä
findbugs:HE_EQUALS_NO_HASHCODE›
findbugsHE_EQUALS_NO_HASHCODE8Bad practice - Class defines equals() but not hashCode()"MAJOR*java2HE_EQUALS_NO_HASHCODE:œ<p> This class overrides <code>equals(Object)</code>, but does not
  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the
  invariant that equal objects must have equal hashcodes.</p>Z
CODE_SMELL
ø
findbugs:CO_ABSTRACT_SELF°
findbugsCO_ABSTRACT_SELFBBad practice - Abstract class defines covariant compareTo() method"MAJOR*java2CO_ABSTRACT_SELF:ì<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;
  To correctly override the <code>compareTo()</code> method in the
  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>
  must have type <code>java.lang.Object</code>.</p>Z
CODE_SMELL

findbugs:EC_ARRAY_AND_NONARRAYÕ
findbugsEC_ARRAY_AND_NONARRAY9Correctness - equals() used to compare array and nonarray"MAJOR*java2EC_ARRAY_AND_NONARRAY:≈<p>
This method invokes the .equals(Object o) to compare an array and a reference that doesn't seem
to be an array. If things being compared are of different types, they are guaranteed to be unequal
and the comparison is almost certainly an error. Even if they are both arrays, the equals method
on arrays only determines of the two arrays are the same object.
To compare the
contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).
</p>ZBUG
≠
(findbugs:HE_INHERITS_EQUALS_USE_HASHCODEÄ
findbugsHE_INHERITS_EQUALS_USE_HASHCODEABad practice - Class inherits equals() and uses Object.hashCode()"MAJOR*java2HE_INHERITS_EQUALS_USE_HASHCODE:’<p> This class inherits <code>equals(Object)</code> from an abstract
  superclass, and <code>hashCode()</code> from
<code>java.lang.Object</code> (which returns
  the identity hash code, an arbitrary value assigned to the object
  by the VM).&nbsp; Therefore, the class is very likely to violate the
  invariant that equal objects must have equal hashcodes.</p>

  <p>If you don't want to define a hashCode method, and/or don't
   believe the object will ever be put into a HashMap/Hashtable,
   define the <code>hashCode()</code> method
   to throw <code>UnsupportedOperationException</code>.</p>Z
CODE_SMELL
è
#findbugs:NP_CLONE_COULD_RETURN_NULLÁ
findbugsNP_CLONE_COULD_RETURN_NULL+Bad practice - Clone method may return null"MAJOR*java2NP_CLONE_COULD_RETURN_NULL:‹<p>
    This clone method seems to return null in some circumstances, but clone is never
    allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError
    instead.
      </p>Z
CODE_SMELL
¸
#findbugs:SE_NONLONG_SERIALVERSIONID‘
findbugsSE_NONLONG_SERIALVERSIONID*Bad practice - serialVersionUID isn't long"MAJOR*java2SE_NONLONG_SERIALVERSIONID: <p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;
  The field should be made long
   if it is intended to specify
   the version UID for purposes of serialization.</p>Z
CODE_SMELL
‰
!findbugs:SQL_BAD_RESULTSET_ACCESSæ
findbugsSQL_BAD_RESULTSET_ACCESSGCorrectness - Method attempts to access a result set field with index 0"MAJOR*java2SQL_BAD_RESULTSET_ACCESS:¢<p> A call to getXXX or updateXXX methods of a result set was made where the
field index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>ZBUG
Ÿ
findbugs:NN_NAKED_NOTIFYº
findbugsNN_NAKED_NOTIFYMulti-threading - Naked notify"MAJOR*java2NN_NAKED_NOTIFY:€<p> A call to <code>notify()</code> or <code>notifyAll()</code>
  was made without any (apparent) accompanying
  modification to mutable object state.&nbsp; In general, calling a notify
  method on a monitor is done because some condition another thread is
  waiting for has become true.&nbsp; However, for the condition to be meaningful,
  it must involve a heap object that is visible to both threads.</p>

  <p> This bug does not necessarily indicate an error, since the change to
  mutable object state may have taken place in a method which then called
  the method containing the notification.</p>ZBUG
ª
-findbugs:SE_COMPARATOR_SHOULD_BE_SERIALIZABLEâ
findbugs$SE_COMPARATOR_SHOULD_BE_SERIALIZABLE8Bad practice - Comparator doesn't implement Serializable"MAJOR*java2$SE_COMPARATOR_SHOULD_BE_SERIALIZABLE:›<p> This class implements the <code>Comparator</code> interface. You
should consider whether or not it should also implement the <code>Serializable</code>
interface. If a comparator is used to construct an ordered collection
such as a <code>TreeMap</code>, then the <code>TreeMap</code>
will be serializable only if the comparator is also serializable.
As most comparators have little or no state, making them serializable
is generally easy and good defensive programming.
</p>Z
CODE_SMELL

!findbugs:UCF_USELESS_CONTROL_FLOW 
findbugsUCF_USELESS_CONTROL_FLOWStyle - Useless control flow"INFO*java2UCF_USELESS_CONTROL_FLOW:”<p> This method contains a useless control flow statement, where
control flow continues onto the same place regardless of whether or not
the branch is taken. For example,
this is caused by having an empty statement
block for an <code>if</code> statement:</p>
<pre><code>if (argv.length == 0) {
    // TODO: handle this case
}
</code></pre>Z
CODE_SMELL
Í
findbugs:DMI_COLLECTION_OF_URLS∆
findbugsDMI_COLLECTION_OF_URLS;Performance - Maps and sets of URLs can be performance hogs"MAJOR*java2DMI_COLLECTION_OF_URLS:∫<p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode
method of URL perform domain name resolution, this can result in a big performance hit.
See <a href="http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.
Consider using <code>java.net.URI</code> instead.
   </p>ZBUG
ª
2findbugs:SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELDÑ
findbugs)SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELDFCorrectness - Self assignment of local rather than assignment to field"MAJOR*java2)SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD:«<p> This method contains a self assignment of a local variable, and there
is a field with an identical name.
assignment appears to have been ; e.g.</p>
<pre><code>    int foo;
    public void setFoo(int foo) {
        foo = foo;
    }
</code></pre>
<p>The assignment is useless. Did you mean to assign to the field instead?</p>ZBUG
€
3findbugs:VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG£
findbugs*VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG`Correctness - Primitive array passed to function expecting a variable number of object arguments"MAJOR*java2*VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG: <p>
This code passes a primitive array to a function that takes a variable number of object arguments.
This creates an array of length one to hold the primitive array and passes it to the function.
</p>ZBUG
ï
findbugs:BC_NULL_INSTANCEOFı
findbugsBC_NULL_INSTANCEOFQCorrectness - A known null value is checked to see if it is an instance of a type"MAJOR*java2BC_NULL_INSTANCEOF:€<p>
This instanceof test will always return false, since the value being checked is guaranteed to be null.
Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
</p>ZBUG
ª
&findbugs:IIL_PREPARE_STATEMENT_IN_LOOPê
findbugsIIL_PREPARE_STATEMENT_IN_LOOP5Performance - Method calls prepareStatement in a loop"MAJOR*java2IIL_PREPARE_STATEMENT_IN_LOOP:¸<p> The method calls Connection.prepareStatement inside the loop passing the constant arguments.
If the PreparedStatement should be executed several times there's no reason to recreate it for each loop iteration.
Move this call outside of the loop.</p>ZBUG
¶
1findbugs:SW_SWING_METHODS_INVOKED_IN_SWING_THREAD
findbugs(SW_SWING_METHODS_INVOKED_IN_SWING_THREADHBad practice - Certain swing methods needs to be invoked in Swing thread"MAJOR*java2(SW_SWING_METHODS_INVOKED_IN_SWING_THREAD:¨<p>(<a href="http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html">From JDC Tech Tip</a>): The Swing methods
show(), setVisible(), and pack() will create the associated peer for the frame.
With the creation of the peer, the system creates the event dispatch thread.
This makes things problematic because the event dispatch thread could be notifying
listeners while pack and validate are still processing. This situation could result in
two threads going through the Swing component-based GUI -- it's a serious flaw that
could result in deadlocks or other related threading issues. A pack call causes
components to be realized. As they are being realized (that is, not necessarily
visible), they could trigger listener notification on the event dispatch thread.</p>Z
CODE_SMELL
ö
findbugs:RANGE_ARRAY_INDEX˚
findbugsRANGE_ARRAY_INDEX*Correctness - Array index is out of bounds"CRITICAL*java2RANGE_ARRAY_INDEX:á<p> Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.</p>ZBUG
©
1findbugs:STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCEÛ
findbugs(STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE)Multi-threading - Call to static Calendar"MAJOR*java2(STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE:’<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.
The detector has found a call to an instance of Calendar that has been obtained via a static
field. This looks suspicious.</p>
<p>For more information on this see <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579">JDK Bug #6231579</a>
and <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997">JDK Bug #6178997</a>.</p>ZBUG
Ê
.findbugs:CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE≥
findbugs%CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLEDBad practice - Class defines clone() but doesn't implement Cloneable"MAJOR*java2%CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE:˘<p> This class defines a clone() method but the class doesn't implement Cloneable.
There are some situations in which this is OK (e.g., you want to control how subclasses
can clone themselves), but just make sure that this is what you intended.
</p>Z
CODE_SMELL
Ä
findbugs:DM_EXITÎ
findbugsDM_EXIT.Bad practice - Method invokes System.exit(...)"MAJOR*java2DM_EXIT:É<p> Invoking System.exit shuts down the entire Java virtual machine. This
   should only been done when it is appropriate. Such calls make it
   hard or impossible for your code to be invoked by other code.
   Consider throwing a RuntimeException instead.</p>Z
CODE_SMELL
¶
&findbugs:HE_HASHCODE_USE_OBJECT_EQUALS˚
findbugsHE_HASHCODE_USE_OBJECT_EQUALS@Bad practice - Class defines hashCode() and uses Object.equals()"MAJOR*java2HE_HASHCODE_USE_OBJECT_EQUALS:’<p> This class defines a <code>hashCode()</code> method but inherits its
  <code>equals()</code> method from <code>java.lang.Object</code>
  (which defines equality by comparing object references).&nbsp; Although
  this will probably satisfy the contract that equal objects must have
  equal hashcodes, it is probably not what was intended by overriding
  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>
  implies that the object's identity is based on criteria more complicated
  than simple reference equality.)</p>
<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,
the recommended <code>hashCode</code> implementation to use is:</p>
<pre><code>public int hashCode() {
    assert false : "hashCode not designed";
    return 42; // any arbitrary constant will do
}
</code></pre>Z
CODE_SMELL
Ø
findbugs:IJU_SUITE_NOT_STATICç
findbugsIJU_SUITE_NOT_STATIC;Correctness - TestCase implements a non-static suite method"MAJOR*java2IJU_SUITE_NOT_STATIC:Ö<p> Class is a JUnit TestCase and implements the suite() method.
 The suite method should be declared as being static, but isn't.</p>ZBUG
•
"findbugs:BIT_SIGNED_CHECK_HIGH_BIT˛
findbugsBIT_SIGNED_CHECK_HIGH_BITKCorrectness - Check for sign of bitwise operation involving negative number"MAJOR*java2BIT_SIGNED_CHECK_HIGH_BIT:‹<p> This method compares a bitwise expression such as
<code>((val &amp; CONSTANT) &gt; 0)</code> where CONSTANT is the negative number.
Using bit arithmetic and then comparing with the greater than operator can
lead to unexpected results. This comparison is unlikely to work as expected. The good practice is
to use '!= 0' instead of '&gt; 0'.
</p>ZBUG
Å
findbugs:INT_BAD_REM_BY_1„
findbugsINT_BAD_REM_BY_1"Style - Integer remainder modulo 1"INFO*java2INT_BAD_REM_BY_1:w<p> Any expression (exp % 1) is guaranteed to always return zero.
Did you mean (exp &amp; 1) or (exp % 2) instead?
</p>Z
CODE_SMELL
ô
&findbugs:RpC_REPEATED_CONDITIONAL_TESTÓ
findbugsRpC_REPEATED_CONDITIONAL_TEST(Correctness - Repeated conditional tests"MAJOR*java2RpC_REPEATED_CONDITIONAL_TEST:Á<p>The code contains a conditional test is performed twice, one right after the other
(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else
(e.g., <code>x == 0 || y == 0</code>).
</p>ZBUG
Ù
:findbugs:BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCIONµ
findbugs1BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCIONQPerformance - Primitive value is boxed then unboxed to perform primitive coercion"MAJOR*java21BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION:›<p>A primitive boxed value constructed and then immediately converted into a different primitive type
(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>ZBUG
ô
/findbugs:DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLEÂ
findbugs&DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLEQCorrectness - BigDecimal constructed from double that isn't represented precisely"MAJOR*java2&DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE:£<p>
This code creates a BigDecimal from a double value that doesn't translate well to a
decimal number.
For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.
You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation
of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).
</p>ZBUG
Î
#findbugs:DP_DO_INSIDE_DO_PRIVILEGED√
findbugsDP_DO_INSIDE_DO_PRIVILEGEDZMalicious code - Method invoked that should be only be invoked inside a doPrivileged block"INFO*java2DP_DO_INSIDE_DO_PRIVILEGED:ä<p> This code invokes a method that requires a security permission check.
  If this code will be granted security permissions, but might be invoked by code that does not
  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>Z
CODE_SMELL
π
%findbugs:JLM_JSR166_LOCK_MONITORENTERè
findbugsJLM_JSR166_LOCK_MONITORENTER3Multi-threading - Synchronization performed on Lock"MAJOR*java2JLM_JSR166_LOCK_MONITORENTER:ˇ<p> This method performs synchronization an object that implements
java.util.concurrent.locks.Lock. Such an object is locked/unlocked
using
<code>acquire()</code>/<code>release()</code> rather
than using the <code>synchronized (...)</code> construct.
</p>ZBUG
é
#findbugs:PT_RELATIVE_PATH_TRAVERSALÊ
findbugsPT_RELATIVE_PATH_TRAVERSAL-Security - Relative path traversal in servlet"MAJOR*java2PT_RELATIVE_PATH_TRAVERSAL:÷<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory.

See <a href="http://cwe.mitre.org/data/definitions/23.html">http://cwe.mitre.org/data/definitions/23.html</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of relative path traversal.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more
vulnerabilities that SpotBugs doesn't report. If you are concerned about relative path traversal, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
€
findbugs:RU_INVOKE_RUN¿
findbugsRU_INVOKE_RUNMMulti-threading - Invokes run on a thread (did you mean to start it instead?)"MAJOR*java2RU_INVOKE_RUN:¥<p> This method explicitly invokes <code>run()</code> on an object.&nbsp;
  In general, classes implement the <code>Runnable</code> interface because
  they are going to have their <code>run()</code> method invoked in a new thread,
  in which case <code>Thread.start()</code> is the right method to call.</p>ZBUG
ê
findbugs:TLW_TWO_LOCK_WAITÒ
findbugsTLW_TWO_LOCK_WAIT*Multi-threading - Wait with two locks held"MAJOR*java2TLW_TWO_LOCK_WAIT:Ä<p> Waiting on a monitor while two locks are held may cause
  deadlock.
   &nbsp;
   Performing a wait only releases the lock on the object
   being waited on, not any other locks.
   &nbsp;
This not necessarily a bug, but is worth examining
  closely.</p>ZBUG
ﬂ
findbugs:IS_FIELD_NOT_GUARDEDΩ
findbugsIS_FIELD_NOT_GUARDED=Multi-threading - Field not guarded against concurrent access"MAJOR*java2IS_FIELD_NOT_GUARDED:≥<p> This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy,
but can be accessed in a way that seems to violate those annotations.</p>ZBUG
ê
findbugs:MS_FINAL_PKGPROTECTÔ
findbugsMS_FINAL_PKGPROTECTAMalicious code - Field should be both final and package protected"INFO*java2MS_FINAL_PKGPROTECT:›<p>
   A mutable static field could be changed by malicious code or
        by accident from another package.
        The field could be made package protected and/or made final
   to avoid
        this vulnerability.</p>Z
CODE_SMELL
À
findbugs:SE_BAD_FIELD±
findbugsSE_BAD_FIELDRBad practice - Non-transient non-serializable instance field in serializable class"MAJOR*java2SE_BAD_FIELD:õ<p> This Serializable class defines a non-primitive instance field which is neither transient,
Serializable, or <code>java.lang.Object</code>, and does not appear to implement
the <code>Externalizable</code> interface or the
<code>readObject()</code> and <code>writeObject()</code> methods.&nbsp;
Objects of this class will not be deserialized correctly if a non-Serializable
object is stored in this field.</p>Z
CODE_SMELL
Ü
,findbugs:BC_UNCONFIRMED_CAST_OF_RETURN_VALUE’
findbugs#BC_UNCONFIRMED_CAST_OF_RETURN_VALUE>Style - Unchecked/unconfirmed cast of return value from method"INFO*java2#BC_UNCONFIRMED_CAST_OF_RETURN_VALUE:¶<p>
This code performs an unchecked cast of the return value of a method.
The code might be calling the method in such a way that the cast is guaranteed to be
safe, but SpotBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this
cast will not fail.
</p>Z
CODE_SMELL
Ù
+findbugs:SI_INSTANCE_BEFORE_FINALS_ASSIGNEDƒ
findbugs"SI_INSTANCE_BEFORE_FINALS_ASSIGNEDZBad practice - Static initializer creates instance before all static final fields assigned"MAJOR*java2"SI_INSTANCE_BEFORE_FINALS_ASSIGNED:{<p> The class's static initializer creates an instance of the class
before all of the static final fields are assigned.</p>Z
CODE_SMELL
Ñ
findbugs:SKIPPED_CLASS_TOO_BIG·
findbugsSKIPPED_CLASS_TOO_BIG)Experimental - Class too big for analysis"INFO*java2SKIPPED_CLASS_TOO_BIG:d<p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.
</p>Z
CODE_SMELL
—
%findbugs:BOA_BADLY_OVERRIDDEN_ADAPTERß
findbugsBOA_BADLY_OVERRIDDEN_ADAPTERQCorrectness - Class overrides a method implemented in super class Adapter wrongly"MAJOR*java2BOA_BADLY_OVERRIDDEN_ADAPTER:˘<p> This method overrides a method found in a parent class, where that class is an Adapter that implements
a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not
get called when the event occurs.</p>ZBUG
©
&findbugs:BX_BOXING_IMMEDIATELY_UNBOXED˛
findbugsBX_BOXING_IMMEDIATELY_UNBOXEDCPerformance - Primitive value is boxed and then immediately unboxed"MAJOR*java2BX_BOXING_IMMEDIATELY_UNBOXED:‹<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual
    boxing in a place where an unboxed value is required, thus forcing the compiler
to immediately undo the work of the boxing.
</p>ZBUG
˝
)findbugs:DMI_VACUOUS_SELF_COLLECTION_CALLœ
findbugs DMI_VACUOUS_SELF_COLLECTION_CALL)Correctness - Vacuous call to collections"MAJOR*java2 DMI_VACUOUS_SELF_COLLECTION_CALL:¡<p> This call doesn't make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should
always be true, and <code>c.retainAll(c)</code> should have no effect.
    </p>ZBUG
ˇ
*findbugs:UI_INHERITANCE_UNSAFE_GETRESOURCE–
findbugs!UI_INHERITANCE_UNSAFE_GETRESOURCEFBad practice - Usage of GetResource may be unsafe if class is extended"MAJOR*java2!UI_INHERITANCE_UNSAFE_GETRESOURCE:ú<p>Calling <code>this.getClass().getResource(...)</code> could give
results other than expected if this class is extended by a class in
another package.</p>Z
CODE_SMELL
¡
'findbugs:NP_NULL_PARAM_DEREF_NONVIRTUALï
findbugsNP_NULL_PARAM_DEREF_NONVIRTUALHCorrectness - Non-virtual method call passes null for non-null parameter"MAJOR*java2NP_NULL_PARAM_DEREF_NONVIRTUAL:Ï<p>
      A possibly-null value is passed to a non-null method parameter.
    Either the parameter is annotated as a parameter that should
    always be non-null, or analysis has shown that it will always be
    dereferenced.
      </p>ZBUG
⁄
5findbugs:RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE†
findbugs,RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUECCorrectness - Code checks for specific values returned by compareTo"MAJOR*java2,RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE:‡<p> This code invoked a compareTo or compare method, and checks to see if the return value is a specific value,
such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific
non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them
will return other values.ZBUG
ì
7findbugs:DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE◊
findbugs.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE;Multi-threading - Synchronization on boxed primitive values"MAJOR*java2.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE:õ<p> The code synchronizes on an apparently unshared boxed primitive,
such as an Integer.</p>
<pre><code>private static final Integer fileLock = new Integer(1);
...
synchronized(fileLock) {
    .. do something ..
}
...
</code></pre>
<p>It would be much better, in this code, to redeclare fileLock as</p>
<pre><code>private static final Object fileLock = new Object();
</code></pre>
<p>
The existing code might be OK, but it is confusing and a
future refactoring, such as the "Remove Boxing" refactoring in IntelliJ,
might replace this with the use of an interned Integer object shared
throughout the JVM, leading to very confusing behavior and potential deadlock.
</p>ZBUG
ü
/findbugs:DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INTÎ
findbugs&DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT7Correctness - Double.longBitsToDouble invoked on an int"MAJOR*java2&DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT:√<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed
    as an argument. This almost certainly is not intended and is unlikely
    to give the intended result.
</p>ZBUG
€
!findbugs:EQ_COMPARING_CLASS_NAMESµ
findbugsEQ_COMPARING_CLASS_NAMESJCorrectness - equals method compares class names rather than class objects"MAJOR*java2EQ_COMPARING_CLASS_NAMES:ñ<p> This method checks to see if two objects are the same class by checking to see if the names
of their classes are equal. You can have different classes with the same name if they are loaded by
different class loaders. Just check to see if the class objects are the same.
</p>ZBUG
ì
1findbugs:DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY›
findbugs(DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY8Correctness - Invocation of toString on an unnamed array"MAJOR*java2(DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY:∞<p>
The code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result
such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable
String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.
</p>ZBUG
„
findbugs:NP_CLOSING_NULL∆
findbugsNP_CLOSING_NULL<Correctness - close() invoked on a value that is always null"MAJOR*java2NP_CLOSING_NULL:«<p> close() is being invoked on a value that is always null. If this statement is executed,
a null pointer exception will occur. But the big risk here you never close
something that should be closed.ZBUG
¿
.findbugs:RCN_REDUNDANT_CHECKED_NULL_COMPARISONç
findbugs%RCN_REDUNDANT_CHECKED_NULL_COMPARISONGExperimental - Redundant comparison to null of previously checked value"INFO*java2%RCN_REDUNDANT_CHECKED_NULL_COMPARISON:—<p> This method contains a redundant comparison of a reference value
to null. Two types of redundant comparison are reported:
</p>
<ul>
<li> Both values compared are definitely null</li>
<li> One value is definitely null and the other is definitely not null</li>
</ul>

<p> This particular warning generally indicates that a
value known not to be null was checked against null.
While the check is not necessary, it may simply be a case
of defensive programming.</p>Z
CODE_SMELL
â
2findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK“
findbugs)TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINKnCorrectness - Value that might not carry a type qualifier is always used in a way requires that type qualifier"MAJOR*java2)TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK:Ì<p>
      A value that is annotated as possibility not being an instance of
    the values denoted by the type qualifier, and the value is guaranteed to be used
    in a way that requires values denoted by that type qualifier.
      </p>ZBUG
™
findbugs:EC_NULL_ARGë
findbugsEC_NULL_ARG"Correctness - Call to equals(null)"MAJOR*java2EC_NULL_ARG:¥<p> This method calls equals(Object), passing a null value as
the argument. According to the contract of the equals() method,
this call should always return <code>false</code>.</p>ZBUG
ë
findbugs:EI_EXPOSE_STATIC_REP2Ó
findbugsEI_EXPOSE_STATIC_REP2aMalicious code - May expose internal static state by storing a mutable object into a static field"INFO*java2EI_EXPOSE_STATIC_REP2:∏<p> This code stores a reference to an externally mutable object into a static
   field.
   If unchecked changes to
   the mutable object would compromise security or other
   important properties, you will need to do something different.
  Storing a copy of the object is better approach in many situations.</p>Z
CODE_SMELL
Ω
findbugs:PS_PUBLIC_SEMAPHORESõ
findbugsPS_PUBLIC_SEMAPHORESLStyle - Class exposes synchronization and semaphores in its public interface"INFO*java2PS_PUBLIC_SEMAPHORES:¸<p>
    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this
    reference). Client classes that use this class, may, in addition, use an instance of this class
    as a synchronizing object. Because two classes are using the same object for synchronization,
    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on
    a public reference. Consider using a internal private member variable to control synchronization.
    </p>Z
CODE_SMELL
ó
findbugs:BC_IMPOSSIBLE_CAST˜
findbugsBC_IMPOSSIBLE_CASTCorrectness - Impossible cast"CRITICAL*java2BC_IMPOSSIBLE_CAST:é<p>
This cast will always throw a ClassCastException.
SpotBugs tracks type information from instanceof checks,
and also uses more precise information about the types
of values returned from methods and loaded from fields.
Thus, it may have more precise information that just
the declared type of a variable, and can use this to determine
that a cast will always throw an exception at runtime.

</p>ZBUG
´
findbugs:EQ_ABSTRACT_SELFç
findbugsEQ_ABSTRACT_SELF?Bad practice - Abstract class defines covariant equals() method"MAJOR*java2EQ_ABSTRACT_SELF:Ç<p> This class defines a covariant version of <code>equals()</code>.&nbsp;
  To correctly override the <code>equals()</code> method in
  <code>java.lang.Object</code>, the parameter of <code>equals()</code>
  must have type <code>java.lang.Object</code>.</p>Z
CODE_SMELL
…
&findbugs:IIO_INEFFICIENT_LAST_INDEX_OFû
findbugsIIO_INEFFICIENT_LAST_INDEX_OF;Performance - Inefficient use of String.lastIndexOf(String)"MAJOR*java2IIO_INEFFICIENT_LAST_INDEX_OF:Ñ<p> This code passes a constant string of length 1 to String.lastIndexOf().
It is more efficient to use the integer implementations of String.lastIndexOf().
f. e. call <code>myString.lastIndexOf('.')</code> instead of <code>myString.lastIndexOf(".")</code></p>ZBUG
ö
findbugs:SF_SWITCH_NO_DEFAULT¯
findbugsSF_SWITCH_NO_DEFAULT<Style - Switch statement found where default case is missing"INFO*java2SF_SWITCH_NO_DEFAULT:È<p> This method contains a switch statement where default case is missing.
  Usually you need to provide a default case.</p>
  <p>Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if
the default case is at the end of the switch statement and the switch statement doesn't contain break statements for other
cases.Z
CODE_SMELL
ˆ
!findbugs:ML_SYNC_ON_UPDATED_FIELD–
findbugsML_SYNC_ON_UPDATED_FIELD9Multi-threading - Method synchronizes on an updated field"MAJOR*java2ML_SYNC_ON_UPDATED_FIELD:¬<p> This method synchronizes on an object
   referenced from a mutable field.
   This is unlikely to have useful semantics, since different
threads may be synchronizing on different objects.</p>ZBUG
˛
0findbugs:ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD…
findbugs'ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD2Style - Write to static field from instance method"INFO*java2'ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD:û<p> This instance method writes to a static field. This is tricky to get
correct if multiple instances are being manipulated,
and generally bad practice.
</p>Z
CODE_SMELL
»
findbugs:UUF_UNUSED_FIELD™
findbugsUUF_UNUSED_FIELDPerformance - Unused field"MAJOR*java2UUF_UNUSED_FIELD:L<p> This field is never used.&nbsp; Consider removing it from the class.</p>ZBUG
¶
findbugs:MS_EXPOSE_REPã
findbugsMS_EXPOSE_REP[Malicious code - Public static method may expose internal representation by returning array"INFO*java2MS_EXPOSE_REP:Î<p> A public static method returns a reference to
   an array that is part of the static state of the class.
   Any code that calls this method can freely modify
   the underlying array.
   One fix is to return a copy of the array.</p>Z
CODE_SMELL
Ô
findbugs:NM_BAD_EQUAL’
findbugsNM_BAD_EQUALGCorrectness - Class defines equal(Object); should it be equals(Object)?"MAJOR*java2NM_BAD_EQUAL:—<p> This class defines a method <code>equal(Object)</code>.&nbsp; This method does
not override the <code>equals(Object)</code> method in <code>java.lang.Object</code>,
which is probably what was intended.</p>ZBUG
Ì
/findbugs:NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUEπ
findbugs&NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUENStyle - Possible null pointer dereference due to return value of called method"INFO*java2&NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE:Ù<p> The return value from a method is dereferenced without a null check,
and the return value of that method is one that should generally be checked
for null.  This may lead to a <code>NullPointerException</code> when the code is executed.
</p>Z
CODE_SMELL
∏
/findbugs:RC_REF_COMPARISON_BAD_PRACTICE_BOOLEANÑ
findbugs&RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN@Bad practice - Suspicious reference comparison of Boolean values"MAJOR*java2&RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN:Ã<p> This method compares two Boolean values using the == or != operator.
Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),
but it is possible to create other Boolean objects using the <code>new Boolean(b)</code>
constructor. It is best to avoid such objects, but if they do exist,
then checking Boolean objects for equality using == or != will give results
than are different than you would get using <code>.equals(...)</code>.
</p>Z
CODE_SMELL
Ï
&findbugs:IMA_INEFFICIENT_MEMBER_ACCESS¡
findbugsIMA_INEFFICIENT_MEMBER_ACCESSGPerformance - Method accesses a private member variable of owning class"MAJOR*java2IMA_INEFFICIENT_MEMBER_ACCESS:õ<p>
      This method of an inner class reads from or writes to a private member variable of the owning class,
      or calls a private method of the owning class. The compiler must generate a special method to access this
      private member, causing this to be less efficient. Relaxing the protection of the member variable or method
      will allow the compiler to treat this as a normal access.
      </p>ZBUG
·
findbugs:RV_REM_OF_RANDOM_INTø
findbugsRV_REM_OF_RANDOM_INT1Style - Remainder of 32-bit signed random integer"INFO*java2RV_REM_OF_RANDOM_INT:ª<p> This code generates a random signed integer and then computes
the remainder of that value modulo another value. Since the random
number can be negative, the result of the remainder operation
can also be negative. Be sure this is intended, and strongly
consider using the Random.nextInt(int) method instead.
</p>Z
CODE_SMELL
≤
,findbugs:XSS_REQUEST_PARAMETER_TO_SEND_ERRORÅ
findbugs#XSS_REQUEST_PARAMETER_TO_SEND_ERRORMSecurity - Servlet reflected cross site scripting vulnerability in error page"MAJOR*java2#XSS_REQUEST_PARAMETER_TO_SEND_ERROR:ø<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows
for a reflected cross site scripting
vulnerability. See <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting
vulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
Ä
+findbugs:DMI_NONSERIALIZABLE_OBJECT_WRITTEN–
findbugs"DMI_NONSERIALIZABLE_OBJECT_WRITTEN7Style - Non serializable object written to ObjectOutput"INFO*java2"DMI_NONSERIALIZABLE_OBJECT_WRITTEN:™<p>
This code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.
If the object is, indeed, non-serializable, an error will result.
</p>Z
CODE_SMELL
¡
 findbugs:EC_UNRELATED_INTERFACESú
findbugsEC_UNRELATED_INTERFACESBCorrectness - Call to equals() comparing different interface types"MAJOR*java2EC_UNRELATED_INTERFACES:á<p> This method calls equals(Object) on two references of unrelated
interface types, where neither is a subtype of the other,
and there are no known non-abstract classes which implement both interfaces.
Therefore, the objects being compared
are unlikely to be members of the same class at runtime
(unless some application classes were not analyzed, or dynamic class
loading can occur at runtime).
According to the contract of equals(),
objects of different
classes should always compare as unequal; therefore, according to the
contract defined by java.lang.Object.equals(Object),
the result of this comparison will always be false at runtime.
</p>ZBUG
Â
(findbugs:NM_METHOD_CONSTRUCTOR_CONFUSION∏
findbugsNM_METHOD_CONSTRUCTOR_CONFUSION3Correctness - Apparent method/constructor confusion"MAJOR*java2NM_METHOD_CONSTRUCTOR_CONFUSION:¢<p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.
      If it was intended to be a constructor, remove the declaration of a void return value.
    If you had accidentally defined this method, realized the mistake, defined a proper constructor
    but can't get rid of this method due to backwards compatibility, deprecate the method.
</p>ZBUG
Á
(findbugs:AM_CREATES_EMPTY_ZIP_FILE_ENTRY∫
findbugsAM_CREATES_EMPTY_ZIP_FILE_ENTRY.Bad practice - Creates an empty zip file entry"MAJOR*java2AM_CREATES_EMPTY_ZIP_FILE_ENTRY:¢<p>The code calls <code>putNextEntry()</code>, immediately
followed by a call to <code>closeEntry()</code>. This results
in an empty ZipFile entry. The contents of the entry
should be written to the ZipFile between the calls to
<code>putNextEntry()</code> and
<code>closeEntry()</code>.</p>Z
CODE_SMELL
…
findbugs:BIT_SIGNED_CHECK´
findbugsBIT_SIGNED_CHECK2Bad practice - Check for sign of bitwise operation"MAJOR*java2BIT_SIGNED_CHECK:≠<p> This method compares an expression such as
<code>((event.detail &amp; SWT.SELECTED) &gt; 0)</code>.
Using bit arithmetic and then comparing with the greater than operator can
lead to unexpected results (of course depending on the value of
SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate
for a bug. Even when SWT.SELECTED is not negative, it seems good practice
to use '!= 0' instead of '&gt; 0'.
</p>Z
CODE_SMELL
›
findbugs:NS_NON_SHORT_CIRCUITª
findbugsNS_NON_SHORT_CIRCUIT3Style - Questionable use of non-short-circuit logic"INFO*java2NS_NON_SHORT_CIRCUIT:µ<p> This code seems to be using non-short-circuit logic (e.g., &amp;
or |)
rather than short-circuit logic (&amp;&amp; or ||).
Non-short-circuit logic causes both sides of the expression
to be evaluated even when the result can be inferred from
knowing the left-hand side. This can be less efficient and
can result in errors if the left-hand side guards cases
when evaluating the right-hand side can generate an error.

<p>See <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2">the Java
Language Specification</a> for details.

</p>Z
CODE_SMELL
å
+findbugs:BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY‹
findbugs"BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY7Correctness - Impossible cast involving primitive array"CRITICAL*java2"BC_IMPOSSIBLE_CAST_PRIMITIVE_ARRAY::<p>
This cast will always throw a ClassCastException.
</p>ZBUG
∆
findbugs:DB_DUPLICATE_BRANCHES£
findbugsDB_DUPLICATE_BRANCHES2Style - Method uses the same code for two branches"INFO*java2DB_DUPLICATE_BRANCHES:ú<p>
      This method uses the same code to implement two branches of a conditional branch.
    Check to ensure that this isn't a coding mistake.
      </p>Z
CODE_SMELL
î
(findbugs:DMI_HARDCODED_ABSOLUTE_FILENAMEÁ
findbugsDMI_HARDCODED_ABSOLUTE_FILENAMEDStyle - Code contains a hard coded reference to an absolute pathname"INFO*java2DMI_HARDCODED_ABSOLUTE_FILENAME:∫<p>This code constructs a File object using a hard coded to an absolute pathname
(e.g., <code>new File("/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment");</code>
</p>Z
CODE_SMELL
∂
findbugs:UWF_UNWRITTEN_FIELDï
findbugsUWF_UNWRITTEN_FIELDCorrectness - Unwritten field"MAJOR*java2UWF_UNWRITTEN_FIELD:≠<p> This field is never written.&nbsp; All reads of it will return the default
value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>ZBUG
Ê
findbugs:DM_NEW_FOR_GETCLASS≈
findbugsDM_NEW_FOR_GETCLASSFPerformance - Method allocates an object, only to get the class object"MAJOR*java2DM_NEW_FOR_GETCLASS:¥<p>This method allocates an object just to call getClass() on it, in order to
  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>ZBUG
Í
-findbugs:LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE∏
findbugs$LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCEMExperimental - Potential lost logger changes due to weak reference in OpenJDK"INFO*java2$LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE:¯
<p>OpenJDK introduces a potential incompatibility.
 In particular, the java.util.logging.Logger behavior has
  changed. Instead of using strong references, it now uses weak references
  internally. That's a reasonable change, but unfortunately some code relies on
  the old behavior - when changing logger configuration, it simply drops the
  logger reference. That means that the garbage collector is free to reclaim
  that memory, which means that the logger configuration is lost. For example,
consider:
</p>
<pre><code>public static void initLogging() throws Exception {
    Logger logger = Logger.getLogger("edu.umd.cs");
    logger.addHandler(new FileHandler()); // call to change logger configuration
    logger.setUseParentHandlers(false); // another call to change logger configuration
}
</code></pre>
<p>The logger reference is lost at the end of the method (it doesn't
escape the method), so if you have a garbage collection cycle just
after the call to initLogging, the logger configuration is lost
(because Logger only keeps weak references).</p>
<pre><code>public static void main(String[] args) throws Exception {
    initLogging(); // adds a file handler to the logger
    System.gc(); // logger configuration lost
    Logger.getLogger("edu.umd.cs").info("Some message"); // this isn't logged to the file as expected
}
</code></pre>
<p><em>Ulf Ochsenfahrt and Eric Fellheimer</em></p>Z
CODE_SMELL
∂
findbugs:RANGE_ARRAY_OFFSETñ
findbugsRANGE_ARRAY_OFFSET+Correctness - Array offset is out of bounds"CRITICAL*java2RANGE_ARRAY_OFFSET:ü<p> Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>ZBUG
∂
findbugs:EC_UNRELATED_TYPESñ
findbugsEC_UNRELATED_TYPES8Correctness - Call to equals() comparing different types"MAJOR*java2EC_UNRELATED_TYPES:ï<p> This method calls equals(Object) on two references of different
class types and analysis suggests they will be to objects of different classes
at runtime. Further, examination of the equals methods that would be invoked suggest that either
this call will always return false, or else the equals method is not be symmetric (which is
a property required by the contract
for equals in class Object).
</p>ZBUG
¶
'findbugs:SIC_THREADLOCAL_DEADLY_EMBRACE˙
findbugsSIC_THREADLOCAL_DEADLY_EMBRACEGCorrectness - Deadly embrace of non-static inner class and thread local"MAJOR*java2SIC_THREADLOCAL_DEADLY_EMBRACE:“<p> This class is an inner class, but should probably be a static inner class.
  As it is, there is a serious danger of a deadly embrace between the inner class
  and the thread local in the outer class. Because the inner class isn't static,
  it retains a reference to the outer class.
  If the thread local contains a reference to an instance of the inner
  class, the inner and outer instance will both be reachable
  and not eligible for garbage collection.
</p>ZBUG
é
(findbugs:VA_FORMAT_STRING_BAD_CONVERSION·
findbugsVA_FORMAT_STRING_BAD_CONVERSIONLCorrectness - The type of a supplied argument doesn't match format specifier"MAJOR*java2VA_FORMAT_STRING_BAD_CONVERSION:≤<p>
One of the arguments is incompatible with the corresponding format string specifier.
As a result, this will generate a runtime exception when executed.
For example, <code>String.format("%d", "1")</code> will generate an exception, since
the String "1" is incompatible with the format specifier %d.
</p>ZBUG
©
3findbugs:VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAYÒ
findbugs*VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY@Correctness - Array formatted in useless way using format string"MAJOR*java2*VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY:∏<p>
One of the arguments being formatted with a format string is an array. This will be formatted
using a fairly useless format, such as [I@304282, which doesn't actually show the contents
of the array.
Consider wrapping the array using <code>Arrays.asList(...)</code> before handling it off to a formatted.
</p>ZBUG
–
findbugs:DM_DEFAULT_ENCODINGØ
findbugsDM_DEFAULT_ENCODING#I18n - Reliance on default encoding"INFO*java2DM_DEFAULT_ENCODING:ª<p> Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.  </p>Z
CODE_SMELL
ˆ
findbugs:LI_LAZY_INIT_INSTANCE”
findbugsLI_LAZY_INIT_INSTANCEAMulti-threading - Incorrect lazy initialization of instance field"MAJOR*java2LI_LAZY_INIT_INSTANCE:√<p> This method contains an unsynchronized lazy initialization of a non-volatile field.
Because the compiler or processor may reorder instructions,
threads are not guaranteed to see a completely initialized object,
<em>if the method can be called by multiple threads</em>.
You can make the field volatile to correct the problem.
For more information, see the
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">Java Memory Model web site</a>.
</p>ZBUG
ò
-findbugs:URF_UNREAD_PUBLIC_OR_PROTECTED_FIELDÊ
findbugs$URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD%Style - Unread public/protected field"INFO*java2$URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD:Œ<p> This field is never read.&nbsp;
The field is public or protected, so perhaps
    it is intended to be used with classes not seen as part of the analysis. If not,
consider removing it from the class.</p>Z
CODE_SMELL
©
findbugs:UWF_NULL_FIELDç
findbugsUWF_NULL_FIELD)Correctness - Field only ever set to null"MAJOR*java2UWF_NULL_FIELD:£<p> All writes to this field are of the constant value null, and thus
all reads of the field will return null.
Check for errors, or remove it if it is useless.</p>ZBUG
Œ
#findbugs:FE_FLOATING_POINT_EQUALITY¶
findbugsFE_FLOATING_POINT_EQUALITY(Style - Test for floating point equality"INFO*java2FE_FLOATING_POINT_EQUALITY:ü<p>
    This operation compares two floating point values for equality.
    Because floating point calculations may involve rounding,
   calculated float and double values may not be accurate.
    For values that must be precise, such as monetary values,
   consider using a fixed-precision type such as BigDecimal.
    For values that need not be precise, consider comparing for equality
    within some range, for example:
    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.
   See the Java Language Specification, section 4.2.4.
    </p>Z
CODE_SMELL
¡
"findbugs:INT_VACUOUS_BIT_OPERATIONö
findbugsINT_VACUOUS_BIT_OPERATION3Style - Vacuous bit mask operation on integer value"INFO*java2INT_VACUOUS_BIT_OPERATION:ä<p> This is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work
(e.g., <code>v & 0xffffffff</code>).

</p>Z
CODE_SMELL
ì
*findbugs:UL_UNRELEASED_LOCK_EXCEPTION_PATH‰
findbugs!UL_UNRELEASED_LOCK_EXCEPTION_PATHEMulti-threading - Method does not release lock on all exception paths"MAJOR*java2!UL_UNRELEASED_LOCK_EXCEPTION_PATH:∏<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,
but does not release it on all exception paths out of the method.  In general, the correct idiom
for using a JSR-166 lock is:
</p>
<pre><code>Lock l = ...;
l.lock();
try {
    // do something
} finally {
    l.unlock();
}
</code></pre>ZBUG
Ã
"findbugs:MSF_MUTABLE_SERVLET_FIELD•
findbugsMSF_MUTABLE_SERVLET_FIELD'Multi-threading - Mutable servlet field"MAJOR*java2MSF_MUTABLE_SERVLET_FIELD:ß<p>A web server generally only creates one instance of servlet or JSP class (i.e., treats
the class as a Singleton),
and will
have multiple threads invoke methods on that instance to service multiple
simultaneous requests.
Thus, having a mutable instance field generally creates race conditions.ZBUG
‘	
%findbugs:NM_WRONG_PACKAGE_INTENTIONAL™	
findbugsNM_WRONG_PACKAGE_INTENTIONAL^Bad practice - Method doesn't override method in superclass due to wrong package for parameter"MAJOR*java2NM_WRONG_PACKAGE_INTENTIONAL:Ë<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match
the type of the corresponding parameter in the superclass. For example, if you have:</p>
<pre><code>import alpha.Foo;

public class A {
    public int f(Foo x) { return 17; }
}
----
import beta.Foo;

public class B extends A {
    public int f(Foo x) { return 42; }
    public int f(alpha.Foo x) { return 27; }
}
</code></pre>
<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't
override the
<code>f(Foo)</code> method defined in class <code>A</code>, because the argument
types are <code>Foo</code>'s from different packages.
</p>

<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,
so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider
removing or deprecating the method with the similar but not identical signature.
</p>Z
CODE_SMELL
È
1findbugs:NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE≥
findbugs(NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLELStyle - Possible null pointer dereference on branch that might be infeasible"INFO*java2(NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE:Ï<p> There is a branch of statement that, <em>if executed,</em>  guarantees that
a null value will be dereferenced, which
would generate a <code>NullPointerException</code> when the code is executed.
Of course, the problem might be that the branch or statement is infeasible and that
the null pointer exception can't ever be executed; deciding that is beyond the ability of SpotBugs.
Due to the fact that this value had been previously tested for nullness,
this is a definite possibility.
</p>Z
CODE_SMELL
Î
(findbugs:HRS_REQUEST_PARAMETER_TO_COOKIEæ
findbugsHRS_REQUEST_PARAMETER_TO_COOKIE2Security - HTTP cookie formed from untrusted input"MAJOR*java2HRS_REQUEST_PARAMETER_TO_COOKIE:ü<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting
vulnerability. See <a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more
vulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
π
$findbugs:IIL_PATTERN_COMPILE_IN_LOOPê
findbugsIIL_PATTERN_COMPILE_IN_LOOP4Performance - Method calls Pattern.compile in a loop"MAJOR*java2IIL_PATTERN_COMPILE_IN_LOOP:Å<p> The method calls Pattern.compile inside the loop passing the constant arguments.
If the Pattern should be used several times there's no reason to compile it for each loop iteration.
Move this call outside of the loop or even into static final field.</p>ZBUG
ù
*findbugs:NM_SAME_SIMPLE_NAME_AS_SUPERCLASSÓ
findbugs!NM_SAME_SIMPLE_NAME_AS_SUPERCLASSEBad practice - Class names shouldn't shadow simple name of superclass"MAJOR*java2!NM_SAME_SIMPLE_NAME_AS_SUPERCLASS:ª<p> This class has a simple name that is identical to that of its superclass, except
that its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).
This can be exceptionally confusing, create lots of situations in which you have to look at import statements
to resolve references and creates many
opportunities to accidentally define methods that do not override methods in their superclasses.
</p>Z
CODE_SMELL
È
findbugs:SF_SWITCH_FALLTHROUGH∆
findbugsSF_SWITCH_FALLTHROUGHLStyle - Switch statement found where one case falls through to the next case"INFO*java2SF_SWITCH_FALLTHROUGH:•<p> This method contains a switch statement where one case branch will fall through to the next case.
  Usually you need to end this case with a break or return.</p>Z
CODE_SMELL
∞
.findbugs:NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH˝
findbugs%NP_GUARANTEED_DEREF_ON_EXCEPTION_PATHOCorrectness - Value is null and guaranteed to be dereferenced on exception path"MAJOR*java2%NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH:ø<p>
              There is a statement or branch on an exception path
                that if executed guarantees that
              a value is null at this point, and that
              value that is guaranteed to be dereferenced
              (except on forward paths involving runtime exceptions).
              </p>ZBUG
Ç
3findbugs:VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN 
findbugs*VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN@Style - Non-Boolean argument formatted using %b format specifier"INFO*java2*VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN:ã<p>
An argument not of type Boolean is being formatted with a %b format specifier. This won't throw an
exception; instead, it will print true for any non-null value, and false for null.
This feature of format strings is strange, and may not be what you intended.
</p>Z
CODE_SMELL
å
!findbugs:DC_PARTIALLY_CONSTRUCTEDÊ
findbugsDC_PARTIALLY_CONSTRUCTEDCMulti-threading - Possible exposure of partially initialized object"MAJOR*java2DC_PARTIALLY_CONSTRUCTED:Œ<p>Looks like this method uses lazy field initialization with double-checked locking.
  While the field is correctly declared as volatile, it's possible that the internal structure of
  the object is changed after the field assignment, thus another thread may see the partially initialized object.</p>
  <p>To fix this problem consider storing the object into the local variable first
  and save it to the volatile field only after it's fully constructed.
  </p>ZBUG
Œ
'findbugs:PZLA_PREFER_ZERO_LENGTH_ARRAYS¢
findbugsPZLA_PREFER_ZERO_LENGTH_ARRAYS?Style - Consider returning a zero length array rather than null"INFO*java2PZLA_PREFER_ZERO_LENGTH_ARRAYS:¸<p> It is often a better design to
return a length zero array rather than a null reference to indicate that there
are no results (i.e., an empty list of results).
This way, no explicit check for null is needed by clients of the method.</p>

<p>On the other hand, using null to indicate
"there is no answer to this question" is probably appropriate.
For example, <code>File.listFiles()</code> returns an empty list
if given a directory containing no files, and returns null if the file
is not a directory.</p>Z
CODE_SMELL
å
*findbugs:SQL_BAD_PREPARED_STATEMENT_ACCESS›
findbugs!SQL_BAD_PREPARED_STATEMENT_ACCESSSCorrectness - Method attempts to access a prepared statement parameter with index 0"MAJOR*java2!SQL_BAD_PREPARED_STATEMENT_ACCESS:£<p> A call to a setXXX method of a prepared statement was made where the
parameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>ZBUG
“
findbugs:RS_READOBJECT_SYNC≤
findbugsRS_READOBJECT_SYNC=Multi-threading - Class's readObject() method is synchronized"MAJOR*java2RS_READOBJECT_SYNC:¨<p> This serializable class defines a <code>readObject()</code> which is
  synchronized.&nbsp; By definition, an object created by deserialization
  is only reachable by one thread, and thus there is no need for
  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>
  method itself is causing the object to become visible to another thread,
  that is an example of very dubious coding style.</p>ZBUG
∏
 findbugs:RV_RETURN_VALUE_IGNOREDì
findbugsRV_RETURN_VALUE_IGNORED)Correctness - Method ignores return value"MAJOR*java2RV_RETURN_VALUE_IGNORED:ó<p> The return value of this method should be checked. One common
cause of this warning is to invoke a method on an immutable object,
thinking that it updates the object. For example, in the following code
fragment,</p>
<pre><code>String dateString = getHeaderField(name);
dateString.trim();
</code></pre>
<p>the programmer seems to be thinking that the trim() method will update
the String referenced by dateString. But since Strings are immutable, the trim()
function returns a new String value, which is being ignored here. The code
should be corrected to: </p>
<pre><code>String dateString = getHeaderField(name);
dateString = dateString.trim();
</code></pre>ZBUG
⁄
2findbugs:UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS£
findbugs)UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS:Correctness - Uncallable method defined in anonymous class"MAJOR*java2)UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS:Ú<p> This anonymous class defined a method that is not directly invoked and does not override
a method in a superclass. Since methods in other classes cannot directly invoke methods
declared in an anonymous class, it seems that this method is uncallable. The method
might simply be dead code, but it is also possible that the method is intended to
override a method declared in a superclass, and due to an typo or other error the method does not,
in fact, override the method it is intended to.
</p>ZBUG
Ω
findbugs:FI_USELESS•
findbugs
FI_USELESSCBad practice - Finalizer does nothing but call superclass finalizer"MAJOR*java2
FI_USELESS:¢<p> The only thing this <code>finalize()</code> method does is call
  the superclass's <code>finalize()</code> method, making it
  redundant.&nbsp; Delete it.</p>Z
CODE_SMELL
ù
findbugs:RR_NOT_CHECKEDÅ
findbugsRR_NOT_CHECKED;Bad practice - Method ignores results of InputStream.read()"MAJOR*java2RR_NOT_CHECKED:˛<p> This method ignores the return value of one of the variants of
  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;
  If the return value is not checked, the caller will not be able to correctly
  handle the case where fewer bytes were read than the caller requested.&nbsp;
  This is a particularly insidious kind of bug, because in many programs,
  reads from input streams usually do read the full amount of data requested,
  causing the program to fail only sporadically.</p>Z
CODE_SMELL
î
findbugs:SR_NOT_CHECKED¯
findbugsSR_NOT_CHECKED;Bad practice - Method ignores results of InputStream.skip()"MAJOR*java2SR_NOT_CHECKED:ı<p> This method ignores the return value of
  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;
  If the return value is not checked, the caller will not be able to correctly
  handle the case where fewer bytes were skipped than the caller requested.&nbsp;
  This is a particularly insidious kind of bug, because in many programs,
  skips from input streams usually do skip the full amount of data requested,
  causing the program to fail only sporadically. With Buffered streams, however,
  skip() will only skip data in the buffer, and will routinely fail to skip the
  requested number of bytes.</p>Z
CODE_SMELL
ª
'findbugs:CO_COMPARETO_RESULTS_MIN_VALUEè
findbugsCO_COMPARETO_RESULTS_MIN_VALUE>Bad practice - compareTo()/compare() returns Integer.MIN_VALUE"MAJOR*java2CO_COMPARETO_RESULTS_MIN_VALUE:È<p> In some situation, this compareTo or compare method returns
the  constant Integer.MIN_VALUE, which is an exceptionally bad practice.
  The only thing that matters about the return value of compareTo is the sign of the result.
    But people will sometimes negate the return value of compareTo, expecting that this will negate
    the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE.
    So just return -1 rather than Integer.MIN_VALUE.Z
CODE_SMELL
õ
2findbugs:EC_UNRELATED_TYPES_USING_POINTER_EQUALITY‰
findbugs)EC_UNRELATED_TYPES_USING_POINTER_EQUALITY?Correctness - Using pointer equality to compare different types"MAJOR*java2)EC_UNRELATED_TYPES_USING_POINTER_EQUALITY:Æ<p> This method uses using pointer equality to compare two references that seem to be of
different types.  The result of this comparison will always be false at runtime.
</p>ZBUG
â
findbugs:NP_UNWRITTEN_FIELDÈ
findbugsNP_UNWRITTEN_FIELD%Correctness - Read of unwritten field"MAJOR*java2NP_UNWRITTEN_FIELD:˚<p> The program is dereferencing a field that does not seem to ever have a non-null value written to it.
Unless the field is initialized via some mechanism not seen by the analysis,
dereferencing this value will generate a null pointer exception.
</p>ZBUG
Ö
"findbugs:DMI_ARGUMENTS_WRONG_ORDERﬁ
findbugsDMI_ARGUMENTS_WRONG_ORDER'Correctness - Reversed method arguments"MAJOR*java2DMI_ARGUMENTS_WRONG_ORDER:‡<p> The arguments to this method call seem to be in the wrong order.
For example, a call <code>Preconditions.checkNotNull("message", message)</code>
has reserved arguments: the value to be checked is the first argument.
</p>ZBUG
Î
!findbugs:DMI_CONSTANT_DB_PASSWORD≈
findbugsDMI_CONSTANT_DB_PASSWORD/Security - Hardcoded constant database password"MAJOR*java2DMI_CONSTANT_DB_PASSWORD:∑<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can
    easily learn the password.
</p>ZVULNERABILITY
ô
findbugs:EQ_OTHER_NO_OBJECT˘
findbugsEQ_OTHER_NO_OBJECTJCorrectness - equals() method defined that doesn't override equals(Object)"MAJOR*java2EQ_OTHER_NO_OBJECT:Ê<p> This class defines an <code>equals()</code>
  method, that doesn't override the normal <code>equals(Object)</code> method
  defined in the base <code>java.lang.Object</code> class.&nbsp; Instead, it
  inherits an <code>equals(Object)</code> method from a superclass.
  The class should probably define a <code>boolean equals(Object)</code> method.
  </p>ZBUG
§
#findbugs:BAC_BAD_APPLET_CONSTRUCTOR¸
findbugsBAC_BAD_APPLET_CONSTRUCTORGCorrectness - Bad Applet Constructor relies on uninitialized AppletStub"MAJOR*java2BAC_BAD_APPLET_CONSTRUCTOR:‹<p>
This constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub
isn't initialized until the init() method of this applet is called, these methods will not perform
correctly.
</p>ZBUG
“
findbugs:DM_STRING_VOID_CTOR±
findbugsDM_STRING_VOID_CTORAPerformance - Method invokes inefficient new String() constructor"MAJOR*java2DM_STRING_VOID_CTOR:•<p> Creating a new <code>java.lang.String</code> object using the
  no-argument constructor wastes memory because the object so created will
  be functionally indistinguishable from the empty string constant
  <code>""</code>.&nbsp; Java guarantees that identical string constants
  will be represented by the same <code>String</code> object.&nbsp; Therefore,
  you should just use the empty string constant directly.</p>ZBUG
∆
-findbugs:HRS_REQUEST_PARAMETER_TO_HTTP_HEADERî
findbugs$HRS_REQUEST_PARAMETER_TO_HTTP_HEADER0Security - HTTP Response splitting vulnerability"MAJOR*java2$HRS_REQUEST_PARAMETER_TO_HTTP_HEADER:Ì<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting
vulnerability. See <a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more
vulnerabilities that SpotBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
Ú
.findbugs:NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENTø
findbugs%NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT?Bad practice - equals() method does not check for null argument"MAJOR*java2%NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT:ä<p>
      This implementation of equals(Object) violates the contract defined
      by java.lang.Object.equals() because it does not check for null
      being passed as the argument.  All equals() methods should return
      false if passed a null value.
      </p>Z
CODE_SMELL
≥
(findbugs:SIC_INNER_SHOULD_BE_STATIC_ANONÜ
findbugsSIC_INNER_SHOULD_BE_STATIC_ANONAPerformance - Could be refactored into a named static inner class"MAJOR*java2SIC_INNER_SHOULD_BE_STATIC_ANON:‚<p> This class is an inner class, but does not use its embedded reference
  to the object which created it.&nbsp; This reference makes the instances
  of the class larger, and may keep the reference to the creator object
  alive longer than necessary.&nbsp; If possible, the class should be
  made into a <em>static</em> inner class. Since anonymous inner
classes cannot be marked as static, doing this will require refactoring
the inner class so that it is a named inner class.</p>ZBUG
«
findbugs:XFB_XML_FACTORY_BYPASS£
findbugsXFB_XML_FACTORY_BYPASSMStyle - Method directly allocates a specific implementation of xml interfaces"INFO*java2XFB_XML_FACTORY_BYPASS:ˇ<p>
      This method allocates a specific implementation of an xml interface. It is preferable to use
      the supplied factory classes to create these objects so that the implementation can be
      changed at runtime. See
      </p>
      <ul>
         <li>javax.xml.parsers.DocumentBuilderFactory</li>
         <li>javax.xml.parsers.SAXParserFactory</li>
         <li>javax.xml.transform.TransformerFactory</li>
         <li>org.w3c.dom.Document.create<i>XXXX</i></li>
      </ul>
      <p>for details.</p>Z
CODE_SMELL
Ö
3findbugs:DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGEDÕ
findbugs*DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGEDNMalicious code - Classloaders should only be created inside doPrivileged block"INFO*java2*DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED:Ä<p> This code creates a classloader,  which needs permission if a security manage is installed.
  If this code might be invoked by code that does not
  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>Z
CODE_SMELL
§
findbugs:RANGE_STRING_INDEXÑ
findbugsRANGE_STRING_INDEX+Correctness - String index is out of bounds"CRITICAL*java2RANGE_STRING_INDEX:ç<p> String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime. </p>ZBUG
√
+findbugs:UCF_USELESS_CONTROL_FLOW_NEXT_LINEì
findbugs"UCF_USELESS_CONTROL_FLOW_NEXT_LINE)Style - Useless control flow to next line"INFO*java2"UCF_USELESS_CONTROL_FLOW_NEXT_LINE:˚<p> This method contains a useless control flow statement in which control
flow follows to the same or following line regardless of whether or not
the branch is taken.
Often, this is caused by inadvertently using an empty statement as the
body of an <code>if</code> statement, e.g.:</p>
<pre><code>if (argv.length == 1);
    System.out.println("Hello, " + argv[0]);
</code></pre>Z
CODE_SMELL
„
#findbugs:CAA_COVARIANT_ARRAY_RETURNª
findbugsCAA_COVARIANT_ARRAY_RETURN3Style - Covariant array is returned from the method"INFO*java2CAA_COVARIANT_ARRAY_RETURN:©<p>Array of covariant type is returned from the method. This is confusing and may lead to ArrayStoreException at runtime
if the calling code will try to store the reference of some other type in the returned array.
</p>
<p>Consider changing the type of created array or the method return type.</p>Z
CODE_SMELL
£
#findbugs:PT_ABSOLUTE_PATH_TRAVERSAL˚
findbugsPT_ABSOLUTE_PATH_TRAVERSAL-Security - Absolute path traversal in servlet"MAJOR*java2PT_ABSOLUTE_PATH_TRAVERSAL:Î<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,
but it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory.

See <a href="http://cwe.mitre.org/data/definitions/36.html">http://cwe.mitre.org/data/definitions/36.html</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of absolute path traversal.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more
vulnerabilities that SpotBugs doesn't report. If you are concerned about absolute path traversal, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
Ã
1findbugs:RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUEñ
findbugs(RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE9Style - Redundant nullcheck of value known to be non-null"INFO*java2(RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE:c<p> This method contains a redundant check of a known non-null value against
the constant null.</p>Z
CODE_SMELL
Ú
findbugs:REC_CATCH_EXCEPTION—
findbugsREC_CATCH_EXCEPTION8Style - Exception is caught when Exception is not thrown"INFO*java2REC_CATCH_EXCEPTION:»<p>
  This method uses a try-catch block that catches Exception objects, but Exception is not
  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to
  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception
  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,
  masking potential bugs.
  </p>
  <p>A better approach is to either explicitly catch the specific exceptions that are thrown,
  or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:</p>
<pre><code>try {
    ...
} catch (RuntimeException e) {
    throw e;
} catch (Exception e) {
    ... deal with all non-runtime exceptions ...
}
</code></pre>Z
CODE_SMELL
“
(findbugs:IIL_ELEMENTS_GET_LENGTH_IN_LOOP•
findbugsIIL_ELEMENTS_GET_LENGTH_IN_LOOP3Performance - NodeList.getLength() called in a loop"MAJOR*java2IIL_ELEMENTS_GET_LENGTH_IN_LOOP:è<p> The method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call.
This NodeList doesn't store its length, but computes it every time in not very optimal way.
Consider storing the length to the variable before the loop.
</p>ZBUG
¶
1findbugs:JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS
findbugs(JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS:Bad practice - Fields of immutable classes should be final"MAJOR*java2(JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS:∫<p> The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable,
  and the rules for those annotations require that all fields are final.
   .</p>Z
CODE_SMELL
Ó
2findbugs:TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED∑
findbugs)TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED|Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required"MAJOR*java2)TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED:ƒ<p>
        A value specified as carrying a type qualifier annotation is
        consumed in a location or locations requiring that the value not
        carry that annotation.
        </p>

        <p>
        More precisely, a value annotated with a type qualifier specifying when=ALWAYS
        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.
        </p>

        <p>
        For example, say that @NonNegative is a nickname for
        the type qualifier annotation @Negative(when=When.NEVER).
        The following code will generate this warning because
        the return statement requires a @NonNegative value,
        but receives one that is marked as @Negative.
        </p>
<pre><code>public @NonNegative Integer example(@Negative Integer value) {
    return value;
}
</code></pre>ZBUG
ﬁ
'findbugs:DM_BOXED_PRIMITIVE_FOR_PARSING≤
findbugsDM_BOXED_PRIMITIVE_FOR_PARSING2Performance - Boxing/unboxing to parse a primitive"MAJOR*java2DM_BOXED_PRIMITIVE_FOR_PARSING:ü<p>A boxed primitive is created from a String, just to extract the unboxed primitive value.
  It is more efficient to just call the static parseXXX method.</p>ZBUG
Û
0findbugs:ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEILæ
findbugs'ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEILHCorrectness - Integral value cast to double and then passed to Math.ceil"MAJOR*java2'ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL:É<p>
This code converts an integral value (e.g., int or long)
to a double precision
floating point number and then
passing the result to the Math.ceil() function, which rounds a double to
the next higher integer value. This operation should always be a no-op,
since the converting an integer to a double should give a number with no fractional part.
It is likely that the operation that generated the value to be passed
to Math.ceil was intended to be performed using double precision
floating point arithmetic.
</p>ZBUG
ï
findbugs:IS2_INCONSISTENT_SYNCÚ

findbugsIS2_INCONSISTENT_SYNC.Multi-threading - Inconsistent synchronization"MAJOR*java2IS2_INCONSISTENT_SYNC:ı	<p> The fields of this class appear to be accessed inconsistently with respect
  to synchronization.&nbsp; This bug report indicates that the bug pattern detector
  judged that
  </p>
  <ul>
  <li> The class contains a mix of locked and unlocked accesses,</li>
  <li> The class is <b>not</b> annotated as javax.annotation.concurrent.NotThreadSafe,</li>
  <li> At least one locked access was performed by one of the class's own methods, and</li>
  <li> The number of unsynchronized field accesses (reads and writes) was no more than
       one third of all accesses, with writes being weighed twice as high as reads</li>
  </ul>

  <p> A typical bug matching this bug pattern is forgetting to synchronize
  one of the methods in a class that is intended to be thread-safe.</p>

  <p> You can select the nodes labeled "Unsynchronized access" to show the
  code locations where the detector believed that a field was accessed
  without synchronization.</p>

  <p> Note that there are various sources of inaccuracy in this detector;
  for example, the detector cannot statically detect all situations in which
  a lock is held.&nbsp; Also, even when the detector is accurate in
  distinguishing locked vs. unlocked accesses, the code in question may still
  be correct.</p>ZBUG
ö
findbugs:SE_NO_SERIALVERSIONID˜
findbugsSE_NO_SERIALVERSIONIDIBad practice - Class is Serializable, but doesn't define serialVersionUID"MAJOR*java2SE_NO_SERIALVERSIONID:ÿ<p> This class implements the <code>Serializable</code> interface, but does
  not define a <code>serialVersionUID</code> field.&nbsp;
  A change as simple as adding a reference to a .class object
    will add synthetic fields to the class,
   which will unfortunately change the implicit
   serialVersionUID (e.g., adding a reference to <code>String.class</code>
   will generate a static field <code>class$java$lang$String</code>).
   Also, different source code to bytecode compilers may use different
   naming conventions for synthetic variables generated for
   references to class objects or inner classes.
   To ensure interoperability of Serializable across versions,
   consider adding an explicit serialVersionUID.</p>Z
CODE_SMELL
ÿ
findbugs:FI_EMPTY¬
findbugsFI_EMPTY0Bad practice - Empty finalizer should be deleted"MAJOR*java2FI_EMPTY:W<p> Empty <code>finalize()</code> methods are useless, so they should
  be deleted.</p>Z
CODE_SMELL
Ë
findbugs:MS_MUTABLE_HASHTABLE∆
findbugsMS_MUTABLE_HASHTABLE-Malicious code - Field is a mutable Hashtable"INFO*java2MS_MUTABLE_HASHTABLE:∆<p>A final static field references a Hashtable
   and can be accessed by malicious code or
        by accident from another package.
   This code can freely modify the contents of the Hashtable.</p>Z
CODE_SMELL
ı
)findbugs:STI_INTERRUPTED_ON_UNKNOWNTHREAD«
findbugs STI_INTERRUPTED_ON_UNKNOWNTHREADKCorrectness - Static Thread.interrupted() method invoked on thread instance"MAJOR*java2 STI_INTERRUPTED_ON_UNKNOWNTHREAD:ó<p>
This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is
not the current thread. As the interrupted() method is static, the interrupted method will be called on a different
object than the one the author intended.
</p>ZBUG
…
4findbugs:NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIERê
findbugs+NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIERLBad practice - Use of identifier that is a keyword in later versions of Java"MAJOR*java2+NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER:¬<p>This identifier is used as a keyword in later versions of Java. This code, and
any code that references this API,
will need to be changed in order to compile it in later versions of Java.</p>Z
CODE_SMELL
Ù
"findbugs:SA_LOCAL_SELF_COMPUTATIONÕ
findbugsSA_LOCAL_SELF_COMPUTATIONMCorrectness - Nonsensical self computation involving a variable (e.g., x & x)"MAJOR*java2SA_LOCAL_SELF_COMPUTATION:©<p> This method performs a nonsensical computation of a local variable with another
reference to the same variable (e.g., x&x or x-x). Because of the nature
of the computation, this operation doesn't seem to make sense,
and may indicate a typo or
a logic error.  Double check the computation.
</p>ZBUG
¬
"findbugs:SE_METHOD_MUST_BE_PRIVATEõ
findbugsSE_METHOD_MUST_BE_PRIVATEGCorrectness - Method must be private in order for serialization to work"MAJOR*java2SE_METHOD_MUST_BE_PRIVATE:˝<p> This class implements the <code>Serializable</code> interface, and defines a method
  for custom serialization/deserialization. But since that method isn't declared private,
  it will be silently ignored by the serialization/deserialization API.</p>ZBUG
˘
findbugs:WA_NOT_IN_LOOP›
findbugsWA_NOT_IN_LOOP"Multi-threading - Wait not in loop"MAJOR*java2WA_NOT_IN_LOOP:˙<p> This method contains a call to <code>java.lang.Object.wait()</code>
  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,
  the condition the caller intended to wait for might not be the one
  that actually occurred.</p>ZBUG
≥
,findbugs:DMI_VACUOUS_CALL_TO_EASYMOCK_METHODÇ
findbugs#DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD5Correctness - Useless/vacuous call to EasyMock method"MAJOR*java2#DMI_VACUOUS_CALL_TO_EASYMOCK_METHOD:c<p>This call doesn't pass any objects to the EasyMock method, so the call doesn't do anything.
</p>ZBUG
≤
-findbugs:IP_PARAMETER_IS_DEAD_BUT_OVERWRITTENÄ
findbugs$IP_PARAMETER_IS_DEAD_BUT_OVERWRITTENHCorrectness - A parameter is dead upon entry to a method but overwritten"MAJOR*java2$IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN:À<p>
The initial value of this parameter is ignored, and the parameter
is overwritten here. This often indicates a mistaken belief that
the write to the parameter will be conveyed back to
the caller.
</p>ZBUG
Ò
9findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW≥
findbugs0SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROWFCorrectness - Dead store due to switch statement fall through to throw"MAJOR*java20SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW:Ë<p> A value stored in the previous switch case is ignored here due to a switch fall through to a place where
    an exception is thrown. It is likely that
    you forgot to put a break or return at the end of the previous case.
</p>ZBUG
É
findbugs:UG_SYNC_SET_UNSYNC_GETﬂ
findbugsUG_SYNC_SET_UNSYNC_GETDMulti-threading - Unsynchronized get method, synchronized set method"MAJOR*java2UG_SYNC_SET_UNSYNC_GET: <p> This class contains similarly-named get and set
  methods where the set method is synchronized and the get method is not.&nbsp;
  This may result in incorrect behavior at runtime, as callers of the get
  method will not necessarily see a consistent state for the object.&nbsp;
  The get method should be made synchronized.</p>ZBUG
£
'findbugs:FI_FINALIZER_ONLY_NULLS_FIELDS˜
findbugsFI_FINALIZER_ONLY_NULLS_FIELDS*Bad practice - Finalizer only nulls fields"MAJOR*java2FI_FINALIZER_ONLY_NULLS_FIELDS:Â<p> This finalizer does nothing except null out fields. This is completely pointless, and requires that
the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize
method.</p>Z
CODE_SMELL
⁄
2findbugs:OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE£
findbugs)OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGERExperimental - Method may fail to clean up stream or resource on checked exception"INFO*java2)OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE:‘<p>
          This method may fail to clean up (close, dispose of) a stream,
          database object, or other
          resource requiring an explicit cleanup operation.
          </p>

          <p>
          In general, if a method opens a stream or other resource,
          the method should use a try/finally block to ensure that
          the stream or resource is cleaned up before the method
          returns.
          </p>

          <p>
          This bug pattern is essentially the same as the
          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE
          bug patterns, but is based on a different
          (and hopefully better) static analysis technique.
          We are interested is getting feedback about the
          usefulness of this bug pattern.
          For sending feedback, check:
          </p>
          <ul>
            <li><a href="https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md">contributing guideline</a></li>
            <li><a href="https://github.com/spotbugs/discuss/issues?q=">malinglist</a></li>
          </ul>

          <p>
          In particular,
          the false-positive suppression heuristics for this
          bug pattern have not been extensively tuned, so
          reports about false positives are helpful to us.
          </p>

          <p>
          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for
          a description of the analysis technique.
          </p>Z
CODE_SMELL
Ÿ
7findbugs:SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATIONù
findbugs.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATIONLBad practice - Class is Externalizable but doesn't define a void constructor"MAJOR*java2.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION:…<p> This class implements the <code>Externalizable</code> interface, but does
  not define a void constructor. When Externalizable objects are deserialized,
   they first need to be constructed by invoking the void
   constructor. Since this class does not have one,
   serialization and deserialization will fail at runtime.</p>Z
CODE_SMELL
Ô
 findbugs:CI_CONFUSED_INHERITANCE 
findbugsCI_CONFUSED_INHERITANCE3Style - Class is final but declares protected field"INFO*java2CI_CONFUSED_INHERITANCE:æ<p>
      This class is declared to be final, but declares fields to be protected. Since the class
      is final, it can not be derived from, and the use of protected is confusing. The access
      modifier for the field should be changed to private or public to represent the true
      use for the field.
      </p>Z
CODE_SMELL
˚
findbugs:NM_LCASE_TOSTRING‹
findbugsNM_LCASE_TOSTRING@Correctness - Class defines tostring(); should it be toString()?"MAJOR*java2NM_LCASE_TOSTRING:’<p> This class defines a method called <code>tostring()</code>.&nbsp; This method
  does not override the <code>toString()</code> method in <code>java.lang.Object</code>,
  which is probably what was intended.</p>ZBUG
Ç
&findbugs:NM_VERY_CONFUSING_INTENTIONAL◊
findbugsNM_VERY_CONFUSING_INTENTIONALDBad practice - Very confusing method names (but perhaps intentional)"MAJOR*java2NM_VERY_CONFUSING_INTENTIONAL:≠<p> The referenced methods have names that differ only by capitalization.
This is very confusing because if the capitalization were
identical then one of the methods would override the other. From the existence of other methods, it
seems that the existence of both of these methods is intentional, but is sure is confusing.
You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.
</p>Z
CODE_SMELL
Ñ
"findbugs:DMI_RANDOM_USED_ONLY_ONCE›
findbugsDMI_RANDOM_USED_ONLY_ONCE7Bad practice - Random object created and used only once"MAJOR*java2DMI_RANDOM_USED_ONLY_ONCE:»<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards
the Random object. This produces mediocre quality random numbers and is inefficient.
If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number
is required invoke a method on the existing Random object to obtain it.
</p>

<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random
number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead
(and avoid allocating a new SecureRandom for each random number needed).
</p>Z
CODE_SMELL
î
2findbugs:DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED›
findbugs)DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED-Style - Thread passed where Runnable expected"INFO*java2)DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED:≥<p> A Thread object is passed as a parameter to a method where
a Runnable is expected. This is rather unusual, and may indicate a logic error
or cause unexpected behavior.
   </p>Z
CODE_SMELL
ö
findbugs:NP_NULL_PARAM_DEREF˘
findbugsNP_NULL_PARAM_DEREF<Correctness - Method call passes null for non-null parameter"MAJOR*java2NP_NULL_PARAM_DEREF:Ú<p>
      This method call passes a null value for a non-null method parameter.
    Either the parameter is annotated as a parameter that should
    always be non-null, or analysis has shown that it will always be
    dereferenced.
      </p>ZBUG
€
'findbugs:RE_POSSIBLE_UNINTENDED_PATTERNØ
findbugsRE_POSSIBLE_UNINTENDED_PATTERN4Correctness - "." or "|" used for regular expression"MAJOR*java2RE_POSSIBLE_UNINTENDED_PATTERN:ö<p>
A String function is being invoked and "." or "|" is being passed
to a parameter that takes a regular expression as an argument. Is this what you intended?
For example
</p>
<ul>
<li>s.replaceAll(".", "/") will return a String in which <em>every</em> character has been replaced by a '/' character</li>
<li>s.split(".") <em>always</em> returns a zero length array of String</li>
<li>"ab|cd".replaceAll("|", "/") will return "/a/b/|/c/d/"</li>
<li>"ab|cd".split("|") will return array with six (!) elements: [, a, b, |, c, d]</li>
</ul>ZBUG
≈
findbugs:BIT_IOR_OF_SIGNED_BYTE°
findbugsBIT_IOR_OF_SIGNED_BYTE-Correctness - Bitwise OR of signed byte value"MAJOR*java2BIT_IOR_OF_SIGNED_BYTE:£<p> Loads a byte value (e.g., a value loaded from a byte array or returned by a method
with return type byte)  and performs a bitwise OR with
that value. Byte values are sign extended to 32 bits
before any bitwise operations are performed on the value.
Thus, if <code>b[0]</code> contains the value <code>0xff</code>, and
<code>x</code> is initially 0, then the code
<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>
to get <code>0xffffffff</code>, and thus give the value
<code>0xffffffff</code> as the result.
</p>

<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>
<pre><code>int result = 0;
for(int i = 0; i &lt; 4; i++) {
    result = ((result &lt;&lt; 8) | b[i]);
}
</code></pre>
<p>The following idiom will work instead: </p>
<pre><code>int result = 0;
for(int i = 0; i &lt; 4; i++) {
    result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));
}
</code></pre>ZBUG
Ê
findbugs:EI_EXPOSE_REPÀ
findbugsEI_EXPOSE_REP\Malicious code - May expose internal representation by returning reference to mutable object"INFO*java2EI_EXPOSE_REP:™<p> Returning a reference to a mutable object value stored in one of the object's fields
  exposes the internal representation of the object.&nbsp;
   If instances
   are accessed by untrusted code, and unchecked changes to
   the mutable object would compromise security or other
   important properties, you will need to do something different.
  Returning a new copy of the object is better approach in many situations.</p>Z
CODE_SMELL
¯
findbugs:EQ_ALWAYS_FALSE€
findbugsEQ_ALWAYS_FALSE0Correctness - equals method always returns false"MAJOR*java2EQ_ALWAYS_FALSE:Ë<p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means
that equals is not reflexive, one of the requirements of the equals method.</p>
<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different
superclass, you can use:</p>
<pre><code>public boolean equals(Object o) {
    return this == o;
}
</code></pre>ZBUG
˚
findbugs:DC_DOUBLECHECKﬂ
findbugsDC_DOUBLECHECK0Multi-threading - Possible double check of field"MAJOR*java2DC_DOUBLECHECK:Ó<p> This method may contain an instance of double-checked locking.&nbsp;
  This idiom is not correct according to the semantics of the Java memory
  model.&nbsp; For more information, see the web page
  <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"
  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>ZBUG
ﬂ
%findbugs:DM_MONITOR_WAIT_ON_CONDITIONµ
findbugsDM_MONITOR_WAIT_ON_CONDITION4Multi-threading - Monitor wait() called on Condition"MAJOR*java2DM_MONITOR_WAIT_ON_CONDITION:§<p>
      This method calls <code>wait()</code> on a
      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;
      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>
      methods defined by the <code>Condition</code> interface.
      </p>ZBUG
‰
findbugs:DMI_BAD_MONTH…
findbugsDMI_BAD_MONTH*Correctness - Bad constant value for month"MAJOR*java2DMI_BAD_MONTH:a<p>
This code passes a constant month
value outside the expected range of 0..11 to a method.
</p>ZBUG
ñ
findbugs:IM_BAD_CHECK_FOR_ODDÙ
findbugsIM_BAD_CHECK_FOR_ODD>Style - Check for oddness that won't work for negative numbers"INFO*java2IM_BAD_CHECK_FOR_ODD:„<p>
The code uses x % 2 == 1 to check to see if a value is odd, but this won't work
for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check
for oddness, consider using x &amp; 1 == 1, or x % 2 != 0.
</p>Z
CODE_SMELL
ã
+findbugs:DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD€
findbugs"DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD7Style - Dead store to local variable that shadows field"INFO*java2"DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD:µ<p>
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used. There is a field with the same name as the local variable. Did you
mean to assign to that variable instead?
</p>Z
CODE_SMELL
∆
/findbugs:DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTSí
findbugs&DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTSUBad practice - Adding elements of an entry set may fail due to reuse of Entry objects"MAJOR*java2&DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS:≈<p> The entrySet() method is allowed to return a view of the
     underlying Map in which a single Entry object is reused and returned
     during the iteration.  As of Java 1.6, both IdentityHashMap
     and EnumMap did so. When iterating through such a Map,
     the Entry value is only valid until you advance to the next iteration.
     If, for example, you try to pass such an entrySet to an addAll method,
     things will go badly wrong.
    </p>Z
CODE_SMELL
¡
#findbugs:IL_INFINITE_RECURSIVE_LOOPô
findbugsIL_INFINITE_RECURSIVE_LOOP1Correctness - An apparent infinite recursive loop"MAJOR*java2IL_INFINITE_RECURSIVE_LOOP:è<p>This method unconditionally invokes itself. This would seem to indicate
an infinite recursive loop that will result in a stack overflow.</p>ZBUG
 
)findbugs:NP_DEREFERENCE_OF_READLINE_VALUEú
findbugs NP_DEREFERENCE_OF_READLINE_VALUEAStyle - Dereference of the result of readLine() without nullcheck"INFO*java2 NP_DEREFERENCE_OF_READLINE_VALUE:<p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text
to read, readLine() will return null and dereferencing that will generate a null pointer exception.
</p>Z
CODE_SMELL
◊
findbugs:SC_START_IN_CTORπ
findbugsSC_START_IN_CTOR4Multi-threading - Constructor invokes Thread.start()"MAJOR*java2SC_START_IN_CTOR:¿<p> The constructor starts a thread. This is likely to be wrong if
   the class is ever extended/subclassed, since the thread will be started
   before the subclass constructor is started.</p>ZBUG
ï
findbugs:WMI_WRONG_MAP_ITERATORÒ
findbugsWMI_WRONG_MAP_ITERATORMPerformance - Inefficient use of keySet iterator instead of entrySet iterator"MAJOR*java2WMI_WRONG_MAP_ITERATOR:”<p> This method accesses the value of a Map entry, using a key that was retrieved from
a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the
Map.get(key) lookup.</p>ZBUG
ú
*findbugs:CAA_COVARIANT_ARRAY_ELEMENT_STOREÌ
findbugs!CAA_COVARIANT_ARRAY_ELEMENT_STOREHCorrectness - Possibly incompatible element is stored in covariant array"MAJOR*java2!CAA_COVARIANT_ARRAY_ELEMENT_STORE:æ<p>Value is stored into the array and the value type doesn't match the array type.
It's known from the analysis that actual array type is narrower than the declared type of its variable or field
and this assignment doesn't satisfy the original array type. This assignment may cause ArrayStoreException
at runtime.
</p>ZBUG
¶
findbugs:DLS_DEAD_LOCAL_STOREÑ
findbugsDLS_DEAD_LOCAL_STORE$Style - Dead store to local variable"INFO*java2DLS_DEAD_LOCAL_STORE:ç<p>
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used.
</p>
<p>
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because SpotBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
</p>Z
CODE_SMELL
á
&findbugs:RV_CHECK_FOR_POSITIVE_INDEXOF‹
findbugsRV_CHECK_FOR_POSITIVE_INDEXOFDStyle - Method checks to see if result of String.indexOf is positive"INFO*java2RV_CHECK_FOR_POSITIVE_INDEXOF:≥<p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.
   It is much more typical to check to see if the result is negative or non-negative. It is
   positive only if the substring checked for occurs at some place other than at the beginning of
   the String.</p>Z
CODE_SMELL
·
'findbugs:VO_VOLATILE_REFERENCE_TO_ARRAYµ
findbugsVO_VOLATILE_REFERENCE_TO_ARRAY_Multi-threading - A volatile reference to an array doesn't treat the array elements as volatile"MAJOR*java2VO_VOLATILE_REFERENCE_TO_ARRAY:ı<p>This declares a volatile reference to an array, which might not be what
you want. With a volatile reference to an array, reads and writes of
the reference to the array are treated as volatile, but the array elements
are non-volatile. To get volatile array elements, you will need to use
one of the atomic array classes in java.util.concurrent (provided
in Java 5.0).</p>ZBUG
Á
(findbugs:AM_CREATES_EMPTY_JAR_FILE_ENTRY∫
findbugsAM_CREATES_EMPTY_JAR_FILE_ENTRY.Bad practice - Creates an empty jar file entry"MAJOR*java2AM_CREATES_EMPTY_JAR_FILE_ENTRY:¢<p>The code calls <code>putNextEntry()</code>, immediately
followed by a call to <code>closeEntry()</code>. This results
in an empty JarFile entry. The contents of the entry
should be written to the JarFile between the calls to
<code>putNextEntry()</code> and
<code>closeEntry()</code>.</p>Z
CODE_SMELL
ì
,findbugs:MS_SHOULD_BE_REFACTORED_TO_BE_FINAL‚
findbugs#MS_SHOULD_BE_REFACTORED_TO_BE_FINALDMalicious code - Field isn't final but should be refactored to be so"INFO*java2#MS_SHOULD_BE_REFACTORED_TO_BE_FINAL:≠<p>
This static field public but not final, and
could be changed by malicious code or
by accident from another package.
The field could be made final to avoid
this vulnerability. However, the static initializer contains more than one write
to the field, so doing so will require some refactoring.
</p>Z
CODE_SMELL
®
findbugs:UW_UNCOND_WAITå
findbugsUW_UNCOND_WAIT$Multi-threading - Unconditional wait"MAJOR*java2UW_UNCOND_WAIT:ß<p> This method contains a call to <code>java.lang.Object.wait()</code> which
  is not guarded by conditional control flow.&nbsp; The code should
    verify that condition it intends to wait for is not already satisfied
    before calling wait; any previous notifications will be ignored.
  </p>ZBUG
ÿ
+findbugs:BC_BAD_CAST_TO_CONCRETE_COLLECTION®
findbugs"BC_BAD_CAST_TO_CONCRETE_COLLECTION0Style - Questionable cast to concrete collection"INFO*java2"BC_BAD_CAST_TO_CONCRETE_COLLECTION:â<p>
This code casts an abstract collection (such as a Collection, List, or Set)
to a specific concrete implementation (such as an ArrayList or HashSet).
This might not be correct, and it may make your code fragile, since
it makes it harder to switch to other concrete implementations at a future
point. Unless you have a particular reason to do so, just use the abstract
collection class.
</p>Z
CODE_SMELL
ã
findbugs:MWN_MISMATCHED_NOTIFYË
findbugsMWN_MISMATCHED_NOTIFY%Multi-threading - Mismatched notify()"MAJOR*java2MWN_MISMATCHED_NOTIFY:Ù<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock
on the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in
an <code>IllegalMonitorStateException</code> being thrown.</p>ZBUG
˛
1findbugs:SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE»
findbugs(SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTEVSecurity - Nonconstant string passed to execute or addBatch method on an SQL statement"MAJOR*java2(SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE:Û<p>The method invokes the execute or addBatch method on an SQL statement with a String that seems
to be dynamically generated. Consider using
a prepared statement instead. It is more efficient and less vulnerable to
SQL injection attacks.
</p>ZVULNERABILITY
∆
!findbugs:SA_LOCAL_SELF_COMPARISON†
findbugsSA_LOCAL_SELF_COMPARISON2Correctness - Self comparison of value with itself"MAJOR*java2SA_LOCAL_SELF_COMPARISON:ô<p> This method compares a local variable with itself, and may indicate a typo or
a logic error.  Make sure that you are comparing the right things.
</p>ZBUG
‘
"findbugs:SE_READ_RESOLVE_IS_STATIC≠
findbugsSE_READ_RESOLVE_IS_STATICMCorrectness - The readResolve method must not be declared as a static method."MAJOR*java2SE_READ_RESOLVE_IS_STATIC:â<p> In order for the readResolve method to be recognized by the serialization
mechanism, it must not be declared as a static method.
</p>ZBUG
˚
&findbugs:VA_FORMAT_STRING_USES_NEWLINE–
findbugsVA_FORMAT_STRING_USES_NEWLINE9Bad practice - Format string should use %n rather than \n"MAJOR*java2VA_FORMAT_STRING_USES_NEWLINE:±<p>
This format string includes a newline character (\n). In format strings, it is generally
 preferable to use %n, which will produce the platform-specific line separator.
</p>Z
CODE_SMELL
Í
findbugs:VO_VOLATILE_INCREMENT«
findbugsVO_VOLATILE_INCREMENT?Multi-threading - An increment to a volatile field isn't atomic"MAJOR*java2VO_VOLATILE_INCREMENT:π<p>This code increments a volatile field. Increments of volatile fields aren't
atomic. If more than one thread is incrementing the field at the same time,
increments could be lost.
</p>ZBUG
¢
2findbugs:JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAITÎ
findbugs)JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAITQMulti-threading - Using monitor style wait methods on util.concurrent abstraction"MAJOR*java2)JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT:£<p> This method calls
<code>wait()</code>,
<code>notify()</code> or
<code>notifyAll()()</code>
on an object that also provides an
<code>await()</code>,
<code>signal()</code>,
<code>signalAll()</code> method (such as util.concurrent Condition objects).
This probably isn't what you want, and even if you do want it, you should consider changing
your design, as other developers will find it exceptionally confusing.
</p>ZBUG
¢
-findbugs:NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER
findbugs$NM_FUTURE_KEYWORD_USED_AS_IDENTIFIERLBad practice - Use of identifier that is a keyword in later versions of Java"MAJOR*java2$NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER:∞<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed
in order to compile it in later versions of Java.</p>Z
CODE_SMELL
∂
findbugs:RANGE_ARRAY_LENGTHñ
findbugsRANGE_ARRAY_LENGTH+Correctness - Array length is out of bounds"CRITICAL*java2RANGE_ARRAY_LENGTH:ü<p> Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>ZBUG
“
!findbugs:BC_IMPOSSIBLE_INSTANCEOF¨
findbugsBC_IMPOSSIBLE_INSTANCEOF1Correctness - instanceof will always return false"CRITICAL*java2BC_IMPOSSIBLE_INSTANCEOF:£<p>
This instanceof test will always return false. Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
</p>ZBUG
›
4findbugs:DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION§
findbugs+DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION`Correctness - Can't use reflection to check for presence of annotation without runtime retention"MAJOR*java2+DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION:…<p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can't be observed using reflection
(e.g., by using the isAnnotationPresent method).
   .</p>ZBUG
Ó
'findbugs:DMI_INVOKING_HASHCODE_ON_ARRAY¬
findbugsDMI_INVOKING_HASHCODE_ON_ARRAY0Correctness - Invocation of hashCode on an array"MAJOR*java2DMI_INVOKING_HASHCODE_ON_ARRAY:±<p>
The code invokes hashCode on an array. Calling hashCode on
an array returns the same value as System.identityHashCode, and ignores
the contents and length of the array. If you need a hashCode that
depends on the contents of an array <code>a</code>,
use <code>java.util.Arrays.hashCode(a)</code>.

</p>ZBUG
∞
%findbugs:IL_CONTAINER_ADDED_TO_ITSELFÜ
findbugsIL_CONTAINER_ADDED_TO_ITSELF-Correctness - A collection is added to itself"MAJOR*java2IL_CONTAINER_ADDED_TO_ITSELF:}<p>A collection is added to itself. As a result, computing the hashCode of this
set will throw a StackOverflowException.
</p>ZBUG
≥
4findbugs:BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR˙
findbugs+BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATORIPerformance - Primitive value is unboxed and coerced for ternary operator"MAJOR*java2+BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR:∂<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the
evaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The
semantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped
numeric values, the values are unboxed and converted/coerced to their common type (e.g,
if <code>e1</code> is of type <code>Integer</code>
and <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,
converted to a floating point value, and boxed. See JLS Section 15.25.
</p>ZBUG
ø
0findbugs:NP_METHOD_PARAMETER_RELAXING_ANNOTATIONä
findbugs'NP_METHOD_PARAMETER_RELAXING_ANNOTATION8Style - Method tightens nullness annotation on parameter"INFO*java2'NP_METHOD_PARAMETER_RELAXING_ANNOTATION:Ÿ<p>
        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter
    that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull.
    Doing so violates the contract that the method should handle a null parameter.
        </p>Z
CODE_SMELL
ß
%findbugs:NP_SYNC_AND_NULL_CHECK_FIELD˝
findbugsNP_SYNC_AND_NULL_CHECK_FIELD?Multi-threading - Synchronize and null check on the same field."MAJOR*java2NP_SYNC_AND_NULL_CHECK_FIELD:·<p>Since the field is synchronized on, it seems not likely to be null.
If it is null and then synchronized on a NullPointerException will be
thrown and the check would be pointless. Better to synchronize on
another field.</p>ZBUG
≤
findbugs:DM_STRING_CTORñ
findbugsDM_STRING_CTORGPerformance - Method invokes inefficient new String(String) constructor"MAJOR*java2DM_STRING_CTOR:é<p> Using the <code>java.lang.String(String)</code> constructor wastes memory
  because the object so constructed will be functionally indistinguishable
  from the <code>String</code> passed as a parameter.&nbsp; Just use the
  argument <code>String</code> directly.</p>ZBUG
—
findbugs:IC_INIT_CIRCULARITY∞
findbugsIC_INIT_CIRCULARITY"Style - Initialization circularity"INFO*java2IC_INIT_CIRCULARITY:Ω<p> A circularity was detected in the static initializers of the two
  classes referenced by the bug instance.&nbsp; Many kinds of unexpected
  behavior may arise from such circularity.</p>Z
CODE_SMELL
¿
findbugs:IJU_TEARDOWN_NO_SUPERù
findbugsIJU_TEARDOWN_NO_SUPERJCorrectness - TestCase defines tearDown that doesn't call super.tearDown()"MAJOR*java2IJU_TEARDOWN_NO_SUPER:Ñ<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call
super.tearDown(), but doesn't.</p>ZBUG
õ
findbugs:NP_BOOLEAN_RETURN_NULL˜
findbugsNP_BOOLEAN_RETURN_NULLDBad practice - Method with Boolean return type returns explicit null"MAJOR*java2NP_BOOLEAN_RETURN_NULL:€<p>
    A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.
    This method can be invoked as though it returned a value of type boolean, and
    the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,
    this will result in a NullPointerException.
       </p>Z
CODE_SMELL
õ
findbugs:CD_CIRCULAR_DEPENDENCY˜
findbugsCD_CIRCULAR_DEPENDENCY4Style - Test for circular dependencies among classes"INFO*java2CD_CIRCULAR_DEPENDENCY:Ï<p>
    This class has a circular dependency with other classes. This makes building these classes
    difficult, as each is dependent on the other to build correctly. Consider using interfaces
    to break the hard dependency.
    </p>Z
CODE_SMELL
Ç
$findbugs:DB_DUPLICATE_SWITCH_CLAUSESŸ
findbugsDB_DUPLICATE_SWITCH_CLAUSES8Style - Method uses the same code for two switch clauses"INFO*java2DB_DUPLICATE_SWITCH_CLAUSES:¿<p>
      This method uses the same code to implement two clauses of a switch statement.
    This could be a case of duplicate code, but it might also indicate
    a coding mistake.
      </p>Z
CODE_SMELL
Ì
/findbugs:NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELDπ
findbugs&NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD3Style - Read of unwritten public or protected field"INFO*java2&NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD:è<p> The program is dereferencing a public or protected
field that does not seem to ever have a non-null value written to it.
Unless the field is initialized via some mechanism not seen by the analysis,
dereferencing this value will generate a null pointer exception.
</p>Z
CODE_SMELL
Î
findbugs:DMI_DOH÷
findbugsDMI_DOH3Correctness - D'oh! A nonsensical method invocation"MAJOR*java2DMI_DOH:q<p>
This partical method invocation doesn't make sense, for reasons that should be apparent from inspection.
</p>ZBUG
¸
findbugs:HE_HASHCODE_NO_EQUALSŸ
findbugsHE_HASHCODE_NO_EQUALS8Bad practice - Class defines hashCode() but not equals()"MAJOR*java2HE_HASHCODE_NO_EQUALS:À<p> This class defines a <code>hashCode()</code> method but not an
  <code>equals()</code> method.&nbsp; Therefore, the class may
  violate the invariant that equal objects must have equal hashcodes.</p>Z
CODE_SMELL
¶
;findbugs:J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSIONÊ
findbugs2J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION@Bad practice - Store of non serializable object into HttpSession"MAJOR*java22J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION:ñ<p>
This code seems to be storing a non-serializable object into an HttpSession.
If this session is passivated or migrated, an error will result.
</p>Z
CODE_SMELL
“
findbugs:UL_UNRELEASED_LOCK≤
findbugsUL_UNRELEASED_LOCK;Multi-threading - Method does not release lock on all paths"MAJOR*java2UL_UNRELEASED_LOCK:Æ<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,
but does not release it on all paths out of the method.  In general, the correct idiom
for using a JSR-166 lock is:
</p>
<pre><code>Lock l = ...;
l.lock();
try {
    // do something
} finally {
    l.unlock();
}
</code></pre>ZBUG
Ã
findbugs:DM_INVALID_MIN_MAX¨
findbugsDM_INVALID_MIN_MAX<Correctness - Incorrect combination of Math.max and Math.min"MAJOR*java2DM_INVALID_MIN_MAX:ß<p>This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of
  the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result
  (or NaN if the value is NaN).</p>ZBUG
æ
$findbugs:DMI_BLOCKING_METHODS_ON_URLï
findbugsDMI_BLOCKING_METHODS_ON_URLAPerformance - The equals and hashCode methods of URL are blocking"MAJOR*java2DMI_BLOCKING_METHODS_ON_URL:˘<p> The equals and hashCode
method of URL perform domain name resolution, this can result in a big performance hit.
See <a href="http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.
Consider using <code>java.net.URI</code> instead.
   </p>ZBUG
“
,findbugs:QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT°
findbugs#QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENTBCorrectness - Method assigns boolean literal in boolean expression"MAJOR*java2#QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT:Ù<p>
      This method assigns a literal boolean value (true or false) to a boolean variable inside
      an if or while expression. Most probably this was supposed to be a boolean comparison using
      ==, not an assignment using =.
      </p>ZBUG
∏
.findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQÖ
findbugs%ES_COMPARING_PARAMETER_STRING_WITH_EQ<Bad practice - Comparison of String parameter using == or !="MAJOR*java2%ES_COMPARING_PARAMETER_STRING_WITH_EQ:”<p>This code compares a <code>java.lang.String</code> parameter for reference
equality using the == or != operators. Requiring callers to
pass only String constants or interned strings to a method is unnecessarily
fragile, and rarely leads to measurable performance gains. Consider
using the <code>equals(Object)</code> method instead.</p>Z
CODE_SMELL
†
.findbugs:IM_AVERAGE_COMPUTATION_COULD_OVERFLOWÌ
findbugs%IM_AVERAGE_COMPUTATION_COULD_OVERFLOW-Style - Computation of average could overflow"INFO*java2%IM_AVERAGE_COMPUTATION_COULD_OVERFLOW:À<p>The code computes the average of two integers using either division or signed right shift,
and then uses the result as the index of an array.
If the values being averaged are very large, this can overflow (resulting in the computation
of a negative average).  Assuming that the result is intended to be nonnegative, you
can use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,
use <code>(low+high) &gt;&gt;&gt; 1</code>
</p>
<p>This bug exists in many earlier implementations of binary search and merge sort.
Martin Buchholz <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6412541">found and fixed it</a>
in the JDK libraries, and Joshua Bloch
<a href="http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html">widely
publicized the bug pattern</a>.
</p>Z
CODE_SMELL
õ
-findbugs:RV_RETURN_VALUE_IGNORED_BAD_PRACTICEÈ
findbugs$RV_RETURN_VALUE_IGNORED_BAD_PRACTICE6Bad practice - Method ignores exceptional return value"MAJOR*java2$RV_RETURN_VALUE_IGNORED_BAD_PRACTICE:ø<p> This method returns a value that is not checked. The return value should be checked
since it can indicate an unusual or unexpected function execution. For
example, the <code>File.delete()</code> method returns false
if the file could not be successfully deleted (rather than
throwing an Exception).
If you don't check the result, you won't notice if the method invocation
signals unexpected behavior by returning an atypical return value.
</p>Z
CODE_SMELL
à
(findbugs:SE_TRANSIENT_FIELD_NOT_RESTORED€
findbugsSE_TRANSIENT_FIELD_NOT_RESTOREDABad practice - Transient field that isn't set by deserialization."MAJOR*java2SE_TRANSIENT_FIELD_NOT_RESTORED:∞<p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any
deserialized instance of the class.
</p>Z
CODE_SMELL
ª
8findbugs:AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION˛
findbugs/AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTIONOMulti-threading - Sequence of calls to concurrent abstraction may not be atomic"MAJOR*java2/AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION:¨<p>This code contains a sequence of calls to a concurrent  abstraction
            (such as a concurrent hash map).
            These calls will not be executed atomically.ZBUG
Á
#findbugs:ODR_OPEN_DATABASE_RESOURCEø
findbugsODR_OPEN_DATABASE_RESOURCE9Bad practice - Method may fail to close database resource"MAJOR*java2ODR_OPEN_DATABASE_RESOURCE:¶<p> The method creates a database resource (such as a database connection
or row set), does not assign it to any
fields, pass it to other methods, or return it, and does not appear to close
the object on all paths out of the method.&nbsp; Failure to
close database resources on all paths out of a method may
result in poor performance, and could cause the application to
have problems communicating with the database.
</p>Z
CODE_SMELL
Ó
0findbugs:XSS_REQUEST_PARAMETER_TO_SERVLET_WRITERπ
findbugs'XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER?Security - Servlet reflected cross site scripting vulnerability"MAJOR*java2'XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER:˝<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting
vulnerability. See <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting
vulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
Ù
findbugs:DM_BOOLEAN_CTOR◊
findbugsDM_BOOLEAN_CTOR^Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"MAJOR*java2DM_BOOLEAN_CTOR:∂<p> Creating new instances of <code>java.lang.Boolean</code> wastes
  memory, since <code>Boolean</code> objects are immutable and there are
  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>
  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>ZBUG
ö
6findbugs:EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THISﬂ
findbugs-EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS5Bad practice - Equals checks for incompatible operand"MAJOR*java2-EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS:§<p> This equals method is checking to see if the argument is some incompatible type
(i.e., a class that is neither a supertype nor subtype of the class that defines
the equals method). For example, the Foo class might have an equals method
that looks like:
</p>
<pre><code>public boolean equals(Object o) {
    if (o instanceof Foo)
        return name.equals(((Foo)o).name);
    else if (o instanceof String)
        return name.equals(o);
    else return false;
}
</code></pre>

<p>This is considered bad practice, as it makes it very hard to implement an equals method that
is symmetric and transitive. Without those properties, very unexpected behaviors are possible.
</p>Z
CODE_SMELL
Ü
findbugs:NP_ALWAYS_NULLÍ
findbugsNP_ALWAYS_NULL&Correctness - Null pointer dereference"MAJOR*java2NP_ALWAYS_NULL:É<p> A null pointer is dereferenced here.&nbsp; This will lead to a
<code>NullPointerException</code> when the code is executed.</p>ZBUG
≈
%findbugs:ES_COMPARING_STRINGS_WITH_EQõ
findbugsES_COMPARING_STRINGS_WITH_EQ:Bad practice - Comparison of String objects using == or !="MAJOR*java2ES_COMPARING_STRINGS_WITH_EQ:˝<p>This code compares <code>java.lang.String</code> objects for reference
equality using the == or != operators.
Unless both strings are either constants in a source file, or have been
interned using the <code>String.intern()</code> method, the same string
value may be represented by two different String objects. Consider
using the <code>equals(Object)</code> method instead.</p>Z
CODE_SMELL
∂
%findbugs:ISC_INSTANTIATE_STATIC_CLASSå
findbugsISC_INSTANTIATE_STATIC_CLASSPBad practice - Needless instantiation of class that only supplies static methods"MAJOR*java2ISC_INSTANTIATE_STATIC_CLASS:ÿ<p> This class allocates an object that is based on a class that only supplies static methods. This object
does not need to be created, just access the static methods directly using the class name as a qualifier.</p>Z
CODE_SMELL
à
findbugs:MF_CLASS_MASKS_FIELDÊ
findbugsMF_CLASS_MASKS_FIELD?Correctness - Class defines field that masks a superclass field"MAJOR*java2MF_CLASS_MASKS_FIELD:⁄<p> This class defines a field with the same name as a visible
instance field in a superclass.  This is confusing, and
may indicate an error if methods update or access one of
the fields when they wanted the other.</p>ZBUG
„
6findbugs:DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES®
findbugs-DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES7Correctness - Collections should not contain themselves"MAJOR*java2-DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES:Ú<p> This call to a generic collection's method would only make sense if a collection contained
itself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause
problems if it were true (such as the computation of the hash code resulting in infinite recursion).
It is likely that the wrong value is being passed as a parameter.
    </p>ZBUG

findbugs:IL_INFINITE_LOOP“
findbugsIL_INFINITE_LOOP'Correctness - An apparent infinite loop"MAJOR*java2IL_INFINITE_LOOP:g<p>This loop doesn't seem to have a way to terminate (other than by perhaps
throwing an exception).</p>ZBUG
ï
4findbugs:STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE‹
findbugs+STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE+Multi-threading - Call to static DateFormat"MAJOR*java2+STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE:∂<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.
The detector has found a call to an instance of DateFormat that has been obtained via a static
field. This looks suspicious.</p>
<p>For more information on this see <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579">JDK Bug #6231579</a>
and <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997">JDK Bug #6178997</a>.</p>ZBUG
«
 findbugs:UC_USELESS_OBJECT_STACK¢
findbugsUC_USELESS_OBJECT_STACK'Style - Useless object created on stack"INFO*java2UC_USELESS_OBJECT_STACK:¢<p>This object is created just to perform some modifications which don't have any side-effect.
Probably something else was meant or the object can be removed.</p>Z
CODE_SMELL
ﬂ
 findbugs:RI_REDUNDANT_INTERFACES∫
findbugsRI_REDUNDANT_INTERFACES5Style - Class implements same interface as superclass"INFO*java2RI_REDUNDANT_INTERFACES:¨<p>
    This class declares that it implements an interface that is also implemented by a superclass.
    This is redundant because once a superclass implements an interface, all subclasses by default also
    implement this interface. It may point out that the inheritance hierarchy has changed since
    this class was created, and consideration should be given to the ownership of
    the interface's implementation.
    </p>Z
CODE_SMELL
∆
(findbugs:RV_ABSOLUTE_VALUE_OF_RANDOM_INTô
findbugsRV_ABSOLUTE_VALUE_OF_RANDOM_INTLCorrectness - Bad attempt to compute absolute value of signed random integer"MAJOR*java2RV_ABSOLUTE_VALUE_OF_RANDOM_INT:Í<p> This code generates a random signed integer and then computes
the absolute value of that random integer.  If the number returned by the random number
generator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since
<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>). (Same problem arises for long values as well).
</p>ZBUG
ô
4findbugs:SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS‡
findbugs+SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS9Style - Transient field of class that isn't Serializable."INFO*java2+SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS:¶<p> The field is marked as transient, but the class isn't Serializable, so marking it as transient
has absolutely no effect.
This may be leftover marking from a previous version of the code in which the class was transient, or
it may indicate a misunderstanding of how serialization works.
</p>Z
CODE_SMELL
¶
!findbugs:IIO_INEFFICIENT_INDEX_OFÄ
findbugsIIO_INEFFICIENT_INDEX_OF7Performance - Inefficient use of String.indexOf(String)"MAJOR*java2IIO_INEFFICIENT_INDEX_OF:Ù<p> This code passes a constant string of length 1 to String.indexOf().
It is more efficient to use the integer implementations of String.indexOf().
f. e. call <code>myString.indexOf('.')</code> instead of <code>myString.indexOf(".")</code></p>ZBUG
È
findbugs:SE_INNER_CLASSÕ
findbugsSE_INNER_CLASS'Bad practice - Serializable inner class"MAJOR*java2SE_INNER_CLASS:ﬁ<p> This Serializable class is an inner class.  Any attempt to serialize
it will also serialize the associated outer instance. The outer instance is serializable,
so this won't fail, but it might serialize a lot more data than intended.
If possible, making the inner class a static inner class (also known as a nested class) should solve the
problem.Z
CODE_SMELL
»
findbugs:WS_WRITEOBJECT_SYNCß
findbugsWS_WRITEOBJECT_SYNCRMulti-threading - Class's writeObject() method is synchronized but nothing else is"MAJOR*java2WS_WRITEOBJECT_SYNC:ä<p> This class has a <code>writeObject()</code> method which is synchronized;
  however, no other method of the class is synchronized.</p>ZBUG
¨
findbugs:DMI_EMPTY_DB_PASSWORDâ
findbugsDMI_EMPTY_DB_PASSWORD"Security - Empty database password"MAJOR*java2DMI_EMPTY_DB_PASSWORD:é<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.
</p>ZVULNERABILITY
Ö
+findbugs:MTIA_SUSPECT_STRUTS_INSTANCE_FIELD’
findbugs"MTIA_SUSPECT_STRUTS_INSTANCE_FIELDEStyle - Class extends Struts Action class and uses instance variables"INFO*java2"MTIA_SUSPECT_STRUTS_INSTANCE_FIELD:°<p>
    This class extends from a Struts Action class, and uses an instance member variable. Since only
    one instance of a struts Action class is created by the Struts framework, and used in a
    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider
    only using method local variables. Only instance fields that are written outside of a monitor
    are reported.
    </p>Z
CODE_SMELL
Ü
+findbugs:SE_READ_RESOLVE_MUST_RETURN_OBJECT÷
findbugs"SE_READ_RESOLVE_MUST_RETURN_OBJECTTBad practice - The readResolve method must be declared with a return type of Object."MAJOR*java2"SE_READ_RESOLVE_MUST_RETURN_OBJECT:í<p> In order for the readResolve method to be recognized by the serialization
mechanism, it must be declared to have a return type of Object.
</p>Z
CODE_SMELL
£
"findbugs:BSHIFT_WRONG_ADD_PRIORITY¸
findbugsBSHIFT_WRONG_ADD_PRIORITY5Correctness - Possible bad parsing of shift operation"MAJOR*java2BSHIFT_WRONG_ADD_PRIORITY:<p>
The code performs an operation like (x &lt;&lt; 8 + y). Although this might be correct, probably it was meant
to perform (x &lt;&lt; 8) + y, but shift operation has
a lower precedence, so it's actually parsed as x &lt;&lt; (8 + y).
</p>ZBUG
ü
findbugs:EQ_SELF_NO_OBJECTÄ
findbugsEQ_SELF_NO_OBJECT0Bad practice - Covariant equals() method defined"MAJOR*java2EQ_SELF_NO_OBJECT:Ç<p> This class defines a covariant version of <code>equals()</code>.&nbsp;
  To correctly override the <code>equals()</code> method in
  <code>java.lang.Object</code>, the parameter of <code>equals()</code>
  must have type <code>java.lang.Object</code>.</p>Z
CODE_SMELL
§
Afindbugs:SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRINGﬁ
findbugs8SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRINGFSecurity - A prepared statement is generated from a nonconstant String"MAJOR*java28SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING:˘<p>The code creates an SQL prepared statement from a nonconstant String.
If unchecked, tainted data from a user is used in building this String, SQL injection could
be used to make the prepared statement do something unexpected and undesirable.
</p>ZVULNERABILITY
©
findbugs:UC_USELESS_OBJECTä
findbugsUC_USELESS_OBJECTStyle - Useless object created"INFO*java2UC_USELESS_OBJECT:ü<p>Our analysis shows that this object is useless.
It's created and modified, but its value never go outside of the method or produce any side-effect.
Either there is a mistake and object was intended to be used or it can be removed.</p>
<p>This analysis rarely produces false-positives. Common false-positive cases include:</p>
<p>- This object used to implicitly throw some obscure exception.</p>
<p>- This object used as a stub to generalize the code.</p>
<p>- This object used to hold strong references to weak/soft-referenced objects.</p>Z
CODE_SMELL
Ø
findbugs:DE_MIGHT_DROPî
findbugsDE_MIGHT_DROP*Bad practice - Method might drop exception"MAJOR*java2DE_MIGHT_DROP:§<p> This method might drop an exception.&nbsp; In general, exceptions
  should be handled or reported in some way, or they should be thrown
  out of the method.</p>Z
CODE_SMELL
ª
findbugs:ESync_EMPTY_SYNCù
findbugsESync_EMPTY_SYNC*Multi-threading - Empty synchronized block"MAJOR*java2ESync_EMPTY_SYNC:Æ<p> The code contains an empty synchronized block:</p>
<pre><code>synchronized() {
}
</code></pre>
<p>Empty synchronized blocks are far more subtle and hard to use correctly
than most people recognize, and empty synchronized blocks
are almost never a better solution
than less contrived solutions.
</p>ZBUG
ß
,findbugs:MTIA_SUSPECT_SERVLET_INSTANCE_FIELDˆ
findbugs#MTIA_SUSPECT_SERVLET_INSTANCE_FIELD?Style - Class extends Servlet class and uses instance variables"INFO*java2#MTIA_SUSPECT_SERVLET_INSTANCE_FIELD:∆<p>
    This class extends from a Servlet class, and uses an instance member variable. Since only
    one instance of a Servlet class is created by the J2EE framework, and used in a
    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider
    only using method local variables.
    </p>Z
CODE_SMELL
Î
findbugs:DM_FP_NUMBER_CTORÃ
findbugsDM_FP_NUMBER_CTORfPerformance - Method invokes inefficient floating-point Number constructor; use static valueOf instead"MAJOR*java2DM_FP_NUMBER_CTOR:ü<p>
      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas
      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.
      Using of cached values avoids object allocation and the code will be faster.
      </p>
      <p>
      Unless the class must be compatible with JVMs predating Java 1.5,
      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.
      </p>ZBUG
ø
findbugs:ICAST_BAD_SHIFT_AMOUNTõ
findbugsICAST_BAD_SHIFT_AMOUNTFCorrectness - 32 bit int shifted by an amount not in the range -31..31"MAJOR*java2ICAST_BAD_SHIFT_AMOUNT:Ñ<p>
The code performs shift of a 32 bit int by a constant amount outside
the range -31..31.
The effect of this is to use the lower 5 bits of the integer
value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits,
and shifting by 32 bits is the same as shifting by zero bits). This probably isn't what was expected,
and it is at least confusing.
</p>ZBUG
≥
findbugs:SS_SHOULD_BE_STATICí
findbugsSS_SHOULD_BE_STATIC8Performance - Unread field: should this field be static?"MAJOR*java2SS_SHOULD_BE_STATIC:è<p> This class contains an instance final field that
   is initialized to a compile-time static value.
   Consider making the field static.</p>ZBUG
ë
findbugs:DMI_USELESS_SUBSTRINGÓ
findbugsDMI_USELESS_SUBSTRINGDStyle - Invocation of substring(0), which returns the original value"INFO*java2DMI_USELESS_SUBSTRING:V<p>
This code invokes substring(0) on a String, which returns the original value.
</p>Z
CODE_SMELL
“
findbugs:MS_MUTABLE_ARRAY¥
findbugsMS_MUTABLE_ARRAY)Malicious code - Field is a mutable array"INFO*java2MS_MUTABLE_ARRAY:¿<p> A final static field references an array
   and can be accessed by malicious code or
        by accident from another package.
   This code can freely modify the contents of the array.</p>Z
CODE_SMELL
¨
findbugs:MS_MUTABLE_COLLECTIONâ
findbugsMS_MUTABLE_COLLECTION.Malicious code - Field is a mutable collection"INFO*java2MS_MUTABLE_COLLECTION:Ü<p>A mutable collection instance is assigned to a final static field,
   thus can be changed by malicious code or by accident from another package.
   Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc.
   to avoid this vulnerability.</p>Z
CODE_SMELL
§
findbugs:IT_NO_SUCH_ELEMENTÑ
findbugsIT_NO_SUCH_ELEMENTHBad practice - Iterator next() method can't throw NoSuchElementException"MAJOR*java2IT_NO_SUCH_ELEMENT:Ï<p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;
  However, its <code>next()</code> method is not capable of throwing
  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>
  method should be changed so it throws <code>NoSuchElementException</code>
  if is called when there are no more elements to return.</p>Z
CODE_SMELL
”
findbugs:NM_VERY_CONFUSING¥
findbugsNM_VERY_CONFUSING)Correctness - Very confusing method names"MAJOR*java2NM_VERY_CONFUSING:ƒ<p> The referenced methods have names that differ only by capitalization.
This is very confusing because if the capitalization were
identical then one of the methods would override the other.
</p>ZBUG
ã
$findbugs:USM_USELESS_ABSTRACT_METHOD‚
findbugsUSM_USELESS_ABSTRACT_METHODCStyle - Abstract Method is already defined in implemented interface"INFO*java2USM_USELESS_ABSTRACT_METHOD:æ<p>
      This abstract method is already defined in an interface that is implemented by this abstract
      class. This method can be removed, as it provides no additional value.
      </p>Z
CODE_SMELL
ï
!findbugs:VA_FORMAT_STRING_ILLEGALÔ
findbugsVA_FORMAT_STRING_ILLEGAL#Correctness - Illegal format string"MAJOR*java2VA_FORMAT_STRING_ILLEGAL:x<p>
The format string is syntactically invalid,
and a runtime exception will occur when
this statement is executed.
</p>ZBUG
∞
findbugs:BIT_IORõ
findbugsBIT_IOR$Correctness - Incompatible bit masks"MAJOR*java2BIT_IOR:ƒ<p> This method compares an expression of the form <code>(e | C)</code> to D.
which will always compare unequal
due to the specific values of constants C and D.
This may indicate a logic error or typo.</p>

<p> Typically, this bug occurs because the code wants to perform
a membership test in a bit set, but uses the bitwise OR
operator ("|") instead of bitwise AND ("&amp;").</p>

<p>Also such bug may appear in expressions like <code>(e &amp; A | B) == C</code>
which is parsed like <code>((e &amp; A) | B) == C</code> while <code>(e &amp; (A | B)) == C</code> was intended.</p>ZBUG
”
findbugs:EQ_OTHER_USE_OBJECT≤
findbugsEQ_OTHER_USE_OBJECTQCorrectness - equals() method defined that doesn't override Object.equals(Object)"MAJOR*java2EQ_OTHER_USE_OBJECT:ñ<p> This class defines an <code>equals()</code>
  method, that doesn't override the normal <code>equals(Object)</code> method
  defined in the base <code>java.lang.Object</code> class.&nbsp;
  The class should probably define a <code>boolean equals(Object)</code> method.
  </p>ZBUG
‰
&findbugs:RV_ABSOLUTE_VALUE_OF_HASHCODEπ
findbugsRV_ABSOLUTE_VALUE_OF_HASHCODEMCorrectness - Bad attempt to compute absolute value of signed 32-bit hashcode"MAJOR*java2RV_ABSOLUTE_VALUE_OF_HASHCODE:ç<p> This code generates a hashcode and then computes
the absolute value of that hashcode.  If the hashcode
is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since
<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).
</p>
<p>One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,
including "polygenelubricants" "GydZG_" and ""DESIGNING WORKHOUSES".
</p>ZBUG
Á
"findbugs:BRSA_BAD_RESULTSET_ACCESS¿
findbugsBRSA_BAD_RESULTSET_ACCESSGCorrectness - Method attempts to access a result set field with index 0"MAJOR*java2BRSA_BAD_RESULTSET_ACCESS:¢<p> A call to getXXX or updateXXX methods of a result set was made where the
field index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>ZBUG
‰
(findbugs:DLS_DEAD_STORE_OF_CLASS_LITERAL∑
findbugsDLS_DEAD_STORE_OF_CLASS_LITERAL)Correctness - Dead store of class literal"MAJOR*java2DLS_DEAD_STORE_OF_CLASS_LITERAL:´<p>
This instruction assigns a class literal to a variable and then never uses it.
<a href="http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal">The behavior of this differs in Java 1.4 and in Java 5.</a>
In Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer
for <code>Foo</code> to be executed, if it has not been executed already.
In Java 5 and later, it does not.
</p>
<p>See Sun's <a href="http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal">article on Java SE compatibility</a>
for more details and examples, and suggestions on how to force class initialization in Java 5.
</p>ZBUG
±
#findbugs:SA_LOCAL_DOUBLE_ASSIGNMENTâ
findbugsSA_LOCAL_DOUBLE_ASSIGNMENT+Style - Double assignment of local variable"INFO*java2SA_LOCAL_DOUBLE_ASSIGNMENT:ˇ<p> This method contains a double assignment of a local variable; e.g.
</p>
<pre><code>public void foo() {
    int x,y;
    x = x = 17;
}
</code></pre>
<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>Z
CODE_SMELL
¯
2findbugs:TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED¡
findbugs)TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIREDuCorrectness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required"MAJOR*java2)TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED:’<p>
        A value specified as not carrying a type qualifier annotation is guaranteed
        to be consumed in a location or locations requiring that the value does
        carry that annotation.
        </p>

        <p>
        More precisely, a value annotated with a type qualifier specifying when=NEVER
        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.
        </p>

        <p>
        TODO: example
        </p>ZBUG
π
(findbugs:RV_NEGATING_RESULT_OF_COMPARETOå
findbugsRV_NEGATING_RESULT_OF_COMPARETO;Bad practice - Negating the result of compareTo()/compare()"MAJOR*java2RV_NEGATING_RESULT_OF_COMPARETO:Á<p> This code negatives the return value of a compareTo or compare method.
This is a questionable or bad programming practice, since if the return
value is Integer.MIN_VALUE, negating the return value won't
negate the sign of the result. You can achieve the same intended result
by reversing the order of the operands rather than by negating the results.
</p>Z
CODE_SMELL
è
1findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINKŸ
findbugs(TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINKzCorrectness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier"MAJOR*java2(TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK:Í<p>
      A value that is annotated as possibility being an instance of
    the values denoted by the type qualifier, and the value is guaranteed to be used
    in a way that prohibits values denoted by that type qualifier.
      </p>ZBUG
¶
0findbugs:VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSEDÒ
findbugs'VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSEDSCorrectness - More arguments are passed than are actually used in the format string"MAJOR*java2'VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED:´<p>
A format-string method with a variable number of arguments is called,
but more arguments are passed than are actually used by the format string.
This won't cause a runtime exception, but the code may be silently omitting
information that was intended to be included in the formatted string.
</p>ZBUG
Ñ
)findbugs:FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER÷
findbugs FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER-Correctness - Doomed test for equality to NaN"MAJOR*java2 FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER:ƒ<p>
    This code checks to see if a floating point value is equal to the special
    Not A Number value (e.g., <code>if (x == Double.NaN)</code>). However,
    because of the special semantics of <code>NaN</code>, no value
    is equal to <code>Nan</code>, including <code>NaN</code>. Thus,
    <code>x == Double.NaN</code> always evaluates to false.

    To check to see if a value contained in <code>x</code>
    is the special Not A Number value, use
    <code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if
    <code>x</code> is floating point precision).
    </p>ZBUG
¸
0findbugs:ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT«
findbugs'ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT/Style - Unsigned right shift cast to short/byte"INFO*java2'ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT:ü<p>
The code performs an unsigned right shift, whose result is then
cast to a short or byte, which discards the upper bits of the result.
Since the upper bits are discarded, there may be no difference between
a signed and unsigned right shift (depending upon the size of the shift).
</p>Z
CODE_SMELL
µ
=findbugs:TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIREDÛ
findbugs4TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIREDbCorrectness - Value without a type qualifier used where a value is required to have that qualifier"MAJOR*java24TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED:Ñ<p>
        A value is being used in a way that requires the value be annotation with a type qualifier.
    The type qualifier is strict, so the tool rejects any values that do not have
    the appropriate annotation.
        </p>

        <p>
        To coerce a value to have a strict annotation, define an identity function where the return value is annotated
    with the strict annotation.
    This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.
        </p>ZBUG
ù
0findbugs:UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELDË
findbugs'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD+Style - Unwritten public or protected field"INFO*java2'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD:ƒ<p> No writes were seen to this public/protected field.&nbsp; All reads of it will return the default
value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>Z
CODE_SMELL
®

*findbugs:BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY˘	
findbugs!BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY5Correctness - Impossible downcast of toArray() result"CRITICAL*java2!BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY:⁄<p>
This code is casting the result of calling <code>toArray()</code> on a collection
to a type more specific than <code>Object[]</code>, as in:</p>
<pre><code>String[] getAsArray(Collection&lt;String&gt; c) {
    return (String[]) c.toArray();
}
</code></pre>
<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code>
of almost all collections return an <code>Object[]</code>. They can't really do anything else,
since the Collection object has no reference to the declared generic type of the collection.
<p>The correct way to do get an array of a specific type from a collection is to use
  <code>c.toArray(new String[]);</code>
  or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).
<p>There is one common/known exception to this. The <code>toArray()</code>
method of lists returned by <code>Arrays.asList(...)</code> will return a covariantly
typed array. For example, <code>Arrays.asArray(new String[] { "a" }).toArray()</code>
will return a <code>String []</code>. SpotBugs attempts to detect and suppress
such cases, but may miss some.
</p>ZBUG
ç
findbugs:HE_EQUALS_USE_HASHCODEÈ
findbugsHE_EQUALS_USE_HASHCODE@Bad practice - Class defines equals() and uses Object.hashCode()"MAJOR*java2HE_EQUALS_USE_HASHCODE:—<p> This class overrides <code>equals(Object)</code>, but does not
  override <code>hashCode()</code>, and inherits the implementation of
  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns
  the identity hash code, an arbitrary value assigned to the object
  by the VM).&nbsp; Therefore, the class is very likely to violate the
  invariant that equal objects must have equal hashcodes.</p>

<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,
the recommended <code>hashCode</code> implementation to use is:</p>
<pre><code>public int hashCode() {
    assert false : "hashCode not designed";
    return 42; // any arbitrary constant will do
}
</code></pre>Z
CODE_SMELL
ÿ
)findbugs:RV_RETURN_VALUE_IGNORED_INFERRED™
findbugs RV_RETURN_VALUE_IGNORED_INFERRED0Style - Method ignores return value, is this OK?"INFO*java2 RV_RETURN_VALUE_IGNORED_INFERRED:è<p>This code calls a method and ignores the return value. The return value
is the same type as the type the method is invoked on, and from our analysis it looks
like the return value might be important (e.g., like ignoring the
return value of <code>String.toLowerCase()</code>).
</p>
<p>We are guessing that ignoring the return value might be a bad idea just from
a simple analysis of the body of the method. You can use a @CheckReturnValue annotation
to instruct SpotBugs as to whether ignoring the return value of this method
is important or acceptable.
</p>
<p>Please investigate this closely to decide whether it is OK to ignore the return value.
</p>Z
CODE_SMELL
ò
findbugs:ME_ENUM_FIELD_SETTERˆ
findbugsME_ENUM_FIELD_SETTER@Bad practice - Public enum method unconditionally sets its field"MAJOR*java2ME_ENUM_FIELD_SETTER:‚<p>This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code
  or by accident from another package. Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world.
  Consider removing this method or declaring it package-private.</p>Z
CODE_SMELL
˘
findbugs:RV_01_TO_INTﬂ
findbugsRV_01_TO_INTBCorrectness - Random value from 0 to 1 is coerced to the integer 0"MAJOR*java2RV_01_TO_INT:‡<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably
want to multiply the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.
</p>ZBUG
“
#findbugs:SIO_SUPERFLUOUS_INSTANCEOF™
findbugsSIO_SUPERFLUOUS_INSTANCEOFCCorrectness - Unnecessary type check done using instanceof operator"MAJOR*java2SIO_SUPERFLUOUS_INSTANCEOF:é<p> Type check performed using the instanceof operator where it can be statically determined whether the object
is of the type requested. </p>ZBUG
è
+findbugs:BC_BAD_CAST_TO_ABSTRACT_COLLECTIONﬂ
findbugs"BC_BAD_CAST_TO_ABSTRACT_COLLECTION0Style - Questionable cast to abstract collection"INFO*java2"BC_BAD_CAST_TO_ABSTRACT_COLLECTION:¿<p>
This code casts a Collection to an abstract collection
(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).
Ensure that you are guaranteed that the object is of the type
you are casting to. If all you need is to be able
to iterate through a collection, you don't need to cast it to a Set or List.
</p>Z
CODE_SMELL
¿
0findbugs:ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUNDã
findbugs'ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUNDCCorrectness - int value cast to float and then passed to Math.round"MAJOR*java2'ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND:’<p>
This code converts an int value to a float precision
floating point number and then
passing the result to the Math.round() function, which returns the int/long closest
to the argument. This operation should always be a no-op,
since the converting an integer to a float should give a number with no fractional part.
It is likely that the operation that generated the value to be passed
to Math.round was intended to be performed using
floating point arithmetic.
</p>ZBUG
ı
!findbugs:ITA_INEFFICIENT_TO_ARRAYœ
findbugsITA_INEFFICIENT_TO_ARRAYCPerformance - Method uses toArray() with zero-length array argument"MAJOR*java2ITA_INEFFICIENT_TO_ARRAY:∑<p> This method uses the toArray() method of a collection derived class, and passes
in a zero-length prototype array argument.  It is more efficient to use
<code>myCollection.toArray(new Foo[myCollection.size()])</code>
If the array passed in is big enough to store all of the
elements of the collection, then it is populated and returned
directly. This avoids the need to create a second array
(by reflection) to return as the result.</p>ZBUG
Ö
-findbugs:RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION”
findbugs$RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION3Correctness - Invalid syntax for regular expression"MAJOR*java2$RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION:≥<p>
The code here uses a regular expression that is invalid according to the syntax
for regular expressions. This statement will throw a PatternSyntaxException when
executed.
</p>ZBUG
⁄
findbugs:MWN_MISMATCHED_WAITπ
findbugsMWN_MISMATCHED_WAIT#Multi-threading - Mismatched wait()"MAJOR*java2MWN_MISMATCHED_WAIT:À<p> This method calls Object.wait() without obviously holding a lock
on the object.&nbsp;  Calling wait() without a lock held will result in
an <code>IllegalMonitorStateException</code> being thrown.</p>ZBUG
Û
1findbugs:STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCEΩ
findbugs(STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE#Multi-threading - Static DateFormat"MAJOR*java2(STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE:•<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.
Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the
application.</p>
<p>You may also experience serialization problems.</p>
<p>Using an instance field is recommended.</p>
<p>For more information on this see <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579">JDK Bug #6231579</a>
and <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997">JDK Bug #6178997</a>.</p>ZBUG
ﬂ
:findbugs:VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED†
findbugs1VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIEDGCorrectness - MessageFormat supplied where printf style format expected"MAJOR*java21VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED:“<p>
A method is called that expects a Java printf format string and a list of arguments.
However, the format string doesn't contain any format specifiers (e.g., %s) but
does contain message format elements (e.g., {0}).  It is likely
that the code is supplying a MessageFormat string when a printf-style format string
is required. At runtime, all of the arguments will be ignored
and the format string will be returned exactly as provided without any formatting.
</p>ZBUG
Ï
$findbugs:DP_DO_INSIDE_DO_PRIVILEDGED√
findbugsDP_DO_INSIDE_DO_PRIVILEDGEDXExperimental - Method invoked that should be only be invoked inside a doPrivileged block"INFO*java2DP_DO_INSIDE_DO_PRIVILEDGED:ä<p> This code invokes a method that requires a security permission check.
  If this code will be granted security permissions, but might be invoked by code that does not
  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>Z
CODE_SMELL
Ï
$findbugs:NP_LOAD_OF_KNOWN_NULL_VALUE√
findbugsNP_LOAD_OF_KNOWN_NULL_VALUE Style - Load of known null value"INFO*java2NP_LOAD_OF_KNOWN_NULL_VALUE:¬<p> The variable referenced at this point is known to be null due to an earlier
   check against null. Although this is valid, it might be a mistake (perhaps you
intended to refer to a different variable, or perhaps the earlier check to see if the
variable is null should have been a check to see if it was non-null).
</p>Z
CODE_SMELL
∏
#findbugs:NP_NONNULL_PARAM_VIOLATIONê
findbugsNP_NONNULL_PARAM_VIOLATION=Correctness - Method call passes null to a non-null parameter"MAJOR*java2NP_NONNULL_PARAM_VIOLATION:˙<p>
      This method passes a null value as the parameter of a method which
    must be non-null. Either this parameter has been explicitly marked
    as @Nonnull, or analysis has determined that this parameter is
    always dereferenced.
      </p>ZBUG
â
findbugs:BIT_ADD_OF_SIGNED_BYTEÂ
findbugsBIT_ADD_OF_SIGNED_BYTE.Correctness - Bitwise add of signed byte value"MAJOR*java2BIT_ADD_OF_SIGNED_BYTE:Ê<p> Adds a byte value and a value which is known to have the 8 lower bits clear.
Values loaded from a byte array are sign extended to 32 bits
before any bitwise operations are performed on the value.
Thus, if <code>b[0]</code> contains the value <code>0xff</code>, and
<code>x</code> is initially 0, then the code
<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>
to get <code>0xffffffff</code>, and thus give the value
<code>0xffffffff</code> as the result.
</p>

<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>
<pre><code>int result = 0;
for(int i = 0; i &lt; 4; i++)
    result = ((result &lt;&lt; 8) + b[i]);
</code></pre>
<p>The following idiom will work instead: </p>
<pre><code>int result = 0;
for(int i = 0; i &lt; 4; i++)
    result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));
</code></pre>ZBUG
ø
+findbugs:DLS_DEAD_LOCAL_INCREMENT_IN_RETURNè
findbugs"DLS_DEAD_LOCAL_INCREMENT_IN_RETURN3Correctness - Useless increment in return statement"MAJOR*java2"DLS_DEAD_LOCAL_INCREMENT_IN_RETURN:Û<p>This statement has a return such as <code>return x++;</code>.
A postfix increment/decrement does not impact the value of the expression,
so this increment/decrement has no effect.
Please verify that this statement does the right thing.
</p>ZBUG
¶
&findbugs:FI_PUBLIC_SHOULD_BE_PROTECTED˚
findbugsFI_PUBLIC_SHOULD_BE_PROTECTED:Malicious code - Finalizer should be protected, not public"INFO*java2FI_PUBLIC_SHOULD_BE_PROTECTED:]<p> A class's <code>finalize()</code> method should have protected access,
   not public.</p>Z
CODE_SMELL
ÿ
!findbugs:SE_BAD_FIELD_INNER_CLASS≤
findbugsSE_BAD_FIELD_INNER_CLASSDBad practice - Non-serializable class has a serializable inner class"MAJOR*java2SE_BAD_FIELD_INNER_CLASS:í<p> This Serializable class is an inner class of a non-serializable class.
Thus, attempts to serialize it will also attempt to associate instance of the outer
class with which it is associated, leading to a runtime error.
</p>
<p>If possible, making the inner class a static inner class should solve the
problem. Making the outer class serializable might also work, but that would
mean serializing an instance of the inner class would always also serialize the instance
of the outer class, which it often not what you really want.Z
CODE_SMELL
¨
.findbugs:DL_SYNCHRONIZATION_ON_SHARED_CONSTANT˘
findbugs%DL_SYNCHRONIZATION_ON_SHARED_CONSTANT4Multi-threading - Synchronization on interned String"MAJOR*java2%DL_SYNCHRONIZATION_ON_SHARED_CONSTANT:÷<p> The code synchronizes on interned String.</p>
<pre><code>private static String LOCK = "LOCK";
...
synchronized(LOCK) {
    ...
}
...
</code></pre>
<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code
is locking on something that other code might also be locking. This could result in very strange and hard to diagnose
blocking and deadlock behavior. See <a href="http://www.javalobby.org/java/forums/t96352.html">http://www.javalobby.org/java/forums/t96352.html</a> and <a href="http://jira.codehaus.org/browse/JETTY-352">http://jira.codehaus.org/browse/JETTY-352</a>.
</p>
<p>See CERT <a href="https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>ZBUG
ü
findbugs:FB_UNEXPECTED_WARNING¸
findbugsFB_UNEXPECTED_WARNING8Correctness - Unexpected/undesired warning from SpotBugs"MAJOR*java2FB_UNEXPECTED_WARNING:v<p>SpotBugs generated a warning that, according to a @NoWarning annotated,
            is unexpected or undesired.</p>ZBUG
ó
findbugs:GC_UNRELATED_TYPES˜
findbugsGC_UNRELATED_TYPESKCorrectness - No relationship between generic parameter and method argument"MAJOR*java2GC_UNRELATED_TYPES:„<p> This call to a generic collection method contains an argument
     with an incompatible class from that of the collection's parameter
    (i.e., the type of the argument is neither a supertype nor a subtype
        of the corresponding generic type argument).
     Therefore, it is unlikely that the collection contains any objects
    that are equal to the method argument used here.
    Most likely, the wrong value is being passed to the method.</p>
    <p>In general, instances of two unrelated classes are not equal.
    For example, if the <code>Foo</code> and <code>Bar</code> classes
    are not related by subtyping, then an instance of <code>Foo</code>
        should not be equal to an instance of <code>Bar</code>.
    Among other issues, doing so will likely result in an equals method
    that is not symmetrical. For example, if you define the <code>Foo</code> class
    so that a <code>Foo</code> can be equal to a <code>String</code>,
    your equals method isn't symmetrical since a <code>String</code> can only be equal
    to a <code>String</code>.
    </p>
    <p>In rare cases, people do define nonsymmetrical equals methods and still manage to make
    their code work. Although none of the APIs document or guarantee it, it is typically
    the case that if you check if a <code>Collection&lt;String&gt;</code> contains
    a <code>Foo</code>, the equals method of argument (e.g., the equals method of the
    <code>Foo</code> class) used to perform the equality checks.
    </p>ZBUG
ı
findbugs:LI_LAZY_INIT_STATIC‘
findbugsLI_LAZY_INIT_STATIC?Multi-threading - Incorrect lazy initialization of static field"MAJOR*java2LI_LAZY_INIT_STATIC: <p> This method contains an unsynchronized lazy initialization of a non-volatile static field.
Because the compiler or processor may reorder instructions,
threads are not guaranteed to see a completely initialized object,
<em>if the method can be called by multiple threads</em>.
You can make the field volatile to correct the problem.
For more information, see the
<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">Java Memory Model web site</a>.
</p>ZBUG
Ì
findbugs:MS_SHOULD_BE_FINALÕ
findbugsMS_SHOULD_BE_FINAL0Malicious code - Field isn't final but should be"INFO*java2MS_SHOULD_BE_FINAL:Œ<p>
This static field public but not final, and
could be changed by malicious code or
        by accident from another package.
        The field could be made final to avoid
        this vulnerability.</p>Z
CODE_SMELL
Ò
'findbugs:RC_REF_COMPARISON_BAD_PRACTICE≈
findbugsRC_REF_COMPARISON_BAD_PRACTICE:Bad practice - Suspicious reference comparison to constant"MAJOR*java2RC_REF_COMPARISON_BAD_PRACTICE:£<p> This method compares a reference value to a constant using the == or != operator,
where the correct way to compare instances of this type is generally
with the equals() method.
It is possible to create distinct instances that are equal but do not compare as == since
they are different objects.
Examples of classes which should generally
not be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>Z
CODE_SMELL
‰
"findbugs:UC_USELESS_CONDITION_TYPEΩ
findbugsUC_USELESS_CONDITION_TYPE8Style - Condition has no effect due to the variable type"INFO*java2UC_USELESS_CONDITION_TYPE:®<p>This condition always produces the same result due to the type range of the involved variable.
Probably something else was meant or the condition can be removed.</p>Z
CODE_SMELL
œ
-findbugs:NP_METHOD_RETURN_RELAXING_ANNOTATIONù
findbugs$NP_METHOD_RETURN_RELAXING_ANNOTATION:Style - Method relaxes nullness annotation on return value"INFO*java2$NP_METHOD_RETURN_RELAXING_ANNOTATION:<p>
        A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated
    as returning a @Nonnull value,
    you shouldn't override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value.
    Doing so violates the contract that the method shouldn't return null.
        </p>Z
CODE_SMELL
˝
findbugs:RV_REM_OF_HASHCODE›
findbugsRV_REM_OF_HASHCODE/Style - Remainder of hashCode could be negative"INFO*java2RV_REM_OF_HASHCODE:ﬂ<p> This code computes a hashCode, and then computes
the remainder of that value modulo another value. Since the hashCode
can be negative, the result of the remainder operation
can also be negative. </p>
<p> Assuming you want to ensure that the result of your computation is nonnegative,
you may need to change your code.
If you know the divisor is a power of 2,
you can use a bitwise and operator instead (i.e., instead of
using <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>).
This is probably faster than computing the remainder as well.
If you don't know that the divisor is a power of 2, take the absolute
value of the result of the remainder operation (i.e., use
<code>Math.abs(x.hashCode()%n)</code>).
</p>Z
CODE_SMELL
Ï
1findbugs:UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR∂
findbugs(UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTORPStyle - Field not initialized in constructor but dereferenced without null check"INFO*java2(UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR:Î<p> This field is never initialized within any constructor, and is therefore could be null after
the object is constructed. Elsewhere, it is loaded and dereferenced without a null check.
This could be a either an error or a questionable design, since
it means a null pointer exception will be generated if that field is dereferenced
before being initialized.
</p>Z
CODE_SMELL
Í
(findbugs:CO_COMPARETO_INCORRECT_FLOATINGΩ
findbugsCO_COMPARETO_INCORRECT_FLOATINGNBad practice - compareTo()/compare() incorrectly handles float or double value"MAJOR*java2CO_COMPARETO_INCORRECT_FLOATING:Ö<p>This method compares double or float values using pattern like this: val1 &gt; val2 ? 1 : val1 &lt; val2 ? -1 : 0.
This pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection
(if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all
the special cases correctly.</p>Z
CODE_SMELL
Í
;findbugs:RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE™
findbugs2RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE6Style - Redundant comparison of non-null value to null"INFO*java22RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE:f<p> This method contains a reference known to be non-null with another reference
known to be null.</p>Z
CODE_SMELL
ø
#findbugs:SE_NO_SUITABLE_CONSTRUCTORó
findbugsSE_NO_SUITABLE_CONSTRUCTORYBad practice - Class is Serializable but its superclass doesn't define a void constructor"MAJOR*java2SE_NO_SUITABLE_CONSTRUCTOR:ﬁ<p> This class implements the <code>Serializable</code> interface
   and its superclass does not. When such an object is deserialized,
   the fields of the superclass need to be initialized by
   invoking the void constructor of the superclass.
   Since the superclass does not have one,
   serialization and deserialization will fail at runtime.</p>Z
CODE_SMELL
Ã
findbugs:UC_USELESS_CONDITION™
findbugsUC_USELESS_CONDITIONStyle - Condition has no effect"INFO*java2UC_USELESS_CONDITION:∏<p>This condition always produces the same result as the value of the involved variable that was narrowed before.
Probably something else was meant or the condition can be removed.</p>Z
CODE_SMELL
é
%findbugs:DLS_DEAD_LOCAL_STORE_OF_NULL‰
findbugsDLS_DEAD_LOCAL_STORE_OF_NULL,Style - Dead store of null to local variable"INFO*java2DLS_DEAD_LOCAL_STORE_OF_NULL:’<p>The code stores null into a local variable, and the stored value is not
read. This store may have been introduced to assist the garbage collector, but
as of Java SE 6.0, this is no longer needed or useful.
</p>Z
CODE_SMELL
Â
#findbugs:HE_USE_OF_UNHASHABLE_CLASSΩ
findbugsHE_USE_OF_UNHASHABLE_CLASSQCorrectness - Use of class without a hashCode() method in a hashed data structure"MAJOR*java2HE_USE_OF_UNHASHABLE_CLASS:ì<p> A class defines an equals(Object)  method but not a hashCode() method,
and thus doesn't fulfill the requirement that equal objects have equal hashCodes.
An instance of this class is used in a hash data structure, making the need to
fix this problem of highest importance.ZBUG
Â
"findbugs:SA_FIELD_SELF_COMPUTATIONæ
findbugsSA_FIELD_SELF_COMPUTATIONJCorrectness - Nonsensical self computation involving a field (e.g., x & x)"MAJOR*java2SA_FIELD_SELF_COMPUTATION:ù<p> This method performs a nonsensical computation of a field with another
reference to the same field (e.g., x&x or x-x). Because of the nature
of the computation, this operation doesn't seem to make sense,
and may indicate a typo or
a logic error.  Double check the computation.
</p>ZBUG
Ü
&findbugs:VA_FORMAT_STRING_BAD_ARGUMENT€
findbugsVA_FORMAT_STRING_BAD_ARGUMENTICorrectness - Format string placeholder incompatible with passed argument"MAJOR*java2VA_FORMAT_STRING_BAD_ARGUMENT:≥<p>
The format string placeholder is incompatible with the corresponding
argument. For example,
<code>
  System.out.println("%d\n", "hello");
</code>
<p>The %d placeholder requires a numeric argument, but a string value is
passed instead.
A runtime exception will occur when
this statement is executed.
</p>ZBUG
†
&findbugs:DMI_CALLING_NEXT_FROM_HASNEXTı
findbugsDMI_CALLING_NEXT_FROM_HASNEXT)Correctness - hasNext method invokes next"MAJOR*java2DMI_CALLING_NEXT_FROM_HASNEXT:Ì<p>
The hasNext() method invokes the next() method. This is almost certainly wrong,
since the hasNext() method is not supposed to change the state of the iterator,
and the next method is supposed to change the state of the iterator.
</p>ZBUG
˜
#findbugs:NM_CLASS_NAMING_CONVENTIONœ
findbugsNM_CLASS_NAMING_CONVENTIONABad practice - Class names should start with an upper case letter"MAJOR*java2NM_CLASS_NAMING_CONVENTION:Æ<p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).
</p>Z
CODE_SMELL
‡
#findbugs:NM_FIELD_NAMING_CONVENTION∏
findbugsNM_FIELD_NAMING_CONVENTION@Bad practice - Field names should start with a lower case letter"MAJOR*java2NM_FIELD_NAMING_CONVENTION:ò<p>
Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.
</p>Z
CODE_SMELL
π
,findbugs:SBSC_USE_STRINGBUFFER_CONCATENATIONà
findbugs#SBSC_USE_STRINGBUFFER_CONCATENATION;Performance - Method concatenates strings using + in a loop"MAJOR*java2#SBSC_USE_STRINGBUFFER_CONCATENATION:‚<p> The method seems to be building a String using concatenation in a loop.
In each iteration, the String is converted to a StringBuffer/StringBuilder,
   appended to, and converted back to a String.
   This can lead to a cost quadratic in the number of iterations,
   as the growing string is recopied in each iteration. </p>

<p>Better performance can be obtained by using
a StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>

<p> For example:</p>
<pre><code>// This is bad
String s = "";
for (int i = 0; i &lt; field.length; ++i) {
    s = s + field[i];
}

// This is better
StringBuffer buf = new StringBuffer();
for (int i = 0; i &lt; field.length; ++i) {
    buf.append(field[i]);
}
String s = buf.toString();
</code></pre>ZBUG
¸
findbugs:BC_VACUOUS_INSTANCEOFŸ
findbugsBC_VACUOUS_INSTANCEOF*Style - instanceof will always return true"INFO*java2BC_VACUOUS_INSTANCEOF:⁄<p>
This instanceof test will always return true (unless the value being tested is null).
Although this is safe, make sure it isn't
an indication of some misunderstanding or some other logic error.
If you really want to test the value for being null, perhaps it would be clearer to do
better to do a null test rather than an instanceof test.
</p>Z
CODE_SMELL
ƒ
findbugs:IJU_NO_TESTS™
findbugsIJU_NO_TESTS#Correctness - TestCase has no tests"MAJOR*java2IJU_NO_TESTS:K<p> Class is a JUnit TestCase but has not implemented any test methods.</p>ZBUG
ß
findbugs:IJU_SETUP_NO_SUPERá
findbugsIJU_SETUP_NO_SUPERDCorrectness - TestCase defines setUp that doesn't call super.setUp()"MAJOR*java2IJU_SETUP_NO_SUPER:{<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call
super.setUp(), but doesn't.</p>ZBUG
Ë
2findbugs:INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE±
findbugs)INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUEPCorrectness - Bad comparison of nonnegative value with negative constant or zero"MAJOR*java2)INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE:k<p> This code compares a value that is guaranteed to be non-negative with a negative constant or zero.
</p>ZBUG
ñ
findbugs:SP_SPIN_ON_FIELD¯
findbugsSP_SPIN_ON_FIELD'Multi-threading - Method spins on field"MAJOR*java2SP_SPIN_ON_FIELD:å<p> This method spins in a loop which reads a field.&nbsp; The compiler
  may legally hoist the read out of the loop, turning the code into an
  infinite loop.&nbsp; The class should be changed so it uses proper
  synchronization (including wait and notify calls).</p>ZBUG
ø
=findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK˝
findbugs4TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINKDStyle - Value required to have type qualifier, but marked as unknown"INFO*java24TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK:¶<p>
      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but
    there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.
    Either the usage or the annotation is incorrect.
      </p>Z
CODE_SMELL
Ÿ
 findbugs:NP_OPTIONAL_RETURN_NULL¥
findbugsNP_OPTIONAL_RETURN_NULLDCorrectness - Method with Optional return type returns explicit null"MAJOR*java2NP_OPTIONAL_RETURN_NULL:ù<p>
    The usage of Optional return type (java.util.Optional or com.google.common.base.Optional)
    always means that explicit null returns were not desired by design.
    Returning a null value in such case is a contract violation and will most likely break client code.
       </p>ZBUG
‰
*findbugs:VA_FORMAT_STRING_MISSING_ARGUMENTµ
findbugs!VA_FORMAT_STRING_MISSING_ARGUMENT7Correctness - Format string references missing argument"MAJOR*java2!VA_FORMAT_STRING_MISSING_ARGUMENT:ó<p>
Not enough arguments are passed to satisfy a placeholder in the format string.
A runtime exception will occur when
this statement is executed.
</p>ZBUG
é
(findbugs:BX_UNBOXING_IMMEDIATELY_REBOXED·
findbugsBX_UNBOXING_IMMEDIATELY_REBOXEDAPerformance - Boxed value is unboxed and then immediately reboxed"MAJOR*java2BX_UNBOXING_IMMEDIATELY_REBOXED:><p>A boxed value is unboxed and then immediately reboxed.
</p>ZBUG
Ÿ
"findbugs:DM_NEXTINT_VIA_NEXTDOUBLE≤
findbugsDM_NEXTINT_VIA_NEXTDOUBLEbPerformance - Use the nextInt method of Random rather than nextDouble to generate a random integer"MAJOR*java2DM_NEXTINT_VIA_NEXTDOUBLE:˘<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>
using <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.
</p>
<p>The argument to nextInt must be positive. If, for example, you want to generate a random
value from -99 to 0, use <code>-r.nextInt(100)</code>.
</p>ZBUG
î
'findbugs:NP_NULL_ON_SOME_PATH_EXCEPTIONË
findbugsNP_NULL_ON_SOME_PATH_EXCEPTIONKCorrectness - Possible null pointer dereference in method on exception path"MAJOR*java2NP_NULL_ON_SOME_PATH_EXCEPTION:º<p> A reference value which is null on some exception control path is
dereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>
when the code is executed.&nbsp;
Note that because SpotBugs currently does not prune infeasible exception paths,
this may be a false warning.</p>

<p> Also note that SpotBugs considers the default case of a switch statement to
be an exception path, since the default case is often infeasible.</p>ZBUG
Ô
!findbugs:SA_FIELD_SELF_ASSIGNMENT…
findbugsSA_FIELD_SELF_ASSIGNMENT&Correctness - Self assignment of field"MAJOR*java2SA_FIELD_SELF_ASSIGNMENT:Œ<p> This method contains a self assignment of a field; e.g.
</p>
<pre><code>int x;
public void foo() {
    x = x;
}
</code></pre>
<p>Such assignments are useless, and may indicate a logic error or typo.</p>ZBUG
»
,findbugs:ICAST_INTEGER_MULTIPLY_CAST_TO_LONGó
findbugs#ICAST_INTEGER_MULTIPLY_CAST_TO_LONG5Style - Result of integer multiplication cast to long"INFO*java2#ICAST_INTEGER_MULTIPLY_CAST_TO_LONG:Ò<p>
This code performs integer multiply and then converts the result to a long,
as in:</p>
<pre><code>long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }
</code></pre>
<p>
If the multiplication is done using long arithmetic, you can avoid
the possibility that the result will overflow. For example, you
could fix the above code to:</p>
<pre><code>long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }
</code></pre>
<p>
or
</p>
<pre><code>static final long MILLISECONDS_PER_DAY = 24L*3600*1000;
long convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }
</code></pre>Z
CODE_SMELL
’
$findbugs:NM_METHOD_NAMING_CONVENTION¨
findbugsNM_METHOD_NAMING_CONVENTIONABad practice - Method names should start with a lower case letter"MAJOR*java2NM_METHOD_NAMING_CONVENTION:â<p>
Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.
</p>Z
CODE_SMELL
‰
#findbugs:SIC_INNER_SHOULD_BE_STATICº
findbugsSIC_INNER_SHOULD_BE_STATIC,Performance - Should be a static inner class"MAJOR*java2SIC_INNER_SHOULD_BE_STATIC:∑<p> This class is an inner class, but does not use its embedded reference
  to the object which created it.&nbsp; This reference makes the instances
  of the class larger, and may keep the reference to the creator object
  alive longer than necessary.&nbsp; If possible, the class should be
   made static.
</p>ZBUG
¥
"findbugs:CAA_COVARIANT_ARRAY_LOCALç
findbugsCAA_COVARIANT_ARRAY_LOCAL6Style - Covariant array assignment to a local variable"INFO*java2CAA_COVARIANT_ARRAY_LOCAL:˙<p>Array of covariant type is assigned to a local variable. This is confusing and may lead to ArrayStoreException at runtime
if the reference of some other type will be stored in this array later like in the following code:
</p>
<pre><code>Number[] arr = new Integer[10];
arr[0] = 1.0;
</code></pre>
<p>Consider changing the type of created array or the local variable type.</p>Z
CODE_SMELL
ü
findbugs:CN_IDIOM_NO_SUPER_CALL˚
findbugsCN_IDIOM_NO_SUPER_CALL7Bad practice - clone method does not call super.clone()"MAJOR*java2CN_IDIOM_NO_SUPER_CALL:Ï<p> This non-final class defines a clone() method that does not call super.clone().
If this class ("<i>A</i>") is extended by a subclass ("<i>B</i>"),
and the subclass <i>B</i> calls super.clone(), then it is likely that
<i>B</i>'s clone() method will return an object of type <i>A</i>,
which violates the standard contract for clone().</p>

<p> If all clone() methods call super.clone(), then they are guaranteed
to use Object.clone(), which always returns an object of the correct type.</p>Z
CODE_SMELL
≥
findbugs:CO_SELF_NO_OBJECTî
findbugsCO_SELF_NO_OBJECT3Bad practice - Covariant compareTo() method defined"MAJOR*java2CO_SELF_NO_OBJECT:ì<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;
  To correctly override the <code>compareTo()</code> method in the
  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>
  must have type <code>java.lang.Object</code>.</p>Z
CODE_SMELL
Å
findbugs:OS_OPEN_STREAMÂ
findbugsOS_OPEN_STREAM.Bad practice - Method may fail to close stream"MAJOR*java2OS_OPEN_STREAM:Ô<p> The method creates an IO stream object, does not assign it to any
fields, pass it to other methods that might close it,
or return it, and does not appear to close
the stream on all paths out of the method.&nbsp; This may result in
a file descriptor leak.&nbsp; It is generally a good
idea to use a <code>finally</code> block to ensure that streams are
closed.</p>Z
CODE_SMELL
ò
!findbugs:CNT_ROUGH_CONSTANT_VALUEÚ
findbugsCNT_ROUGH_CONSTANT_VALUE2Bad practice - Rough value of known constant found"MAJOR*java2CNT_ROUGH_CONSTANT_VALUE:e<p>It's recommended to use the predefined library constant for code clarity and better precision.</p>Z
CODE_SMELL
˜
findbugs:DM_CONVERT_CASE⁄
findbugsDM_CONVERT_CASEDI18n - Consider using Locale parameterized version of invoked method"INFO*java2DM_CONVERT_CASE:Õ<p> A String is being converted to upper or lowercase, using the platform's default encoding. This may
      result in improper conversions when used with international characters. Use the </p>
      <ul>
    <li>String.toUpperCase( Locale l )</li>
    <li>String.toLowerCase( Locale l )</li>
    </ul>
      <p>versions instead.</p>Z
CODE_SMELL
œ
&findbugs:VA_FORMAT_STRING_ARG_MISMATCH§
findbugsVA_FORMAT_STRING_ARG_MISMATCH]Correctness - Number of format-string arguments does not correspond to number of placeholders"MAJOR*java2VA_FORMAT_STRING_ARG_MISMATCH:Ë<p>
A format-string method with a variable number of arguments is called,
but the number of arguments passed does not match with the number of
% placeholders in the format string.  This is probably not what the
author intended.
</p>ZBUG
’
findbugs:NM_CLASS_NOT_EXCEPTION±
findbugsNM_CLASS_NOT_EXCEPTIONVBad practice - Class is not derived from an Exception, even though it is named as such"MAJOR*java2NM_CLASS_NOT_EXCEPTION:É<p> This class is not derived from another exception, but ends with 'Exception'. This will
be confusing to users of this class.</p>Z
CODE_SMELL
’
1findbugs:PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORSü
findbugs(PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS5Bad practice - Don't reuse entry objects in iterators"MAJOR*java2(PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS:Ó<p> The entrySet() method is allowed to return a view of the
     underlying Map in which an Iterator and Map.Entry. This clever
     idea was used in several Map implementations, but introduces the possibility
     of nasty coding mistakes. If a map <code>m</code> returns
     such an iterator for an entrySet, then
     <code>c.addAll(m.entrySet())</code> will go badly wrong. All of
     the Map implementations in OpenJDK 1.7 have been rewritten to avoid this,
     you should to.
    </p>Z
CODE_SMELL
ƒ
0findbugs:DMI_USING_REMOVEALL_TO_CLEAR_COLLECTIONè
findbugs'DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION8Bad practice - Don't use removeAll to clear a collection"MAJOR*java2'DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION:›<p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,
not <code>c.removeAll(c)</code>. Calling  <code>c.removeAll(c)</code> to clear a collection
is less clear, susceptible to errors from typos, less efficient and
for some collections, might throw a <code>ConcurrentModificationException</code>.
    </p>Z
CODE_SMELL
ﬁ
findbugs:IMSE_DONT_CATCH_IMSEº
findbugsIMSE_DONT_CATCH_IMSE?Bad practice - Dubious catching of IllegalMonitorStateException"MAJOR*java2IMSE_DONT_CATCH_IMSE:©<p>IllegalMonitorStateException is generally only
   thrown in case of a design flaw in your code (calling wait or
   notify on an object you do not hold a lock on).</p>Z
CODE_SMELL
Ã
/findbugs:JLM_JSR166_UTILCONCURRENT_MONITORENTERò
findbugs&JLM_JSR166_UTILCONCURRENT_MONITORENTERGMulti-threading - Synchronization performed on util.concurrent instance"MAJOR*java2&JLM_JSR166_UTILCONCURRENT_MONITORENTER:‡<p> This method performs synchronization an object that is an instance of
a class from the java.util.concurrent package (or its subclasses). Instances
of these classes have their own concurrency control mechanisms that are orthogonal to
the synchronization provided by the Java keyword <code>synchronized</code>. For example,
synchronizing on an <code>AtomicBoolean</code> will not prevent other threads
from modifying the  <code>AtomicBoolean</code>.</p>
<p>Such code may be correct, but should be carefully reviewed and documented,
and may confuse people who have to maintain the code at a later date.
</p>ZBUG
°
$findbugs:NP_STORE_INTO_NONNULL_FIELD¯
findbugsNP_STORE_INTO_NONNULL_FIELD?Correctness - Store of null value into field annotated @Nonnull"MAJOR*java2NP_STORE_INTO_NONNULL_FIELD:_<p> A value that could be null is stored into a field that has been annotated as @Nonnull. </p>ZBUG
’
&findbugs:DL_SYNCHRONIZATION_ON_BOOLEAN™
findbugsDL_SYNCHRONIZATION_ON_BOOLEAN,Multi-threading - Synchronization on Boolean"MAJOR*java2DL_SYNCHRONIZATION_ON_BOOLEAN:ü<p> The code synchronizes on a boxed primitive constant, such as a Boolean.</p>
<pre><code>private static Boolean inited = Boolean.FALSE;
...
synchronized(inited) {
    if (!inited) {
        init();
        inited = Boolean.TRUE;
    }
}
...
</code></pre>
<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness
and possible deadlock.</p>
<p>See CERT <a href="https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>ZBUG
æ
"findbugs:EQ_DOESNT_OVERRIDE_EQUALSó
findbugsEQ_DOESNT_OVERRIDE_EQUALS3Style - Class doesn't override equals in superclass"INFO*java2EQ_DOESNT_OVERRIDE_EQUALS:á<p> This class extends a class that defines an equals method and adds fields, but doesn't
define an equals method itself. Thus, equality on instances of this class will
ignore the identity of the subclass and the added fields. Be sure this is what is intended,
and that you don't need to override the equals method. Even if you don't need to override
the equals method, consider overriding it anyway to document the fact
that the equals method for the subclass just return the result of
invoking super.equals(o).
  </p>Z
CODE_SMELL
Ñ	
findbugs:IS_INCONSISTENT_SYNC‚
findbugsIS_INCONSISTENT_SYNC.Multi-threading - Inconsistent synchronization"MAJOR*java2IS_INCONSISTENT_SYNC:Á<p> The fields of this class appear to be accessed inconsistently with respect
  to synchronization.&nbsp; This bug report indicates that the bug pattern detector
  judged that
  </p>
  <ul>
  <li> The class contains a mix of locked and unlocked accesses,</li>
  <li> At least one locked access was performed by one of the class's own methods, and</li>
  <li> The number of unsynchronized field accesses (reads and writes) was no more than
       one third of all accesses, with writes being weighed twice as high as reads</li>
  </ul>

  <p> A typical bug matching this bug pattern is forgetting to synchronize
  one of the methods in a class that is intended to be thread-safe.</p>

  <p> Note that there are various sources of inaccuracy in this detector;
  for example, the detector cannot statically detect all situations in which
  a lock is held.&nbsp; Also, even when the detector is accurate in
  distinguishing locked vs. unlocked accesses, the code in question may still
  be correct.</p>ZBUG
ò
:findbugs:IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATIONŸ
findbugs1IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION=Bad practice - Superclass uses subclass during initialization"MAJOR*java21IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION:é<p> During the initialization of a class, the class makes an active use of a subclass.
That subclass will not yet be initialized at the time of this use.
For example, in the following code, <code>foo</code> will be null.</p>
<pre><code>public class CircularClassInitialization {
    static class InnerClassSingleton extends CircularClassInitialization {
        static InnerClassSingleton singleton = new InnerClassSingleton();
    }

    static CircularClassInitialization foo = InnerClassSingleton.singleton;
}
</code></pre>Z
CODE_SMELL
í
findbugs:INT_VACUOUS_COMPARISONÓ
findbugsINT_VACUOUS_COMPARISON+Style - Vacuous comparison of integer value"INFO*java2INT_VACUOUS_COMPARISON:m<p> There is an integer comparison that always returns
the same value (e.g., x &lt;= Integer.MAX_VALUE).
</p>Z
CODE_SMELL
Ä
/findbugs:RV_RETURN_VALUE_OF_PUTIFABSENT_IGNOREDÃ
findbugs&RV_RETURN_VALUE_OF_PUTIFABSENT_IGNOREDYMulti-threading - Return value of putIfAbsent ignored, value passed to putIfAbsent reused"MAJOR*java2&RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED:ÇThe <code>putIfAbsent</code> method is typically used to ensure that a
        single value is associated with a given key (the first value for which put
        if absent succeeds).
        If you ignore the return value and retain a reference to the value passed in,
        you run the risk of retaining a value that is not the one that is associated with the key in the map.
        If it matters which one you use and you use the one that isn't stored in the map,
        your program will behave incorrectly.ZBUG
„
findbugs:UM_UNNECESSARY_MATH¬
findbugsUM_UNNECESSARY_MATHGPerformance - Method calls static Math class method on a constant value"MAJOR*java2UM_UNNECESSARY_MATH:∞
<p> This method uses a static method from java.lang.Math on a constant value. This method's
result in this case, can be determined statically, and is faster and sometimes more accurate to
just use the constant. Methods detected are:
</p>
<table>
<tr>
   <th>Method</th> <th>Parameter</th>
</tr>
<tr>
   <td>abs</td> <td>-any-</td>
</tr>
<tr>
   <td>acos</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>asin</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>atan</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>atan2</td> <td>0.0</td>
</tr>
<tr>
   <td>cbrt</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>ceil</td> <td>-any-</td>
</tr>
<tr>
   <td>cos</td> <td>0.0</td>
</tr>
<tr>
   <td>cosh</td> <td>0.0</td>
</tr>
<tr>
   <td>exp</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>expm1</td> <td>0.0</td>
</tr>
<tr>
   <td>floor</td> <td>-any-</td>
</tr>
<tr>
   <td>log</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>log10</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>rint</td> <td>-any-</td>
</tr>
<tr>
   <td>round</td> <td>-any-</td>
</tr>
<tr>
   <td>sin</td> <td>0.0</td>
</tr>
<tr>
   <td>sinh</td> <td>0.0</td>
</tr>
<tr>
   <td>sqrt</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>tan</td> <td>0.0</td>
</tr>
<tr>
   <td>tanh</td> <td>0.0</td>
</tr>
<tr>
   <td>toDegrees</td> <td>0.0 or 1.0</td>
</tr>
<tr>
   <td>toRadians</td> <td>0.0</td>
</tr>
</table>ZBUG
·
5findbugs:BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTSß
findbugs,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTSVBad practice - Equals method should not assume anything about the type of its argument"MAJOR*java2,BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS:Õ<p>
The <code>equals(Object o)</code> method shouldn't make any assumptions
about the type of <code>o</code>. It should simply return
false if <code>o</code> is not the same type as <code>this</code>.
</p>Z
CODE_SMELL
˜
findbugs:CN_IDIOM·
findbugsCN_IDIOMQBad practice - Class implements Cloneable but does not define or use clone method"MAJOR*java2CN_IDIOM:U<p>
   Class implements Cloneable but does not define or
   use the clone method.</p>Z
CODE_SMELL
ø
0findbugs:NP_METHOD_PARAMETER_TIGHTENS_ANNOTATIONä
findbugs'NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION8Style - Method tightens nullness annotation on parameter"INFO*java2'NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION:Ÿ<p>
        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter
    that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull.
    Doing so violates the contract that the method should handle a null parameter.
        </p>Z
CODE_SMELL
£
findbugs:FI_NULLIFY_SUPERÖ
findbugsFI_NULLIFY_SUPER7Bad practice - Finalizer nullifies superclass finalizer"MAJOR*java2FI_NULLIFY_SUPER:Ç<p> This empty <code>finalize()</code> method explicitly negates the
  effect of any finalizer defined by its superclass.&nbsp; Any finalizer
  actions defined for the superclass will not be performed.&nbsp;
  Unless this is intended, delete this method.</p>Z
CODE_SMELL
Ì
findbugs:NP_GUARANTEED_DEREFÃ
findbugsNP_GUARANTEED_DEREF9Correctness - Null value is guaranteed to be dereferenced"MAJOR*java2NP_GUARANTEED_DEREF:»<p>
              There is a statement or branch that if executed guarantees that
              a value is null at this point, and that
              value that is guaranteed to be dereferenced
              (except on forward paths involving runtime exceptions).
              </p>
        <p>Note that a check such as
            <code>if (x == null) throw new NullPointerException();</code>
            is treated as a dereference of <code>x</code>.</p>ZBUG
¨
-findbugs:NP_IMMEDIATE_DEREFERENCE_OF_READLINE˙
findbugs$NP_IMMEDIATE_DEREFERENCE_OF_READLINE9Style - Immediate dereference of the result of readLine()"INFO*java2$NP_IMMEDIATE_DEREFERENCE_OF_READLINE:Œ<p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text
to read, readLine() will return null and dereferencing that will generate a null pointer exception.
</p>Z
CODE_SMELL
¥
.findbugs:SE_PRIVATE_READ_RESOLVE_NOT_INHERITEDÅ
findbugs%SE_PRIVATE_READ_RESOLVE_NOT_INHERITED>Style - Private readResolve method not inherited by subclasses"INFO*java2%SE_PRIVATE_READ_RESOLVE_NOT_INHERITED:Œ<p> This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.
This might be intentional and OK, but should be reviewed to ensure it is what is intended.
</p>Z
CODE_SMELL
Ã
findbugs:EI_EXPOSE_REP2∞
findbugsEI_EXPOSE_REP2`Malicious code - May expose internal representation by incorporating reference to mutable object"INFO*java2EI_EXPOSE_REP2:â<p> This code stores a reference to an externally mutable object into the
  internal representation of the object.&nbsp;
   If instances
   are accessed by untrusted code, and unchecked changes to
   the mutable object would compromise security or other
   important properties, you will need to do something different.
  Storing a copy of the object is better approach in many situations.</p>Z
CODE_SMELL
Ω
!findbugs:SA_FIELD_SELF_COMPARISONó
findbugsSA_FIELD_SELF_COMPARISON2Correctness - Self comparison of field with itself"MAJOR*java2SA_FIELD_SELF_COMPARISON:ê<p> This method compares a field with itself, and may indicate a typo or
a logic error.  Make sure that you are comparing the right things.
</p>ZBUG
≠
findbugs:WA_AWAIT_NOT_IN_LOOPã
findbugsWA_AWAIT_NOT_IN_LOOP/Multi-threading - Condition.await() not in loop"MAJOR*java2WA_AWAIT_NOT_IN_LOOP:è<p> This method contains a call to <code>java.util.concurrent.await()</code>
   (or variants)
  which is not in a loop.&nbsp; If the object is used for multiple conditions,
  the condition the caller intended to wait for might not be the one
  that actually occurred.</p>ZBUG
≈
+findbugs:EQ_OVERRIDING_EQUALS_NOT_SYMMETRICï
findbugs"EQ_OVERRIDING_EQUALS_NOT_SYMMETRICSCorrectness - equals method overrides equals in superclass and may not be symmetric"MAJOR*java2"EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC:Ÿ<p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods
methods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,
since it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).
If B is a subtype of A, and A's equals method checks that the argument is an instanceof A, and B's equals method
checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these
methods is not symmetric.
</p>ZBUG
Ë
findbugs:EQ_UNUSUAL–
findbugs
EQ_UNUSUALStyle - Unusual equals method"INFO*java2
EQ_UNUSUAL:Ù<p> This class doesn't do any of the patterns we recognize for checking that the type of the argument
is compatible with the type of the <code>this</code> object. There might not be anything wrong with
this code, but it is worth reviewing.
</p>Z
CODE_SMELL
”
 findbugs:RV_EXCEPTION_NOT_THROWNÆ
findbugsRV_EXCEPTION_NOT_THROWN>Correctness - Exception created and dropped rather than thrown"MAJOR*java2RV_EXCEPTION_NOT_THROWN:ù<p> This code creates an exception (or error) object, but doesn't do anything with it. For example,
something like </p>
<pre><code>if (x &lt; 0) {
    new IllegalArgumentException("x must be nonnegative");
}
</code></pre>
<p>It was probably the intent of the programmer to throw the created exception:</p>
<pre><code>if (x &lt; 0) {
    throw new IllegalArgumentException("x must be nonnegative");
}
</code></pre>ZBUG
à
%findbugs:SE_NONSTATIC_SERIALVERSIONIDﬁ
findbugsSE_NONSTATIC_SERIALVERSIONID,Bad practice - serialVersionUID isn't static"MAJOR*java2SE_NONSTATIC_SERIALVERSIONID:Œ<p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;
  The field should be made static
   if it is intended to specify
   the version UID for purposes of serialization.</p>Z
CODE_SMELL
◊
:findbugs:HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASSò
findbugs1HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASSLCorrectness - Signature declares use of unhashable class in hashed construct"MAJOR*java21HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS:≈<p> A method, field or class declares a generic signature where a non-hashable class
is used in context where a hashable class is required.
A class that declares an equals method but inherits a hashCode() method
from Object is unhashable, since it doesn't fulfill the requirement that
equal objects have equal hashCodes.
</p>ZBUG
ï
*findbugs:INT_BAD_COMPARISON_WITH_INT_VALUEÊ
findbugs!INT_BAD_COMPARISON_WITH_INT_VALUE<Correctness - Bad comparison of int value with long constant"MAJOR*java2!INT_BAD_COMPARISON_WITH_INT_VALUE:√<p> This code compares an int value with a long constant that is outside
the range of values that can be represented as an int value.
This comparison is vacuous and possibly to be incorrect.
</p>ZBUG
ã
.findbugs:VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENTÿ
findbugs%VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT4Correctness - No previous argument for format string"MAJOR*java2%VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT:µ<p>
The format string specifies a relative index to request that the argument for the previous format specifier
be reused. However, there is no previous argument.
For example,
</p>
<p><code>formatter.format("%&lt;s %s", "a", "b")</code>
</p>
<p>would throw a MissingFormatArgumentException when executed.
</p>ZBUG
§
'findbugs:DM_BOXED_PRIMITIVE_FOR_COMPARE¯
findbugsDM_BOXED_PRIMITIVE_FOR_COMPARE+Performance - Boxing a primitive to compare"MAJOR*java2DM_BOXED_PRIMITIVE_FOR_COMPARE:Ï<p>A boxed primitive is created just to call compareTo method. It's more efficient to use static compare method
  (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.
  </p>ZBUG
≥
findbugs:MS_PKGPROTECTò
findbugsMS_PKGPROTECT2Malicious code - Field should be package protected"INFO*java2MS_PKGPROTECT:°<p> A mutable static field could be changed by malicious code or
   by accident.
   The field could be made package protected to avoid
   this vulnerability.</p>Z
CODE_SMELL
·
findbugs:UR_UNINIT_READ≈
findbugsUR_UNINIT_READ8Correctness - Uninitialized read of field in constructor"MAJOR*java2UR_UNINIT_READ:Ã<p> This constructor reads a field which has not yet been assigned a value.&nbsp;
  This is often caused when the programmer mistakenly uses the field instead
  of one of the constructor's parameters.</p>ZBUG
€
"findbugs:VR_UNRESOLVABLE_REFERENCE¥
findbugsVR_UNRESOLVABLE_REFERENCECCorrectness - Class makes reference to unresolvable class or method"MAJOR*java2VR_UNRESOLVABLE_REFERENCE:ö<p>
      This class makes a reference to a class or method that can not be
    resolved using against the libraries it is being analyzed with.
      </p>ZBUG
ı
 findbugs:NO_NOTIFY_NOT_NOTIFYALL–
findbugsNO_NOTIFY_NOT_NOTIFYALL8Multi-threading - Using notify() rather than notifyAll()"MAJOR*java2NO_NOTIFY_NOT_NOTIFYALL:≈<p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;
  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>
  only wakes up one thread, meaning that the thread woken up might not be the
  one waiting for the condition that the caller just satisfied.</p>ZBUG
ò
#findbugs:OBL_UNSATISFIED_OBLIGATION
findbugsOBL_UNSATISFIED_OBLIGATION=Experimental - Method may fail to clean up stream or resource"INFO*java2OBL_UNSATISFIED_OBLIGATION:‘<p>
          This method may fail to clean up (close, dispose of) a stream,
          database object, or other
          resource requiring an explicit cleanup operation.
          </p>

          <p>
          In general, if a method opens a stream or other resource,
          the method should use a try/finally block to ensure that
          the stream or resource is cleaned up before the method
          returns.
          </p>

          <p>
          This bug pattern is essentially the same as the
          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE
          bug patterns, but is based on a different
          (and hopefully better) static analysis technique.
          We are interested is getting feedback about the
          usefulness of this bug pattern.
          For sending feedback, check:
          </p>
          <ul>
            <li><a href="https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md">contributing guideline</a></li>
            <li><a href="https://github.com/spotbugs/discuss/issues?q=">malinglist</a></li>
          </ul>

          <p>
          In particular,
          the false-positive suppression heuristics for this
          bug pattern have not been extensively tuned, so
          reports about false positives are helpful to us.
          </p>

          <p>
          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for
          a description of the analysis technique.
          </p>Z
CODE_SMELL
¨
common-ts:FailedUnitTestsé
	common-tsFailedUnitTests!Failed unit tests should be fixed"MAJOR*ts:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
›
6findbugs:ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD¢
findbugs-ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELDPMulti-threading - Synchronization on field in futile attempt to guard that field"MAJOR*java2-ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD:”<p> This method synchronizes on a field in what appears to be an attempt
to guard against simultaneous updates to that field. But guarding a field
gets a lock on the referenced object, not on the field. This may not
provide the mutual exclusion you need, and other threads might
be obtaining locks on the referenced objects (for other purposes). An example
of this pattern would be:</p>
<pre><code>private Long myNtfSeqNbrCounter = new Long(0);
private Long getNotificationSequenceNumber() {
     Long result = null;
     synchronized(myNtfSeqNbrCounter) {
         result = new Long(myNtfSeqNbrCounter.longValue() + 1);
         myNtfSeqNbrCounter = new Long(result.longValue());
     }
     return result;
}
</code></pre>ZBUG
Ì
common-ts:DuplicatedBlocksŒ
	common-tsDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*ts:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-ts:InsufficientCommentDensityÓ
	common-tsInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*ts:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
â
common-ts:SkippedUnitTestsÍ
	common-tsSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*ts:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
‚
$common-ts:InsufficientBranchCoverageπ
	common-tsInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*ts:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
◊
"common-ts:InsufficientLineCoverage∞
	common-tsInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*ts:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
“
$javascript:MissingNewlineAtEndOfFile©

javascriptMissingNewlineAtEndOfFile0Files should contain an empty newline at the end"MINOR*js2MissingNewlineAtEndOfFile:õ<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>Z
CODE_SMELL
ﬂ
javascript:S2589 

javascriptS2589,Boolean expressions should not be gratuitous"MAJOR*js2S2589:Ë
<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; "a" is always "true"
  doSomething();
}

if (c || !a) { // Noncompliant; "!a" is always "false"
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ó
javascript:S3798Ç

javascriptS3798BVariables and functions should not be declared in the global scope"MAJOR*js2S3798:ä<p>Any variable or function declared in the global scope implicitly becomes attached to the global object (the <code>window</code> object in a browser
environment). To make it explicit this variable or function should be a property of <code>window</code>. When it is meant to be used just locally, it
should be declared with the <code>const</code> or <code>let</code> keywords (since ECMAScript 2015) or within an Immediately-Invoked Function
Expression (IIFE).</p>
<p>This rule should not be activated when modules are used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myVar = 42;       // Noncompliant
function myFunc() { } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
window.myVar = 42;
window.myFunc = function() { };
</pre>
<p>or</p>
<pre>
let myVar = 42;
let myFunc = function() { }
</pre>
<p>or </p>
<pre>
// IIFE
(function() {
  var myVar = 42;
  function myFunc() { }
})();
</pre>Z
CODE_SMELL
ê
javascript:S1135˚

javascriptS1135Track uses of "TODO" tags"INFO*js2S1135:≠<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
·
javascript:S3796Ã

javascriptS37968Callbacks of array methods should have return statements"BLOCKER*js2S3796:„<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a
callback function is most likely a mistake.</p>
<p>This rule applies for the following methods of an array:</p>
<ul>
  <li> <code>Array.from</code> </li>
  <li> <code>Array.prototype.every</code> </li>
  <li> <code>Array.prototype.filter</code> </li>
  <li> <code>Array.prototype.find</code> </li>
  <li> <code>Array.prototype.findIndex</code> </li>
  <li> <code>Array.prototype.map</code> </li>
  <li> <code>Array.prototype.reduce</code> </li>
  <li> <code>Array.prototype.reduceRight</code> </li>
  <li> <code>Array.prototype.some</code> </li>
  <li> <code>Array.prototype.sort</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var merged = arr.reduce(function(a, b) {
  a.concat(b);
}); // Noncompliant: No return statement
</pre>
<h2>Compliant Solution</h2>
<pre>
var merged = arr.reduce(function(a, b) {
  return a.concat(b);
});
</pre>ZBUG
ñ
javascript:S3799Å

javascriptS3799*Destructuring patterns should not be empty"MAJOR*js2S3799:®<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible
to create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the
intent was to use a default value instead.</p>
<p>This rule raises an issue when empty destructuring pattern is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var {a: {}, b} = myObj; // Noncompliant
function foo({first: [], second}) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var {a = {}, b} = myObj;
function foo({first = [], second}) {
  // ...
}
</pre>ZBUG
Ë
javascript:S1134”

javascriptS1134Track uses of "FIXME" tags"MAJOR*js2S1134:É<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(numerator, denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
ú
javascript:S2189á

javascriptS2189Loops should not be infinite"BLOCKER*js2S2189:∫
<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is
by meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;;) {  // Noncompliant; end condition omitted
  // ...
}

var j = 0;
while (true) { // Noncompliant; constant end condition
  j++;
}

var k;
var b = true;
while (b) { // Noncompliant; constant end condition
  k++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>

while (true) { // break will potentially allow leaving the loop
  if (someCondition) {
    break;
  }
}

var k;
var b = true;
while (b) {
  k++;
  b = k &lt; 10;
}

outer:
while(true) {
  while(true) {
    break outer;
  }
}

</pre>

<h2>Known Limitations</h2>
<ul>
    <li>False positives: when <code>yield</code> is used - <a
            href="https://jira.sonarsource.com/browse/SONARJS-877">SONARJS-877</a>.</li>
    <li>False positives: when an exception is raised by a function invoked within the loop.</li>
    <li>False negatives: when a loop condition is based on an element of an array or object.</li>
</ul>

<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>
</ul>ZBUG
ó

javascript:S2583Ç


javascriptS25831Conditionally executed blocks should be reachable"MAJOR*js2S2583:¢	<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
ê
javascript:ConditionalCommentÓ

javascriptConditionalComment;Internet Explorer's conditional comments should not be used"CRITICAL*js2ConditionalComment:‡<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a
comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to
Internet Explorer and won't work for other browsers.</p>
<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks
and libraries.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/*@cc_on
  @if (@_jscript_version &gt;= 5.5)
    document.write("You are using IE5.5 or newer");
  @else
    document.write("You are using IE5 or older");
  @end
  @*/
</pre>Z
CODE_SMELL
É
javascript:S2508Ó

javascriptS25087The names of model properties should not contain spaces"MINOR*js2S2508:à<p>When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts
space-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Person = Backbone.Model.extend({
        defaults: {
            'first name': 'Bob',      // Noncompliant
            'birth date': new Date()  // Noncompliant
        },
    });
</pre>
<h2>Compliant Solution</h2>
<pre>
Person = Backbone.Model.extend({
        defaults: {
            firstName: 'Bob',
            birthDate: new Date()
        },
    });
</pre>ZBUG
È
javascript:LineLengthœ

javascript
LineLengthLines should not be too long"MAJOR*js2
LineLength:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
Ê
javascript:ParsingError 

javascriptParsingErrorJavaScript parser failure"MAJOR*js2ParsingError:Ì<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
∂
(javascript:VariableDeclarationAfterUsageâ

javascriptVariableDeclarationAfterUsage1Variables should be declared before they are used"BLOCKER*js2VariableDeclarationAfterUsage:<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they "float" to the top
of the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. To keep confusion to
a minimum, <code>var</code> declarations should happen before the variables they declare are used for the first time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;

function fun(){
  alert(x); // Noncompliant as x is declared later in the same scope
  if(something) {
    var x = 42; // Declaration in function scope (not block scope!) shadows global variable
  }
}

fun(); // Unexpectedly alerts "undefined" instead of "1"
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function fun() {
  print(x);
  if (something) {
    x = 42;
  }
}

fun(); // Print "1"
</pre>Z
CODE_SMELL
»
javascript:S1656≥

javascriptS1656%Variables should not be self-assigned"MAJOR*js2S1656:ﬂ<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function setName(name) {
    name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function setName(name) {
    this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
©
javascript:S3317î

javascriptS33170Default export names and file names should match"MINOR*js2S3317:Æ<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may
confuse maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// file path: myclass.js  -- Noncompliant
class MyClass {
  // ...
}
export default MyClass;
</pre>
<h2>Compliant Solution</h2>
<pre>
// file path: MyClass.js
class MyClass {
  // ...
}
export default MyClass;
</pre>Z
CODE_SMELL
–
javascript:S3834ª

javascriptS3834,"Symbol" should not be used as a constructor"CRITICAL*js2S3834:›<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>
<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise
a <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const sym = new Symbol("foo");   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
const sym = Symbol("foo");
</pre>ZBUG
“
'javascript:TooManyBreakOrContinueInLoop¶

javascriptTooManyBreakOrContinueInLoopKLoops should not contain more than a single "break" or "continue" statement"MINOR*js2TooManyBreakOrContinueInLoop:˜<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.
</p>
<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,
the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i &lt;= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  alert("i = " + i);
}
</pre>Z
CODE_SMELL
ô
javascript:S905Ö

javascriptS905PNon-empty statements should change control flow or have at least one side-effect"MAJOR*js2S905:à<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does
not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a == 1; // Noncompliant; was assignment intended?
var msg = "Hello, "
  "World!"; // Noncompliant; have we forgotten '+' operator on previous line?
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.
  </li>
</ul>ZBUG
Â
javascript:S104—

javascriptS104$Files should not have too many lines"MAJOR*js2S104:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
≤
javascript:S1301ù

javascriptS13019"switch" statements should have at least 3 "case" clauses"MINOR*js2S1301:Æ<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>
  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>
  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>
</ul>Z
CODE_SMELL
‘
javascript:Parenthesesπ

javascriptParentheses0Redundant pairs of parentheses should be removed"MAJOR*js2Parentheses:«<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>Z
CODE_SMELL
–
javascript:S2234ª

javascriptS22340Parameters should be passed in the correct order"MAJOR*js2S2234:’<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,
when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will
likely lead to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function divide(divisor, dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(divisor, dividend);
  //...
}
</pre>Z
CODE_SMELL
‰
javascript:S3686œ

javascriptS3686:Functions should not be called both with and without "new""MAJOR*js2S3686:ﬂ<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing
these two usages could lead to unexpected results at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getNum() {
  return 5;
}

function Num(numeric, alphabetic) {
  this.numeric = numeric;
  this.alphabetic = alphabetic;
}

var myFirstNum = getNum();
var my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5

var myNumObj1 = new Num();
var myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object
</pre>Z
CODE_SMELL
Ê
javascript:S1145—

javascriptS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*js2S1145:‹<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}

if (!options || options === true) { doThirdThing(); }  // Noncompliant; always true
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();

doThirdThing();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>
  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2583'>S2583</a> instead.</p>ZBUG
≈	
javascript:S2870∞	

javascriptS2870%"delete" should not be used on arrays"MAJOR*js2S2870:’<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be
used here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>
<p>The proper method for removing an element at a certain index would be:</p>
<ul>
  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>
  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>
  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

delete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']
console.log(myArray[2]); // expected value was 'd' but output is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
var myArray = ['a', 'b', 'c', 'd'];

// removes 1 element from index 2
removed = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']
console.log(myArray[2]); // outputs 'd'
</pre>Z
CODE_SMELL
œ
javascript:S2873∫

javascriptS2873/Calls should not be made to non-callable values"MAJOR*js2S2873:‹<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far
with it. </p>
<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError</code> may be
raised if you do.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo = 1;
foo();   // Noncompliant; TypeError

foo = undefined;
foo();  // Noncompliant; TypeError
</pre>ZBUG
≥

javascript:S1143û


javascriptS11434Jump statements should not occur in "finally" blocks"MAJOR*js2S1143:ª	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar
statements from the suspended <code>try</code> and <code>catch</code> blocks.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force
control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    } finally {
        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    try {
        return 1; // We expect 1 to be returned
    } catch(err) {
        return 2; // Or 2 in cases of error
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>ZBUG
Ó
javascript:S1264Ÿ

javascriptS12645A "while" loop should be used instead of a "for" loop"MINOR*js2S1264:Ó<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>Z
CODE_SMELL
û
javascript:S2990â

javascriptS2990+The global "this" object should not be used"MINOR*js2S2990:®<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the
<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace
it with <code>window</code>; it will have the same effect and be more readable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
this.foo = 1;   // Noncompliant
console.log(this.foo); // Noncompliant

function MyObj() {
  this.foo = 1; // Compliant
}

MyObj.func1 = function() {
  if (this.foo == 1) { // Compliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
foo = 1;
console.log(foo);

function MyObj() {
  this.foo = 1;
}

MyObj.func1 = function() {
  if (this.foo == 1) {
    // ...
  }
}
</pre>Z
CODE_SMELL
◊
javascript:S881√

javascriptS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*js2S881:ë<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>
  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>
  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>
  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>
  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects
  other than that cause by the increment or decrement operator </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side
  effects </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the
  same object within an expression </li>
</ul>Z
CODE_SMELL
ë
 javascript:DuplicatePropertyNameÏ


javascriptDuplicatePropertyNameHProperty names should not be duplicated within a class or object literal"MAJOR*js2DuplicatePropertyName:’	<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual
value that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause
misunderstandings and bugs.</p>
<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>
<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var data = {
  "key": "value",
  "1": "value",
  "key": "value", // Noncompliant - duplicate of "key"
  'key': "value", // Noncompliant - duplicate of "key"
  key: "value", // Noncompliant - duplicate of "key"
  \u006bey: "value", // Noncompliant - duplicate of "key"
  "\u006bey": "value", // Noncompliant - duplicate of "key"
  "\x6bey": "value", // Noncompliant - duplicate of "key"
  1: "value" // Noncompliant - duplicate of "1"
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var data = {
  "key": "value",
  "1": "value",
  "key2": "value",
  'key3': "value",
  key4: "value",
  \u006bey5: "value",
  "\u006bey6": "value",
  "\x6bey7": "value",
  1b: "value"
}
</pre>ZBUG
õ
javascript:S2999Ü

javascriptS2999-"new" operators should be used with functions"MAJOR*js2S2999:™<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a
<code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass() {
  this.foo = 'bar';
}

var someClass = 1;

var obj1 = new someClass;    // Noncompliant;
var obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
 * @constructor
 */
function MyClass() {
  this.foo = 'bar';
}

var someClass = function(){
  this.prop = 1;
}

var obj1 = new someClass;  // Compliant
var obj2 = new MyClass();  // Compliant regardless of considerJSDoc value
</pre>ZBUG
â
javascript:S1788Ù

javascriptS17886Function parameters with default values should be last"MAJOR*js2S1788:à<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify
as many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>
<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it
impossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to "get to"
the non-default parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function multiply(a = 1, b) {  // Noncompliant
  return a*b;
}

var x = multiply(42);  // returns NaN as b is undefined
</pre>
<h2>Compliant Solution</h2>
<pre>
function multiply(b, a = 1) {
  return a*b;
}

var x = multiply(42);  // returns 42 as expected
</pre>Z
CODE_SMELL
ñ
javascript:S3723Å

javascriptS3723Trailing commas should be used"MINOR*js2S3723:≠<p>Modern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they
make adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration
does not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var joe = {
  fname: "Joe",
  lname: "Smith"      // Noncompliant
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var joe = {
  fname: "Joe",
  lname: "Smith",    // OK
};

var joe = {
  fname: "Joe",
  lname: "Smith"};   // OK
</pre>Z
CODE_SMELL
î
javascript:StrictMode˙

javascript
StrictMode)"strict" mode should be used with caution"CRITICAL*js2
StrictMode:é<p>Even though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not
support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not
support it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function strict() {
  'use strict';
}
</pre>Z
CODE_SMELL
π
javascript:S3776§

javascriptS37768Cognitive Complexity of functions should not be too high"CRITICAL*js2S3776:≥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
√
javascript:S878Ø

javascriptS878!Comma operator should not be used"MAJOR*js2S878:⁄<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is
generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a += 2, a + b;  // What's the value of i ?
</pre>
<h2>Compliant Solution</h2>
<pre>
a +=  2;
i = a + b;
</pre>
<h2>Exceptions</h2>
<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>
<pre>
for(i = 0, j = 5; i &lt; 6; i++, j++) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.10 - The comma operator shall not be used. </li>
  <li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used. </li>
  <li> MISRA C:2012, 12.3 - The comma operator should not be used </li>
</ul>Z
CODE_SMELL
à
javascript:S1751Û

javascriptS17512Jump statements should not be used unconditionally"MAJOR*js2S1751:ã<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once
and the loop structure itself is simply wasted keystrokes.</p>
<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>
<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
  break;  // loop only executes once
}

for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
  continue;  // this is meaningless; the loop would continue anyway
}

for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
  return;  // loop only executes once
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++) {
  console.log("i is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>
  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ˆ
javascript:S1994·

javascriptS1994>"for" loop increment clauses should modify the loops' counters"CRITICAL*js2S1994:Í<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop's increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) {  // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or</p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>Z
CODE_SMELL
±	
javascript:S2688ú	

javascriptS2688'"NaN" should not be used in comparisons"MAJOR*js2S2688:∆<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,
but probably not the ones you want. </p>
<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps
counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log("a is not a number");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log("a is not NaN"); // this statement is not necessarily true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (Number.isNaN(a)) {
  console.log("a is not a number");
}
if (!Number.isNaN(a)) {
  console.log("a is not NaN");
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>
</ul>ZBUG
≈
javascript:S3499∞

javascriptS3499^Shorthand object properties should be grouped at the beginning or end of an object declaration"MINOR*js2S3499:ú<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand
declarations grouped at either the beginning or end of an object.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let obj1 = {
  foo,
  a: 1,
  color,  // Noncompliant
  b: 2,
  judyGarland  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let obj1 = {
  foo,
  color,
  judyGarland,
  a: 1,
  b: 2
}
</pre>
<p>or </p>
<pre>
let obj1 = {
  a: 1,
  b: 2,
  foo,
  color,
  judyGarland
}
</pre>Z
CODE_SMELL
Ú	
javascript:S2201›	

javascriptS2201GReturn values from functions without side effects should not be ignored"MAJOR*js2S2201:Á<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>
<h2>Noncompliant Code Example</h2>
<pre>
'hello'.lastIndexOf('e'); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
let char = 'hello'.lastIndexOf('e');
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>ZBUG
–
javascript:S2685ª

javascriptS2685<"arguments.caller" and "arguments.callee" should not be used"MAJOR*js2S2685:…<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest
versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>
<blockquote>
  Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError
  exception on access.
</blockquote>
<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function whoCalled() {
   if (arguments.caller == null)   //Noncompliant
      console.log('I was called from the global scope.');
   else
      console.log(arguments.caller + ' called me!');  // Noncompliant

  console.log(whoCalled.caller);  // Noncompliant
  console.log(whoCalled.arguments);  // Noncompliant
}
</pre>Z
CODE_SMELL
≤
javascript:S3533ù

javascriptS35330"import" should be used to include external code"MINOR*js2S3533:∑<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,
ES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be
converted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// circle.js
exports.area = function (r) {
  return PI * r * r;
};

// foo.js
define(["./cart", "./horse"], function(cart, horse) {  // Noncompliant
  // ...
});

// bar.js
const circle = require('./circle.js');  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
// circle.js
let area = function (r) {
  return PI * r * r;
}
export default area;

// foo.js
import cart from "./cart.js";
import horse from "./horse.js";

// bar.js
import circle from "./circle.js"
</pre>Z
CODE_SMELL
Ì
javascript:S1871ÿ

javascriptS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*js2S1871:À<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}

if ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else {
  doTheRest();
}
</pre>
<p>or </p>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doFirstThing();
    doThirdThing();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThirdThing();
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>Z
CODE_SMELL
Á
javascript:S3498“

javascriptS3498.Object literal shorthand syntax should be used"MINOR*js2S3498:Ó<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,
object-shorthand is also preferred for the definition of functions in object literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let a = 1;

let myObj = {
  a : a,  // Noncompliant
  fun: function () {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let a = 1;

let myObj = {
  a,
  fun () {
    //...
  }
}
</pre>Z
CODE_SMELL
≤
javascript:S3531ù

javascriptS3531#Generators should "yield" something"MAJOR*js2S3531:À<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code
will always be empty. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function* myGen(a, b) {  // Noncompliant
  let answer = 0;
  answer += a * b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function* myGen(a, b) {
  let answer = 0;
  while (answer &lt; 42) {
    answer += a * b;
    yield answer;
  }
}
</pre>ZBUG
·	
javascript:S1472Ã	

javascriptS14725Function call arguments should not start on new lines"MINOR*js2S1472:·<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could
lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>
<p>What was the initial intent of the developer?</p>
<ol>
  <li> Define a function and then execute some unrelated code inside a closure ? </li>
  <li> Pass the second function as a parameter to the first one ? </li>
</ol>
<p>The first option will be the one chosen by the JavaScript interpreter.</p>
<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var fn = function () {
  //...
}

(function () { // Noncompliant
  //...
})();
</pre>
<h2>Compliant Solution</h2>
<p>Either</p>
<pre>
// define a function
var fn = function () {
  //...
}; // &lt;-- semicolon added

// then execute some code inside a closure
(function () {
  //...
})();
</pre>
<p>Or </p>
<pre>
var fn = function () {
  //...
}(function () { // &lt;-- start function call arguments on same line
  //...
})();
</pre>Z
CODE_SMELL
÷

javascript:S2681¡


javascriptS26813Multiline blocks should be enclosed in curly braces"MAJOR*js2S2681:ﬂ	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs. </p>
<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the
omission of curly braces means the lines will be unconditionally executed once.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>ZBUG
…
"javascript:CollapsibleIfStatements¢

javascriptCollapsibleIfStatements,Collapsible "if" statements should be merged"MAJOR*js2CollapsibleIfStatements:ú<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != undefined) {
  if (x === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x != undefined &amp;&amp; x === 2) {
  // ...
}
</pre>Z
CODE_SMELL
‘
javascript:S1119ø

javascriptS1119Labels should not be used"MAJOR*js2S1119:<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,
which reduces the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel: {
  let x = doSomething();
  if (x &gt; 0) {
    break myLabel;
  }
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = doSomething();
if (x &lt;= 0) {
  doSomethingElse();
}
</pre>
<h2>Exceptions</h2>
<p>Labeled loops are ignored.</p>Z
CODE_SMELL
‹
$javascript:DuplicateFunctionArgument≥

javascriptDuplicateFunctionArgument(Function argument names should be unique"MAJOR*js2DuplicateFunctionArgument:¥<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument
hides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely
inaccessible).</p>
<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring
arguments with the same name produces an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function compute(a, a, c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function compute(a, b, c) { // Compliant
}
</pre>ZBUG
Ñ
javascript:S2208Ô

javascriptS2208#Wildcard imports should not be used"CRITICAL*js2S2208:ì<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using
<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from "module";</code>
imports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import * as Imported from "aModule";  // Noncompliant
</pre>Z
CODE_SMELL
∞

javascript:S3812õ


javascriptS3812GResults of "in" and "instanceof" should be negated rather than operands"CRITICAL*js2S3812:¢	<p>Mixing up the order of operations will almost always yield unexpected results. For instance, consider the outcome of absentmindedly kissing the dog
and patting your spouse on the head. </p>
<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key
in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the
result. <code>!obj instanceof SomeClass</code> has the same problem.</p>
<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (!"prop" in myObj) {  // Noncompliant;  "in" operator is checking property "false"
  doTheThing();  // this block will be never executed
}

if (!foo instanceof MyClass) {  // Noncompliant; "!foo" returns a boolean, which is not an instance of anything
  doTheOtherThing();  // this block is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!("prop" in myObj)) {
  doTheThing();
}

if (!(foo instanceof MyClass)) {
  doTheOtherThing();
}
</pre>ZBUG
˙
$javascript:AssignmentWithinCondition—

javascriptAssignmentWithinCondition:Assignments should not be made from within sub-expressions"MAJOR*js2AssignmentWithinCondition:π<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)) != '') {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str != '') {
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while ((line = nextLine()) != null) {...}  // Compliant

while (line = nextLine()) {...}  // Compliant

if (line = nextLine()) {...}  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>
  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>
  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>
</ul>Z
CODE_SMELL
‰

javascript:FutureReservedWords¡


javascriptFutureReservedWords9"future reserved words" should not be used as identifiers"BLOCKER*js2FutureReservedWords:¥	<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier
adoption of those potential future versions:</p>
<ul>
  <li> <code>await</code> </li>
  <li> <code>class</code> </li>
  <li> <code>const</code> </li>
  <li> <code>enum</code> </li>
  <li> <code>export</code> </li>
  <li> <code>extends</code> </li>
  <li> <code>implements</code> </li>
  <li> <code>import</code> </li>
  <li> <code>interface</code> </li>
  <li> <code>let</code> </li>
  <li> <code>package</code> </li>
  <li> <code>private</code> </li>
  <li> <code>protected</code> </li>
  <li> <code>public</code> </li>
  <li> <code>static</code> </li>
  <li> <code>super</code> </li>
  <li> <code>yield</code> </li>
</ul>
<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var package = document.getElementsByName("foo"); // Noncompliant
var someData = { package: true };                 // Compliant, as it is not used as an identifier here
</pre>
<h2>Compliant Solution</h2>
<pre>
var elements = document.getElementsByName("foo"); // Compliant
</pre>Z
CODE_SMELL
•
javascript:S1116ê

javascriptS1116"Extra semicolons should be removed"MINOR*js2S1116:∏<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
  <li> There was a misunderstanding about where semicolons are required or useful. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 1;; // Noncompliant

function foo() {
};  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 1;

function foo() {
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that
  the first character following the null statement is a white-space character. </li>
  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided
  that the first character following the null statement is a white-space character. </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,
  or while condition </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,
  or while statement </li>
</ul>Z
CODE_SMELL
•	
javascript:ForInê	

javascriptForIn?"for...in" loops should filter properties before acting on them"MAJOR*js2ForIn:¢<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all
those properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data
properties. Programs that don't take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are
acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Loops used to clone objects are ignored.</p>
<pre>
for (prop in obj) {
  a[prop] = obj[prop];  // Compliant by exception
}
</pre>ZBUG
¸
javascript:S1126Á

javascriptS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*js2S1126:›<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>
<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper
conversion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (expression) {
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
return expression;
</pre>
<p>or </p>
<pre>
return !!expression;
</pre>Z
CODE_SMELL
∆
javascript:S1764±

javascriptS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*js2S1764:∑<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>
<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>
<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>
<pre>
if(f !== f) { // test for NaN value
  console.log("f is NaN");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href='/coding_rules#rule_key=javascript%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
â
javascript:S1488Ù

javascriptS1488NLocal variables should not be declared and then immediately returned or thrown"MINOR*js2S1488:<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function computeDurationInMilliseconds() {
  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}
</pre>Z
CODE_SMELL
Ò
javascript:S2611‹

javascriptS2611(Untrusted content should not be included"CRITICAL*js2S2611:¯<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this
rule raises an issue for each non-relative URL.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function include(url) {
  var s = document.createElement("script");
  s.setAttribute("type", "text/javascript");
  s.setAttribute("src", url);
  document.body.appendChild(s);
}
include("http://hackers.com/steal.js")  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/829">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>
  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>
</ul>ZVULNERABILITY
Ñ
javascript:S3785Ô

javascriptS3785,"in" should not be used with primitive types"CRITICAL*js2S3785:ë<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>
<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = "Foo";
"length" in x; // Noncompliant: TypeError
0 in x;        // Noncompliant: TypeError
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = new String("Foo");
"length" in x;    // true
0 in x;           // true
"foobar" in x;    // false
</pre>ZBUG
˘
javascript:S3786‰

javascriptS3786ITemplate literal placeholder syntax should not be used in regular strings"MAJOR*js2S3786:Ï<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is
done by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string
literal (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was
intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
console.log("Today is ${date}"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
console.log(`Today is ${date}`);
</pre>ZBUG
Ù
javascript:SingleQuoteŸ

javascriptSingleQuote0Single quotes should be used for string literals"MINOR*js2SingleQuote:Á<p>For consistency single-quotes (') are preferred to double-quotes ("). This is helpful when creating strings that include HTML. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var firstParameter = "something";
</pre>
<h2>Compliant Solution</h2>
<pre>
var firstParameter = 'something';
</pre>
<h2>Exceptions</h2>
<p>JSX code and strings that contain quotes are ignored.</p>
<pre>
let heSaid = "Then he said 'What?'."  // ignored
let sheSaid = '"Whatever!" she replied.'  // ignored
</pre>Z
CODE_SMELL
¥
!javascript:UnusedFunctionArgumenté

javascriptUnusedFunctionArgument,Unused function parameters should be removed"MAJOR*js2UnusedFunctionArgument:ä<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) { // "a" is unused
  return compute(b);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(b) {
  return compute(b);
}
</pre>
<h2>Exceptions</h2>
<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.
For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>
<pre>
$(["first", "last"]).each(function (i, value) {
  computeSomethingWithValue(value);
});
</pre>
<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function
signature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>
<p>Examples :</p>
<pre>
var myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported
                                              return p1 + p3; }

var mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored
                                              return p4; }

var myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported
                                              return p2; }
</pre>
<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused. </p>
<pre>
function doSomething(a, b, c) {
  compute(arguments);
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>
  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
ç
javascript:S100˘

javascriptS100@Function and method names should comply with a naming convention"MINOR*js2S100:Ö<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
function DoSomething(){...}  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>Z
CODE_SMELL
‚
javascript:S3782Õ

javascriptS3782=Arguments to built-in functions should match documented types"MAJOR*js2S3782:⁄<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform
to the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
const isTooSmall = Math.abs(x &lt; 0.0042);
</pre>
<h2>Compliant Solution</h2>
<pre>
const isTooSmall = Math.abs(x) &lt; 0.0042;
</pre>Z
CODE_SMELL
…

javascript:S3827¥


javascriptS3827/Non-existent variables should not be referenced"BLOCKER*js2S3827:‘	<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>
<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>
<ul>
  <li> When typo was made in a symbol's name. </li>
  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not
  hoisted to the top of the scope). </li>
  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike
  <code>var</code>-declarations, having function scope). </li>
  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>
</ul>
<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and
<code>sonar.javascript.environments</code> properties.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var john = {
  firstName: "john",
  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined
}
john.show();
</pre>
<h2>Compliant Solution</h2>
<pre>
var john = {
  firstName: "john",
  show: function() { console.log(this.firstName); }
}
john.show();
</pre>ZBUG
Å
javascript:S3828Ï

javascriptS38289"yield" expressions should not be used outside generators"BLOCKER*js2S3828:Ç<p>The <code>yield</code> keyword is used in a generator function to return an <code>IteratorResult</code> to the caller. It has no other purpose, and
if found outside such a function will raise a <code>ReferenceError</code> because it is then treated as an identifier.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  for (var i = 0; i &lt; 5; i++) {
    yield i * 2;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function * foo() {
  for (var i = 0; i &lt; 5; i++) {
    yield i * 2;
  }
}
</pre>ZBUG
¡
javascript:TabCharacter•

javascriptTabCharacter(Tabulation characters should not be used"MINOR*js2TabCharacter:π<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>Z
CODE_SMELL
Ã
javascript:S1697∑

javascriptS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"MAJOR*js2S1697:±
<p>When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed,
the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is
null-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str == undefined &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str != null || str.length &gt; 0) {
  console.log("String is not empty");
}

if (str != undefined || str.length &gt; 0) {
  console.log("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str != null &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str != undefined &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str == null || str.length &gt; 0) {
  console.log("String is not empty");
}

if (str == undefined || str.length &gt; 0) {
  console.log("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2259'>S2259</a> instead.</p>ZBUG
Ö
javascript:S3512

javascriptS35128Template strings should be used instead of concatenation"MINOR*js2S3512:Ç<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are
preferred in environments that support ECMAScript 2015.</p>
<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function sayHello(name) {
  console.log("hello " + name);  // ignored
}

function madLib(verb, noun) {
  console.log("I really " + verb + " one or two " + noun);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function sayHello(name) {
  console.log(`hello ${name}`);  // no issue raised before, but this is better
}

function madLib(verb, noun) {
  console.log(`I really ${verb} one or two ${noun}`);
}
</pre>Z
CODE_SMELL
≤
javascript:DebuggerStatementë

javascriptDebuggerStatement&Debugger statements should not be used"MINOR*js2DebuggerStatement:ö<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint
in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to
attacks in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>ZVULNERABILITY
°	
javascript:S2424å	

javascriptS2424)Built-in objects should not be overridden"MAJOR*js2S2424:¥<p>Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could
therefore have broad, potentially catastrophic effects on previously-working code.</p>
<p>This rule detects overrides of the following native objects:</p>
<ul>
  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,
  URIError </li>
  <li> Numbers and dates - Number, Math, Date </li>
  <li> Text processing - String, RegExp </li>
  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,
  Float64Array </li>
  <li> Keyed collections - Map, Set, WeakMap, WeakSet </li>
  <li> Structured data - ArrayBuffer, DataView, JSON </li>
  <li> Control abstraction objects - Promise </li>
  <li> Reflection - Reflect, Proxy </li>
  <li> Internationalization - Intl </li>
  <li> Non-standard objects - Generator, Iterator, ParallelArray, StopIteration </li>
</ul>ZBUG
Ü
javascript:S3513Ò


javascriptS3513+"arguments" should not be accessed directly"MAJOR*js2S3513:ê
<p>The magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those
passed-in arguments inside the no-args <code>function</code>. </p>
<p>But just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is
confusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. </p>
<p>If you don't want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then
inside the function, you'll be dealing with a first-class array, rather than an array-like structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function concatenate() {
  let args = Array.prototype.slice.call(arguments);  // Noncompliant
  return args.join(', ');
}

function doSomething(isTrue) {
  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant
  if (!isTrue) {
    for (var arg of args) {
      ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function concatenate(...args) {
  return args.join(', ');
}

function doSomething(isTrue, ...values) {
  if (!isTrue) {
    for (var value of values) {
      ...
    }
  }
}
</pre>Z
CODE_SMELL
∏
+javascript:FunctionDeclarationsWithinBlocksà

javascript FunctionDeclarationsWithinBlocks6Function declarations should not be made within blocks"MINOR*js2 FunctionDeclarationsWithinBlocks:Ì<p>While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the
implementations are inconsistent with each other. ECMAScript 5 and below only allow function declarations in the root statement list of a script or
function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function
within a block :</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x) {
  function foo() {}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x) {
  var foo = function() {}
}
</pre>ZBUG
ç
javascript:VariableShadowingÏ

javascriptVariableShadowing Variables should not be shadowed"CRITICAL*js2VariableShadowing:˚
<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code.
Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
  let x = bar(1);
  if (x &gt; 0) {
      let x = bar(2); // Noncompliant
      console.log(x);
  } else {
     console.log("Wrong Value");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
  let x = bar(1);
  if (x &gt; 0) {
      let y = bar(2);
      console.log(y);
  } else {
     console.log("Wrong Value");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that
  identifier </li>
  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>
  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwE">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwAhAQ">CERT, DCL01-CPP.</a> - Do not reuse variable names in subscopes </li>
</ul>Z
CODE_SMELL
”	
javascript:OctalNumber∏	

javascriptOctalNumberOctal values should not be used"BLOCKER*js2OctalNumber:’<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
var myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>
  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used </li>
  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a
  decimal value </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>Z
CODE_SMELL
Ñ

javascript:S1451Ô	

javascriptS1451+Track lack of copyright and license headers"BLOCKER*js2S1451:å	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>Z
CODE_SMELL
Ö
javascript:S3353

javascriptS3353,Unchanged variables should be marked "const""CRITICAL*js2S3353:ã<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that "no this isn't updated,
and it's not supposed to be". <code>const</code> should be used in these situations in the interests of code clarity.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function seek(input) {
  let target = 32;  // Noncompliant
  for (let i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function seek(input) {
  const target = 32;
  for (let i of input) {
    if (i == target) {
      return true;
    }
  }
  return false;
}
</pre>Z
CODE_SMELL
≥
javascript:EmptyBlockô

javascript
EmptyBlock.Nested blocks of code should not be left empty"MAJOR*js2
EmptyBlock:´<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>Z
CODE_SMELL
·
javascript:LabelPlacement√

javascriptLabelPlacement:Only "while", "do" and "for" statements should be labelled"MAJOR*js2LabelPlacement:¡<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,
<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>
<h2>Noncompliant Code Example</h2>
<pre>
myLabel:if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    print("12");
    break myLabel;
  }
  print("Odd number, but not 12");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myLabel:for (i = 0; i &lt; 10; i++) {   // Compliant
  print("Loop");
  break myLabel;
}
</pre>Z
CODE_SMELL
å
javascript:S1219˜

javascriptS12196"switch" statements should not contain non-case labels"BLOCKER*js2S1219:â<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // instead of "case WEDNESDAY"
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(i = 0 ; i &lt; X ; i++) {
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<p>Case 1</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
</ul>Z
CODE_SMELL
‘
javascript:EqEqEqæ

javascriptEqEqEq7"===" and "!==" should be used instead of "==" and "!=""MAJOR*js2EqEqEq:œ<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For
example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>
<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or
<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not
<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>Z
CODE_SMELL
Å
javascript:S2427Ï

javascriptS2427)The base should be provided to "parseInt""MINOR*js2S2427:î<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using
the single-arg version can result in unexpected results on older browsers. </p>
<h2>Noncompliant Code Example</h2>
<pre>
parseInt("010");  // Noncompliant; pre-2013 browsers may return 8
</pre>
<h2>Compliant Solution</h2>
<pre>
parseInt("010", 10);
</pre>ZBUG
È
javascript:S3516‘

javascriptS3516(Function returns should not be invariant"BLOCKER*js2S3516:Ù<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is likely a mistake.</p>
<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  let b = 12;
  if (a) {
    return b;
  }
  return b;
}
</pre>Z
CODE_SMELL
ﬁ
javascript:S2703…

javascriptS2703'Variables should be declared explicitly"BLOCKER*js2S2703:Í<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the
<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause
of a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords. </p>
<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function f(){
  i = 1;         // Noncompliant; i is global

  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function f(){
  var i = 1;

  for (let j = 0; j &lt; array.length; j++) {
    // ...
  }
}
</pre>Z
CODE_SMELL
Ù	
javascript:S3758ﬂ	

javascriptS3758KValues not convertible to numbers should not be used in numeric comparisons"MAJOR*js2S3758:ﬁ<p>In a Zen-like manner, <code>NaN</code> isn't equal to anything, even itself. So comparisons (<code>&gt;, &lt;, &gt;=, &lt;=</code>) where one
operand is <code>NaN</code> or evaluates to <code>NaN</code> always return <code>false</code>. Specifically, <code>undefined</code> and objects that
cannot be converted to numbers evaluate to <code>NaN</code> when used in numerical comparisons.</p>
<p>This rule raises an issue when there is at least one path through the code where one of the operands to a comparison is <code>NaN</code>,
<code>undefined</code> or an <code>Object</code> which cannot be converted to a number.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x;  // x is currently "undefined"
if (someCondition()) {
  x = 42;
}

if (42 &gt; x) {  // Noncompliant; "x" might still be "undefined"
  doSomething();
}

var obj = {prop: 42};
if (obj &gt; 24) { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var x;
if (someCondition()) {
  x = 42;
} else {
  x = foo();
}

if (42 &gt; x) {
  doSomething();
}

var obj = {prop: 42};
if (obj.prop &gt; 24) {
  doSomething();
}
</pre>Z
CODE_SMELL
Á
javascript:S3759“

javascriptS3759*Non-existent properties should not be read"MAJOR*js2S3759:˘<p>Reading a non-existent property on an object always returns <code>undefined</code>. Doing so is usually an error; either in the name of the
property or the type of the variable being accessed.</p>
<p>If an attempt is made to access properties of a primitive, the primitive is automatically encased in a primitive-wrapper object for the operation.
But being "promoted" to an object doesn't mean that the primitive will actually have properties to access. The wrapper object still won't have the
non-existent property and <code>undefined</code> will be returned instead. </p>
<p>This rule raises an issue when an attempt is made to access properties of a primitive. Thus this rule should only be activated when you don't use
monkey patching for standard objects, like <code>Number</code>, <code>Boolean</code> and <code>String</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
x = 42;
y = x.length;   // Noncompliant, Number type doesn't have "length" property
</pre>
<h2>Exceptions</h2>
<p>The Ember framework introduces a few extensions to <code>String</code>. Since it is a widely used package, the following <code>String</code>
properties will not trigger this rule even though they are not built-in:</p>
<ul>
  <li> <code>camelize</code> </li>
  <li> <code>capitalize</code> </li>
  <li> <code>classify</code> </li>
  <li> <code>dasherize</code> </li>
  <li> <code>decamelize</code> </li>
  <li> <code>fmt</code> </li>
  <li> <code>loc</code> </li>
  <li> <code>underscore</code> </li>
  <li> <code>w</code> </li>
</ul>ZBUG
Ù
javascript:HtmlCommentsÿ

javascriptHtmlComments&HTML-style comments should not be used"MINOR*js2HtmlComments:Ó<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// Compliant
/* Compliant */
</pre>Z
CODE_SMELL
∏
javascript:S2549£

javascriptS25499The "changed" property should not be manipulated directly"CRITICAL*js2S2549:∏<p>According to the Backbone.js docs</p>
<blockquote>
  The
  <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update
  <strong>changed</strong> directly since its state is internally maintained by set. A copy of
  <strong>changed</strong> can be acquired from changedAttributes.
</blockquote>
<p>The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated. If you modify
it manually, you can break the resorting of the collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myModel.changed = { myProperty: 1 }; // Non-compliant
</pre>ZBUG
Î
javascript:S3514÷

javascriptS35143Destructuring syntax should be used for assignments"MINOR*js2S3514:Ì<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called
"destructuring", and it allows you to condense boilerplate code so you can concentrate on logic. </p>
<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo (obj1, obj2, array) {
  var a = obj1.a;  // Noncompliant
  var b = obj1.b;

  var name = obj2.name;  // ignored; there's only one extraction-and-assignment

  var zero = array[0];  // Noncompliant
  var one = array[1];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo (obj1, obj2, array) {
  var {a, b} = obj1;

  var {name} = obj2;  // this syntax works because var name and property name are the same

  var [zero, one] = array;
}
</pre>Z
CODE_SMELL
Ì
javascript:S1854ÿ

javascriptS1854Dead stores should be removed"MAJOR*js2S1854:Ö<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is
assigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious
error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function pow(a, b) {
  if(b == 0) {
    return 0;
  }
  var x = a;
  for(var i = 1; i &lt; b; i++) {
    x = a * i;  //Dead store because the last return statement should return x instead of returning a
  }
  return a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function pow(a, b) {
  if(b == 0) {
    return 0;
  }
  var x = a;
  for(var i = 1; i &lt; b; i++) {
    x = a * i;
  }
  return x;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, <code>true</code>, <code>false</code>, <code>""</code>,
<code>[]</code> and <code>{}</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>Z
CODE_SMELL
¿
javascript:S3757´

javascriptS37570Arithmetic operations should not result in "NaN""MAJOR*js2S3757:≈<p>The result of an expression with an arithmetic operator <code>/, *, %, ++, --, -, +=, -=, *=, /=, %=, +</code> or unary operator <code>+, -</code>
when at least one operand is <code>Object</code> or <code>Undefined</code> will be always a <code>NaN</code> (Not a Number).</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = [1, 2];
var y = x / 4;  //Noncompliant
</pre>
<h2>Exceptions</h2>
<ul>
  <li> <code>Date</code> operands: they are implicitly converted to numbers. </li>
  <li> The binary <code>+</code> operator with <code>Object</code> operand (concatenation). </li>
</ul>Z
CODE_SMELL
Ø
javascript:Semicolonñ

javascript	Semicolon%Statements should end with semicolons"MINOR*js2	Semicolon:≥<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to
unexpected results because a semicolon is implicitly inserted at the end of each line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun() {
  return  // Noncompliant. ';' implicitly inserted at end of line
       5   // Noncompliant. ';' implicitly inserted at end of line
}
print(fun());  // prints "undefined", not "5"
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun() {
  return 5;
}
print(fun());
</pre>Z
CODE_SMELL
•
javascript:PrimitiveWrappersÑ

javascriptPrimitiveWrappers6Wrapper objects should not be used for primitive types"MINOR*js2PrimitiveWrappers:Ä<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,
just remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a
primitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let x = new Number("0");
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>
<h2>Compliant Solution</h2>
<pre>
let x = Number("0");
if (x) {
  alert('hi');
}
</pre>
<h2>Exceptions</h2>
<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>
<pre>
let booleanObject = new Boolean(true);
let numberObject = new Number(0);
let stringObject = new String('');
</pre>Z
CODE_SMELL
›
javascript:CurlyBraces¬

javascriptCurlyBraces*Control structures should use curly braces"CRITICAL*js2CurlyBraces:”<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>
  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a
  compound statement, or another if statement </li>
  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement
  </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement
  </li>
</ul>Z
CODE_SMELL
ô
javascript:S4043Ñ

javascriptS4043/"Array.reverse" should not be used misleadingly"MAJOR*js2S4043:¶<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact.
<code>Array.reverse()</code> is not one of those. Instead, it alters the source array <em>in addition to</em> returning the altered version, which is
likely not what was intended. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var b = a.reverse(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'

a.reverse();
</pre>ZBUG
õ
javascript:S4165Ü

javascriptS4165#Assignments should not be redundant"MAJOR*js2S4165:≠<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in
assigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>Z
CODE_SMELL
õ
javascript:S3402Ü

javascriptS3402+Strings and non-strings should not be added"MINOR*js2S3402:•<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could
be confusing, specially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to
make it easier to understand to future maintainers.</p>
<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 5 + 8;  // okay
var z = "8"
var y = 5 + z;  // Noncompliant; yields string "58"
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 5 + 8;
var z = "8";
var y = 5 + Number(z);
</pre>Z
CODE_SMELL
¢
javascript:S3523ç

javascriptS3523(Function constructors should not be used"CRITICAL*js2S3523:©<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string
arguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security
risk.</p>
<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or
a dedicated library.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj =  new Function("return " + data)();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = JSON.parse(data);
</pre>
<h2>Exceptions</h2>
<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>ZVULNERABILITY
¯
javascript:UnusedVariable⁄

javascriptUnusedVariable6Unused local variables and functions should be removed"MINOR*js2UnusedVariable:‹<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability
because developers will not wonder what the variable or function is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function numberOfMinutes(hours) {
  var seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function numberOfMinutes(hours) {
  return hours * 60;
}
</pre>Z
CODE_SMELL
Ç
javascript:ContinueStatement·

javascriptContinueStatement"continue" should not be used"MINOR*js2ContinueStatement:ˆ<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured
control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i == 5) {
      continue;  /* Noncompliant */
    }
    alert("i = " + i);
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  for (i = 0; i &lt; 10; i++) {
    if (i != 5) {  /* Compliant */
      alert("i = " + i);
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>
</ul>Z
CODE_SMELL
¢
javascript:S1862ç

javascriptS1862\Related "if/else if" statements and "cases" in a "switch" should not have the same condition"MAJOR*js2S1862:Ç<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will
be executed: the first one with a condition that evaluates to <code>true</code>.</p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>
<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse
there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>
<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice
that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();


switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
›
javascript:S3403»

javascriptS3403BStrict equality operators should not be used with dissimilar types"MAJOR*js2S3403:◊<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,
respectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be
bugs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 8;
var b = "8";

if (a === b) {  // Noncompliant; always false
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 8;
var b = "8";

if (a == b) {
  // ...
}
</pre>
<p>or</p>
<pre>
var a = 8;
var b = "8";

if (a === Number(b)) {
  // ...
}
</pre>ZBUG
Õ
javascript:S2432∏

javascriptS2432 Setters should not return values"MAJOR*js2S2432:È<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from
a setter will be ignored, and explicitly returning a value is an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
    return 42;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
  }
}
</pre>ZBUG
…
javascript:S3524¥

javascriptS3524GBraces and parentheses should be used consistently with arrow functions"MINOR*js2S3524:∑<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does
not conform to the configured requirements.</p>
<h2>Noncompliant Code Example</h2>
<p>With the configured defaults forbidding parentheses</p>
<pre>
var foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg
var bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body
</pre>
<h2>Compliant Solution</h2>
<pre>
var foo = a =&gt; { /* ... */ };
var bar = (a, b) =&gt; 0;
</pre>Z
CODE_SMELL
Ë

%javascript:ArrayAndObjectConstructorsæ


javascriptArrayAndObjectConstructors%Array constructors should not be used"MINOR*js2ArrayAndObjectConstructors:π	<p>Array literals should always be preferred to Array constructors.</p>
<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be
equal to the number of arguments. However, using a single argument will have one of three consequences:</p>
<ul>
  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>
  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>
  <li> Otherwise the array will have one element with the argument as its value. </li>
</ul>
<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid
these kinds of weird cases, always use the more readable array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.
var a2 = new Array(x1); // Noncompliant and variable in results
var a3 = new Array();  // Noncompliant. Results in 0-element array.

</pre>
<h2>Compliant Solution</h2>
<pre>
var a1 = [x1, x2, x3];
var a2 = [x1];
var a3 = [];
</pre>Z
CODE_SMELL
”
!javascript:ExcessiveParameterList≠

javascriptExcessiveParameterList-Functions should not have too many parameters"MAJOR*js2ExcessiveParameterList:®<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
function doSomething(param1, param2, param3, param4, param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(param1, param2, param3, param4) {
...
}
</pre>Z
CODE_SMELL
Ï
javascript:S3002◊

javascriptS3002;Unary operators "+" and "-" should not be used with objects"MINOR*js2S3002:Ê<p>The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values. But not every value can be
converted to a <code>Number</code> type; use it with an object, and result will be <code>NaN</code> (Not A Number). This can be confusing to
maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj = {x : 1};
doSomethingWithNumber(+obj);    // Noncompliant

function foo(){
  return 1;
}
doSomethingWithNumber(-foo);    // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {x : 1};
doSomethingWithNumber(+obj.x);

function foo(){
  return 1;
}
doSomethingWithNumber(-foo());

var str = '42';
doSomethingWithNumber(+str);
</pre>
<h2>Exceptions</h2>
<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types, and <code>+</code> can be used with
<code>Date</code>.</p>
<pre>
var b = new Boolean(true);
doSomethingWithNumber(-b);  // Compliant
var timestamp = +new Date();  // Compliant
</pre>Z
CODE_SMELL
Å
javascript:S1067Ï

javascriptS1067%Expressions should not be too complex"CRITICAL*js2S1067:é<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>Z
CODE_SMELL
à
javascript:S2310Û

javascriptS2310ALoop counters should not be assigned to from within the loop body"CRITICAL*js2S2310:˘<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in
the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var names = [ "Jack", "Jim", "", "John" ];
for (var i = 0; i &lt; names.length; i++) {
  if (!names[i]) {
    i = names.length;                                 // Non-Compliant
  } else {
    console.log(names[i]);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var names = [ "Jack", "Jim", "", "John" ];
for (var name of names) {
  if (!name) {
    break;                                 // Compliant
  } else {
    console.log(name);
  }
}
</pre>Z
CODE_SMELL
¯
javascript:S3003„

javascriptS30034Comparison operators should not be used with strings"MAJOR*js2S3003:˘<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield
the expected results. Make sure the intention was to compare strings and not numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var appleNumber = "123";
var orangeNumber = "45";
if (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true
  alert("There are more oranges");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var appleNumber = "123";
var orangeNumber = "45";
if (Number(appleNumber) &lt; Number(orangeNumber)) {
  alert("There are more oranges");
}
</pre>Z
CODE_SMELL
¥
javascript:S1186ü

javascriptS1186Functions should not be empty"CRITICAL*js2S1186:…<p>There are several reasons for a function not to have a function body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
}

var foo = () =&gt; {};
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
    // This is intentional
}

var foo = () =&gt; {
    do_something();
};
</pre>Z
CODE_SMELL
’
javascript:S2550¿

javascriptS2550?"defaults" should be a function when objects or arrays are used"MAJOR*js2S2550:“<p>When using the Backbone.js framework with model <code>defaults</code> that contain arrays or objects, <code>defaults</code> should be defined as a
function rather than an object. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that
contains arrays or objects is going to set the default value of every instance to point to the same shared object or array.</p>
<p>Use a function instead and a fresh copy of the object or array will be peeled off for each instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var Person = Backbone.Model.extend({
    defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors
        favoriteColors: ["blue","purple","raspberry"]
    }
});
</pre>
<h2>Compliant Solution</h2>
<pre>
var Person = Backbone.Model.extend({
    defaults: function() {
      return {
        favoriteColors: ["blue","purple","raspberry"]
      };
    }
});
</pre>ZBUG
Ö	
javascript:S3760

javascriptS37609Arithmetic operators should only have numbers as operands"MAJOR*js2S3760:Å<p>Expressions with arithmetic (<code>/, *, %, ++, --, -, -=, *=, /=, %=, +=, +</code>), unary (<code>-</code>), or comparison operators (<code>&gt;,
&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the
maintainability and reliability levels of such a piece of code are questionable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str = "80";
quarter = str / 4; // Noncompliant

if (str &lt; 10) { // Noncompliant
   // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
str = "80";
parsedStr = parseInt(str);
quarter = parsedStr / 4;

if (parsedStr &lt; 10) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Expressions using the binary <code>+</code> operator with at least one <code>String</code> operand are ignored because the <code>+</code>
  operator will perform a concatenation in that case. </li>
  <li> Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. </li>
</ul>Z
CODE_SMELL
∑
javascript:OneStatementPerLineî

javascriptOneStatementPerLine&Statements should be on separate lines"MAJOR*js2OneStatementPerLine:ú<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
foo(); bar(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
foo();
bar();
</pre>
<h2>Exceptions</h2>
<p>Anonymous functions containing a single statement are ignored. Control flow statements with a single nested statement are ignored as well.</p>
<pre>
onEvent(function() { doSomething(); });               // Compliant
onEvent(function(p) { doSomething(); return p % 2; }); // Noncompliant

if (condition) doSomething();                         // Compliant
if (condition) { doSomething(); }                     // Compliant
</pre>Z
CODE_SMELL
õ	
javascript:S2715Ü	

javascriptS2715F"find" should be used to select the children of an element known by id"MAJOR*js2S2715:ä<p>The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the jQuery Sizzle
engine for where it's really needed. That makes the query faster, and your application more responsive.</p>
<p>From the jQuery documentation:</p>
<blockquote>
  <p>Beginning your selector with an ID is always best.</p>
  <p>The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine ‚Äì ID-only
  selections are handled using <code>document.getElementById()</code>, which is extremely fast because it is native to the browser.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
var $productIds = $("#products div.id"); // Noncompliant - a nested query for Sizzle selector engine
</pre>
<h2>Compliant Solution</h2>
<pre>
var $productIds = $("#products").find("div.id"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine
</pre>Z
CODE_SMELL
Ÿ
javascript:S3001ƒ

javascriptS30013"delete" should be used only with object properties"MINOR*js2S3001:‚<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass
anything else to it, and you may or may not get the desired result.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x  = 1;
delete x;       // Noncompliant

function foo(){
..
}

delete foo;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {
  x:1,
  foo: function(){
  ...
  }
};
delete obj.x;
delete obj.foo;

</pre>ZBUG
˛
-javascript:ConstructorFunctionsForSideEffectsÃ

javascript"ConstructorFunctionsForSideEffectsJObjects should not be created to be dropped immediately without being used"MAJOR*js2"ConstructorFunctionsForSideEffects:ô<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could
lead to an unexpected behavior in production.</p>
<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called
directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new MyConstructor(); // Non-Compliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var something = new MyConstructor();  // Compliant
</pre>ZBUG
…
javascript:S2713¥

javascriptS2713;JQuery cache variables should comply with a convention name"MINOR*js2S2713:√<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all variables names that are used to store/cache jQuery
objects match a provided regular expression.</p>Z
CODE_SMELL
í
javascript:S2716˝

javascriptS2716&Universal selectors should not be used"MAJOR*js2S2716:°<p>Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>,
should be limited; it explicitly specifies that the match could be anywhere.</p>
<h2>Noncompliant Code Example</h2>
<pre>
$( ".buttons &gt; *" );  // Noncompliant; extremely expensive
</pre>
<h2>Compliant Solution</h2>
<pre>
$( ".buttons" ).children(); // Compliant
</pre>Z
CODE_SMELL
∞
javascript:S2714õ

javascriptS2714>Element type selectors should not be used with class selectors"MAJOR*js2S2714:ß<p>Using element type in class selectors is slower than using only the class selector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var $products = $("div.products");    // Noncompliant - slow
</pre>
<h2>Compliant Solution</h2>
<pre>
var $products = $(".products");    // Compliant - fast
</pre>Z
CODE_SMELL
¯
javascript:S3800„

javascriptS3800,Functions should always return the same type"MAJOR*js2S3800:Å<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {  // Noncompliant
  if (a === 1) {
    return true;
  }
  return 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a === 1) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
ø
javascript:S3923™

javascriptS3923WAll branches in a conditional structure should not have exactly the same implementation"MAJOR*js2S3923:§<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not
apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
}
else {
  doOneMoreThing();
}

let a = (b == 0) ? getValue() : getValue();   // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>ZBUG
æ
javascript:S3525©

javascriptS3525?Class methods should be used instead of "prototype" assignments"CRITICAL*js2S3525:±<p>Originally JavaScript didn't support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code>
assignments for "class" functions. Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be converted to
true <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>
<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyNonClass(initializerArgs = []) {
  this._values = [...initializerArgs];
}

MyNonClass.prototype.doSomething = function () {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  constructor(initializerArgs = []) {
    this._values = [...initializerArgs];
  }

  doSomething() {
    //...
  }
}
</pre>Z
CODE_SMELL
ü
javascript:S1105ä

javascriptS1105:An open curly brace should be located at the end of a line"MINOR*js2S1105:ö<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
{                                                      //Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {                                   //Compliant
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>Object literals appearing as arguments can start on their own line.</p>
<pre>
functionWithObject(
   {                                                 //Compliant
        g: "someValue"
   }
);
</pre>Z
CODE_SMELL
ı
javascript:S1226‡

javascriptS1226UFunction parameters, caught exceptions and foreach variables should not be reassigned"MINOR*js2S1226:’<p>While it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able
to tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some
developers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could
confuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function MyClass(name, strings) {
  name = foo;                    // Noncompliant

  for (var str of strings) {
    str = "";  // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>
</ul>Z
CODE_SMELL
π
javascript:S2392§

javascriptS2392=Variables should be defined in the blocks where they are used"MAJOR*js2S2392:±<p>A variable that is declared at function scope, but only used inside a single block should be declared in that block, and variables that are
declared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared outside the block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) {
  var i;  // Noncompliant; should be declared in if-block
  if (a &gt; b) {
    i = a;
    console.log(i);
    var x = a - b;  // Noncompliant; should be declared outside if-block
  }

  if (a &gt; 4) {
   console.log(x);
  }

  return a+b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function doSomething(a, b) {
  var x = a - b;

  if (a &gt; b) {
    var i = a;
    console.log(i);
  }

  if (a &gt; 4) {
   console.log(x);
  }

  return a+b;
}
</pre>Z
CODE_SMELL
ˆ
javascript:S3801·

javascriptS3801*Functions should use "return" consistently"MAJOR*js2S3801:Å<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can
return different types of values, which can be very confusing to the user and significantly harder to maintain.</p>
<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>
<ul>
  <li> It exits without a <code>return</code> statement. </li>
  <li> It executes a <code>return</code> with no value. </li>
</ul>
<p>This rule verifies that return values are either always or never specified for each path through a function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) { // Noncompliant, function exits without "return"
  if (a == 1) {
    return true;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  if (a == 1) {
    return true;
  }
  return false;
}
</pre>Z
CODE_SMELL
…
javascript:TrailingComma¨

javascriptTrailingComma"Trailing commas should not be used"MINOR*js2TrailingComma:À<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which
throws a meaningless error. Therefore trailing commas should be eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab,    // Noncompliant - trailing comma
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab
};
</pre>ZBUG
æ

"javascript:MultilineStringLiteralsó


javascriptMultilineStringLiterals,Multiline string literals should not be used"MINOR*js2MultilineStringLiterals:ë	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the
beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>Z
CODE_SMELL
ú
javascript:S3579á

javascriptS3579Array indexes should be numeric"MAJOR*js2S3579:≤<p>Associative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as
easy as an array, and more reliable if you need named members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let arr = [];
arr[0] = 'a';
arr['name'] = 'bob';  // Noncompliant
arr[1] = 'foo';
</pre>
<h2>Compliant Solution</h2>
<pre>
let obj = {
  name: 'bob',
  arr: ['a', 'foo']
};
</pre>Z
CODE_SMELL
∂
javascript:S3699°

javascriptS3699EThe output of functions that don't return anything should not be used"MAJOR*js2S3699:≠<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its
"result" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo() {
}

a = foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo() {
}

foo();
</pre>ZBUG
˛
javascript:S3854È

javascriptS3854)"super()" should be invoked appropriately"CRITICAL*js2S3854:é<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>
<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke
<code>super()</code>.</p>
<p>Furthermore:</p>
<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>
<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>
<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>
<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Animal {
  constructor() {
    super();         // Noncompliant, super() cannot be invoked in a base class
  }

  doSomething() {
  }
}

class Dog extends Animal {
  constructor(name) {
    this.name = name;
    super.doSomething();
    super();         // Noncompliant, super() must be invoked before "this" or "super" is used
  }

  doSomething() {
    super();         // Noncompliant, super() cannot be invoked outside of a constructor
  }
}

class Labrador extends Dog {
  constructor(name) {
    super();         // Noncompliant, super() must be invoked with one argument
  }
}

class GermanShepherd extends Dog {
  constructor(name) {
  }                  // Noncompliant, super() must be invoked in constructor of derived class
}

class FilaBrasileiro extends Dog {
  constructor(name) {
    super(name);
    super(name);    // Noncompliant, super() can only be invoked once
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Animal {
  constructor() {
  }

  doSomething() {
  }
}

class Dog extends Animal {
  constructor(name) {
    super();
    this.name = name;
    super.doSomething();
  }

  doSomething() {
  }
}

class Labrador extends Dog {
  constructor(name) {
    super(name);
  }
}

class GermanShepherd extends Dog {
  constructor(name) {
    super(name);
  }
}

class FilaBrasileiro extends Dog {
  constructor(name) {
    super(name);
  }
}
</pre>
<h2>Known Limitations</h2>
<ul>
  <li>False negatives: some issues are not raised if the base class is not defined in the same file as the current class.</li>
</ul>ZBUG
ö
javascript:S2762Ö

javascriptS2762Selections should be stored"MAJOR*js2S2762:¥<p>jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable
rather than making the selection repeatedly.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 2</p>
<pre>
$( "p" ).hide();
$( "p" ).show();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var paragraph = $( "p" );

paragraph.hide();
paragraph.show();
</pre>
<h2>Exceptions</h2>
<p>Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during
an assignment.</p>
<pre>
var paragraph = $("p");

// ...

paragraph = $("p");
</pre>Z
CODE_SMELL
∞
"javascript:NamedFunctionExpressionâ

javascriptNamedFunctionExpression-Named function expressions should not be used"MINOR*js2NamedFunctionExpression:â<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer
8).</p>
<h2>Noncompliant Code Example</h2>
<pre>
f = function fun(){}; // Noncompliant;  named function expression
</pre>
<h2>Compliant Solution</h2>
<pre>
fun = function(){}; // Compliant; function expression
</pre>
<h2>Exceptions</h2>
<p>ECMAScript 6 generator functions are excluded from this rule. </p>
<pre>
function* f() {} // Compliant; generator function.
</pre>ZBUG
ÿ
javascript:S1154√

javascriptS11546Results of operations on strings should not be ignored"MAJOR*js2S1154:ﬁ<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>
<h2>Noncompliant Code Example</h2>
<pre>
var str = "..."
str.toUpperCase(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var str = "..."
str = str.toUpperCase();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href='/coding_rules#rule_key=javascript%3AS2201'>S2201</a> instead.</p>ZBUG
÷
javascript:TrailingComment∑

javascriptTrailingComment:Comments should not be located at the end of lines of code"MINOR*js2TrailingComment:≥<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
var a2 = b + c;
</pre>Z
CODE_SMELL
¸
javascript:S2123Á

javascriptS2123*Values should not be uselessly incremented"MAJOR*js2S2123:é<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
let i = 0;
i = i++; // Noncompliant; i is still zero
</pre>
<h2>Compliant Solution</h2>
<pre>
let i = 0;
i++;
</pre>ZBUG
î
javascript:S2769ˇ

javascriptS27690Selection results should be tested with "length""MAJOR*js2S2769:†<p>Once you've made a selection, you typically want to know whether it actually found anything. Since selectors <em>always</em> return an object (the
set of selected DOM elements), the best way to see whether your selection found anything is to test the returned object's <code>.length</code>
property. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( $( "div.foo" ) ) {  // Noncompliant
  // this code always runs, even when the selector didn't match any elements
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Testing whether a selection contains elements.
if ( $( "div.foo" ).length &gt; 0) {
  // this code only runs if elements were found
  //  ...
}
</pre>ZBUG
Å
javascript:SwitchWithoutDefault›

javascriptSwitchWithoutDefault5"switch" statements should end with "default" clauses"CRITICAL*js2SwitchWithoutDefault:—<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>
  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
µ
javascript:FunctionComplexityì

javascriptFunctionComplexity#Functions should not be too complex"CRITICAL*js2FunctionComplexity:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
€	
javascript:S3616∆	

javascriptS3616AComma and logical OR operators should not be used in switch cases"MAJOR*js2S3616:÷<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but
just wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in
the comma-list will ever be handled. The rest will fall through to the default.</p>
<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be
considered at execution time.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch a {
  case 1,2:  // Noncompliant; only 2 is ever handled by this case
    doTheThing(a);
  case 3 || 4: // Noncompliant; only '3' is handled
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log("Neener, neener!");  // this happens when a==1 or a == 4
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch a {
  case 1:
  case 2:
    doTheThing(a);
  case 3:
  case 4:
    doThatThing(a);
  case 5:
    doTheOtherThing(a);
  default:
    console.log("Neener, neener!");
}
</pre>ZBUG
Ê
#javascript:CommentRegularExpressionæ

javascriptCommentRegularExpression,Track comments matching a regular expression"MAJOR*js2CommentRegularExpression:¥<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
«
javascript:ElseIfWithoutElse¶

javascriptElseIfWithoutElse:"if ... else if" constructs should end with "else" clauses"CRITICAL*js2ElseIfWithoutElse:õ<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw "Unexpected value for x";
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>
  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>Z
CODE_SMELL
©
javascript:S3735î

javascriptS3735"void" should not be used"CRITICAL*js2S3735:¬<p>The <code>void</code> operator evaluates its argument and unconditionally returns <code>undefined</code>. It can be useful in pre-ECMAScript 5
environments, where <code>undefined</code> could be reassigned, but generally, its use makes code harder to understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void (function() {
   ...
}());
</pre>
<h2>Compliant Solution</h2>
<pre>
(function() {
   ...
}());
</pre>
<h2>Exceptions</h2>
<p>No issue is raised when <code>void 0</code> is used in place of <code>undefined</code>. </p>
<pre>
if (parameter === void 0) {...}
</pre>Z
CODE_SMELL
‚
javascript:CommentedCode≈

javascriptCommentedCode.Sections of code should not be "commented out""MAJOR*js2CommentedCode:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
£	
javascript:WithStatementÜ	

javascriptWithStatement$"with" statements should not be used"MINOR*js2WithStatement:£<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against
<code>with</code>.</p>
<p>Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access
some property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting
variables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously
unpredictable, and should never be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

with (foo) {  // Noncompliant
  y = 4;  // updates foo.x
  x = 3;  // does NOT add a foo.x property; updates x var in outer scope
}
print(foo.x + " " + x); // shows: undefined 3
</pre>
<h2>Compliant Solution</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

foo.y = 4;
foo.x = 3;

print(foo.x + " " + x); // shows: 3 a
</pre>ZBUG
å
javascript:ConditionalOperatorÈ

javascriptConditionalOperator'The ternary operator should not be used"MAJOR*js2ConditionalOperator:<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function foo(a) {
  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function foo(a) {
  var b;
  if (a === 'A') {
    b = 'is A';
  }
  else {
    b = 'is not A';
  }
  // ...
}
</pre>Z
CODE_SMELL
Ø
#javascript:NonEmptyCaseWithoutBreaká

javascriptNonEmptyCaseWithoutBreak?Switch cases should end with an unconditional "break" statement"BLOCKER*js2NonEmptyCaseWithoutBreak:Í<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                               // Ends with comment when fall-through is intentional
    console.log("this case falls through")
    // fall through
  case 4:                                // Use of throw statement
    throw new IllegalStateException();
  case 5:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>
  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>
  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>
  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>
  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>
  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case
  label with a break statement </li>
</ul>Z
CODE_SMELL
‹
javascript:S888»

javascriptS888JEquality operators should not be used in "for" loop termination conditions"CRITICAL*js2S888:«<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (var i = 0; arr[i] != null; i++) {
  // ...
}

for (var i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C++:2008, 6-5-2 </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes
  by more than one </li>
</ul>Z
CODE_SMELL
à
javascript:UnreachableCodeÈ

javascriptUnreachableCode:Jump statements should not be followed by other statements"MAJOR*js2UnreachableCode:Ï<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the
current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to
confuse the unwary. </p>
<h2>Noncompliant Code Example</h2>
<pre>
function fun(a) {
  var i = 10;
  return i + a;
  i++;             // Noncompliant; this is never executed
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function fun(int a) {
  var i = 10;
  return i + a;
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>
<pre>
switch (x) {
  case 42:
     return 43;
     break;   // Compliant
  default:
    doSomething();
}
</pre>
<p>Hoisted variables declarations without initialization are always considered reachable.</p>
<pre>
function bar() {
  return x = function() {
    x.foo = 42;
  }
  var x;
}
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>ZBUG
—
javascript:S2138º

javascriptS2138""undefined" should not be assigned"MINOR*js2S2138:‰<p><code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing
variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,
<code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var myObject = {};

// ...
myObject.fname = undefined;  // Noncompliant
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>
<h2>Compliant Solution</h2>
<pre>
var myObject = {};

// ...
myObject.fname = null;
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>Z
CODE_SMELL
Õ
javascript:S2259∏

javascriptS2259PProperties of variables with "null" or "undefined" values should not be accessed"MAJOR*js2S2259:π<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a
variable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>
block. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x === undefined) {
  console.log(x.length); // Noncompliant; TypeError will be thrown
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required
  </li>
</ul>ZBUG
“
javascript:BitwiseOperators≤

javascriptBitwiseOperators8Bitwise operators should not be used in boolean contexts"MAJOR*js2BitwiseOperators:µ<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.
</p>
<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a &amp;&amp; b) { ... }
</pre>
<h2>Exceptions</h2>
<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,
<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and
<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that
bitwise operations are truly intended in the file.</p>ZBUG
™
javascript:S3500ï

javascriptS35007Attempts should not be made to update "const" variables"MAJOR*js2S3500:Ø<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015
environment, such an attempt might simply be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
const pi = "yes, please";
pi = 3.14;  // Noncompliant
</pre>ZBUG
∂
javascript:S3984°

javascriptS39841Errors should not be created without being thrown"MAJOR*js2S3984:¡<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0) {
  new Error("x must be nonnegative");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0) {
  throw new Error("x must be nonnegative");
}
</pre>ZBUG
˛
javascript:S2376È

javascriptS23761Property getters and setters should come in pairs"MAJOR*js2S2376:Ç<p>When an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus
useless.</p>
<p>This rule also enforces the reverse situation (getter but no setter).</p>
<h2>Noncompliant Code Example</h2>
<pre>
var obj = {
    set foo(value) {
        this.fooval = value;
    }
};
</pre>
<h2>Compliant Solution</h2>
<pre>
var obj = {
    set foo(value) {
        this.fooval = value;
    },
    get foo() {
        return this.fooval;
    }
};
</pre>
<p>or </p>
<pre>
var obj = {
    setFoo(value) {    // a standard method, not a setter
        this.fooval = value;
    }
};
</pre>Z
CODE_SMELL
¯
javascript:TrailingWhitespace÷

javascriptTrailingWhitespace.Lines should not end with trailing whitespaces"MINOR*js2TrailingWhitespace:ÿ<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// The following string will error if there is a whitespace after '\'
var str = "Hello \
World";
</pre>Z
CODE_SMELL
£
javascript:S2770é

javascriptS2770,Deprecated jQuery methods should not be used"MAJOR*js2S2770:¨<p>Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth
transition away from the aging, soon-to-be-retired technology.</p>
<p>This rule raises an issue when any of the following methods is used:</p>
<ul>
  <li> <code>.andSelf()</code> </li>
  <li> <code>.context</code> </li>
  <li> <code>.die()</code> </li>
  <li> <code>.error()</code> </li>
  <li> <code>jQuery.boxModel</code> </li>
  <li> <code>jQuery.browser</code> </li>
  <li> <code>jQuery.sub()</code> </li>
  <li> <code>jQuery.support</code> </li>
  <li> <code>.live()</code> </li>
  <li> <code>.load()</code> </li>
  <li> <code>.selector</code> </li>
  <li> <code>.size()</code> </li>
  <li> <code>.toggle()</code> </li>
  <li> <code>.unload()</code> </li>
</ul>Z
CODE_SMELL
†
javascript:S3509ã

javascriptS35090Default parameters should not cause side effects"BLOCKER*js2S3509:£<p>The assignment of default parameter values is generally intended to help the caller. But when a default assignment causes side effects, the caller
may not be aware of the extra changes or may not fully understand their implications. I.e. default assignments with side effects may end up hurting
the caller, and for that reason, they should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var count = 0;

function go(i = count++) {  // Noncompliant
  console.log(i);
}

go();  // outputs 0
go(7); // outputs 7
go();  // outputs 1
</pre>Z
CODE_SMELL
•
javascript:NestedIfDepthà

javascriptNestedIfDepth`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"CRITICAL*js2NestedIfDepth:ﬂ<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what's known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>Z
CODE_SMELL
Ò	
javascript:S2814‹	

javascriptS28140Variables and functions should not be redeclared"MAJOR*js2S2814:ˆ<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as
either a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with
the developer not realizing that the value of the variable is overwritten by the new assignment.</p>
<p>This rule also applies to function parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a = 'foo';
function a() {}   // Noncompliant
console.log(a);   // prints "foo"

function myFunc(arg) {
  var arg = "event"; // Noncompliant, argument value is lost
}

fun(); // prints "bar"

function fun() {
  console.log("foo");
}

fun(); // prints "bar"

function fun() {  // Noncompliant
  console.log("bar");
}

fun(); // prints "bar"
</pre>
<h2>Compliant Solution</h2>
<pre>
var a = 'foo';
function otherName() {}
console.log(a);

function myFunc(arg) {
  var newName = "event";
}

fun(); // prints "foo"

function fun() {
  print("foo");
}

fun(); // prints "foo"

function printBar() {
  print("bar");
}

printBar(); // prints "bar"
</pre>Z
CODE_SMELL
¡
javascript:S2898¨

javascriptS28986"[type=...]" should be used to select elements by type"MAJOR*js2S2898:¿<p>While <code>:&lt;element_type&gt;</code> and <code>[type="&lt;element_type&gt;"]</code> can both be used in jQuery to select elements by their
type, <code>[type="&lt;element_type&gt;"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method
in modern browsers. </p>
<p>This rule raises an issue when following selectors are used:</p>
<ul>
  <li> <code>:checkbox</code> </li>
  <li> <code>:file</code> </li>
  <li> <code>:image</code> </li>
  <li> <code>:password</code> </li>
  <li> <code>:radio</code> </li>
  <li> <code>:reset</code> </li>
  <li> <code>:text</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
var input = $( "form input:radio" ); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var input = $( "form input[type=radio]" ); // Compliant
</pre>Z
CODE_SMELL
ó	
javascript:S3504Ç	

javascriptS35042Variables should be declared with "let" or "const""CRITICAL*js2S3504:ó<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>
creates a read-only (constant) variable.</p>
<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>
will help alleviate many of the variable scope issues which have caused confusion in the past. </p>
<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some
refactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s
in pre-ECMAScript 2015 environments.</p>
<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var size = 4;
</pre>
<h2>Compliant Solution</h2>
<pre>
const color = "blue";
let size = 4;
</pre>Z
CODE_SMELL
¨
'javascript:FunctionDefinitionInsideLoopÄ

javascriptFunctionDefinitionInsideLoop,Functions should not be defined inside loops"MAJOR*js2FunctionDefinitionInsideLoop:<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer
scopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var funs = [];
for (var i = 0; i &lt; 13; i++) {
  funs[i] = function() { // Non-Compliant
    return i;
  };
}
console.log(funs[0]()); // 13 instead of 0
console.log(funs[1]()); // 13 instead of 1
console.log(funs[2]()); // 13 instead of 2
console.log(funs[3]()); // 13 instead of 3
...
</pre>Z
CODE_SMELL

javascript:S2251€

javascriptS2251IA "for" loop update clause should move the counter in the right direction"MAJOR*js2S2251:„<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run
infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More
typically, an infinite <code>for</code> loop is a bug. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i &lt; strings.length; i--) { // Noncompliant;
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (var i = 0; i &lt; strings.length; i++) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>ZBUG
ú
javascript:S138à

javascriptS138(Functions should not have too many lines"MAJOR*js2S138:¨<p>A function that grows too large tends to aggregate too many responsibilities.</p>
<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>
<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>
<h2>Exceptions</h2>
<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned
a name.</p>
<pre>
(function () { // Ignored by this rule

  function open() {  // Classic function declaration; not ignored
    // ...
  }

  function read() {
    // ...
  }

  function readlines() {
    // ...
  }
})();
</pre>Z
CODE_SMELL
˜
javascript:S4030‚

javascriptS4030,Collection and array contents should be used"MAJOR*js2S4030:Ä<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the
collection moot, or an access is missing.</p>
<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function getLength(a, b, c) {
  const strings = [];  // Noncompliant
  strings.push(a);
  strings.push(b);
  strings.push(c);

  return a.length + b.length + c.length;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
function getLength(a, b, c) {
  return a.length + b.length + c.length;
}
</pre>Z
CODE_SMELL
¯	
javascript:S930‰	

javascriptS930.Function calls should not pass extra arguments"CRITICAL*js2S930:Ü	<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function
execution.</p>
<h2>Noncompliant Code Example</h2>
<pre>
function say(a, b) {
  print(a + " " + b);
}

say("hello", "world", "!"); // Noncompliant; last argument is not used
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>
<pre>
function doSomething(a, b) {
  compute(arguments);
}

doSomething(1, 2, 3) // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/628.html">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/LoAg">CERT, DCL07-C.</a> - Include the appropriate type information in function
  declarators </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/VQBc">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments
  </li>
</ul>ZBUG
Ø
common-jsp:FailedUnitTestsê

common-jspFailedUnitTests!Failed unit tests should be fixed"MAJOR*jsp:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
å
common-jsp:SkippedUnitTestsÏ

common-jspSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*jsp:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL

common-jsp:DuplicatedBlocks–

common-jspDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*jsp:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ö
%common-jsp:InsufficientCommentDensity

common-jspInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*jsp:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
Â
%common-jsp:InsufficientBranchCoverageª

common-jspInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*jsp:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
⁄
#common-jsp:InsufficientLineCoverage≤

common-jspInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*jsp:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ω

findsecbugs-jsp:JSP_JSTL_OUTú

findsecbugs-jspJSP_JSTL_OUT9Security - Escaping of special XML characters is disabled"MAJOR*jsp2JSP_JSTL_OUT:ñ	<p>A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
    <pre>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;

&lt;c:out value="${param.test_param}" escapeXml="false"/&gt;</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;

&lt;c:out value="${param.test_param}"/&gt;</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/out.html">JSTL Javadoc: Out tag</a><br/>
</p>ZVULNERABILITY
√
findsecbugs-jsp:XSS_JSP_PRINT°
findsecbugs-jspXSS_JSP_PRINTSecurity - Potential XSS in JSP"MAJOR*jsp2XSS_JSP_PRINT:≥<p>A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
</p>
<p>
    <b>Vulnerable Code:</b>
    <pre><%
String taintedInput = (String) request.getAttribute("input");
%>
[...]
&lt;%= taintedInput %&gt;</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>
&lt;%
String taintedInput = (String) request.getAttribute("input");
%&gt;
[...]
&lt;%= Encode.forHtml(taintedInput) %&gt;
    </pre>
</p>
<p>
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider: 
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting">WASC-8: Cross Site Scripting</a><br/>
<a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">OWASP: XSS Prevention Cheat Sheet</a><br/>
<a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>
<a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>
<a href="https://code.google.com/p/owasp-java-encoder/">OWASP Java Encoder</a><br/>
</p>ZVULNERABILITY
œ
findsecbugs-jsp:JSP_INCLUDEØ
findsecbugs-jspJSP_INCLUDE Security - Dynamic JSP inclusion"CRITICAL*jsp2JSP_INCLUDE:¡<p>The inclusion of JSP file allow the entry of dynamic value. It may allow an attacker to control the JSP page included.
If this is the case, an attacker will try to include a file on disk that he controls. By including arbitrary files, the
attacker gets the ability to execute any code.
</p>
<p>
    <b>Vulnerable Code:</b>
    <pre>&lt;jsp:include page="${param.secret_param}" /&gt;</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>&lt;c:if test="${param.secret_param == 'page1'}"&gt;
    &lt;jsp:include page="page1.jsp" /&gt;
&lt;/c:if&gt;</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://resources.infosecinstitute.com/file-inclusion-attacks/">InfosecInstitute: File Inclusion Attacks</a><br/>
<a href="http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion">WASC-05: Remote File Inclusion</a><br/>
</p>ZVULNERABILITY
è
findsecbugs-jsp:JSP_XSLTÚ
findsecbugs-jspJSP_XSLT-Security - A malicious XSLT could be provided"CRITICAL*jsp2JSP_XSLT:˝<p>
    "XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents".<sup>[1]</sup><br/>
    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the
    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>
</p>
<p>
<b>Code at risk:</b><br/>
<pre>
&#x3C;x:transform xml=&#x22;${xmlData}&#x22; xslt=&#x22;${xsltControlledByUser}&#x22; /&#x3E;
</pre>
</p>
<p>
<b>Solution:</b><br/>
<p>
The solution would be to make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as
Path traversal <sup>[3][4]</sup> are not possible.
</p>
<p>
<b>References</b><br/>
[1] <a href="https://en.wikipedia.org/wiki/XSLT">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>
<a href="https://prezi.com/y_fuybfudgnd/offensive-xslt/">Offensive XSLT</a> by Nicolas Gregoire<br/>
[2] <a href="http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>
<a href="http://xhe.myxwiki.org/xwiki/bin/view/Main/">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>
<a href="http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>
<a href="https://www.w3.org/TR/xslt">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>
[3] <a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
[4] <a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
</p>ZVULNERABILITY
›
3findsecbugs-jsp:XSS_REQUEST_PARAMETER_TO_JSP_WRITER•
findsecbugs-jsp#XSS_REQUEST_PARAMETER_TO_JSP_WRITER;Security - JSP reflected cross site scripting vulnerability"MAJOR*jsp2#XSS_REQUEST_PARAMETER_TO_JSP_WRITER:Ô<p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting
vulnerability. See <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>
for more information.</p>
<p>SpotBugs looks only for the most blatant, obvious cases of cross site scripting.
If SpotBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting
vulnerabilities that SpotBugs doesn't report. If you are concerned about cross site scripting, you should seriously
consider using a commercial static analysis or pen-testing tool.
</p>ZVULNERABILITY
Ÿ	
findsecbugs-jsp:JSP_SPRING_EVALµ	
findsecbugs-jspJSP_SPRING_EVAL0Security - Dynamic variable in Spring expression"CRITICAL*jsp2JSP_SPRING_EVAL:Ø<p>A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.
</p>
<p>
    <b>Vulnerable Code:</b>
    <pre>&lt;%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %&gt;

&lt;spring:eval expression="${param.lang}" var="lang" /&gt;</pre>
    <br>
    <pre>&lt;%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %&gt;

&lt;spring:eval expression="'${param.lang}'=='fr'" var="languageIsFrench" /&gt;</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>&lt;c:set var="lang" value="${param.lang}"/&gt;</pre>
    <br/>
    <pre>&lt;c:set var="languageIsFrench" value="${param.lang == 'fr'}"/&gt;</pre>
</p>
<br/>
<p>
<b>References</b><br/>
    <a href="http://cwe.mitre.org/data/definitions/94.html">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>
    <a href="http://cwe.mitre.org/data/definitions/95.html">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>
</p>ZVULNERABILITY
˙
1fb-contrib:BRPI_BACKPORT_REUSE_PUBLIC_IDENTIFIERSƒ

fb-contrib&BRPI_BACKPORT_REUSE_PUBLIC_IDENTIFIERSDPerformance - Method uses backported libraries that are now built in"MAJOR*java2&BRPI_BACKPORT_REUSE_PUBLIC_IDENTIFIERS:ç<p>This class uses either Backport Utils concurrent classes from Emory, or Time classes from ThreeTen Backport. 
			Updated/Efficient version of these classes are available in the version of the JDK that this code is compiled against; 
			JDK 1.5 for the concurrent classes, and JDK 1.8 for the time classes, and these
			classes should only be used if you are targeting a JDK lower than this.</p>ZBUG
∞
 fb-contrib:S508C_APPENDED_STRINGã

fb-contribS508C_APPENDED_STRINGGCorrectness - Method passes appended string to title/label of component"MAJOR*java2S508C_APPENDED_STRING:Û<p>This method creates a component and passes a string that was built up from a number of
			strings through appending multiple strings together. As foreign languages may order phrases
			differently, this will make translations difficult.</p>ZBUG
ﬂ
)fb-contrib:IMC_IMMATURE_CLASS_NO_TOSTRING±

fb-contribIMC_IMMATURE_CLASS_NO_TOSTRING2Style - Class does not implement a toString method"INFO*java2IMC_IMMATURE_CLASS_NO_TOSTRING:ñ<p>This class, which has instance fields, has no toString() method which will make debugging with this
    		class more difficult than it could be. Consider adding a toString() method. Using libraries like commons-lang3 
    		ToStringBuilder makes this process easy.
    		</p>Z
CODE_SMELL
∞
fb-contrib:MDM_LOCK_ISLOCKEDè

fb-contribMDM_LOCK_ISLOCKED2Multi-threading - Method tests if a lock is locked"MAJOR*java2MDM_LOCK_ISLOCKED:î<p>Calling <code>ReentrantLock.isLocked()</code> or <code>ReentrantLock.isHeldByCurrentThread()</code> might indicate race conditions or incorrect locking. These methods are designed for use in debug code or monitoring of the system state, not for synchronization control.</p>ZBUG
≈
#fb-contrib:NFF_NON_FUNCTIONAL_FIELDù

fb-contribNFF_NON_FUNCTIONAL_FIELD@Correctness - Serializable class defines a final transient field"MAJOR*java2NFF_NON_FUNCTIONAL_FIELD:Ü<p>This serializable class defines a field as both transient and final. As transient fields
			are not serialized across the stream, it is required that some piece of code reinitialize that field
			when it is deserialized. But since constructors aren't called when deserializing, the field is not initialized.
			And since the field is final, no other method can initialize it as well.</p>ZBUG
¢
fb-contrib:SPP_USE_CONTAINSKEYˇ

fb-contribSPP_USE_CONTAINSKEYLStyle - Method calls keySet() just to call contains, use containsKey instead"INFO*java2SPP_USE_CONTAINSKEY:a<p>This method calls mySet.keySet().contains("foo") when mySet.containsKey("foo") is simpler.</p>Z
CODE_SMELL
Ø
4fb-contrib:SWCO_SUSPICIOUS_WAIT_ON_CONCURRENT_OBJECTˆ

fb-contrib)SWCO_SUSPICIOUS_WAIT_ON_CONCURRENT_OBJECT@Correctness - Method calls wait when await was probably intended"MAJOR*java2)SWCO_SUSPICIOUS_WAIT_ON_CONCURRENT_OBJECT:Ω<p>This method calls wait() on a on mutex defined in the java.util.concurrent package.
			These classes, define await, instead of wait, and it is most likely that await
			was intended.</p>ZBUG
¥
'fb-contrib:WEM_WEAK_EXCEPTION_MESSAGINGà

fb-contribWEM_WEAK_EXCEPTION_MESSAGING:Style - Method throws exception with static message string"INFO*java2WEM_WEAK_EXCEPTION_MESSAGING:È<p>This method creates and throws an exception using a static string as the exceptions message.
			Without any specific context of this particular exception invocation, such as the value of parameters,
			key member variables, or local variables, it may be difficult to infer how this exception occurred. Consider
			adding context to the exception message.</p>Z
CODE_SMELL
Ò
(fb-contrib:ITC_INHERITANCE_TYPE_CHECKINGƒ

fb-contribITC_INHERITANCE_TYPE_CHECKINGCStyle - Method uses instanceof on multiple types to arbitrate logic"INFO*java2ITC_INHERITANCE_TYPE_CHECKING:ö<p>This method uses the instanceof operator in a series of if/else statements to
			differentiate blocks of code based on type. If these types are related by inheritance,
			it is cleaner to just define a method in the base class, and use overridden methods
			in these classes.</p>Z
CODE_SMELL
ì
 fb-contrib:MDM_THREAD_PRIORITIESÓ

fb-contribMDM_THREAD_PRIORITIES:Multi-threading - Method uses suspicious thread priorities"MAJOR*java2MDM_THREAD_PRIORITIES:d<p>Getting or setting thread priorities is not portable and could cause or mask race conditions.</p>ZBUG
î
fb-contrib:SPP_USE_ISEMPTYı

fb-contribSPP_USE_ISEMPTYWStyle - Method checks the size of a collection against zero rather than using isEmpty()"INFO*java2SPP_USE_ISEMPTY:”<p>This method calls the size() method on a collection and compares the result to zero to see if the collection
			is empty. For better code clarity, it is better to just use col.isEmpty() or !col.isEmpty().</p>Z
CODE_SMELL
õ
'fb-contrib:MDM_INETADDRESS_GETLOCALHOSTÔ

fb-contribMDM_INETADDRESS_GETLOCALHOST5Correctness - Method calls InetAddress.getLocalHost()"MAJOR*java2MDM_INETADDRESS_GETLOCALHOST:€<p>Do not call <code>InetAddress.getLocalHost()</code> on multihomed servers. On a multihomed server, 
			<code>InetAddress.getLocalHost()</code> simply returns the IP address associated with the server's internal hostname. 
			This could be any of the network interfaces, which could expose the machine to security risks. Server applications 
			that need to listen on sockets should add configurable properties to define which network interfaces the server should bind.</p>ZBUG
≥
(fb-contrib:S508C_NON_TRANSLATABLE_STRINGÜ

fb-contribS508C_NON_TRANSLATABLE_STRINGGCorrectness - Method passes constant string to title/label of component"MAJOR*java2S508C_NON_TRANSLATABLE_STRING:ﬁ<p>This method creates a component and passes a string literal to the title or label
			of the component. As this string will be shown to users, it should be internationalizable
			through the use of a resource bundle.</p>ZBUG
‚
'fb-contrib:SPP_USE_STRINGBUILDER_LENGTH∂

fb-contribSPP_USE_STRINGBUILDER_LENGTHVPerformance - Method converts StringBuffer or Builder to String just to get its length"MAJOR*java2SPP_USE_STRINGBUILDER_LENGTH:Å<p>This method calls the toString method on a StringBuffer or StringBuilder only to call length() on the resulting
			string. It is faster, and less memory intensive to just call the length method directly on the StringBuffer or StringBuilder
			itself.</p>ZBUG
Î
*fb-contrib:LEST_LOST_EXCEPTION_STACK_TRACEº

fb-contribLEST_LOST_EXCEPTION_STACK_TRACERCorrectness - Method throws alternative exception from catch block without history"MAJOR*java2LEST_LOST_EXCEPTION_STACK_TRACE:Ö<p>This method catches an exception, and throws a different exception, without incorporating the
			original exception. Doing so hides the original source of the exception making debugging and fixing
			these problems difficult. It is better to use the constructor of this new exception that takes an
			original exception so that this detail can be passed along to the user. If this exception has no constructor
			that takes an initial cause parameter, use the initCause method to initialize it instead.</p>
			<p>
<pre><code>
catch (IOException e) {
    throw new MySpecialException("Failed to open configuration", e);
}
</code></pre>
			</p>ZBUG
≤
!fb-contrib:STB_STACKED_TRY_BLOCKSå

fb-contribSTB_STACKED_TRY_BLOCKS.Style - Method stacks similar try/catch blocks"INFO*java2STB_STACKED_TRY_BLOCKS:Ö<p>This method declares two try catch blocks one after another, where each
			catch block catches the same type of exception. They also throw uniformly the
			same type of exception. These two catch blocks can be combined into one to
			simplify the method.</p>Z
CODE_SMELL
Ù
#fb-contrib:UEC_USE_ENUM_COLLECTIONSÃ

fb-contribUEC_USE_ENUM_COLLECTIONSMPerformance - Class uses an ordinary set or map with an enum class as the key"MAJOR*java2UEC_USE_ENUM_COLLECTIONS:®<p>This class uses an ordinary set or map collection and uses an enum class as the key type.
			It is more performant to use the JDK 1.5 EnumSet or EnumMap classes.</p>ZBUG
®
:fb-contrib:JPAI_UNNECESSARY_TRANSACTION_EXCEPTION_HANDLINGÈ

fb-contrib/JPAI_UNNECESSARY_TRANSACTION_EXCEPTION_HANDLINGUCorrectness - Method declares handling a transactional exception that won't be thrown"MAJOR*java2/JPAI_UNNECESSARY_TRANSACTION_EXCEPTION_HANDLING:è<p>This method declares that it either rolls back or does not rollback a transaction based on an
    		expected exception being thrown. However, neither this exception, nor any derived exceptions can be thrown
    		from this method, and so the annotation is useless.</p>ZBUG
”
fb-contrib:MDM_RANDOM_SEED¥

fb-contribMDM_RANDOM_SEED3Correctness - Method creates insecure Random object"MAJOR*java2MDM_RANDOM_SEED:º<p><code>Random()</code> constructor without a seed is insecure because it defaults to an easily guessable seed: 
			<code>System.currentTimeMillis()</code>. Initialize a seed like <code>new Random(SecureRandom.getInstance("SHA1PRNG").nextLong())</code> 
			or replace <code>Random()</code> with <code>SecureRandom.getInstance("SHA1PRNG")</code> instead.
			"SHA1PRNG" is the random algorithm supported on all platforms.
		</p>

			<p>
				As of Java 6, you may use <code>new Random(new SecureRandom().nextLong())</code> or <code>new SecureRandom()</code> instead.
			</p>ZBUG
Ò
#fb-contrib:NSE_NON_SYMMETRIC_EQUALS…

fb-contribNSE_NON_SYMMETRIC_EQUALS[Correctness - Equals method compares this object against other types in a non symmetric way"MAJOR*java2NSE_NON_SYMMETRIC_EQUALS:ó<p>This class implements an equals method that compares this object against another type of object.
			This is almost always a bad thing to do, but if it is to be done, you must make sure that the basic
			symmetry rule of equivalence is maintained, that being if a equals b, then b equals a. It does not
			appear that the class that is being compared to this class knows about this class, and doesn't compare itself
			to this.</p>
			<p>
			Here's an example of a BAD equals method, do NOT do this:
<pre><code>
class Person {
    public boolean equals(Object o) {
        if (o instanceof Person) {
            return name.equals(((Person) o).name);
        } else if (o instanceof String) {
            return name.equals(o);
        }
        return false;
    }
}
</code></pre>
			</p>ZBUG
Ã
+fb-contrib:ISB_INEFFICIENT_STRING_BUFFERINGú

fb-contrib ISB_INEFFICIENT_STRING_BUFFERING_Performance - Method passes simple concatenating string in StringBuffer or StringBuilder append"MAJOR*java2 ISB_INEFFICIENT_STRING_BUFFERING:÷
<p>This method uses <code>StringBuffer</code> or <code>StringBuilder</code>'s append method to concatenate strings. However, it passes the result
			of doing a simple String concatenation to one of these append calls, thus removing any performance gains
			of using the <code>StringBuffer</code> or <code>StringBuilder</code> class.</p>
			
			<p>
			Java will implicitly use StringBuilders, which can make this hard to detect or fix.  For example, <br/>
<pre><code>
StringBuilder sb = new StringBuilder();
for (Map.Entry<Integer, String> e : map.entrySet()) {
    sb.append(e.getKey() + e.getValue());		//bug detected here
}
</code></pre><br/>
			
			gets automatically turned into something like: <br/>
<pre><code>
StringBuilder sb = new StringBuilder();
for (Map.Entry<Integer, String> e : map.entrySet()) {
    StringBuilder tempBuilder = new StringBuilder();
    tempBuilder.append(e.getKey());
    tempBuilder.append(e.getValue());
    <b>sb.append(tempBuilder.toString());</b>		//this isn't too efficient
}
</code></pre><br/>
			
			which involves a temporary <code>StringBuilder</code>, which is completely unnecessary.  To prevent this from happening, simply do:<br/>
			
<pre><code>
StringBuilder sb = new StringBuilder();
for (Map.Entry<Integer, String> e : map.entrySet()) {
    sb.append(e.getKey());
    sb.append(e.getValue());
}
</code></pre>
			</p>ZBUG
È
)fb-contrib:NCMU_NON_COLLECTION_METHOD_USEª

fb-contribNCMU_NON_COLLECTION_METHOD_USE9Style - Method uses old non collections interface methods"INFO*java2NCMU_NON_COLLECTION_METHOD_USE:ô<p>This method makes calls to collection classes where the method is not defined by the Collections
			interface, and an equivalent method exists in the interface. By using the new methods,
			you can define this object by the Collections interface and allow better decoupling.</p>Z
CODE_SMELL
Å
fb-contrib:PME_POOR_MANS_ENUMﬂ

fb-contribPME_POOR_MANS_ENUM)Style - Simple field is used like an enum"INFO*java2PME_POOR_MANS_ENUM:Â<p>This field, although defined as a simple variable (int, String, etc) only has a set of constant values
	       assigned to it. Thus it appears to be used like an enum value, and should probably be defined as such.
	       </p>Z
CODE_SMELL
≤
0fb-contrib:SPP_NULL_CHECK_ON_MAP_SUBSET_ACCESSOR˝

fb-contrib%SPP_NULL_CHECK_ON_MAP_SUBSET_ACCESSORdCorrectness - Method checks whether the keySet(), entrySet() or values() collection of a Map is null"MAJOR*java2%SPP_NULL_CHECK_ON_MAP_SUBSET_ACCESSOR:®This method checks to see if the return value from a keySet(), entrySet() or values() method call on a Map is null.
			For any valid functioning Map these collections will always be non-null, and so the call is superfluous. Maybe you intended
			to check whether those sets where empty() instead.ZBUG
˙
)fb-contrib:CBC_CONTAINS_BASED_CONDITIONALÃ

fb-contribCBC_CONTAINS_BASED_CONDITIONALbStyle - This method uses an excessively complex conditional that can be replaced with Set.contains"INFO*java2CBC_CONTAINS_BASED_CONDITIONAL:Å<p>This method uses an overly complex if expression made up of multiple conditions joined by OR, where the same
    		local variable is compared to a static value. When the number of conditions grows, it is much cleaner
    		to build a static set of the possible values, and use the contains method on that set. This will
    		shorten the code, and make it more self documenting.</p>Z
CODE_SMELL
ú
'fb-contrib:OPM_OVERLY_PERMISSIVE_METHOD

fb-contribOPM_OVERLY_PERMISSIVE_METHODOStyle - This method is declared more permissively than is used in the code base"INFO*java2OPM_OVERLY_PERMISSIVE_METHOD:º<p>This method is declared more permissively than the code is using. Having this method be more
			permissive than is needed limits your ability to make observations about this method, like
    		parameter usage, refactorability, and derivability. It is possible that this detector will report 
    		erroneously if:
    		<ul>
    			<li>The method is called from code not being scanned, such as unit tests</li>
				<li>The method is an API method, expected to be used by unknown client code</li>
    			<li>The method is called through reflection
    		</ul>	
    		</p>Z
CODE_SMELL
¥
8fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NULL˜

fb-contrib-UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NULL?Correctness - JUnit test method passes null Assert.assertEquals"MAJOR*java2-UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NULL:∑<p>This method compares an object's equality to null. It is better to use the Assert.assertNull
			method so that the JUnit failure method is more meaningful of the intended test.</p>ZBUG
ï
(fb-contrib:IMC_IMMATURE_CLASS_NO_PACKAGEË

fb-contribIMC_IMMATURE_CLASS_NO_PACKAGE/Style - Class is defined in the default package"INFO*java2IMC_IMMATURE_CLASS_NO_PACKAGE:“<p>This class has been created in the default package. Classes should be defined in a 
    		proper package structure, typically defined by the reverse of the domain name of the 
    		owner of the code base. Putting code in the default (no) package limits its usefulness, including:
    		<ol>
    		<li>Not being able to import this class into classes with packages</li>
    		<li>Leaving it open to name collisions with other packages.</li>
    		</ol>
    		</p>Z
CODE_SMELL
ı
fb-contrib:MDM_THREAD_FAIRNESS“

fb-contribMDM_THREAD_FAIRNESSNMulti-threading - Method ignores Lock's fairness settings by calling tryLock()"MAJOR*java2MDM_THREAD_FAIRNESS:∑<p>Calling <code>Lock.tryLock()</code> or <code>ReentrantLock.tryLock()</code> without a timeout does not honor the lock's fairness setting. If you want to honor the fairness setting for this lock, then use <code>tryLock(0, TimeUnit.SECONDS)</code> which is almost equivalent (it also detects interruption).</p>ZBUG
Ú
4fb-contrib:SCSS_SUSPICIOUS_CLUSTERED_SESSION_SUPPORTπ

fb-contrib)SCSS_SUSPICIOUS_CLUSTERED_SESSION_SUPPORTTCorrectness - Method modifies an http session attribute without calling setAttribute"MAJOR*java2)SCSS_SUSPICIOUS_CLUSTERED_SESSION_SUPPORT:Ï<p>This method fetches a complex object from an HttpSession object, modifies this object, but does
			not call setAttribute, to inform the application server that this attribute has been changed. This will
			cause this attribute not to be updated in other servers in a clustered environment, as only changes marked
			by a call to setAttribute are replicated.</p>ZBUG
–
$fb-contrib:FCBL_FIELD_COULD_BE_LOCALß

fb-contribFCBL_FIELD_COULD_BE_LOCAL?Correctness - Class defines fields that are used only as locals"MAJOR*java2FCBL_FIELD_COULD_BE_LOCAL:è<p>This class defines fields that are used in a locals only fashion,
			specifically private fields or protected fields in final classes that are accessed
			first in each method with a store vs. a load. This field could be replaced by one
			or more local variables.</p>ZBUG
ª
0fb-contrib:MUC_MODIFYING_UNMODIFIABLE_COLLECTIONÜ

fb-contrib%MUC_MODIFYING_UNMODIFIABLE_COLLECTION]Correctness - This method attempts to modify collection that appears to possibly be immutable"MAJOR*java2%MUC_MODIFYING_UNMODIFIABLE_COLLECTION:∏<p>This method attempts to modify a collection that it got from a source that could potentially have created an
            immutable collection, through Arrays.asList, Collections.unmodifiableXXX, or one of Guava's methods. Doing so will cause
            an exception, as these collections are not mutable.</p>ZBUG
±
&fb-contrib:NAB_NEEDLESS_BOXING_VALUEOFÜ

fb-contribNAB_NEEDLESS_BOXING_VALUEOFNPerformance - Method converts String to boxed primitive using excessive boxing"MAJOR*java2NAB_NEEDLESS_BOXING_VALUEOF:€<p>This method passes a String to a wrapped primitive object's parse method, which in turn calls
			the valueOf() method to convert to a boxed primitive. When it is desired to convert from a String
			to a boxed primitive object, it is simpler to use the BoxedPrimitive.valueOf(String) method.</p>
			
			<p>Instead of something like:<br/>
<pre><code>
Boolean bo = Boolean.valueOf(Boolean.parseBoolean("true"));
Float f = Float.valueOf(Float.parseFloat("1.234"));
</code></pre>
			Simply do: <br/>
<pre><code>
Boolean bo = Boolean.valueOf("true");
Float f = Float.valueOf("1.234");
</code></pre>
			</p>ZBUG
ä
0fb-contrib:SCI_SYNCHRONIZED_COLLECTION_ITERATORS’

fb-contrib%SCI_SYNCHRONIZED_COLLECTION_ITERATORSBCorrectness - Method creates iterators on synchronized collections"MAJOR*java2%SCI_SYNCHRONIZED_COLLECTION_ITERATORS:¢<p>This method uses a synchronized collection, built from Collections.synchronizedXXXX, but accesses it
			through an iterator. Since an iterator is, by definition, multithreaded unsafe, this is a conflict in
			concept. When using iterators, you should do the synchronization manually.</p>ZBUG
€
fb-contrib:SPP_TEMPORARY_TRIMπ

fb-contribSPP_TEMPORARY_TRIM)Style - Method trims a String temporarily"INFO*java2SPP_TEMPORARY_TRIM:ø<p>This method calls trim() on a String without assigning the new string to another variable.
			It then calls length() or equals() on this trimmed string. If trimming the string was important
			for determining its length or its equality, it should be trimmed when you actually go to use it.
			It would make more sense to first trim the String, store the trimmed value in a variable, and then
			continue to test and use that trimmed string.</p>Z
CODE_SMELL
ï
-fb-contrib:SPP_WRONG_COMMONS_TO_STRING_OBJECT„

fb-contrib"SPP_WRONG_COMMONS_TO_STRING_OBJECTNCorrectness - Method does not pass an object to commons-lang's ToStringBuilder"MAJOR*java2"SPP_WRONG_COMMONS_TO_STRING_OBJECT:™This method uses commons-lang, or commons-lang3's ToStringBuilder to attempt to output a representation of an object.
			However, no object was passed, just the style specifier, and so the output will be of the ToStringStyle object itself.
			Don't forget to include the object you wish to output as the first parameter, such as
			<pre>
			ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
			</pre>ZBUG
‡
9fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_IMPOSSIBLE_NULL¢

fb-contrib.UTAO_TESTNG_ASSERTION_ODDITIES_IMPOSSIBLE_NULLLCorrectness - TestNG test method asserts that an autoboxed value is not null"CRITICAL*java2.UTAO_TESTNG_ASSERTION_ODDITIES_IMPOSSIBLE_NULL:–<p>This method asserts that a primitive value that was autoboxed into a boxed primitive was not
			null. This will never happen, as primitives are never null, and thus the autoboxed value isn't
			either.</p>ZBUG
Ä
fb-contrib:SPP_EQUALS_ON_ENUMﬁ

fb-contribSPP_EQUALS_ON_ENUM5Correctness - Method calls equals on an enum instance"MAJOR*java2SPP_EQUALS_ON_ENUM:ﬁ<p>This method calls the equals(Object) method on an enum instance. Since enums values are singletons,
			you can use == to safely compare two enum values. In fact, the implementation for Enum.equals does just
			that.</p>ZBUG
˚
fb-contrib:BL_BURYING_LOGIC€

fb-contribBL_BURYING_LOGICLStyle - Method buries logic to the right (indented) more than it needs to be"INFO*java2BL_BURYING_LOGIC:¬<p>Looks for relatively large if blocks of code, where you unconditionally return from them, and then follow that with an unconditional 
    		return of a small block. This places the bulk of the logic to the right indentation-wise, making it more difficult to read than needed. 
    		It would be better to invert the logic of the if block, and immediately return, allowing the bulk of the logic to be move to the left 
    		for easier reading.</p>Z
CODE_SMELL
∞
*fb-contrib:SPP_SERIALVER_SHOULD_BE_PRIVATEÅ

fb-contribSPP_SERIALVER_SHOULD_BE_PRIVATE7Style - Class defines a serialVersionUID as non private"INFO*java2SPP_SERIALVER_SHOULD_BE_PRIVATE:ﬂ<p>This class defines a static field 'serialVersionUID' to define the serialization
			version for this class. This field is marked as non private. As the serialVersionUID only
			controls the current class, and doesn't affect any derived classes, defining it as non
			private is confusing. It is suggested you change this variable to be private.</p>Z
CODE_SMELL
Â
%fb-contrib:STS_SPURIOUS_THREAD_STATESª

fb-contribSTS_SPURIOUS_THREAD_STATESMMulti-threading - Method calls wait, notify or notifyAll on a Thread instance"MAJOR*java2STS_SPURIOUS_THREAD_STATES:ì<p>This method invokes the methods wait, notify or notifyAll on a Thread instance.
			Doing so will confuse the internal thread state behavior causing spurious thread
			wakeups/sleeps because the internal mechanism also uses the thread instance for its
			notifications.</p>ZBUG
î
fb-contrib:IOI_COPY_WITH_READER

fb-contribIOI_COPY_WITH_READERRPerformance - Method performs bulk stream copy with a java.io.Reader derived input"MAJOR*java2IOI_COPY_WITH_READER:œ<p>This method copies data from a java.io.Reader derived class to an output class, using a bulk copy method
    		supplied by java.nio, commons-io, springframework, guava or poi. Since you are copying the entire stream, you
    		don't care about its contents, and thus using a Reader is wasteful as a reader has to do the hard work of
    		converting byte data to characters, when there is no need to do this. Use stream based inputs for better performance.</p>ZBUG
±
 fb-contrib:MDM_BIGDECIMAL_EQUALSå

fb-contribMDM_BIGDECIMAL_EQUALS.Correctness - Method calls BigDecimal.equals()"MAJOR*java2MDM_BIGDECIMAL_EQUALS:ç<p>This method calls <code>equals()</code> to compare two <code>java.math.BigDecimal</code> numbers. 
			This is normally a mistake, as two <code>BigDecimal</code> objects are only equal if they are 
			equal in both value and scale, so that <i>2.0</i> is not equal to <i>2.00</i>. 
			To compare <code>BigDecimal</code> objects for mathematical equality, use <code>compareTo()</code> instead.</p>ZBUG
ﬁ
(fb-contrib:NOS_NON_OWNED_SYNCHRONIZATION±

fb-contribNOS_NON_OWNED_SYNCHRONIZATION8Style - Class uses non owned variables to synchronize on"INFO*java2NOS_NON_OWNED_SYNCHRONIZATION:í<p>This method uses a synchronize block where the object that is being synchronized on,
			is not owned by this current instance. This means that other instances may use this same
			object for synchronization for their own purposes, causing synchronization confusion. It is
			always cleaner and safer to only synchronize on private fields of this class. Note that 'this'
			is not owned by the current instance, but is owned by whomever assigns it to a field of its
			class. Synchronizing on 'this' is also not a good idea.</p>Z
CODE_SMELL
Ë
5fb-contrib:HCP_HTTP_REQUEST_RESOURCES_NOT_FREED_LOCALÆ

fb-contrib*HCP_HTTP_REQUEST_RESOURCES_NOT_FREED_LOCAL>Correctness - Unreleased HttpRequest network resources (local)"MAJOR*java2*HCP_HTTP_REQUEST_RESOURCES_NOT_FREED_LOCAL:ı
<p>FindBugs has detected an <code>org.apache.http.HttpRequest</code> (e.g. <code>HttpGet</code>, <code>HttpPost</code>, etc)
				that didn't release its associated resources.  Code like the following: <br/>
<pre><code>
public String requestInfo(URI u) {
    HttpGet httpGet = new HttpGet(u);
    try(CloseableHttpResponse response = client.execute(httpGet);) {
        return getResponseAsString(response);
    }
    catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}
</code></pre>
				will freeze after a few requests, usually with no indication as to why. </p>
				
			<p>
				The reason this code freezes is because <code>org.apache.http.HttpRequest</code>s need to explicitly release their connection
				with a call to either <code>reset()</code> or <code>releaseConnection()</code>, <b>even if the request is a local</b>. 
				The garbage collector will not release these resources, leading to the frustrating freezing scenario described above.
				
				<br/>The above example can be easily fixed:<br/>
<pre><code>
public String requestInfo(URI u) {
    HttpGet httpGet = new HttpGet(u);
    try(CloseableHttpResponse response = client.execute(httpGet);) {
        return getResponseAsString(response);
    }
    catch (IOException e) {
        e.printStackTrace();
    }
    <b>finally {
        httpGet.reset();
    }</b>
    return null;
}
</code></pre>
			</p>ZBUG
≠
fb-contrib:SPP_NO_CHAR_SB_CTORä

fb-contribSPP_NO_CHAR_SB_CTORcCorrectness - Method appears to pass character to StringBuffer or StringBuilder integer constructor"MAJOR*java2SPP_NO_CHAR_SB_CTOR:⁄<p>This method constructs a StringBuffer or a StringBuilder using the constructor that takes an integer, but
			appears to pass a character instead. It is probable that the author assumed that character would be appended to the
			StringBuffer/Builder, but instead the integer value of the character is used as an initial size for the buffer.</p>ZBUG
¿
fb-contrib:SPP_USE_GETPROPERTYù

fb-contribSPP_USE_GETPROPERTYTStyle - Method calls getProperties just to get one property, use getProperty instead"INFO*java2SPP_USE_GETPROPERTY:ˆ<table>
				<tr><td>This method uses</td></tr>
				<tr><td>String prop = System.getProperties().getProperty("foo");</td></tr>
				<tr><td>instead of simply using</td></tr>
				<tr><td>String prop = System.getProperty("foo");</td></tr>
			</table>Z
CODE_SMELL
Ò
)fb-contrib:IMC_IMMATURE_CLASS_NO_HASHCODE√

fb-contribIMC_IMMATURE_CLASS_NO_HASHCODE2Style - Class does not implement a hashCode method"INFO*java2IMC_IMMATURE_CLASS_NO_HASHCODE:®<p>This class which has instance fields has no hashCode() method. It is possible that this
    		class is never used in a context where this is required; it is often assumed, however, from clients 
    		of this class that it is, so it is good to add such methods when you create them.
    		</p>Z
CODE_SMELL
˚
,fb-contrib:SGSU_SUSPICIOUS_GETTER_SETTER_USE 

fb-contrib!SGSU_SUSPICIOUS_GETTER_SETTER_USE=Correctness - Method uses same bean's getter value for setter"MAJOR*java2!SGSU_SUSPICIOUS_GETTER_SETTER_USE:§<p>This method retrieves the property of a Java bean, only to use it in the setter
			for the same property of the same bean. This is usually a copy/paste typo.</p>ZBUG
˘
&fb-contrib:UTWR_USE_TRY_WITH_RESOURCESŒ

fb-contribUTWR_USE_TRY_WITH_RESOURCESBStyle - Method manually handles closing an auto-closeable resource"INFO*java2UTWR_USE_TRY_WITH_RESOURCES:©[
    		<p>This method allocates and uses an auto closeable resources. However it manually closes the resource in a finally block.
    		While this is correct management, it doesn't rely on the Idiomatic way available to JDK 7 and above, and allows for possible
    		subtle problems, and complicates the reading of code by developers expecting the use of try-with-resources. 
    		</p>
    		<p>Switch to using try with resources, as:
    		<pre>
    		    try (InputStream is = getAStream()) {
    		        useTheStream(is);
    		    }
    		</pre>Z
CODE_SMELL
Û
)fb-contrib:LO_EXCEPTION_WITH_LOGGER_PARMS≈

fb-contribLO_EXCEPTION_WITH_LOGGER_PARMSOCorrectness - Method creates exception with logger parameter markers in message"MAJOR*java2LO_EXCEPTION_WITH_LOGGER_PARMS:ì<p>This method passes a standard exception as a logger parameter, and expects this exception to be substituted in
	        an SLF4J style parameter marker '{}'. This marker will not be translated as SLF4J doesn't process the Exception
	        class for markers.
	       </p>ZBUG
»
)fb-contrib:SCA_SUSPICIOUS_CLONE_ALGORITHMö

fb-contribSCA_SUSPICIOUS_CLONE_ALGORITHMNCorrectness - Clone method stores a new value to member field of source object"MAJOR*java2SCA_SUSPICIOUS_CLONE_ALGORITHM:È<p>The clone method stores a value to a member field of the source object. Normally, all
			changes are made to the cloned object, and given that cloning is almost always considered
			a read-only operation, this seems incorrect.</p>ZBUG
¨
'fb-contrib:TBP_TRISTATE_BOOLEAN_PATTERNÄ

fb-contribTBP_TRISTATE_BOOLEAN_PATTERN,Style - Method returns null for Boolean type"INFO*java2TBP_TRISTATE_BOOLEAN_PATTERN:Ô<p>This method declares that it returns a Boolean value. However, the code
			can return a null value. As this is now three values that can be returned;
			Boolean.TRUE, Boolean.FALSE, null; you have changed what a Boolean means.
			It would be clearer to just create a new Enum that has the three values
			you want, and define that the method returns that type.</p>Z
CODE_SMELL
î
&fb-contrib:SCR_SLOPPY_CLASS_REFLECTIONÈ

fb-contribSCR_SLOPPY_CLASS_REFLECTIONAStyle - Method accesses statically bound class with Class.forName"INFO*java2SCR_SLOPPY_CLASS_REFLECTION:≈<p>This method accesses the class object of a class that is already statically bound
			in this context, with Class.forName. Using Class.forName makes reflection more fragile
			in regards to code transformations such as obfuscation, and is unneeded here, since
			the class in question is already 'linked' to this class.</p>Z
CODE_SMELL
÷

*fb-contrib:SEO_SUBOPTIMAL_EXPRESSION_ORDERß


fb-contribSEO_SUBOPTIMAL_EXPRESSION_ORDERMPerformance - Method orders expressions in a conditional in a sub optimal way"MAJOR*java2SEO_SUBOPTIMAL_EXPRESSION_ORDER:ı<p>This method builds a conditional expression, for example, in an if or while statement where the expressions contain both simple
			local variable comparisons, as well as comparisons on method calls. The expression orders these so that the method calls
			come before the simple local variable comparisons. This causes method calls to be executed in conditions when they
			do not need to be, and thus potentially causes a lot of code to be executed for nothing. By ordering the expressions so that
			the simple conditions containing local variable conditions are first, you eliminate this waste. This assumes that the method
			calls do not have side effects. If the method do have side effects, it is probably a better idea to pull these calls out of
			the condition and execute them first, assigning a value to a local variable. In this way you give a hint that the call may have
			side effects.</p>
			<p>Example:
<pre><code>
if ((calculateHaltingProbability() &gt; 0) && shouldCalcHalting) { }
</code></pre>
			would be better as
<pre><code>
if (shouldCalcHalting && (calculateHaltingProbability() &gt; 0) { }
</code></pre>
			</p>ZBUG
Ù
fb-contrib:UTA_USE_TO_ARRAY‘

fb-contribUTA_USE_TO_ARRAY5Style - Method manually creates array from collection"INFO*java2UTA_USE_TO_ARRAY:“<p>This method manually loops over a collection, pulling each element out and storing
			it in an array to build an array from the collection. It is easier, and clearer to use
			the built in collections method toArray. Given a collection 'mycollection' of type T, use
			<code>mycollection.toArray(new T[mycollection.size()]);</code></p>Z
CODE_SMELL
ˇ
-fb-contrib:AFBR_ABNORMAL_FINALLY_BLOCK_RETURNÕ

fb-contrib"AFBR_ABNORMAL_FINALLY_BLOCK_RETURN9Correctness - Method has abnormal exit from finally block"MAJOR*java2"AFBR_ABNORMAL_FINALLY_BLOCK_RETURN:©<p>This method returns or throws exceptions from a finally block. This will
			mask real program logic in the try block, and short-circuit normal method termination.</p>ZBUG
»
*fb-contrib:S508C_NON_ACCESSIBLE_JCOMPONENTô

fb-contribS508C_NON_ACCESSIBLE_JCOMPONENTRCorrectness - Class extends JComponent but does not implement Accessible interface"MAJOR*java2S508C_NON_ACCESSIBLE_JCOMPONENT:‚<p>This class extends the JComponent GUI control but does not implement the Accessibility interface.
			This makes this control unable to be processed by screen readers, etc, for people with reading/vision
			difficulties.</p>ZBUG
˘
'fb-contrib:PDP_POORLY_DEFINED_PARAMETERÕ

fb-contribPDP_POORLY_DEFINED_PARAMETERXCorrectness - Method defines parameters more abstractly than needed to function properly"MAJOR*java2PDP_POORLY_DEFINED_PARAMETER:ñ<p>This method defines parameters at a more abstract level than is actually needed to function correctly,
			as the code casts these parameters to more concrete types. Since this method is not derivable, you should
			just define the parameters with the type that is needed.</p>ZBUG
≠
,fb-contrib:ROOM_REFLECTION_ON_OBJECT_METHODS¸

fb-contrib!ROOM_REFLECTION_ON_OBJECT_METHODSSCorrectness - Method uses reflection to call a method available on java.lang.Object"MAJOR*java2!ROOM_REFLECTION_ON_OBJECT_METHODS:¿<p>This method uses reflection to call a method that is defined in java.lang.Object.
			As these methods are always available, it is not necessary to call these methods with
			reflection.</p>ZBUG
≠
,fb-contrib:ACEM_ABSTRACT_CLASS_EMPTY_METHODS¸

fb-contrib!ACEM_ABSTRACT_CLASS_EMPTY_METHODS/Style - Empty method could be declared abstract"INFO*java2!ACEM_ABSTRACT_CLASS_EMPTY_METHODS:ﬁ<p>This method is empty or merely throws an exception. Since the class it is defined in is
			abstract, it may be more correct to define this method as abstract instead, so that proper
			subclass behavior is enforced.</p>Z
CODE_SMELL
¸
fb-contrib:UJM_UNJITABLE_METHODÿ

fb-contribUJM_UNJITABLE_METHOD?Performance - This method is too long to be compiled by the JIT"MAJOR*java2UJM_UNJITABLE_METHOD: <p>This method is longer than 8000 bytes. By default the JIT will not attempt to compile this method no matter
    		how hot it is, and so this method will always be interpreted. If performance is important, you should consider
    		breaking this method up into smaller chunks. (And probably a good idea for readability too!)</p>ZBUG
è
fb-contrib:MDM_THREAD_YIELDÔ

fb-contribMDM_THREAD_YIELD>Multi-threading - Method attempts to manually schedule threads"MAJOR*java2MDM_THREAD_YIELD:Í<p>Manual thread scheduling with <code>Thread.sleep()</code> or <code>Thread.yield()</code> has no guaranteed semantics and is often used to mask race conditions.
			These methods exist for supporting early processors when java was first released, and are not advised for modern processors. The operating system will take care
			of yielding threads for you.</p>ZBUG
⁄
6fb-contrib:OI_OPTIONAL_ISSUES_USES_ORELSEGET_WITH_NULLü

fb-contrib+OI_OPTIONAL_ISSUES_USES_ORELSEGET_WITH_NULL2Correctness - Method uses Optional.orElseGet(null)"MAJOR*java2+OI_OPTIONAL_ISSUES_USES_ORELSEGET_WITH_NULL:<p>This method uses Optional.orElseGet(null). This method is supposed to to receive a lambda expression for what to execute
    		when the Optional is not there. If you want to just return null, use Optional.orElse(null) instead.
    		</p>ZBUG
¥
fb-contrib:S508C_NO_SETSIZEî

fb-contribS508C_NO_SETSIZE=Correctness - Window sets size manually, and doesn't use pack"MAJOR*java2S508C_NO_SETSIZE:ê<p>This class creates a window, and sizes the window using setSize. It is better,
			for handling font size changes, to use the pack method.</p>ZBUG
¬
&fb-contrib:DLC_DUBIOUS_LIST_COLLECTIONó

fb-contribDLC_DUBIOUS_LIST_COLLECTIONEPerformance - Class defines List based fields but uses them like Sets"MAJOR*java2DLC_DUBIOUS_LIST_COLLECTION:ı<p>This class defines a field based on java.util.List, but uses it to some extent like a Set. Since
			lookup type operations are performed using a linear search for Lists, the performance for large
			Lists will be poor. If the list is known to only contain a small number of items, (3, 4, etc) then it
			doesn't matter. Otherwise, consider changing this field's implementation to a set-based one. If order of
			iteration is important to maintain insert order, perhaps consider a LinkedHashSet.</p>ZBUG
¬
 fb-contrib:MAC_MANUAL_ARRAY_COPYù

fb-contribMAC_MANUAL_ARRAY_COPY+Performance - Method copies arrays manually"MAJOR*java2MAC_MANUAL_ARRAY_COPY:°<p>This method copies data from one array to another manually using a loop.
			It is much better performing to use System.arraycopy as this method is native.</p>ZBUG
◊
)fb-contrib:SPP_INVALID_BOOLEAN_NULL_CHECK©

fb-contribSPP_INVALID_BOOLEAN_NULL_CHECKACorrectness - Method uses invalid C++ style null check on Boolean"MAJOR*java2SPP_INVALID_BOOLEAN_NULL_CHECK:Ö<p>This method attempts to check for null by just referring to the variable name
			as would be done in C++. This ordinarily would be considered a compile error, except the
			variable in question is a Boolean, which does an auto unbox to boolean.
<pre><code>
if (b && b.booleanValue())
</code></pre>
			should be<br/>
<pre><code>
if ((b != null) && b.booleanValue())
</code></pre>
			</p>ZBUG
˚
;fb-contrib:IMC_IMMATURE_CLASS_IDE_GENERATED_PARAMETER_NAMESª

fb-contrib0IMC_IMMATURE_CLASS_IDE_GENERATED_PARAMETER_NAMES1Style - Method uses IDE generated parameter names"INFO*java20IMC_IMMATURE_CLASS_IDE_GENERATED_PARAMETER_NAMES:˝<p>This method appears to have been generated from an interface or superclass using an IDE.
    		As such the IDE generated generic names (arg0, arg1, arg2) for parameters for this method,
    		and the author of this method did not change them to be meaningful. For better understandability
    		it is recommended that you name these parameters with regard to their function.</p>Z
CODE_SMELL
≥
fb-contrib:SIL_SQL_IN_LOOPî

fb-contribSIL_SQL_IN_LOOP9Performance - Method executes SQL queries inside of loops"MAJOR*java2SIL_SQL_IN_LOOP:ñ<p>This method executes SQL queries inside of a loop. This pattern is often inefficient
			as the number of queries may mushroom in fencepost cases. It is probably more performant
			to loop over the input and collect the key data needed for the query for all items, and
			issue one query using an in clause, or similar construct, and then loop over this result
			set, and fetch all the data at once.</p>ZBUG
·
'fb-contrib:SPP_INVALID_CALENDAR_COMPAREµ

fb-contribSPP_INVALID_CALENDAR_COMPAREVCorrectness - Method passes a non calendar object to Calendar.before or Calendar.after"MAJOR*java2SPP_INVALID_CALENDAR_COMPARE:Ä<p>This method passes a non calendar object to the java.util.Calendar.after or java.util.Calendar.before methods.
			Even though these methods take an Object as a parameter type, only Calendar type objects are supported, otherwise
			false is returned.</p>ZBUG
ã
fb-contrib:MDM_SETDEFAULTLOCALEÁ

fb-contribMDM_SETDEFAULTLOCALE2Multi-threading - Method calls Locale.setDefault()"MAJOR*java2MDM_SETDEFAULTLOCALE:Ê<p>Do not use the <code>Locale.setDefault()</code> method to change the default locale. It changes the JVM's default locale for all threads and makes your applications unsafe to threads. It does not affect the host locale. Since changing the JVM's default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine, such as the user interface.</p>ZBUG
Á
2fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_NO_ASSERT∞

fb-contrib'UTAO_JUNIT_ASSERTION_ODDITIES_NO_ASSERT=Correctness - JUnit test method appears to have no assertions"MAJOR*java2'UTAO_JUNIT_ASSERTION_ODDITIES_NO_ASSERT:˛<p>This JUnit test method has no assertions. While a unit test could still be valid if it relies on whether
			or not an exception is thrown, it is usually a sign of a weak test if there are no assertions. It is also
			possible that assertions occur in a called method that is not seen by this detector, but this makes the logic of 
			this test more difficult to reason about.</p>ZBUG
»
<fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_NULLá

fb-contrib1UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_NULLBCorrectness - JUnit test method passes null Assert.assertNotEquals"MAJOR*java21UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_NULL:º<p>This method compares an object's inequality to null. It is better to use the Assert.assertNotNull
			method so that the JUnit failure method is more meaningful of the intended test.</p>ZBUG
‡
-fb-contrib:CRF_CONFLATING_RESOURCES_AND_FILESÆ

fb-contrib"CRF_CONFLATING_RESOURCES_AND_FILESCCorrectness - This method accesses URL resources using the File API"MAJOR*java2"CRF_CONFLATING_RESOURCES_AND_FILES:Ä<p>This method fetches a resource from a URL, and uses the File API to manipulate it. If this resource is a
    		classpath resource, it will work if the resource is a file in a directory. If, however, the file is inside a JAR file
    		this will fail. To avoid this confusing inconsistency, use the URL.openStream API instead to access the data of the classpath resource.
    		</p>ZBUG
§
/fb-contrib:PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS

fb-contrib$PRMC_POSSIBLY_REDUNDANT_METHOD_CALLSSPerformance - Method appears to call the same method on the same object redundantly"MAJOR*java2$PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS:Æ<p>This method makes two consecutive calls to the same method using the same constant
			parameters, on the same instance without any intervening changes to the objects. If this
			method does not make changes to the object, which it appears it doesn't, then making
			two calls is just a waste. These method calls could be combined by assigning the
			result into a temporary variable, and using the variable the second time.</p>ZBUG
Ë
 fb-contrib:SPP_USE_MATH_CONSTANT√

fb-contribSPP_USE_MATH_CONSTANT4Correctness - Method uses non standard math constant"MAJOR*java2SPP_USE_MATH_CONSTANT:æ<p>This method defines its own version of <em>PI</em> or <em>e</em> and the value is not as precise as the
			one defined in the constants Math.PI or Math.E. Use these constants instead.</p>ZBUG
π
*fb-contrib:UNNC_UNNECESSARY_NEW_NULL_CHECKä

fb-contribUNNC_UNNECESSARY_NEW_NULL_CHECK:Correctness - Method checks the result of a new allocation"MAJOR*java2UNNC_UNNECESSARY_NEW_NULL_CHECK:Î<p>This method allocations an object with new, and then checks that the object is null
			or non null. As the new operator is guaranteed to either succeed or throw an exception,
			this null check is unnecessary and can be removed.</p>ZBUG
‚
4fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_ASSERT_USED©

fb-contrib)UTAO_JUNIT_ASSERTION_ODDITIES_ASSERT_USEDOCorrectness - JUnit test method uses Java asserts rather than a JUnit assertion"MAJOR*java2)UTAO_JUNIT_ASSERTION_ODDITIES_ASSERT_USED:·<p>This method uses a Java assert to assure that a certain state is in effect. As this is
			a JUnit test it makes more sense to either check this condition with a JUnit assert, or allow
			a following exception to occur.</p>ZBUG
ö
"fb-contrib:WEM_OBSCURING_EXCEPTIONÛ

fb-contribWEM_OBSCURING_EXCEPTIONNStyle - Method throws a java.lang.Exception that wraps a more useful exception"INFO*java2WEM_OBSCURING_EXCEPTION: <p>This method catches an exception and generates a new exception of type java.lang.Exception,
			passing the original exception as the new Exception's cause.  If the original Exception was actually
			a java.lang.Error, this is dubious as you should not be handling errors. If the original exception
			is a more specific exception, there is no reason to wrap it in a java.lang.Exception;
			this just obfuscates the type of error that is occurring.
			</p>Z
CODE_SMELL
©
5fb-contrib:JXI_UNDEFINED_PARAMETER_SOURCE_IN_ENDPOINTÔ

fb-contrib*JXI_UNDEFINED_PARAMETER_SOURCE_IN_ENDPOINTzCorrectness - JAX-RS Method defines a parameter that has no @*Param or @Context annotation, or @Consumes method annotation"MAJOR*java2*JXI_UNDEFINED_PARAMETER_SOURCE_IN_ENDPOINT:˙<p>This JAX-RS endpoint declares parameters without specifying where the value of this parameter comes from.
    		You can specify this by using one of several 'Param' annotations (@PathParam, @CookieParam, @FormParam @HeaderParam @MatrixParam @QueryParam),
    		by adding a @Context parameter annotation, or you can declare that the method @Consumes an XML or JSON stream.</p>ZBUG
˛
 fb-contrib:LO_TOSTRING_PARAMETERŸ

fb-contribLO_TOSTRING_PARAMETERFCorrectness - Method explicitly calls toString() on a logger parameter"MAJOR*java2LO_TOSTRING_PARAMETER:¬<p>This method uses parameterized logging to avoid the cost of string concatenation in the case that
			the log level does not meet the needed level. However, one or more of the parameters passed to the logging 
			method uses .toString() to present a String representation for the parameter. This is unneeded as the logger
			will do this for you, and because it is explicitly done, will always be called even if the log statement is 
			not actually written. Also, by dropping the '.toString()' you may avoid unnecessary NPEs.
			Just pass the variable as a parameter instead.ZBUG
Ç
#fb-contrib:SPP_STUTTERED_ASSIGNMENT⁄

fb-contribSPP_STUTTERED_ASSIGNMENT>Correctness - Method assigns a value to a local twice in a row"MAJOR*java2SPP_STUTTERED_ASSIGNMENT:≈<p>This method assigns a value twice in a row in a stuttered way such as
			<code>a = a = 5;</code> This is most probably a cut and paste error where the duplicate
			assignment can be removed.</p>ZBUG
∆
fb-contrib:UAA_USE_ADD_ALLß

fb-contribUAA_USE_ADD_ALLMStyle - Method uses simple loop to copy contents of one collection to another"INFO*java2UAA_USE_ADD_ALL:è<p>This method uses a simple for loop to copy the contents of a set, list, map key/value, array or other collection
			to another collection. It is simpler and more straight forward to just call the addAll method of the destination collection
			passing in the source collection. In the case that the source is an array, you can use Array.asList method to massage the array
			into a collection.</p>Z
CODE_SMELL
‹
'fb-contrib:BAS_BLOATED_ASSIGNMENT_SCOPE∞

fb-contribBAS_BLOATED_ASSIGNMENT_SCOPEHPerformance - Method assigns a variable in a larger scope than is needed"MAJOR*java2BAS_BLOATED_ASSIGNMENT_SCOPE:â<p><em>THIS DETECTOR IS HIGHLY EXPERIMENTAL AND IS LIKELY TO CREATE A LOT OF FUD</em></p>
			<p>This method assigns a value to a variable in an outer scope compared to where the variable is actually used.
			Assuming this evaluation does not have side effects, the assignment can be moved into the inner scope (if block)
			so that its execution time isn't taken up if the if guard is false. Care should be
			taken, however, that the right hand side of the assignment does not contain side
			effects that are required to happen, and that changes are not made further down that
			will affect the execution of the assignment when done later on.</p>ZBUG
†
,fb-contrib:LO_INVALID_STRING_FORMAT_NOTATIONÔ

fb-contrib!LO_INVALID_STRING_FORMAT_NOTATIONACorrectness - Method attempts to log using String.format notation"MAJOR*java2!LO_INVALID_STRING_FORMAT_NOTATION:≈<p>This method attempts to use an SLF4J logger to log a parameterized expression using String.format notation.
			However, SLF4J uses simple non numbered anchors such as {}, rather than anchors with percent signs in them as the
			code uses. Thus no parameter replacement will occur.</p>
			<p>This pattern is invalid:
			<code>LOGGER.error("%s is broken", theThing);</code>
			Use instead
			<code>LOGGER.error("{} is broken", theThing);</code>
			</p>ZBUG
ﬂ
.fb-contrib:CVAA_CONTRAVARIANT_ARRAY_ASSIGNMENT¨

fb-contrib#CVAA_CONTRAVARIANT_ARRAY_ASSIGNMENT>Correctness - Method performs a contravariant array assignment"MAJOR*java2#CVAA_CONTRAVARIANT_ARRAY_ASSIGNMENT:Å<p>This method contains a contravariant array assignment. Since arrays are mutable data structures, their use
			must be restricted to covariant or invariant usage.</p>

<pre><code>
class A {}
class B extends A {}

B[] b = new B[2];
A[] a = b;
</code></pre>ZBUG
¬
$fb-contrib:NAB_NEEDLESS_BOXING_PARSEô

fb-contribNAB_NEEDLESS_BOXING_PARSEHPerformance - Method converts String to primitive using excessive boxing"MAJOR*java2NAB_NEEDLESS_BOXING_PARSE:¯<p>This method passes a String to a wrapped primitive object's valueOf method, which in turn calls
			the boxedValue() method to convert to a primitive. When it is desired to convert from a String
			to a primitive value, it is simpler to use the BoxedPrimitive.parseBoxedPrimitive(String)
			method. </p>
			
			<p>Instead of something like:<br/>
<pre><code>
public int someMethod(String data) {
long l = Long.valueOf(data).longValue();
float f = Float.valueOf(data).floatValue();
return Integer.valueOf(data); // There is an implicit .intValue() call
}
</code></pre>
			Simply do: <br/>
<pre><code>
public int someMethod(String data) {
	long l = Long.parseLong(data);
	float f = Float.parseFloat(data);
	return Integer.parseInt(data);
}
</code></pre>
			</p>ZBUG
ˇ
8fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANT¬

fb-contrib-UTAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANTPStyle - JUnit test method passes constant to second (actual) assertion parameter"INFO*java2-UTAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANT:Î<p>This method calls assert passing a constant value as the second of the two values. The assert
			method assumes that the expected value is the first parameter, and so it appears that the order
			of values has been swapped here.</p>Z
CODE_SMELL
«
7fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_INEXACT_DOUBLEã

fb-contrib,UTAO_JUNIT_ASSERTION_ODDITIES_INEXACT_DOUBLEDStyle - JUnit test method asserts that two doubles are exactly equal"INFO*java2,UTAO_JUNIT_ASSERTION_ODDITIES_INEXACT_DOUBLE:¬<p>This method calls assert with two doubles or Doubles. Due to the imprecision of doubles, you
			should be using the assert method that takes a range parameter that gives a range of error.</p>Z
CODE_SMELL
ï
#fb-contrib:CC_CYCLOMATIC_COMPLEXITYÌ

fb-contribCC_CYCLOMATIC_COMPLEXITY%Style - Method is excessively complex"INFO*java2CC_CYCLOMATIC_COMPLEXITY:Î<p>This method has a high cyclomatic complexity figure, which calculates the number of branch
			points. It is likely difficult to test, and is brittle to change. Consider refactoring this
			method into several to reduce the risk.</p>Z
CODE_SMELL
Ω
)fb-contrib:ITU_INAPPROPRIATE_TOSTRING_USEè

fb-contribITU_INAPPROPRIATE_TOSTRING_USEWCorrectness - Method performs algorithmic operations on the result of a toString() call"MAJOR*java2ITU_INAPPROPRIATE_TOSTRING_USE:’<p>This method calls algorithmic operations on a String that was returned from a toString() method.
			As these methods are for debugging/logging purposes, it shouldn't be the basis of core logic in your code.</p>ZBUG
»
#fb-contrib:SPP_STATIC_FORMAT_STRING†

fb-contribSPP_STATIC_FORMAT_STRINGVCorrectness - Method calls String.format on a static (non parameterized) format string"MAJOR*java2SPP_STATIC_FORMAT_STRING:Û<p>This method calls String.format passing a static string as the format string that has no replacement markers
			(starting with %). Thus no replacement will happen, and the format method is superfluous. If parameters were intended,
			add the appropriate format markers as needed; otherwise, just remove the call to String.format and use the static
			string as is.</p>ZBUG
Ò
*fb-contrib:CNC_COLLECTION_NAMING_CONFUSION¬

fb-contribCNC_COLLECTION_NAMING_CONFUSIONTStyle - Collection variable is named with a different type of collection in the name"INFO*java2CNC_COLLECTION_NAMING_CONFUSION:É<p>This class defines a field or local collection variable with a name that contains a different type
            of collection in its name. An example would be a Set<User> called userList. This is confusing to the reader,
            and likely caused by a previous refactor of type, without changing the name. This detector is obviously
            only checking for English names.</p>Z
CODE_SMELL
ï
.fb-contrib:FCCD_FIND_CLASS_CIRCULAR_DEPENDENCY‚

fb-contrib#FCCD_FIND_CLASS_CIRCULAR_DEPENDENCY@Correctness - Class has a circular dependency with other classes"MAJOR*java2#FCCD_FIND_CLASS_CIRCULAR_DEPENDENCY:µ<p>
		    This class has a circular dependency with other classes. This makes building these classes
		    difficult, as each is dependent on the other to build correctly. Consider using interfaces
		    to break the hard dependency. The dependency chain can be seen in the GUI version of FindBugs.
		    </p>ZBUG
¨
fb-contrib:SPP_USE_GET0ê

fb-contribSPP_USE_GET0KPerformance - Method uses iterator().next() on a List to get the first item"MAJOR*java2SPP_USE_GET0:Ü<p>This method calls myList.iterator().next() on a List to get the first item. It is more performant
			to just use myList.get(0).</p>ZBUG
ﬂ
(fb-contrib:DWI_MODIFYING_WHILE_ITERATING≤

fb-contribDWI_MODIFYING_WHILE_ITERATING@Correctness - Method modifies collection element while iterating"MAJOR*java2DWI_MODIFYING_WHILE_ITERATING:ë<p>This method modifies the contents of a collection using the collection API methods, while
			at the same time iterating across the collection. Doing this will invalidate the iterator, and further
			use of it will cause ConcurrentModificationExceptions to be thrown.</p>ZBUG
˛
'fb-contrib:MDM_PROMISCUOUS_SERVERSOCKET“

fb-contribMDM_PROMISCUOUS_SERVERSOCKET<Correctness - Method creates promiscuous ServerSocket object"MAJOR*java2MDM_PROMISCUOUS_SERVERSOCKET:∑<p>Do not use the <code>ServerSocket</code> constructor or <code>ServerSocketFactory.createServerSocket()</code> factory methods that 
			accept connections on any network interface. By default, an application that listens on a socket will listen for connection attempts 
			on any network interface, which can be a security risk. Only the long form of the <code>ServerSocket</code> constructor or 
			<code>ServerSocketFactory.createServerSocket()</code> factory methods take a specific local address to define which network interface 
			the socket should bind.</p>ZBUG
ù
#fb-contrib:SPP_NEGATIVE_BITSET_ITEMı

fb-contribSPP_NEGATIVE_BITSET_ITEMXCorrectness - Method passes a negative number as a bit to a BitSet which isn't supported"MAJOR*java2SPP_NEGATIVE_BITSET_ITEM:∆<p>This method passes a constant negative value as a bit position to a java.util.BitSet. The BitSet class
			doesn't support negative values, and thus this method call will not work as expected.</p>ZBUG
É
fb-contrib:SPP_USELESS_TERNARY‡

fb-contribSPP_USELESS_TERNARYOPerformance - Method uses a ternary operator to cast a boolean to true or false"MAJOR*java2SPP_USELESS_TERNARY:ƒ<p>This method tests the value of a boolean and using a ternary operator to return either true or false.
			The ternary operator is completely unnecessary, just use the original boolean value.</p>ZBUG
É
)fb-contrib:IMC_IMMATURE_CLASS_LOWER_CLASS’

fb-contribIMC_IMMATURE_CLASS_LOWER_CLASS6Style - Class does not start with an upper case letter"INFO*java2IMC_IMMATURE_CLASS_LOWER_CLASS:∂<p>This class has been given a name that does not start with an upper case letter.
    		Classes should follow a pattern of uppercasing the first letter of each word, AsAnExample</p>Z
CODE_SMELL

fb-contrib:SG_SLUGGISH_GUI—

fb-contribSG_SLUGGISH_GUIDPerformance - Method performs time consuming operation in GUI thread"MAJOR*java2SG_SLUGGISH_GUI:»<p>This method implements an AWT or Swing listener and performs time
			consuming operations. Doing these operations in the GUI thread will cause the
			interface to appear sluggish and non-responsive to the user. Consider
			using a separate thread to do the time consuming work so that the user
			has a better experience.</p>ZBUG
¢
'fb-contrib:DWI_DELETING_WHILE_ITERATINGˆ

fb-contribDWI_DELETING_WHILE_ITERATING?Correctness - Method deletes collection element while iterating"MAJOR*java2DWI_DELETING_WHILE_ITERATING:ÿ<p>This method removes items from a collection using the remove method of the collection, while
			at the same time iterating across the collection. Doing this will invalidate the iterator, and further
			use of it will cause ConcurrentModificationExceptions to be thrown. To avoid this, the remove
			method of the iterator should be used.</p>ZBUG
É
%fb-contrib:ISB_EMPTY_STRING_APPENDINGŸ

fb-contribISB_EMPTY_STRING_APPENDINGKPerformance - Method concatenates an empty string to effect type conversion"MAJOR*java2ISB_EMPTY_STRING_APPENDING:≥<p>This method concatenates an empty string with a literal value, in order to convert
			the literal value into a string. It is more efficient to use String.valueOf() to do the same
			thing as you do not incur the cost of creating a StringBuffer/Builder and calling methods on it
			to accomplish this.</p>ZBUG
∆
)fb-contrib:CCNE_COMPARE_CLASS_EQUALS_NAMEò

fb-contribCCNE_COMPARE_CLASS_EQUALS_NAMECCorrectness - Method compares class name instead of comparing class"MAJOR*java2CCNE_COMPARE_CLASS_EQUALS_NAME:Ú<p>In a JVM, two classes are the same class (and consequently the same type) if
			they are loaded by the same class loader, and they have the same fully
			qualified name [JVMSpec 1999].

			Comparing class name ignores the class loader.</p>ZBUG
ù
0fb-contrib:CSBTS_COMMONS_STRING_BUILDER_TOSTRINGË

fb-contrib%CSBTS_COMMONS_STRING_BUILDER_TOSTRING}Correctness - Method returns the result of invoking toString() without intermediate invocation of append() in ToStringBuilder"MAJOR*java2%CSBTS_COMMONS_STRING_BUILDER_TOSTRING:{<p>This method returns the result of toString() on a ToStringBuilder without an
			intermediate invocation of append().</p>ZBUG
π
/fb-contrib:LO_LOGGER_LOST_EXCEPTION_STACK_TRACEÖ

fb-contrib$LO_LOGGER_LOST_EXCEPTION_STACK_TRACETCorrectness - Method incorrectly passes exception as first argument to logger method"MAJOR*java2$LO_LOGGER_LOST_EXCEPTION_STACK_TRACE:¬<p>This method passes an exception as the first argument to a logger method. The stack
			trace is potentially lost due to the logger emitting the exception using toString(). It
			is better to construct a log message with sufficient context and pass the exception as
			the second argument to capture the stack trace.</p>ZBUG
Õ
*fb-contrib:SNG_SUSPICIOUS_NULL_FIELD_GUARDû

fb-contribSNG_SUSPICIOUS_NULL_FIELD_GUARDICorrectness - Method tests a field for not null as guard and reassigns it"MAJOR*java2SNG_SUSPICIOUS_NULL_FIELD_GUARD:<p>This method tests a field to make sure it's not null before executing a conditional block of
			code. However, in the conditional block it reassigns the field. It is likely that the guard
			should have been a check to see if the field is null, not that the field was not null.</p>
			<p>example:
<pre><code>
if (name != null) {
    name = person.getName();
}
</code></pre>
			It is possible this is correct, but it seems likely the guard was meant to be <code>if (name == null)</code>
			</p>ZBUG
±
0fb-contrib:CVAA_CONTRAVARIANT_ELEMENT_ASSIGNMENT¸

fb-contrib%CVAA_CONTRAVARIANT_ELEMENT_ASSIGNMENTFCorrectness - Method performs a contravariant array element assignment"MAJOR*java2%CVAA_CONTRAVARIANT_ELEMENT_ASSIGNMENT:≈<p>This method contains a contravariant array element assignment. Since arrays are mutable
			data structures, their use must be restricted to covariant or invariant usage.</p>

<pre><code>
class A {}
class B extends A {}

B[] b = new B[2];
A[] a = b;
a[0] = new A(); // results in ArrayStoreException (Runtime)
</code></pre>ZBUG
˘
0fb-contrib:DTEP_DEPRECATED_TYPESAFE_ENUM_PATTERNƒ

fb-contrib%DTEP_DEPRECATED_TYPESAFE_ENUM_PATTERNGStyle - Class appears to implement the old style type safe enum pattern"INFO*java2%DTEP_DEPRECATED_TYPESAFE_ENUM_PATTERN:Ü<p>This class appears to implement the old style type safe enum pattern that was used in place of
			real enums. Since this class is compiled with Java 1.5 or better, it would be simpler and more
			easy to understand if it was just switched over to an enum.</p>Z
CODE_SMELL
õ
fb-contrib:S508C_SET_COMP_COLOR˜

fb-contribS508C_SET_COMP_COLOR=Correctness - Method explicitly sets the color of a Component"MAJOR*java2S508C_SET_COMP_COLOR:Î<p>This method sets a Components explicitly foreground or background color which may
			cause difficulty with people with vision problems from using this application.
			Colors should be allowed to be set from the operating system.</p>ZBUG
˛
%fb-contrib:DMC_DUBIOUS_MAP_COLLECTION‘

fb-contribDMC_DUBIOUS_MAP_COLLECTIONFCorrectness - Class holds a map-type field, but uses it as only a List"MAJOR*java2DMC_DUBIOUS_MAP_COLLECTION:≥<p>This method instantiates a map-type field in a static initializer or constructor, but then only uses it
			through iteration. This means that this data structure should really just be a List&lt;SomeObject&gt;,
			where the class held by the list contains the two fields held by the key and value of the Map.
			It was likely done this way to avoid having to create a class, but this just obfuscates the purpose of the field.
			</p>ZBUG
à
!fb-contrib:SPP_TOSTRING_ON_STRING‚

fb-contribSPP_TOSTRING_ON_STRING1Correctness - Method calls toString() on a String"MAJOR*java2SPP_TOSTRING_ON_STRING:_<p>This method calls toString on a String. Just use the object itself if you want a String.</p>ZBUG
·
/fb-contrib:USBR_UNNECESSARY_STORE_BEFORE_RETURN≠

fb-contrib$USBR_UNNECESSARY_STORE_BEFORE_RETURNLStyle - Method stores return result in local before immediately returning it"INFO*java2$USBR_UNNECESSARY_STORE_BEFORE_RETURN:Ï<p>This method stores the return result in a local variable, and then immediately
			returns the local variable. It would be simpler just to return the value that is
			assigned to the local variable, directly.</p>
			<p>
				Instead of the following: <br/>

<pre><code>
public float average(int[] arr) {
    float sum = 0;
    for (int i = 0; i &lt; arr.length; i++) {
        sum += arr[i];
    }
    float ave = sum / arr.length;
    return ave;
}
</code></pre>

				Simply change the method to return the result of the division: <br/>

<pre><code>
public float average(int[] arr) {
    float sum = 0;
    for (int i = 0; i &lt; arr.length; i++) {
        sum += arr[i];
    }
    <b>return sum / arr.length;</b> //Change
}
</code></pre>
			</p>Z
CODE_SMELL
ú
(fb-contrib:LSC_LITERAL_STRING_COMPARISONÔ

fb-contribLSC_LITERAL_STRING_COMPARISONRStyle - Method makes literal string comparisons passing the literal as an argument"INFO*java2LSC_LITERAL_STRING_COMPARISON:∂<p>This line is in the form of <br/>
<pre><code>String str = ...
str.equals("someOtherString");
//or
str.compareTo("someOtherString");</code></pre>
		    </p>
			<p>A <code>NullPointerException</code> may occur if the String variable <code>str</code> is <code>null</code>. If instead the code was restructured to<br/>
<pre><code>String str = ...
"someOtherString".equals(str);
//or
"someOtherString".compareTo(str);</code></pre><br/>
			that is, call <code>equals()</code> or <code>compareTo()</code> on the string literal, passing the 
			variable as an argument, this exception could never happen as both <code>equals()</code> and 
			<code>compareTo()</code> check for <code>null</code>.</p>Z
CODE_SMELL
Ü

2fb-contrib:UCPM_USE_CHARACTER_PARAMETERIZED_METHODœ	

fb-contrib'UCPM_USE_CHARACTER_PARAMETERIZED_METHODVPerformance - Method passes constant String of length 1 to character overridden method"MAJOR*java2'UCPM_USE_CHARACTER_PARAMETERIZED_METHOD:Ñ<p>This method passes a constant literal <code>String</code> of length 1 as a parameter to a method, that
			exposes a similar method that takes a <code>char</code>. It is simpler and more expedient to handle one
			character, rather than a <code>String</code>.</p>
			
			<p>
			Instead of making calls like: <br/>
<pre><code>
String myString = ...
if (myString.indexOf("e") != -1) {
    int i = myString.lastIndexOf("e");
    System.out.println(myString + ":" + i);  //the Java compiler will use a StringBuilder internally here [builder.append(":")]
    ...
    return myString.replace("m","z");
}
</code></pre>
			Replace the single letter <code>String</code>s with their <code>char</code> equivalents like so:<br/>
			
<pre><code>
String myString = ...
if (myString.indexOf('e') != -1) {
    int i = myString.lastIndexOf('e');
    System.out.println(myString + ':' + i);  //the Java compiler will use a StringBuilder internally here [builder.append(':')]
    ...
    return myString.replace('m','z');
}
</code></pre>
			</p>ZBUG
à
8fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_BOOLEAN_ASSERTÀ

fb-contrib-UTAO_TESTNG_ASSERTION_ODDITIES_BOOLEAN_ASSERT@Style - TestNG test method asserts that a value is true or false"INFO*java2-UTAO_TESTNG_ASSERTION_ODDITIES_BOOLEAN_ASSERT:Ñ<p>This method asserts that a value is equal to true or false. It is simpler to just
			use assertTrue, or assertFalse, instead.</p>Z
CODE_SMELL
å
'fb-contrib:LO_INVALID_FORMATTING_ANCHOR‡

fb-contribLO_INVALID_FORMATTING_ANCHORFCorrectness - Method attempts to log using numbered formatting anchors"MAJOR*java2LO_INVALID_FORMATTING_ANCHOR:ª<p>This method attempts to use an SLF4J logger to log a parameterized expression using formatting anchors.
			However, SLF4J uses simple non numbered anchors such as {}, rather than anchors with digits in them as the
			code uses. Thus no parameter replacement will occur.</p>
			<p>This pattern is invalid:
			<code>LOGGER.error("{0} is broken", theThing);</code>
			Use instead
			<code>LOGGER.error("{} is broken", theThing);</code>
			</p>ZBUG
á	
'fb-contrib:SPP_DOUBLE_APPENDED_LITERALS€

fb-contribSPP_DOUBLE_APPENDED_LITERALSPPerformance - Method appends two literal strings back to back to a StringBuilder"MAJOR*java2SPP_DOUBLE_APPENDED_LITERALS:¨<p>This method appends two literal strings to a <code>StringBuilder</code> back to back. 
			Modern compilers will optimize something like:<br/>
<pre><code>
public static final string CONST_VAL = "there";
...
String str = "Hello" + " "+ CONST_VAL + " " +"world!";
</code></pre>
			to: <br/>
<pre><code>
public static final string CONST_VAL = "there";
...
String str = "Hello there world!";
</code></pre>
			This means the concatenation is done during compile time, not at runtime, so there's <b>no need</b> to do: <br/>
<pre><code>
public static final string CONST_VAL = "there";
...
StringBuilder sb = new StringBuilder("Hello").append(" ").append(CONST_VAL).append(" ").append("world!");
String str = sb.toString();
</code></pre>
			which is harder to read and will result in more complex bytecode.
			</p>
			
			<p>
			Simply append your constants with the "+" symbol, don't append them with <code>StringBuilder.append()</code>.
			</p>ZBUG
ﬁ
1fb-contrib:UMTP_UNBOUND_METHOD_TEMPLATE_PARAMETER®

fb-contrib&UMTP_UNBOUND_METHOD_TEMPLATE_PARAMETERBCorrectness - Method declares unbound method template parameter(s)"MAJOR*java2&UMTP_UNBOUND_METHOD_TEMPLATE_PARAMETER:Û<p>This method declares a method level template parameter that is not bound by any parameter of this
			method. Therefore the template parameter adds no validation or type safety and can be removed, as it's
			just confusing to the reader.</p>ZBUG
À
%fb-contrib:DDC_DOUBLE_DATE_COMPARISON°

fb-contribDDC_DOUBLE_DATE_COMPARISON@Performance - Method uses two date comparisons when one would do"MAJOR*java2DDC_DOUBLE_DATE_COMPARISON:Ü<p>This method compares dates with two comparisons, rather than using the reverse comparison.
			So this pattern</p>

<pre><code>
if ((date1.equals( date2 )) || (date1.after( date2 )))
</code></pre>

			could become:<br/>

<pre><code>
if (date1.compareTo( date2 ) >= 0)
</code></pre><br/>

			and<br/>

<pre><code>
if ((date1.equals( date2 )) || (date1.before( date2 )))
</code></pre>

			could become <br/>

<pre><code>
if (date1.compareTo( date2 ) <= 0)
</code></pre><br/>

			and<br/>

<pre><code>
if ((date1.before( date2 )) || (date1.after( date2 )))
</code></pre>

			could become<br/>

<pre><code>
if (!date1.equals( date2 ))
</code></pre>ZBUG
¬
,fb-contrib:JPAI_NON_PROXIED_TRANSACTION_CALLë

fb-contrib!JPAI_NON_PROXIED_TRANSACTION_CALLTCorrectness - Method annotated with @Transactional is called from a non Spring proxy"MAJOR*java2!JPAI_NON_PROXIED_TRANSACTION_CALL:‘<p>This method call is to a method that has a @Transactional annotation on it. However, since this call is from the
    		same class, it is not going through any Spring proxy, and thus the transactional quality of this method is completely
    		lost. @Transactional method must always be called through a Spring bean that is autowired.</p>ZBUG
Ô
*fb-contrib:NAB_NEEDLESS_AUTOBOXING_VALUEOF¿

fb-contribNAB_NEEDLESS_AUTOBOXING_VALUEOFMPerformance - Method passes primitive wrapper to Wrapper class valueOf method"MAJOR*java2NAB_NEEDLESS_AUTOBOXING_VALUEOF:é<p>This method passes a wrapped primitive object to the same class's .valueOf method.
			Since wrapper classes are immutable, you can just use the original object, rather
			than calling valueOf to create a new one. This code works because of an abuse of autoboxing.</p>ZBUG
µ
;fb-contrib:CCI_CONCURRENT_COLLECTION_ISSUES_USE_PUT_IS_RACYı

fb-contrib0CCI_CONCURRENT_COLLECTION_ISSUES_USE_PUT_IS_RACYRCorrectness - Method gets and sets a value of a ConcurrentHashMap in a racy manner"MAJOR*java20CCI_CONCURRENT_COLLECTION_ISSUES_USE_PUT_IS_RACY:ú<p>This method retrieves the value of a key from a ConcurrentHashMap, where the value is itself a collection. It checks this
    		value for null, and if it is so, creates a new collection and places it in the map. This may cause thread race conditions
    		where two threads overwrite each other's values. You should be using
    		<code>
    			ConcurrentHashMap.putIfAbsent(K, V)
    		</code>
    		instead.ZBUG
˚
4fb-contrib:HES_EXECUTOR_OVERWRITTEN_WITHOUT_SHUTDOWN¬

fb-contrib)HES_EXECUTOR_OVERWRITTEN_WITHOUT_SHUTDOWNRCorrectness - An ExecutorService isn't shutdown before the reference to it is lost"MAJOR*java2)HES_EXECUTOR_OVERWRITTEN_WITHOUT_SHUTDOWN:˜<p>Most <code>ExecutorService</code> objects must be explicitly shutdown, otherwise, their internal threads can prevent the JVM from ever shutting down, even when everything else has stopped.</p>
            
            <p>FindBugs has detected that something like the following is happening:<br/>
<pre><code>
ExecutorService executor = ... //e.g. Executors.newCachedThreadPool();
...
public void reset() {
    this.executor = Executors.newCachedThreadPool();
    this.executor.execute(new SampleExecutable());
}<br/>
</code></pre>
            For normal objects, losing the last reference to them like this would trigger the object to be cleaned up
            in garbage collection.  For <code>ExecutorService</code>s, this isn't enough to terminate the internal threads in the 
            thread pool, and the <code>ExecutorService</code> isn't guaranteed to shutdown, causing the JVM to never stop. <br/>
            To fix this, simply add a call to <code>shutdown()</code> like this:<br/>
<pre><code>
ExecutorService executor = ... //e.g. Executors.newCachedThreadPool();
...
public void reset() {
    this.executor.shutDown(); //Fix
    this.executor = Executors.newCachedThreadPool();
    this.executor.execute(new SampleExecutable());
}
</code></pre>
            </p>
            			
			<p>Even though there are some exceptions to this, particularly when a custom <code>ThreadFactory</code> is 
			provided, or for <code>ThreadPoolExecutor</code>s with <code>allowsCoreThreadTimeOut()</code> set to true,
			it is good practice to explicitly shutdown the <code>ExecutorService</code> at the end of execution, or
			when it is being replaced.</p>
			
			<p><b>Note:</b> <code>ExecutorService</code>s are generally created once in a program's life cycle.  If you find yourself
			replacing the <code>ExecutorService</code>, perhaps you may consider restructuring your code to use calls like
			<code>awaitTermination()</code> or <code>Future</code>s/<code>Callable</code>s to avoid recreating the <code>ExecutorService</code>.</p>ZBUG
≥
&fb-contrib:MRC_METHOD_RETURNS_CONSTANTà

fb-contribMRC_METHOD_RETURNS_CONSTANT@Style - Private or static method only returns one constant value"INFO*java2MRC_METHOD_RETURNS_CONSTANT:Â<p>This private or static method only returns one constant value. As this method is private or static,
			its behavior can't be overridden, and thus the return of a constant value seems dubious.
			Either the method should be changed to return no value, or perhaps another return value
			was expected to be returned in another code path in this method.</p>Z
CODE_SMELL
€
'fb-contrib:NAB_NEEDLESS_AUTOBOXING_CTORØ

fb-contribNAB_NEEDLESS_AUTOBOXING_CTORSPerformance - Method passes primitive wrapper to same primitive wrapper constructor"MAJOR*java2NAB_NEEDLESS_AUTOBOXING_CTOR:˝<p>This method passes a wrapped primitive object to the same class's constructor.
			Since wrapper classes are immutable, you can just use the original object, rather
			than constructing a new one. This code works because of an abuse of autoboxing.</p>ZBUG
π
*fb-contrib:NIR_NEEDLESS_INSTANCE_RETRIEVALä

fb-contribNIR_NEEDLESS_INSTANCE_RETRIEVAL=Performance - Method retrieves instance to load static member"MAJOR*java2NIR_NEEDLESS_INSTANCE_RETRIEVAL:Ë<p>This method calls a method to load a reference to an object, and then only
			uses it to load a static member of that instance's class. It is simpler and
			more performant to just load the static field from the class itself.</p>ZBUG
˚
3fb-contrib:CHTH_COMMONS_HASHCODE_BUILDER_TOHASHCODE√

fb-contrib(CHTH_COMMONS_HASHCODE_BUILDER_TOHASHCODEQCorrectness - Method returns the result of invoking hashCode() on HashCodeBuilder"MAJOR*java2(CHTH_COMMONS_HASHCODE_BUILDER_TOHASHCODE:|<p>This method returns the result of hashCode on the HashCodeBuilder type
			instead of calling the method toHashCode().</p>ZBUG
é
)fb-contrib:DRE_DECLARED_RUNTIME_EXCEPTION‡

fb-contribDRE_DECLARED_RUNTIME_EXCEPTION9Style - Method declares RuntimeException in throws clause"INFO*java2DRE_DECLARED_RUNTIME_EXCEPTION:æ<p>This method declares a RuntimeException derived class in its throws clause.
			This may indicate a misunderstanding as to how unchecked exceptions are handled.
			If it is felt that a RuntimeException is so prevalent that it should be declared, it
			is probably a better idea to prevent the occurrence in code.</p>Z
CODE_SMELL

#fb-contrib:JVR_JDBC_VENDOR_RELIANCE»

fb-contribJVR_JDBC_VENDOR_RELIANCEBCorrectness - Method uses JDBC vendor specific classes and methods"MAJOR*java2JVR_JDBC_VENDOR_RELIANCE:Ø<p>This method uses JDBC vendor specific classes and method to perform database work.
			This makes the code specific to this vendor, and unable to run on other databases.</p>ZBUG
∞
8fb-contrib:CSI_CHAR_SET_ISSUES_USE_STANDARD_CHARSET_NAMEÛ

fb-contrib-CSI_CHAR_SET_ISSUES_USE_STANDARD_CHARSET_NAMEYCorrectness - This method should use a StandardCharsets.XXX.name() to specify an encoding"MAJOR*java2-CSI_CHAR_SET_ISSUES_USE_STANDARD_CHARSET_NAME:ô<p>This method uses a hand-typed <code>String</code> literal to specify a <code>Charset</code> encoding. As this class is compiled
    		with JDK 7 (or better), and the charset in question is available as a constant from the 
    		<code>java.nio.charset.StandardCharsets</code> class, it is better to use the .name() method of the appropriate
    		<code>StandardCharsets</code> constant.</p>
    		
			<p>The method in question doesn't directly support a <code>Charset</code> as a parameter, only a <code>String</code>.
				Still, instead of specifying something like "UTF-8" (and potentially mistyping it), use <code>StandardCharsets.UTF_8.name()</code>.
			</p>ZBUG
´
.fb-contrib:SACM_STATIC_ARRAY_CREATED_IN_METHOD¯

fb-contrib#SACM_STATIC_ARRAY_CREATED_IN_METHOD2Performance - Method creates array using constants"MAJOR*java2#SACM_STATIC_ARRAY_CREATED_IN_METHOD:Ÿ<p>This method creates an array initialized by constants. Each time this method is called
			this array will be recreated. It would be more performant to define the array as a
			static field of the class instead.</p>ZBUG
Ö
3fb-contrib:SCRV_SUSPICIOUS_COMPARATOR_RETURN_VALUESÕ

fb-contrib(SCRV_SUSPICIOUS_COMPARATOR_RETURN_VALUESJCorrectness - Comparator method doesn't seem to return all ordering values"MAJOR*java2(SCRV_SUSPICIOUS_COMPARATOR_RETURN_VALUES:å<p>This compareTo or compare method returns constant values to represent less than,
			equals, and greater than. However, it does not return each type, or it unconditionally returns a non zero value. 
			Given that comparators are transitive, this seems incorrect.</p>ZBUG

-fb-contrib:AIOB_ARRAY_STORE_TO_NULL_REFERENCEæ

fb-contrib"AIOB_ARRAY_STORE_TO_NULL_REFERENCEhCorrectness - Method attempts to store an array element to an array that does not appear to be allocated"MAJOR*java2"AIOB_ARRAY_STORE_TO_NULL_REFERENCE:l<p>This method attempts to store an array element into an array that appears not to have been allocated.</p>ZBUG
 
+fb-contrib:CFS_CONFUSING_FUNCTION_SEMANTICSö

fb-contrib CFS_CONFUSING_FUNCTION_SEMANTICS)Style - Method returns modified parameter"INFO*java2 CFS_CONFUSING_FUNCTION_SEMANTICS:Ñ<p>This method appears to modify a parameter, and then return this parameter as the
			method's return value. This will be confusing to callers of this method, as it won't be
			apparent that the 'original' passed in parameter will be changed as well. If the purpose
			of this method is to change the parameter, it would be more clear to change the method to
			a have a void return value. If a return type is required due to interface or superclass contract,
			perhaps a clone of the parameter should be made.</p>Z
CODE_SMELL
√
(fb-contrib:OCP_OVERLY_CONCRETE_PARAMETERñ

fb-contribOCP_OVERLY_CONCRETE_PARAMETERAStyle - Method needlessly defines parameter with concrete classes"INFO*java2OCP_OVERLY_CONCRETE_PARAMETER:Ó
<p>This method uses concrete classes for parameters when only methods defined in an implemented
			interface or superclass are used. Consider increasing the abstraction of the interface to
			make low impact changes easier to accomplish in the future.</p>

			<p>Take the following example:<br/>
<pre><code>
private void appendToList(ArrayList&lt;String&gt; list) {
    if (list.size() &lt; 100) {
        list.add("Foo");
    }
}
</code></pre>

				The parameter list is currently defined as an <code>ArrayList</code>, which is a concrete implementation of the <code>List</code> interface.  
				Specifying <code>ArrayList</code> is unnecessary here, because we aren't using any <code>ArrayList</code>-specific methods (like <code>ensureCapacity()</code> or <code>trimToSize()</code>).
				Instead of using the concrete definition, it is better to do something like:<br/>
<pre><code>
private void appendToList(List&lt;String&gt; list) {
    ...
</code></pre>
				If the design ever changes, e.g. a <code>LinkedList</code> is used instead, this code won't have to change.

			</p>

			<p>IDEs tend to have tools to help generalize parameters.  For example, in Eclipse, the refactoring tool <a href="http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-menu-refactor.htm">Generalize Declared Type</a> helps find an appropriate level of concreteness.</p>Z
CODE_SMELL
˜
)fb-contrib:AOM_ABSTRACT_OVERRIDDEN_METHOD…

fb-contribAOM_ABSTRACT_OVERRIDDEN_METHODACorrectness - Abstract method overrides a concrete implementation"MAJOR*java2AOM_ABSTRACT_OVERRIDDEN_METHOD:•<p>This abstract method is derived from a concrete method implementation. It is highly
			suspect that the superclass method's implementation would be cast away.</p>ZBUG
÷
fb-contrib:PL_PARALLEL_LISTSµ

fb-contribPL_PARALLEL_LISTSHStyle - Class defines two or more one for one associated lists or arrays"INFO*java2PL_PARALLEL_LISTS:û<p>This class appears to maintain two or more lists or arrays whose contents are related in a parallel way.  That is,
			you have something like:<br/>
<pre><code>
List&lt;String&gt; words = new ArrayList&lt;String&gt;();
List&lt;Integer&gt; wordCounts = new ArrayList&lt;String&gt;();
</code></pre>
			where the elements of the list at index 0 are related, the elements at index 1 are related and so on. </p>
			<p>
			Consider creating a separate class to hold all the related
			pieces of information, and adding instances of this class to just one list or array, or if just two values, use
			a Map to associate one value with the other like:<br/>
<pre><code>
private class WordAndCount{public String word;  public int count}

List&lt;WordAndCount&gt; wordsAndCounts = new ArrayList&lt;WordAndCount&gt;();
//or, for just two elements
Map<String,Integer> wordCounts = new HashMap<String,Integer>();
</code></pre>
			
			</p>Z
CODE_SMELL
–
3fb-contrib:SCII_SPOILED_CHILD_INTERFACE_IMPLEMENTORò

fb-contrib(SCII_SPOILED_CHILD_INTERFACE_IMPLEMENTORMStyle - Class implements interface by relying on unknowing superclass methods"INFO*java2(SCII_SPOILED_CHILD_INTERFACE_IMPLEMENTOR:Œ<p>This class declares that it implements an interface, but does so by relying on methods supplied
			by superclasses, even though those superclasses know nothing about the interface in question. If you wish
			to have the child not implement all the methods of the interface, it would probably be better to declare
			the superclass as implementing the interface, and if that class does not provide all the methods, then declare
			that superclass abstract.</p>Z
CODE_SMELL
º
*fb-contrib:DSOC_DUBIOUS_SET_OF_COLLECTIONSç

fb-contribDSOC_DUBIOUS_SET_OF_COLLECTIONS.Performance - Method uses a set of collections"MAJOR*java2DSOC_DUBIOUS_SET_OF_COLLECTIONS:˙<p>This method creates a set that contains other collections, or a Map whose keySet is
			another collection. As collections tend to calculate hashCode, equals and compareTo by
			iterating the contents of the collection, this can perform poorly.</p>
			<p>In addition, when a set is used, you typically are using it to do 'contains', or 'find'
			type functionality, which seems dubious when done on a collection</p>
			<p>Finally, as a collection is often modified, problems will occur if the collection is
			contained in a set, because the hashCode, equals or compareTo values will change while the
			collection is in the set.</p>
			<p>If you wish to maintain a collection of collections, it is probably better to use a List
			as the outer collection.</p>ZBUG
È
3fb-contrib:LO_INCORRECT_NUMBER_OF_ANCHOR_PARAMETERS±

fb-contrib(LO_INCORRECT_NUMBER_OF_ANCHOR_PARAMETERS[Correctness - Method passes an incorrect number of parameters to an SLF4J logging statement"MAJOR*java2(LO_INCORRECT_NUMBER_OF_ANCHOR_PARAMETERS:ﬂ<p>This method passes the wrong number of parameters to an SLF4J logging method (error, warn, info, debug) based on the number of anchors {} in the
			format string. An additional exception argument is allowed if found.</p>ZBUG
°
4fb-contrib:OI_OPTIONAL_ISSUES_USES_DELAYED_EXECUTIONË

fb-contrib)OI_OPTIONAL_ISSUES_USES_DELAYED_EXECUTIONNCorrectness - Method uses delayed execution of a block of code that is trivial"MAJOR*java2)OI_OPTIONAL_ISSUES_USES_DELAYED_EXECUTION:°<p>This method uses the Optional.orElseGet() method passing in a simple variable or constant value.
    		As this value takes not time to execute or causes no side effects, the use of Optional.orElseGet is
    		unnecessary and potentially confusing. You can use Optional.orElse() instead.ZBUG
¸
<fb-contrib:JPAI_NON_SPECIFIED_TRANSACTION_EXCEPTION_HANDLINGª

fb-contrib1JPAI_NON_SPECIFIED_TRANSACTION_EXCEPTION_HANDLINGXCorrectness - Method does not specify how to handle transaction when exception is thrown"MAJOR*java21JPAI_NON_SPECIFIED_TRANSACTION_EXCEPTION_HANDLING:⁄<p>This method declares that it throws one or more non-runtime exceptions. It also is annotated with a
    		@Transactional annotation but fails to describe whether to rollback the transaction or not based on this
    		thrown exception. Use 'rollbackFor' or 'noRollbackFor' attributes of the Transactional annotation to 
    		document this.</p>ZBUG
É
-fb-contrib:LSYC_LOCAL_SYNCHRONIZED_COLLECTION—

fb-contrib"LSYC_LOCAL_SYNCHRONIZED_COLLECTIONICorrectness - Method creates local variable-based synchronized collection"MAJOR*java2"LSYC_LOCAL_SYNCHRONIZED_COLLECTION:ù<p>This method creates a synchronized collection and stores the reference to it
			in a local variable. As local variables are by definition thread-safe, it seems
			questionable that this collection needs to be synchronized.</p>
			<p>
			<table>
				<tr><th>If you are using</th><th>consider using</th></tr>
				<tr><td>java.util.Vector</td><td>java.util.ArrayList</td></tr>
				<tr><td>java.util.Hashtable</td><td>java.util.HashMap</td></tr>
				<tr><td>java.lang.StringBuffer</td><td>java.lang.StringBuilder</td></tr>
			</table>
			</p>ZBUG
Ã
'fb-contrib:SPP_STRINGBUILDER_IS_MUTABLE†

fb-contribSPP_STRINGBUILDER_IS_MUTABLERCorrectness - Method needlessly assigns a StringBuilder to itself, as it's mutable"MAJOR*java2SPP_STRINGBUILDER_IS_MUTABLE:Ô<p>This method calls StringBuilder.append and assigns the results to the same StringBuilder like:</p>
			<code>sb = sb.append("foo")</code>
			<p>StringBuilder is mutable, so this is not necessary.
			This is also true of StringBuffer.</p>ZBUG
Ô
+fb-contrib:CU_CLONE_USABILITY_OBJECT_RETURNø

fb-contrib CU_CLONE_USABILITY_OBJECT_RETURN2Style - Clone method declares it returns an Object"INFO*java2 CU_CLONE_USABILITY_OBJECT_RETURN:†<p>This class implements the Cloneable interface but defines its clone method to return an
			Object. Since most likely users of this method will need to cast it to the real type, this will
			be more painful than necessary. Just declare the return value to be the type of this class.</p>Z
CODE_SMELL
ü
fb-contrib:SPP_NON_ARRAY_PARM˝

fb-contribSPP_NON_ARRAY_PARMSCorrectness - Method passes a non array object to a parameter that expects an array"MAJOR*java2SPP_NON_ARRAY_PARM:ﬂ<p>This method expects an array to be passed as one of its parameters, but unfortunately defines
			the parameter as Object. This invocation of this method does not pass an array and will throw
			an exception when run.</p>ZBUG
‹
,fb-contrib:UCC_UNRELATED_COLLECTION_CONTENTS´

fb-contrib!UCC_UNRELATED_COLLECTION_CONTENTS:Style - Method adds unrelated types to collection or array"INFO*java2!UCC_UNRELATED_COLLECTION_CONTENTS:Ç<p>This method adds unrelated objects to a collection or array, requiring careful and brittle
			data access to that collection. Create a separate class with properties needed, and add
			an instance of this class to the collection or array, if possible.</p>Z
CODE_SMELL
Ú
3fb-contrib:CSI_CHAR_SET_ISSUES_USE_STANDARD_CHARSET∫

fb-contrib(CSI_CHAR_SET_ISSUES_USE_STANDARD_CHARSETPCorrectness - This method needlessly uses a String literal as a Charset encoding"MAJOR*java2(CSI_CHAR_SET_ISSUES_USE_STANDARD_CHARSET:Û<p>This method uses a string literal to specify a <code>Charset</code> encoding. However, the method invoked has an 
    		alternative signature that takes a <code>Charset</code> object. You should use this signature, as this class is compiled
    		with JDK 7 (or better), and the <code>Charset</code> in question is available as a constant from the 
    		<code>java.nio.charset.StandardCharsets</code> class.</p>
    		<p>So instead of specifying "UTF-8", use <code>StandardCharsets.UTF_8</code>, for instance. An added benefit of this is 
    		that you will not need to catch <code>UnsupportedEncodingException</code>.</p>ZBUG
Å
%fb-contrib:HES_LOCAL_EXECUTOR_SERVICE◊

fb-contribHES_LOCAL_EXECUTOR_SERVICE/Correctness - Suspicious Local Executor Service"MAJOR*java2HES_LOCAL_EXECUTOR_SERVICE:Õ<p><code>ExecutorService</code>s are typically instantiated as fields so that many tasks can be executed on a controlled number of <code>Thread</code>s across many method calls.  Therefore, it is unusual for <code>ExecutorService</code>s to be a local variable, where tasks will be added only one time, in the enclosing method. </p>
			
			<p>Furthermore, when a local <code>ExecutorService</code> reaches the end of scope and goes up for garbage collection, the internal <code>Thread</code>s are not necessarily terminated and can prevent the JVM from ever shutting down.</p>
			
			<p>Consider making this local variable a field and create a method that will explicitly shutdown the <code>ExecutorService</code></p>ZBUG
‹
-fb-contrib:JXI_INVALID_CONTEXT_PARAMETER_TYPE™

fb-contrib"JXI_INVALID_CONTEXT_PARAMETER_TYPEHCorrectness - JAX-RS Method specifies an invalid @Context parameter type"MAJOR*java2"JXI_INVALID_CONTEXT_PARAMETER_TYPE:˜<p>This JAX-RS endpoint annotates a parameter with a @Context annotation. This annotation can supply values
    		for the following types:
    		<ul>
	    		<li>javax.ws.rs.core.UriInfo</li>
		        <li>javax.ws.rs.core.HttpHeaders</li>
		        <li>javax.ws.rs.core.Request</li>
		        <li>javax.ws.rs.core.SecurityContext</li>
		        <li>javax.ws.rs.ext.Providers</li>
		        <li>javax.servlet.ServletConfig</li>
		        <li>javax.servlet.ServletContext</li>
		        <li>javax.servlet.HttpServletRequest</li>
		        <li>javax.servlet.HttpServletResponse</li>
		    </ul>
		    It is possible that your container can supply additional types, but these types are not standard and may
		    not be supported on other application servers.</p>ZBUG
Å
0fb-contrib:AWCBR_ARRAY_WRAPPED_CALL_BY_REFERENCEÃ

fb-contrib%AWCBR_ARRAY_WRAPPED_CALL_BY_REFERENCEAStyle - Method uses 1 element array to simulate call by reference"INFO*java2%AWCBR_ARRAY_WRAPPED_CALL_BY_REFERENCE:î<p>This method uses a one-element array to wrap an object that is to be passed to a method as an argument
			to simulate call by pointer ala C++. It is better to define a proper return class type that holds all
			the relevant information retrieved from the called method.</p>Z
CODE_SMELL
È	
"fb-contrib:STT_TOSTRING_MAP_KEYING¬	

fb-contribSTT_TOSTRING_MAP_KEYING;Style - This method uses a concatenated String as a map key"INFO*java2STT_TOSTRING_MAP_KEYING:¨<p>This method builds a key for a map, using a StringBuilder, either implicitly or explicitly. This means the type
    		of the key is something more t han a String constant, it is a properly formatted String. However, there is no
    		type based verification that all uses of this key will follow this formatting. It is much better to use a proper, simple,
    		bean class that holds two (or more) fields so that it is clear what is expected for key use.
    		</p>
    		<p>
    		Example<br/>
    			instead of 
    			<pre><code>
    				V v = myMap.get(tableName + "-" + columnName);
    			</code></pre>
    			use
    			<pre><code>
    				V v = myMap.get(new ColumnSpec(tableName, columnName));
    			</code></pre>
    			where ColumnSpec is a simple bean-like class of your creation. The advantages, are
    			<ul>
    				<li>The ColumnSpec fully describes what is expected, you need a tableName and columnName</li>
    				<li>There is no guessing by the programmer what the format is, was it tableName + "_" + columnName?</li>
    			</ul>
    			</p>Z
CODE_SMELL
Œ
=fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NOT_NULLå

fb-contrib2UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NOT_NULLCCorrectness - TestNG test method passes null Assert.assertNotEquals"MAJOR*java22UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NOT_NULL:æ<p>This method compares an object's inequality to null. It is better to use the Assert.assertNotNull
			method so that the TestNG failure method is more descriptive of the intended test.</p>ZBUG
„
'fb-contrib:SPP_EQUALS_ON_STRING_BUILDER∑

fb-contribSPP_EQUALS_ON_STRING_BUILDERNCorrectness - Method calls equals(Object o) on a StringBuilder or StringBuffer"MAJOR*java2SPP_EQUALS_ON_STRING_BUILDER:ä<p>This method calls equals on a StringBuilder or StringBuffer. Surprisingly, these classes do not override
			the equals method from Object, and so equals is just defined to be == (or same references). This is most
			likely not what you would like. If you wish to check that the strings have the same characters, you need to
			call toString() on these object and compare them as Strings.</p>ZBUG
™
!fb-contrib:SPP_INTERN_ON_CONSTANTÑ

fb-contribSPP_INTERN_ON_CONSTANT6Correctness - Method calls intern on a string constant"MAJOR*java2SPP_INTERN_ON_CONSTANT:|<p>This method calls intern on a constant string. As constant strings are already interned, this call
			is superfluous.</p>ZBUG
Ò
&fb-contrib:URV_UNRELATED_RETURN_VALUES∆

fb-contribURV_UNRELATED_RETURN_VALUES;Style - Method returns different types of unrelated Objects"INFO*java2URV_UNRELATED_RETURN_VALUES:®<p>This method returns two or more unrelated types of objects (Related only through java.lang.Object).
			This will be very confusing to the code that must call it.</p>Z
CODE_SMELL
˙
fb-contrib:CE_CLASS_ENVY›

fb-contribCE_CLASS_ENVY8Style - Method excessively uses methods of another class"INFO*java2CE_CLASS_ENVY:ﬁ<p><em>THIS DETECTOR IS HIGHLY EXPERIMENTAL AND IS LIKELY TO CREATE A LOT OF FUD</em></p>
			<p>This method makes extensive use of methods from another class over methods of its own
			class. Typically this means that the functionality that is accomplished by this method
			most likely belongs with the class that is being used so liberally. Consider refactoring this
			method to be contained in that class, and to accept all the parameters needed in the method signature.</p>Z
CODE_SMELL
¿

"fb-contrib:SPP_SUSPECT_STRING_TESTô


fb-contribSPP_SUSPECT_STRING_TESTZCorrectness - Method possibly mixes up normal strings and empty strings in branching logic"MAJOR*java2SPP_SUSPECT_STRING_TEST:Í<p>This method tests a string, and groups null values with real strings, leaving empty strings as another
			case. That is, FindBugs has detected a structure like: <br/>
<pre><code>
String a = null, b = "", c = "someString";

String testStr = ...;  //one of a, b or c
if ({{FLAWED_TEST_LOGIC}}) {
    // Strings a and c fall into this branch... which is not typical.
} else {
    // String b falls into this branch.
}
</code></pre>
			
			This might be perfectly valid, but normally, null strings and empty strings are logically handled the same way,
			and so this test may be flawed.</p>
			<p>Pattern found is one of the following:
			<ul>
				<li><code>if ((s == null) || (s.length() &gt; 0))</code> --- did you mean
				<code>((s == null) || (s.length() == 0))</code>?</li>
				<li><code>if ((s == null) || (s.length() != 0))</code> -- did you mean 
				<code>((s == null) || (s.length() == 0))</code>? </li>
				<li><code>if ((s != null) && (s.length() == 0))</code> -- did you mean 
				<code>((s != null) && (s.length() &gt; 0))</code> or perhaps
				<code>((s == null) || (s.length() == 0))</code>? </li>
			</ul>
			</p>ZBUG
Ö
*fb-contrib:BED_BOGUS_EXCEPTION_DECLARATION÷

fb-contribBED_BOGUS_EXCEPTION_DECLARATIONSCorrectness - Non derivable method declares throwing an exception that isn't thrown"MAJOR*java2BED_BOGUS_EXCEPTION_DECLARATION:û<p>This method declares that it throws a checked exception that it does not throw. As this method is
			either a constructor, static method or private method, there is no reason for this method to declare
			the exception in its throws clause, and just causes calling methods to unnecessarily handle an exception
			that will never be thrown. The exception in question should be removed from the throws clause.</p>ZBUG
§
1fb-contrib:PUS_POSSIBLE_UNSUSPECTED_SERIALIZATIONÓ

fb-contrib&PUS_POSSIBLE_UNSUSPECTED_SERIALIZATIONGCorrectness - Method serializes an instance of a non-static inner class"MAJOR*java2&PUS_POSSIBLE_UNSUSPECTED_SERIALIZATION:¥<p>This method serializes an instance of a non-static inner class. Since this class has a
			reference to the containing class, this outer class will be serialized as well. This is often
			not intentional, and will make the amount of data that is serialized much more than is needed.
			If the outer classes is not desired to be serialized, either make the inner class static, or
			pull it out into a separate "first class" class.</p>ZBUG
ó
%fb-contrib:SPP_NULL_BEFORE_INSTANCEOFÌ

fb-contribSPP_NULL_BEFORE_INSTANCEOFJCorrectness - Method checks a reference for null before calling instanceof"MAJOR*java2SPP_NULL_BEFORE_INSTANCEOF:»<p>This method checks a reference for null just before seeing if the reference is an instanceof some class.
			Since instanceof will return false for null references, the null check is not needed.</p>ZBUG
–
>fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALSç

fb-contrib3UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALScCorrectness - JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue"MAJOR*java23UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS:ù<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.
			It is better to pass the two values that are being equated to the Assert.assertNotEquals method so that the
			JUnit failure method is more descriptive of the intended test.</p>ZBUG
í
fb-contrib:SPP_EMPTY_CASINGÚ

fb-contribSPP_EMPTY_CASINGPStyle - Method passes an empty string to equalsIgnoreCase or compareToIgnoreCase"INFO*java2SPP_EMPTY_CASING:’<p>This method passes the empty string "" to equalsIgnoreCase or compareToIgnoreCase. As the empty string
			is not case-sensitive, using equals is simpler. It would be even simpler to do a length() == 0 test.</p>Z
CODE_SMELL
Ë
5fb-contrib:USFW_UNSYNCHRONIZED_SINGLETON_FIELD_WRITESÆ

fb-contrib*USFW_UNSYNCHRONIZED_SINGLETON_FIELD_WRITESUCorrectness - Method of Singleton class writes to a field in an unsynchronized manner"MAJOR*java2*USFW_UNSYNCHRONIZED_SINGLETON_FIELD_WRITES:ﬁ<p>This method writes to a field of this class. Since this class is seen as a Singleton this can produce race
    		conditions, or cause non-visible changes to other threads, because the field isn't accessed synchronously.ZBUG
È
fb-contrib:UVA_USE_VAR_ARGS…

fb-contribUVA_USE_VAR_ARGSUStyle - Method defines parameter list with array as last argument, rather than vararg"INFO*java2UVA_USE_VAR_ARGS:ß<p>This method defines a parameter list that ends with an array. As this class is compiled with
			Java 1.5 or better, this parameter could be defined as a vararg parameter instead, which can be
			more convenient for client developers to use. This is not a bug, per se, just an improvement.</p>Z
CODE_SMELL
†
fb-contrib:RFI_SET_ACCESSIBLE˛

fb-contribRFI_SET_ACCESSIBLE[Correctness - Method uses AccessibleObject.setAccessible to modify accessibility of classes"MAJOR*java2RFI_SET_ACCESSIBLE:ÿ<p>This method uses the reflective setAccessible method to alter the behavior of methods and fields in classes 
    		in ways that were not expected to be accessed by the author. Doing so circumvents the protections that the author
    		provided through the class definition, and may expose your application to unexpected side effects and problems. This
    		functionality is deprecated in Java 9, and in Java 10 it is expected that this functionality won't work at all.ZBUG
æ
+fb-contrib:SPP_CONVERSION_OF_STRING_LITERALé

fb-contrib SPP_CONVERSION_OF_STRING_LITERAL.Correctness - Method converts a String literal"MAJOR*java2 SPP_CONVERSION_OF_STRING_LITERAL:˘<p>This method calls a converting method like <code>toLowerCase()</code> or <code>trim</code>
		   on a <code>String</code> literal. You should make the transformation yourself and use the transformed literal.</p>
		   
		   <p>
		   For example, instead of :<br/>
<pre><code>
return "ThisIsAConstantString".toLowerCase().trim();
</code></pre>
		   just do <br/>
<pre><code>
return "thisisaconstantstring";
</code></pre>
		   for shorter and easier to read code.  An exception might be made when locale-specific transformations need
		   to be done (in the case of <code>toUpperCase()</code> and <code>toLowerCase()</code>.
		   </p>ZBUG
Á
fb-contrib:SPP_USE_ISNAN 

fb-contribSPP_USE_ISNANHCorrectness - Method incorrectly compares a floating point number to NaN"MAJOR*java2SPP_USE_ISNAN:¡<p>This method compares a double or float to the constant <code>Double.NaN</code> or <code>Float.NaN</code>.
			You should use
			<code>Double.isNaN(d)</code> or <code>Float.isNaN(f)</code>
			 if the variable is a primitive. If using a boxed primitive <code>d.isNaN()</code> or <code>f.isNaN()</code> should be used.</p>ZBUG
∞
#fb-contrib:LO_SUSPECT_LOG_PARAMETERà

fb-contribLO_SUSPECT_LOG_PARAMETER5Correctness - Constructor declares a Logger parameter"MAJOR*java2LO_SUSPECT_LOG_PARAMETER:¸<p>This constructor declares a parameter that is a Logger. As loggers are meant to be
			created statically per class, it doesn't make sense that you would pass a Logger from one
			class to another. Declare the Logger static in each class instead.</p>ZBUG
˛
*fb-contrib:SJVU_SUSPICIOUS_JDK_VERSION_USEœ

fb-contribSJVU_SUSPICIOUS_JDK_VERSION_USEDCorrectness - Method uses rt.jar class or method that does not exist"MAJOR*java2SJVU_SUSPICIOUS_JDK_VERSION_USE:¶<p>This method calls a method that does not exist, on a class that does not exist in the JDK that
			this class has been compiled for. This can happen if you compile the class specifying the -source and
			-target options, and use a version that is before the version of the compiler's JDK.</p>ZBUG
Ä
9fb-contrib:OI_OPTIONAL_ISSUES_PRIMITIVE_VARIANT_PREFERRED¬

fb-contrib.OI_OPTIONAL_ISSUES_PRIMITIVE_VARIANT_PREFERREDxCorrectness - Method uses a java.util.Optional when use of OptionalInt, OptionalLong, OptionalDouble would be more clear"MAJOR*java2.OI_OPTIONAL_ISSUES_PRIMITIVE_VARIANT_PREFERRED:«<p>This method creates an Optional object to hold an int, double or long. In these cases it
    		is more natural to use the Optional variants OptionalInt, OptionalDouble and OptionalLong.
    		</p>ZBUG
ç
7fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_BOOLEAN_ASSERT—

fb-contrib,UTAO_JUNIT_ASSERTION_ODDITIES_BOOLEAN_ASSERTHStyle - JUnit test method asserts that a value is equal to true or false"INFO*java2,UTAO_JUNIT_ASSERTION_ODDITIES_BOOLEAN_ASSERT:Ñ<p>This method asserts that a value is equal to true or false. It is simpler to just
			use assertTrue, or assertFalse, instead.</p>Z
CODE_SMELL
∏
,fb-contrib:IICU_INCORRECT_INTERNAL_CLASS_USEá

fb-contrib!IICU_INCORRECT_INTERNAL_CLASS_USE2Correctness - Class relies on internal API classes"MAJOR*java2!IICU_INCORRECT_INTERNAL_CLASS_USE:Ï<p>This class makes use of internal API classes. As these
			classes are not documented, nor externally released as part of the API, they are subject
			to change or removal. You should not be using these classes.</p>
			Packages that shouldn't be used are:
			<ul>
				<li>sun.xxx</li>
				<li>org.apache.xerces.xxx</li>
				<li>org.apache.xalan.xxx</li>
			</ul>ZBUG
ˇ
+fb-contrib:JXI_PARM_PARAM_NOT_FOUND_IN_PATHœ

fb-contrib JXI_PARM_PARAM_NOT_FOUND_IN_PATH@Correctness - JAX-RS Method specifies non-resolveable @PathParam"MAJOR*java2 JXI_PARM_PARAM_NOT_FOUND_IN_PATH:®<p>This JAX-RS endpoint has a @PathParam specified that is not found in the @Path annotation
    		and thus can not determine from where to populate that parameter.</p>ZBUG
Å
fb-contrib:TR_TAIL_RECURSION‡

fb-contribTR_TAIL_RECURSION+Performance - Method employs tail recursion"MAJOR*java2TR_TAIL_RECURSION:Ï<p>This method recursively calls itself as the last statement of the method
			(Tail Recursion). This method can be easily refactored into a simple loop, which
			will make it more performant, and reduce the stack size requirements.</p>ZBUG
É
6fb-contrib:UAC_UNNECESSARY_API_CONVERSION_FILE_TO_PATH»

fb-contrib+UAC_UNNECESSARY_API_CONVERSION_FILE_TO_PATHTCorrectness - Method constructs a File object, merely to convert it to a Path object"MAJOR*java2+UAC_UNNECESSARY_API_CONVERSION_FILE_TO_PATH:˜<p>This method creates a java.nio.file.Path object by first creating a java.io.File object, and then calling
    		toPath() on it. It is simpler to just construct the Path object directly, say by using
    		{@code Path.get(String...)}.
    		</p>ZBUG
≈
;fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_EQUALSÖ

fb-contrib0UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_EQUALSdCorrectness - TestNG test method passes boolean expression to Assert.assertFalse / Assert.assertTrue"MAJOR*java20UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_EQUALS:ö<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.
			It is better to pass the two values that are being equated to the Assert.assertEquals method so that the
			TestNG failure method is more meaningful of the intended test.</p>ZBUG
á
%fb-contrib:CTU_CONFLICTING_TIME_UNITS›

fb-contribCTU_CONFLICTING_TIME_UNITS\Correctness - This method performs arithmetic operations on time values with different units"MAJOR*java2CTU_CONFLICTING_TIME_UNITS:¶<p>This method takes two values that appear to be representing time, and performs arithmetic operations on these 
    		two values directly, even though it appears that the two values are representing different time units, such as 
    		adding a millisecond value to a nanosecond value. You should convert the two values to the same time unit before
    		performing this calculation in order for it to be meaningful.</p>ZBUG
≥
/fb-contrib:CU_CLONE_USABILITY_MISMATCHED_RETURNˇ

fb-contrib$CU_CLONE_USABILITY_MISMATCHED_RETURNOStyle - Clone method declares it returns a type different than the owning class"INFO*java2$CU_CLONE_USABILITY_MISMATCHED_RETURN:ª<p>This class implements the Cloneable interface but defines its clone method to return a type
			that is different than the class itself, or any interfaces that the class implements.</p>Z
CODE_SMELL
±
,fb-contrib:JXI_GET_ENDPOINT_CONSUMES_CONTENTÄ

fb-contrib!JXI_GET_ENDPOINT_CONSUMES_CONTENTGCorrectness - JAX-RS Method implements a GET request but consumes input"MAJOR*java2!JXI_GET_ENDPOINT_CONSUMES_CONTENT:–<p>This JAX-RS endpoint is annotated to be used as @GET requests, but also documents that it
    		consumes JSON or XML data. Since a GET request pulls parameters from the URL, and not
    		the body of request, this pattern is problematic. If you wish to consume JSON or XML data,
    		this request should be annotated with @POST.</p>ZBUG
à
1fb-contrib:BED_HIERARCHICAL_EXCEPTION_DECLARATION“

fb-contrib&BED_HIERARCHICAL_EXCEPTION_DECLARATIONTCorrectness - Method declares throwing two or more exceptions related by inheritance"MAJOR*java2&BED_HIERARCHICAL_EXCEPTION_DECLARATION:ã<p>This method declares that it throws an exception that is the child of another exception that is
			also declared to be thrown. Given that the parent exception is declared, there is no need for the child
			exception to also be declared; it just adds confusion.</p>ZBUG
∆
#fb-contrib:FPL_FLOATING_POINT_LOOPSû

fb-contribFPL_FLOATING_POINT_LOOPS6Correctness - Method uses floating point indexed loops"MAJOR*java2FPL_FLOATING_POINT_LOOPS:ë<p>This method uses floating point variables to index a loop. Since floating point
			math is imprecise, rounding errors will accumulate over time each time the loop is
			executed. It is usually better to use integer indexing, and calculate the new value
			of the floating point number at the top of the loop body.</p>
			<p>Example:
<pre><code>
for (float f = 1.0f; f &lt;= 10.0f; f += 0.1f) {
    System.out.println(f);
}
</code></pre>
			The last value printed may not be 10.0, but instead might be 9.900001 or such.
			</p>ZBUG
¢
)fb-contrib:AIOB_ARRAY_INDEX_OUT_OF_BOUNDSÙ

fb-contribAIOB_ARRAY_INDEX_OUT_OF_BOUNDSQCorrectness - Method attempts to access an array element outside the array's size"MAJOR*java2AIOB_ARRAY_INDEX_OUT_OF_BOUNDS:¿<p>This method accesses an array element using a literal index that is known to be outside the size
			of the specified array. This will cause an ArrayIndexOutOfBoundsException at runtime.</p>ZBUG
‘
?fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALSê

fb-contrib4UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALSdCorrectness - TestNG test method passes boolean expression to Assert.assertFalse / Assert.assertTrue"MAJOR*java24UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NOT_EQUALS:ù<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.
			It is better to pass the two values that are being equated to the Assert.assertNotEquals method so that the
			TestNG failure method is more meaningful of the intended test.</p>ZBUG
Ã
#fb-contrib:WI_DUPLICATE_WIRED_TYPES§

fb-contribWI_DUPLICATE_WIRED_TYPES\Correctness - Class auto wires the same object into two separate fields in a class hierarchy"MAJOR*java2WI_DUPLICATE_WIRED_TYPES:Ò<p>this class has two fields in either itself or a parent class which autowire (without specialization), the same object
    		for both fields. This is likely caused by a developer just not being aware that the field already is available for your use, 
    		and just causes wasted space, and confusing code access to the same object through two different pathways.</p>ZBUG
ë
$fb-contrib:CU_CLONE_USABILITY_THROWSË

fb-contribCU_CLONE_USABILITY_THROWSBStyle - Clone method declares it throws CloneNotSupportedException"INFO*java2CU_CLONE_USABILITY_THROWS:«<p>This class implements the Cloneable interface but defines its clone method to still return
			a CloneNotSupportedException. Since you are implementing clone() it would make sense that the method
			in question will <em>not</em> throw that exception, so annotating your method with it just makes clients'
			use of your class more painful as they have to handle an exception that will never happen.
			Just remove the throws clause from your method.</p>Z
CODE_SMELL
˝
5fb-contrib:PCAIL_POSSIBLE_CONSTANT_ALLOCATION_IN_LOOP√

fb-contrib*PCAIL_POSSIBLE_CONSTANT_ALLOCATION_IN_LOOPQPerformance - Method allocates an object that is used in a constant way in a loop"MAJOR*java2*PCAIL_POSSIBLE_CONSTANT_ALLOCATION_IN_LOOP:˜<p>This method allocates an object using the default constructor in a loop, and then
			only uses it in a quasi-static way. It is never assigned to anything that lives outside
			the loop, and could potentially be allocated once outside the loop. Often this can be
			achieved by calling a clear() like method in the loop, to reset the state of the object
			in the loop.</p>ZBUG

fb-contrib:UP_UNUSED_PARAMETERÕ

fb-contribUP_UNUSED_PARAMETER6Style - Static or private method has unused parameters"INFO*java2UP_UNUSED_PARAMETER:ƒ<p>This method defines parameters that are never used. As this method is either static or private,
	       and can't be derived from, it is safe to remove these parameters and simplify your method.
	       You should consider, while unlikely, that this method may be used reflectively, and thus you will
	       want to change that call as well. In this case, it is likely that once you remove the parameter,
	       there will be a chain of method calls that have spent time creating this parameter and passing it
	       down the line. All of this may be able to be removed.</p>Z
CODE_SMELL
ç
 fb-contrib:ODN_ORPHANED_DOM_NODEË

fb-contribODN_ORPHANED_DOM_NODEICorrectness - Method creates DOM node but doesn't attach it to a document"MAJOR*java2ODN_ORPHANED_DOM_NODE:O<p>This method creates a DOM node but does not attach it to a DOM document.</p>ZBUG

!fb-contrib:URV_CHANGE_RETURN_TYPE 

fb-contribURV_CHANGE_RETURN_TYPEAStyle - Method returns more specific type of object than declared"INFO*java2URV_CHANGE_RETURN_TYPE:∞<p>This method is defined to return a java.lang.Object. However, the return types
			returned from this method can be defined by a more specific class or interface. Since this
			method is not derived from a superclass or interface, it would be more clear to
			change the return type of this method.</p>Z
CODE_SMELL
ñ
+fb-contrib:JPAI_HC_EQUALS_ON_MANAGED_ENTITYÊ

fb-contrib JPAI_HC_EQUALS_ON_MANAGED_ENTITYHCorrectness - JPA Entity with Generated @Id defined with hashCode/equals"MAJOR*java2 JPAI_HC_EQUALS_ON_MANAGED_ENTITY:∑<p>This class is defined to be a JPA Entity, and has an @Id field that is generated by the JPA provider.
    		Since you do not control when that Id is created directly, it is risky to implement hashCode/equals for this
    		class, and especially for use with Collections, as the data behind the algorithms will not be immutable, and
    		thus cause problems when those fields change, and the object is in the collection. It is usually safer
    		to not define hashCode and equals for entity objects, but treat them as objects for IdentityHashSet/Maps instead.</p>ZBUG
”
:fb-contrib:NMCS_NEEDLESS_MEMBER_COLLECTION_SYNCHRONIZATIONî

fb-contrib/NMCS_NEEDLESS_MEMBER_COLLECTION_SYNCHRONIZATIONIPerformance - Class defines unneeded synchronization on member collection"MAJOR*java2/NMCS_NEEDLESS_MEMBER_COLLECTION_SYNCHRONIZATION:∆<p>This class defines a private collection member as synchronized. It appears however
			that this collection is only modified in a static initializer, or constructor. As these
			two areas are guaranteed to be thread safe, defining this collection as synchronized is
			unnecessary and a potential performance bottleneck.</p>ZBUG
Î
fb-contrib:USS_USE_STRING_SPLIT«

fb-contribUSS_USE_STRING_SPLIT:Style - Method builds String array using String Tokenizing"INFO*java2USS_USE_STRING_SPLIT:∏<p>This method uses a StringTokenizer to split up a String and then walks through the
			separated elements and builds an array from these enumerated values. It is simpler
			and easier to use the String.split method.</p>
			<p>PLEASE NOTE: String.split will return an array of 1 element when passed the
			empty string, as opposed to using StringTokenizer which returns false on the first
			hasMoreElements/hasMoreTokens call. So you may need to use:</p>
<pre><code>
if (s.length() &gt; 0) <br/>
    return s.split(";");<br/>
return new String[0];<br/>
</code></pre>Z
CODE_SMELL
ø
%fb-contrib:LII_LIST_INDEXED_ITERATINGï

fb-contribLII_LIST_INDEXED_ITERATINGBStyle - Method uses integer based for loops to iterate over a List"INFO*java2LII_LIST_INDEXED_ITERATING:Ú<p>This method uses an integer based for loop to iterate over a java.util.List, by calling
			List.get(i) each time through the loop. The integer is not used for other reasons. It is better
			to use an Iterator instead, as depending on List implementation, iterators can perform better,
			and they also allow for exchanging of other collection types without issue.</p>Z
CODE_SMELL
ó
!fb-contrib:OC_OVERZEALOUS_CASTINGÒ

fb-contribOC_OVERZEALOUS_CASTINGfCorrectness - Method manually casts the right hand side of an assignment more specifically than needed"MAJOR*java2OC_OVERZEALOUS_CASTING:∏<p>This method casts the right hand side of an expression to a class that is more specific than the
			variable on the left hand side of the assignment. The cast only has to be as specific as what the variable
			that is on the left. Using a more specific type on the right hand side just increases cohesion.</p>ZBUG
Ù
5fb-contrib:HCP_HTTP_REQUEST_RESOURCES_NOT_FREED_FIELD∫

fb-contrib*HCP_HTTP_REQUEST_RESOURCES_NOT_FREED_FIELD>Correctness - Unreleased HttpRequest network resources (field)"MAJOR*java2*HCP_HTTP_REQUEST_RESOURCES_NOT_FREED_FIELD:Å
<p>FindBugs has detected an <code>org.apache.http.HttpRequest</code> (e.g. <code>HttpGet</code>, <code>HttpPost</code>, etc)
				that didn't release its associated resources.  Code like the following: <br/>
<pre>code>
private HttpGet httpGet;

public String requestInfo(URI u) {
    this.httpGet = new HttpGet(u);
    try(CloseableHttpResponse response = client.execute(httpGet);) {
        return getResponseAsString(response);
    }
    catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}
</code></pre>
				will freeze after a few requests, usually with no indication as to why.  </p>
				
			<p>
				The reason this code freezes is because <code>org.apache.http.HttpRequest</code>s need to explicitly release their connection
				with a call to either <code>reset()</code> or <code>releaseConnection()</code>.  The above example can be easily fixed:<br/>
<pre><code>
private HttpGet httpGet;
...
public String requestInfo(URI u) {
    this.httpGet = new HttpGet(u);
    try(CloseableHttpResponse response = client.execute(httpGet);) {
        return getResponseAsString(response);
    }
    catch (IOException e) {
        e.printStackTrace();
    }
    <b>finally {
        this.httpGet.reset();
    }</b>
    return null;
}<br/>
</code></pre>
			</p>ZBUG
¬
0fb-contrib:OI_OPTIONAL_ISSUES_CHECKING_REFERENCEç

fb-contrib%OI_OPTIONAL_ISSUES_CHECKING_REFERENCE:Correctness - Method checks an Optional reference for null"MAJOR*java2%OI_OPTIONAL_ISSUES_CHECKING_REFERENCE:‚<p>This method compares an Optional reference variable against null. As the whole point of the
    		Optional class is to avoid the null pointer exception, this use pattern is highly suspect. 
    		The code should always make sure the Optional reference is valid, and should count on the apis
    		of this class to check for the held reference instead.ZBUG
Â
%fb-contrib:SLS_SUSPICIOUS_LOOP_SEARCHª

fb-contribSLS_SUSPICIOUS_LOOP_SEARCHNCorrectness - This method continues a loop after finding an equality condition"MAJOR*java2SLS_SUSPICIOUS_LOOP_SEARCH:í<p>This method continues with a loop, and does not break out of it, after finding and setting a variable in an if
    		condition based on equality. Since continuing on in the loop would seem to be unlikely to find the item again, breaking
    		at this point would seem to be the proper action.</p>
    		<p>Example:
<pre><code>
int age = 0;
for (Person p : people) {
    if (p.getName().equals("Dave")) {
        age = p.getAge();
    }
}
</code></pre>
    		It is likely you wanted a break after getting the age for "Dave".</p>ZBUG
÷
#fb-contrib:MDM_SIGNAL_NOT_SIGNALALLÆ

fb-contribMDM_SIGNAL_NOT_SIGNALALLSMulti-threading - Method calls Condition.signal() rather than Condition.signalAll()"MAJOR*java2MDM_SIGNAL_NOT_SIGNALALL:Ñ<p><code>Condition.signalAll()</code> is preferred over <code>Condition.signal()</code>. Calling <code>signal()</code> only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.</p>ZBUG
ˇ	
$fb-contrib:PMB_POSSIBLE_MEMORY_BLOAT÷	

fb-contribPMB_POSSIBLE_MEMORY_BLOAT4Correctness - Potential memory bloat in static field"MAJOR*java2PMB_POSSIBLE_MEMORY_BLOAT:…<p>This class defines static fields that are <code>Collection</code>s, <code>StringBuffer</code>s, or <code>StringBuilder</code>s
			that do not appear to have any way to clear or reduce their size. That is, a collection is defined
			and has method calls like <br/>
			{<code>add()</code>, <code>append()</code>, <code>offer()</code>, <code>put()</code>, ...} <br/>
			with no method calls to removal methods like<br/>
			{<code>clear()</code>, <code>delete()</code>, <code>pop()</code>, <code>remove()</code>, ...}<br/>
			This means that the collection in question can only ever increase in size, which is 
			a potential cause of memory bloat.</p>
			
			<p>
			If this collection is a list, set or otherwise of static things (e.g. a List&gt;String&gt; for month names), consider
			adding all of the elements in a static initializer, which can only be called once:<br/>
<pre><code>
private static List&lt;String&gt; monthNames = new ArrayList&lt;String&gt;();
static {
    monthNames.add("January");
    monthNames.add("February");
    monthNames.add("March");
    ...
}
</code></pre>
			</p>ZBUG
∫
9fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NULL¸

fb-contrib.UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NULL@Correctness - TestNG test method passes null Assert.assertEquals"MAJOR*java2.UTAO_TESTNG_ASSERTION_ODDITIES_USE_ASSERT_NULL:π<p>This method compares an object's equality to null. It is better to use the Assert.assertNull
			method so that the TestNG failure method is more descriptive of the intended test.</p>ZBUG
∆
#fb-contrib:MDM_WAIT_WITHOUT_TIMEOUTû

fb-contribMDM_WAIT_WITHOUT_TIMEOUT/Multi-threading - Method sleeps without timeout"MAJOR*java2MDM_WAIT_WITHOUT_TIMEOUT:ò<p>Calling one of the following methods without timeout could block forever. Consider using a timeout to detect deadlocks or performance problems. 
			Methods: 
			<ul>
			<li>Thread.join()</li>
			<li>Object.wait()</li>
			<li>Condition.await()</li>
			<li>Lock.lock()</li> 
			<li>Lock.lockInterruptibly()</li>
			<li>ReentrantLock.lock()</li>
			<li>ReentrantLock.lockInterruptibly()</li>
			</ul>
			</p>ZBUG
ú
+fb-contrib:SSCU_SUSPICIOUS_SHADED_CLASS_USEÏ

fb-contrib SSCU_SUSPICIOUS_SHADED_CLASS_USEWCorrectness - Method calls a method from a class that has been shaded by a 3rdparty jar"MAJOR*java2 SSCU_SUSPICIOUS_SHADED_CLASS_USE:Æ<p>This method calls a method found in a 3rdparty library, which appears to be shaded from another 3rdparty library.
    		This occurs when a jar includes other code using tools like the maven shade plugin. It is likely you wanted to use the
    		"first-class" class from the original jar, rather than the class with the shaded package structure, but your IDE pulled in
    		the wrong import.</p>
    		<p>An example might be, you attempted to use a method from the class:
    		<pre><code>
    		com.google.common.collect.Sets
    		</code></pre>
    		But instead, you import:
    		<pre><code>
    		org.apache.jena.ext.com.google.common.collect.Sets
    		</code></pre>
    		</p>ZBUG
Ì
*fb-contrib:WOC_WRITE_ONLY_COLLECTION_LOCALæ

fb-contribWOC_WRITE_ONLY_COLLECTION_LOCALfCorrectness - Method creates and initializes a collection but never reads or gains information from it"MAJOR*java2WOC_WRITE_ONLY_COLLECTION_LOCAL:Û<p>This method creates and initializes a collection but then never access this collection
			to gain information, or fetch items from the collection. It is likely that this collection
			is left over from a past effort, and can be removed.</p>ZBUG
™
fb-contrib:MDM_SECURERANDOMä

fb-contribMDM_SECURERANDOM9Correctness - Method calls deprecated SecureRandom method"MAJOR*java2MDM_SECURERANDOM:ä<p>In JDK 1.5 or less, the <code>SecureRandom()</code> constructors and <code>SecureRandom.getSeed()</code> method are recommended against using. 
			Call <code>SecureRandom.getInstance()</code> and <code>SecureRandom.getInstance().generateSeed()</code> instead.</p>ZBUG
œ
fb-contrib:SPP_USELESS_CASING≠

fb-contribSPP_USELESS_CASINGHPerformance - Method compares string without case after enforcing a case"MAJOR*java2SPP_USELESS_CASING:ö<p>This method compares two strings with compareToIgnoreCase or equalsIgnoreCase, after having
			called toUpperCase or toLowerCase on the string in question. As you are comparing without
			concern to case, the toUpperCase or toLowerCase calls are pointless and can be removed.</p>ZBUG
ä
-fb-contrib:EXS_EXCEPTION_SOFTENING_NO_CHECKEDÿ

fb-contrib"EXS_EXCEPTION_SOFTENING_NO_CHECKEDBStyle - Constrained method converts checked exception to unchecked"INFO*java2"EXS_EXCEPTION_SOFTENING_NO_CHECKED:•<p>This method's exception signature is constrained by an interface or superclass not to throw
			any checked exceptions. Therefore a caught checked exception was converted to an unchecked exception
			and thrown. However, it appears that the class in question is owned by the same author as the constraining
			interface or superclass. Consider changing the signature of this method to include the checked exception.</p>Z
CODE_SMELL
©
2fb-contrib:IPU_IMPROPER_PROPERTIES_USE_SETPROPERTYÚ

fb-contrib'IPU_IMPROPER_PROPERTIES_USE_SETPROPERTYJCorrectness - Method uses Properties.put instead of Properties.setProperty"MAJOR*java2'IPU_IMPROPER_PROPERTIES_USE_SETPROPERTY:≥<p>This method uses the inherited method from Hashtable put(String key, Object value) in
			a Properties object. Since the Properties object was intended to be only a String to String
			map, use of the derived put method is discouraged. Use the Properties.setProperty method instead.</p>
			<p>
			Don't use <code>properties.put("foo", "bar");</code>
			</p>
			<p>
			Do use <code>properties.setProperty("foo", "bar");</code>
			</p>ZBUG
®
,fb-contrib:NCS_NEEDLESS_CUSTOM_SERIALIZATION˜

fb-contrib!NCS_NEEDLESS_CUSTOM_SERIALIZATIONMCorrectness - Method needlessly implements what is default streaming behavior"MAJOR*java2!NCS_NEEDLESS_CUSTOM_SERIALIZATION:¡<p>This method implements the Serializable interface by performing the same operations that
			would be done if this method did not exist. Since this is the case, this method is not needed.</p>ZBUG
˛
!fb-contrib:IOI_DOUBLE_BUFFER_COPYÿ

fb-contribIOI_DOUBLE_BUFFER_COPY^Performance - Method passes a Buffered Stream/Reader/Writer to a already buffering copy method"MAJOR*java2IOI_DOUBLE_BUFFER_COPY:ß<p>This method copies data from input to output using streams or reader/writers using a well known copy method, from java.nio, commons-io, 
    		springframework, guava or poi. These methods are efficient in that they copy these files using buffers. However, this method is also 
    		buffering the streams, causing a double buffering to occur. So data first goes to one buffer, then is copied to another buffer, before
    		making it to the destination (or vice-versa). This just causes the copy operation to be inefficient both from a time perspective, as well
    		as a memory allocation one. When using these copy methods, do not pass buffered streams/readers/writers.</p>ZBUG
Õ
$fb-contrib:JPAI_IGNORED_MERGE_RESULT§

fb-contribJPAI_IGNORED_MERGE_RESULTDCorrectness - Method ignores the return value of EntityManager.merge"MAJOR*java2JPAI_IGNORED_MERGE_RESULT:á<p>This method calls EntityManager.merge, and throws away the resultant value. This result is the 
    		managed entity version of the potentially unmanaged object that was passed to merge. You should use
    		the returned managed entity for any further use.</p>ZBUG
Ó
9fb-contrib:UAC_UNNECESSARY_API_CONVERSION_DATE_TO_INSTANT∞

fb-contrib.UAC_UNNECESSARY_API_CONVERSION_DATE_TO_INSTANTXCorrectness - Method constructs a Date object, merely to convert it to an Instant object"MAJOR*java2.UAC_UNNECESSARY_API_CONVERSION_DATE_TO_INSTANT:’<p>This method creates a java.time.Instant object by first creating a java.util.Date object, and then calling
    		toInstant() on it. It is simpler to just construct the Instant object directly, say by using
    		{@code Instant.now()} to get the current time, of by using {@code Instant.parse(CharSequence)} to convert a String.
    		</p>ZBUG
ì
*fb-contrib:NAB_NEEDLESS_BOXING_STRING_CTOR‰

fb-contribNAB_NEEDLESS_BOXING_STRING_CTORJPerformance - Method passes parsed string to primitive wrapper constructor"MAJOR*java2NAB_NEEDLESS_BOXING_STRING_CTOR:µ<p>This method passes a primitive value retrieved from a <code>BoxedPrimitive.parseBoxedPrimitive("1")</code> call to
			the same class's constructor. It is simpler to just pass the string to the BoxedPrimitives constructor or, better yet, use the static valueOf.</p>
			<p>Instead of something like:<br/>
<pre><code>
Boolean bo = new Boolean(Boolean.parseBoolean("true"));
Float f = new Float(Float.parseFloat("1.234"));
</code></pre>
			Simply do: <br/>
<pre><code>
Boolean bo = new Boolean("true");
Float f = new Float("1.234");
</code></pre>
			or, to be more memory efficient: <br/>
<pre><code>
Boolean bo = Boolean.valueOf("true");
Float f = Float.valueOf("1.234");
</code></pre>
			</p>ZBUG
À
8fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_INEXACT_DOUBLEé

fb-contrib-UTAO_TESTNG_ASSERTION_ODDITIES_INEXACT_DOUBLEEStyle - TestNG test method asserts that two doubles are exactly equal"INFO*java2-UTAO_TESTNG_ASSERTION_ODDITIES_INEXACT_DOUBLE:¬<p>This method calls assert with two doubles or Doubles. Due to the imprecision of doubles, you
			should be using the assert method that takes a range parameter that gives a range of error.</p>Z
CODE_SMELL
’
'fb-contrib:NRTL_NON_RECYCLEABLE_TAG_LIB©

fb-contribNRTL_NON_RECYCLEABLE_TAG_LIB,Correctness - Tag library is not recycleable"MAJOR*java2NRTL_NON_RECYCLEABLE_TAG_LIB:û<p>This tag library class implements an attribute whose associated backing store field
			is modified at another point in the tag library. In order for a tag library to be
			recycleable, only the container is allowed to change this attribute, through the use
			of the setXXX method of the taglib. By modifying the value programmatically, the
			container will not initialize the attribute correctly on reuse.</p>ZBUG
Ω
0fb-contrib:PIS_POSSIBLE_INCOMPLETE_SERIALIZATIONà

fb-contrib%PIS_POSSIBLE_INCOMPLETE_SERIALIZATION7Correctness - Class doesn't serialize superclass fields"MAJOR*java2%PIS_POSSIBLE_INCOMPLETE_SERIALIZATION:‡<p>This method implements Serializable but is derived from a
			class that does not. The superclass has fields that are not serialized
			because this class does not take the responsibility of writing these fields out
			either using Serializable's writeObject method, or Externalizable's writeExternal
			method. Therefore when this class is read from a stream, the superclass fields
			will only be initialized to the values specified in its default constructor.
			If possible, change the superclass to implement Serializable, or implement
			Serializable or Externalizable methods in the child class.</p>ZBUG
Á
fb-contrib:S508C_NULL_LAYOUT∆

fb-contribS508C_NULL_LAYOUT&Correctness - GUI uses absolute layout"MAJOR*java2S508C_NULL_LAYOUT:◊<p>This class passes null to setLayout, which specifies that components are
			to be laid out using absolute coordinates. This makes making changes for
			font sizes, etc, difficult as items will not reposition.</p>ZBUG
≠
/fb-contrib:CSI_CHAR_SET_ISSUES_UNKNOWN_ENCODING˘

fb-contrib$CSI_CHAR_SET_ISSUES_UNKNOWN_ENCODINGDCorrectness - This method uses an unknown character encoding literal"MAJOR*java2$CSI_CHAR_SET_ISSUES_UNKNOWN_ENCODING:∆<p>This method specifies a <code>Charset</code> encoding with a String literal that is not recognized by the current
    		JDK. It's possible that this application will only be deployed on a JVM that does recognize this encoding, but
    		it seems dubious that this is the case.</p>
    		<p>
    		The standard JDK encodings (for Java 8) are "UTF-8", "US-ASCII", "ISO-8859-1", "UTF-16BE", "UTF-16LE", "UTF-16".  These are all case-sensitive.
    		</p>ZBUG
ñ
%fb-contrib:SPP_NULL_CHECK_ON_OPTIONALÏ

fb-contribSPP_NULL_CHECK_ON_OPTIONALJCorrectness - Method checks an Optional reference for null or non nullness"MAJOR*java2SPP_NULL_CHECK_ON_OPTIONAL:«This method uses an Optional variable, and checks the reference value for whether it is null or not null.
			Since the point of the Optional class is to avoid 'the null reference problem', having code that needs to 
			check the reference itself is self defeating, and therefore makes the use of the Optional variable useless.
			You should never use a variable of type Optional that has a value of null, and so there should be no need to
			check for it.ZBUG
¢
)fb-contrib:SPP_USE_BIGDECIMAL_STRING_CTORÙ

fb-contribSPP_USE_BIGDECIMAL_STRING_CTORBCorrectness - Method passes double value to BigDecimal Constructor"MAJOR*java2SPP_USE_BIGDECIMAL_STRING_CTOR:œ<p>This method calls the BigDecimal constructor that takes a double, and passes a literal double constant value. Since
			the use of BigDecimal is to get better precision than double, by passing a double, you only get the precision of double number
			space. To take advantage of the BigDecimal space, pass the number as a string. </p>ZBUG
π
'fb-contrib:CAAL_CONFUSING_ARRAY_AS_LISTç

fb-contribCAAL_CONFUSING_ARRAY_AS_LISTGCorrectness - Method calls Array.asList on an array of primitive values"MAJOR*java2CAAL_CONFUSING_ARRAY_AS_LIST:Á<p>This method passes an array of primitive values to the Array.asList call. As primitive
			values in arrays aren't automatically promoted to boxed primitives in arrays, the asList call
			cannot convert this array to a list of boxed primitives. It therefore just creates an array
			with one item in it, the array itself. This is rarely what is desired.</p>ZBUG
ô
(fb-contrib:ICA_INVALID_CONSTANT_ARGUMENTÏ

fb-contribICA_INVALID_CONSTANT_ARGUMENTACorrectness - Method passes an invalid value as a method argument"MAJOR*java2ICA_INVALID_CONSTANT_ARGUMENT: <p>This method passes an invalid constant value to a method parameter that expects only a select number of possible values.
			This is likely going to cause this method to fail to operate correctly.</p>ZBUG
ï
&fb-contrib:IPU_IMPROPER_PROPERTIES_USEÍ

fb-contribIPU_IMPROPER_PROPERTIES_USEDCorrectness - Method puts non-String values into a Properties object"MAJOR*java2IPU_IMPROPER_PROPERTIES_USE:…<p>This method places non-String objects into a Properties object. As the Properties object
			is intended to be a String to String map, putting non String objects is wrong, and takes advantage
			of a design flaw in the Properties class by deriving from Hashtable instead of using aggregation.
			If you want a collection that holds other types of objects, use a Hashtable, or better still newer collections
			like HashMap or TreeMap.</p>
			<p>
			Don't use <code>properties.put("foo", bar);</code>
			</p>
			<p>
			Do use <code>properties.setProperty("foo", "bar");</code>
			</p>ZBUG
˘
'fb-contrib:COM_COPIED_OVERRIDDEN_METHODÕ

fb-contribCOM_COPIED_OVERRIDDEN_METHODKStyle - Method is implemented with an exact copy of its superclass's method"INFO*java2COM_COPIED_OVERRIDDEN_METHOD:ù<p>This method is implemented using an exact copy of its superclass method's
			implementation, which usually means that this method can just be removed.</p>Z
CODE_SMELL
É
fb-contrib:SPP_USE_CHARATÂ

fb-contribSPP_USE_CHARAT[Performance - Method fetches character array just to do the equivalent of the charAt method"MAJOR*java2SPP_USE_CHARAT:«<p>This method calls the toCharArray method on a String to fetch an array of characters, only
			to retrieve one of those characters by index. It is more performant to just use the charAt method.</p>ZBUG
î	
&fb-contrib:HES_EXECUTOR_NEVER_SHUTDOWNÈ

fb-contribHES_EXECUTOR_NEVER_SHUTDOWN=Correctness - ExecutorService field doesn't ever get shutdown"MAJOR*java2HES_EXECUTOR_NEVER_SHUTDOWN:œ<p>Most <code>ExecutorService</code> objects must be explicitly shutdown, 
            otherwise, their internal threads can prolong the running of the JVM, even when everything
            else has stopped.</p>
            
            <p>FindBugs has detected that there are no calls to either the <code>shutdown()</code> or <code>shutdownNow()</code>
            method, and thus, the <code>ExecutorService</code> is not guaranteed to ever terminate.  This is especially
            problematic for <code>Executors.newFixedThreadPool()</code> and most of the other convenience methods in 
            the <code>Executors</code> class.</p>
			
			<p>Even though there are some exceptions to this, particularly when a custom <code>ThreadFactory</code> is 
			provided, or for <code>ThreadPoolExecutor</code>s with <code>allowsCoreThreadTimeOut()</code> set to true,
			it is good practice to explicitly shutdown the <code>ExecutorService</code> when its utility is done.</p>ZBUG
Õ
.fb-contrib:IOI_USE_OF_FILE_STREAM_CONSTRUCTORSö

fb-contrib#IOI_USE_OF_FILE_STREAM_CONSTRUCTORSKPerformance - Method uses a FileInputStream or FileOutputStream constructor"MAJOR*java2#IOI_USE_OF_FILE_STREAM_CONSTRUCTORS:‚<p>This method creates and uses a java.io.FileInputStream or java.io.FileOutputStream object. Unfortunately both
    		of these classes implement a finalize method, which means that objects created will likely hang around until a 
    		full garbage collection occurs, which will leave excessive garbage on the heap for longer, and potentially much
    		longer than expected. Java 7 introduced two ways to create streams for reading and writing files that do not have this concern.
    		You should consider switching from these above classes to
    		<code>
    		InputStream is = java.nio.file.Files.newInputStream(myfile.toPath());
    		OutputStream os = java.nio.file.Files.newOutputStream(myfile.toPath());
    		</code>
    		</p>ZBUG

'fb-contrib:IMC_IMMATURE_CLASS_NO_EQUALSƒ

fb-contribIMC_IMMATURE_CLASS_NO_EQUALS1Style - Class does not implement an equals method"INFO*java2IMC_IMMATURE_CLASS_NO_EQUALS:Æ<p>This class which has instance fields has no equals(Object o) method. It is possible that this
    		class is never used in a context where this is required; it is often assumed, however, from clients 
    		of this class that it is, so it is good to add such methods when you create them.
    		</p>Z
CODE_SMELL
˛
fb-contrib:S508C_NO_SETLABELFOR⁄

fb-contribS508C_NO_SETLABELFOR7Correctness - JLabel doesn't specify what it's labeling"MAJOR*java2S508C_NO_SETLABELFOR:‘<p>This class uses JLabels that do not specify what fields are being labeled.
			This hampers screen readers from given appropriate feed back to users. Use
			the JLabel.setLabelFor method to accomplish this.</p>ZBUG
é
-fb-contrib:SUA_SUSPICIOUS_UNINITIALIZED_ARRAY‹

fb-contrib"SUA_SUSPICIOUS_UNINITIALIZED_ARRAYHCorrectness - Method returns an array that appears not to be initialized"MAJOR*java2"SUA_SUSPICIOUS_UNINITIALIZED_ARRAY:©<p>This method returns an array that was allocated but apparently not initialized. It is
			possible that the caller of this method will do the work of initializing this array, but
			that is not a common pattern, and it is assumed that this array has just been forgotten to
			be initialized.</p>ZBUG
¿
*fb-contrib:NPMC_NON_PRODUCTIVE_METHOD_CALLë

fb-contribNPMC_NON_PRODUCTIVE_METHOD_CALLBCorrectness - Method ignores return value of a non mutating method"MAJOR*java2NPMC_NON_PRODUCTIVE_METHOD_CALL:Í<p>This method ignores the return value of a common method that is assumed to be non-mutating.
			If this method does in fact not modify the object it is called on, there is no reason to call
			this method, and it can be removed.</p>ZBUG
‰
2fb-contrib:URV_INHERITED_METHOD_WITH_RELATED_TYPES≠

fb-contrib'URV_INHERITED_METHOD_WITH_RELATED_TYPESKStyle - Inherited method returns more specific type of object than declared"INFO*java2'URV_INHERITED_METHOD_WITH_RELATED_TYPES:Á<p>This inherited method is defined to return a java.lang.Object. However, the return types returned
			from this method can be defined by a more specific class or interface. If possible consider changing the
			return type in the inheritance hierarchy of this method, otherwise the caller of this method will be brittle
			in handling of the return type.</p>Z
CODE_SMELL
ù
.fb-contrib:EXS_EXCEPTION_SOFTENING_HAS_CHECKEDÍ

fb-contrib#EXS_EXCEPTION_SOFTENING_HAS_CHECKEDqStyle - Constrained method converts checked exception to unchecked instead of another allowable checked exception"INFO*java2#EXS_EXCEPTION_SOFTENING_HAS_CHECKED:Ü<p>This method's exception signature is constrained by an interface of superclass not to throw a
			checked exception that was caught. Therefore this exception was converted to an unchecked exception and
			thrown. It would probably be better to throw the closest checked exception allowed, and to annotate
			the new exception with the original exception using the initial cause field.</p>Z
CODE_SMELL
≈
'fb-contrib:JPAI_INEFFICIENT_EAGER_FETCHô

fb-contribJPAI_INEFFICIENT_EAGER_FETCH5Correctness - OneToMany join specifies 1+n EAGER join"MAJOR*java2JPAI_INEFFICIENT_EAGER_FETCH:Ö<p>This JPA entity specifies a @OneToMany join with a fetch type of EAGER. By default EAGER joins perform
    	select operations on each element returned from the original query in sequence, thus producing 1 + n queries.
    	If you are going to use EAGER joins, it is wise to specify a Join type by using @Fetch annotations in
    	Hibernate or @JoinFetch/@BatchFetch annotations (or hints) in EclipseLink, for example. Even so, these
    	annotations may only apply in limited cases, such as in the use of find.</p>ZBUG
Û
$fb-contrib:MDM_STRING_BYTES_ENCODING 

fb-contribMDM_STRING_BYTES_ENCODINGSCorrectness - Method encodes String bytes without specifying the character encoding"MAJOR*java2MDM_STRING_BYTES_ENCODING:û<p>The behavior of the <code>String(byte[] bytes)</code> and <code>String.getBytes()</code> is undefined if the string cannot be encoded in the platform's default charset. Instead, use the <code>String(byte[] bytes, String encoding)</code> or <code>String.getBytes(String encoding)</code> constructor which accepts the string's encoding as an argument. Be sure to specify the encoding used for the user's locale.</p>

			<p>As per the Java specifications, "UTF-8", "US-ASCII", "UTF-16" and "ISO-8859-1" will all be valid <a href = "http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#standard">encoding charsets</a>.  If you aren't sure, try "UTF-8".</p>

			<p><b>New in Java 1.7</b>, you can specify an encoding from <code>StandardCharsets</code>, like <code>StandardCharsets.UTF_8</code>.  These are generally preferrable because you don't have to deal with <code>UnsupportedEncodingException</code>.</p>ZBUG
‰
/fb-contrib:CEBE_COMMONS_EQUALS_BUILDER_ISEQUALS∞

fb-contrib$CEBE_COMMONS_EQUALS_BUILDER_ISEQUALSMCorrectness - Method returns the result of invoking equals() on EqualsBuilder"MAJOR*java2$CEBE_COMMONS_EQUALS_BUILDER_ISEQUALS:u<p>This method returns the result of equals on the EqualsBuilder type
			instead of calling the method isEqual().</p>ZBUG
É
1fb-contrib:EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTSÕ

fb-contrib&EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTSDStyle - Unconstrained method converts checked exception to unchecked"INFO*java2&EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS:ê<p>This method is not constrained by an interface or superclass, but converts a caught checked exception
			to unchecked exception and thrown. It would be more appropriate just to throw the checked exception, adding
			the exception to the throws clause of the method.</p>Z
CODE_SMELL
‹
8fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULLü

fb-contrib-UTAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULLKCorrectness - JUnit test method asserts that an autoboxed value is not null"CRITICAL*java2-UTAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULL:–<p>This method asserts that a primitive value that was autoboxed into a boxed primitive was not
			null. This will never happen, as primitives are never null, and thus the autoboxed value isn't
			either.</p>ZBUG
Œ
&fb-contrib:ABC_ARRAY_BASED_COLLECTIONS£

fb-contribABC_ARRAY_BASED_COLLECTIONS6Correctness - Method uses array as basis of collection"MAJOR*java2ABC_ARRAY_BASED_COLLECTIONS:ê<p>This method passes an array as the key to a Map, element in a Set, or item in a List when
			the contains method is used on the List. Since arrays do not and cannot override the equals
			method, collection inclusion is based on the reference's address, which is probably not desired.
			In the case that this is a TreeMap or TreeSet, consider passing a Comparator to the map's
			constructor.</p>ZBUG
Ï
+fb-contrib:IMC_IMMATURE_CLASS_UPPER_PACKAGEº

fb-contrib IMC_IMMATURE_CLASS_UPPER_PACKAGE@Style - Class is defined in a package with upper case characters"INFO*java2 IMC_IMMATURE_CLASS_UPPER_PACKAGE:è<p>This class is defined within a package that uses upper case letters. Package names are
    		expected to be in the form of alllowercase.</p>Z
CODE_SMELL
é
'fb-contrib:STT_TOSTRING_STORED_IN_FIELD‚

fb-contribSTT_TOSTRING_STORED_IN_FIELDFStyle - This method stores the value of a toString() call into a field"INFO*java2STT_TOSTRING_STORED_IN_FIELD:∑<p>This method calls the toString() method on an object and stores the value in a field. Doing this
            throws away the type safety of having the object defined by a Class. Using String makes it very easy to
            use the wrong type of value, and the compiler will not catch these mistakes. You should delay converting
            values to Strings for as long as possible, and thus not store them as fields.
            </p>Z
CODE_SMELL
⁄
.fb-contrib:IKNC_INCONSISTENT_HTTP_PARAM_CASINGß

fb-contrib#IKNC_INCONSISTENT_HTTP_PARAM_CASINGQStyle - Method uses the same HttpRequest parameter name but with different casing"INFO*java2#IKNC_INCONSISTENT_HTTP_PARAM_CASING:„<p>This method fetches an HttpServletRequest parameter with a parameter name that was used in other locations
			but with a different casing. As HttpServletRequest parameters are case-sensitive, this will be very confusing.</p>Z
CODE_SMELL
ö
fb-contrib:LO_STUTTERED_MESSAGEˆ

fb-contribLO_STUTTERED_MESSAGE3Style - Method stutters exception message in logger"INFO*java2LO_STUTTERED_MESSAGE:Ó<p>This method uses a logger method that takes an exception, and passes the result of
			the getMessage() method on the exception that occurred as the log message.
			Since you are already passing in the exception, that message is already present in the
			logs, and by passing it in as the message, you are just stuttering information.
			It would be more helpful to provide a hand written message that describes the error in
			this method, possibly including the values of key variables.</p>Z
CODE_SMELL
ú
/fb-contrib:EXS_EXCEPTION_SOFTENING_RETURN_FALSEË

fb-contrib$EXS_EXCEPTION_SOFTENING_RETURN_FALSEFStyle - method converts an exception into a boolean 'error code' value"INFO*java2$EXS_EXCEPTION_SOFTENING_RETURN_FALSE:≠<p>This method catches an exception and returns a boolean that represents whether an exception occurred or not.
	       This throws away the value of exception handling and lets code ignore the resultant 'error code' return value.
	       You should just throw the exception to the caller instead.</p>Z
CODE_SMELL
≤
"fb-contrib:SPP_NON_USEFUL_TOSTRINGã

fb-contribSPP_NON_USEFUL_TOSTRING[Style - Method calls toString() on an instance of a class that hasn't overridden toString()"INFO*java2SPP_NON_USEFUL_TOSTRING:’<p>This method calls toString() on an object that hasn't overridden the toString() method, and thus relies on
	       the version found in java.lang.Object. This string is just a raw display of the object's class and location, and
	       provides no information about the information of use. You should implement toString in this class.</p>Z
CODE_SMELL
Ê
$fb-contrib:COM_PARENT_DELEGATED_CALLΩ

fb-contribCOM_PARENT_DELEGATED_CALL;Style - Method merely delegates to its superclass's version"INFO*java2COM_PARENT_DELEGATED_CALL:£<p>This method is implemented to just delegate its implementation by calling
			the superclass method with the same signature. This method can just be removed.</p>Z
CODE_SMELL
…
0fb-contrib:JPAI_TRANSACTION_ON_NON_PUBLIC_METHODî

fb-contrib%JPAI_TRANSACTION_ON_NON_PUBLIC_METHODTCorrectness - Method has a Spring @Transactional annotation on it, but is non-public"MAJOR*java2%JPAI_TRANSACTION_ON_NON_PUBLIC_METHOD:œ<p>This method specifies a Spring @Transactional annotation but the method is defined as being non-public.
    		Spring only creates transactional boundaries on methods that are public, and so this annotation is not doing
    		anything for this method. Make the method public, or place the annotation on a more appropriate method.</p>ZBUG
Ç
$fb-contrib:NAB_NEEDLESS_BOX_TO_UNBOXŸ

fb-contribNAB_NEEDLESS_BOX_TO_UNBOXWPerformance - Method creates Boxed primitive from primitive only to get primitive value"MAJOR*java2NAB_NEEDLESS_BOX_TO_UNBOX:©<p>This method constructs a Boxed Primitive from a primitive only to call the primitiveValue() method to
			convert it back to a primitive. Just use the primitive value instead.</p>
			<p>Instead of something like:<br/>
<pre><code>
boolean bo = new Boolean(true).booleanValue();
float f = new Float(1.234f).floatValue();
</code></pre>
			Simply do: <br/>
<pre><code>
boolean bo = true;
float f = 1.234f;
</code></pre>
			</p>ZBUG
ˇ
fb-contrib:LO_SUSPECT_LOG_CLASS€

fb-contribLO_SUSPECT_LOG_CLASSJCorrectness - Method specifies an unrelated class when allocating a Logger"MAJOR*java2LO_SUSPECT_LOG_CLASS:¬<p>This method creates a Logger by passing in a specification for a class that is unrelated
			to the class in which the logger is going to be used. This is likely caused by copy/paste code.</p>ZBUG
Ï
*fb-contrib:PMB_INSTANCE_BASED_THREAD_LOCALΩ

fb-contribPMB_INSTANCE_BASED_THREAD_LOCAL=Correctness - Field is an instance based ThreadLocal variable"MAJOR*java2PMB_INSTANCE_BASED_THREAD_LOCAL:õ<p>This ThreadLocal field is defined as being instance based (not static). As all 
	       ThreadLocal variables describe permanent reachability roots so far as the garbage
	       collector is concerned, these variables will never be reclaimed (so long as the Thread lives).
	       Since this ThreadLocal is instanced, you potentially will be creating many non reclaimable 
	       variables, even after the owning instance has been reclaimed. It is almost a certainty that
	       you want to use static based ThreadLocal variables.</p>ZBUG
ñ
%fb-contrib:STT_STRING_PARSING_A_FIELDÏ

fb-contribSTT_STRING_PARSING_A_FIELD3Style - This method parses a String that is a field"INFO*java2STT_STRING_PARSING_A_FIELD:ÿ<p>This method calls a parsing method (indexOf, lastIndexOf, startsWith, endsWith, substring, indexOf) on a String
            that is a field, or comes from a collection that is a field. This implies that the String in question is holding 
            multiple parts of information inside the string, which would be more maintainable and type safe if that value was a
            true collection or a first class object with fields, rather than a String.
            </p>Z
CODE_SMELL
È
#fb-contrib:MDM_RUNTIME_EXIT_OR_HALT¡

fb-contribMDM_RUNTIME_EXIT_OR_HALT;Correctness - Method calls Runtime.exit() or Runtime.halt()"MAJOR*java2MDM_RUNTIME_EXIT_OR_HALT:Ø<p>Calling <code>Runtime.exit()</code> or <code>Runtime.halt()</code> shuts down the entire Java virtual machine.
			This should only be done in very rare circumstances. Such calls make it hard or impossible for your code to be
			invoked by other code. Consider throwing a RuntimeException instead.</p>ZBUG
Ç
9fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_ACTUAL_CONSTANTƒ

fb-contrib.UTAO_TESTNG_ASSERTION_ODDITIES_ACTUAL_CONSTANTPStyle - TestNG test method passes constant to first (actual) assertion parameter"INFO*java2.UTAO_TESTNG_ASSERTION_ODDITIES_ACTUAL_CONSTANT:Î<p>This method calls assert passing a constant value as the first of the two values. The assert
			method assumes that the expected value is the second parameter, and so it appears that the order
			of values has been swapped here.</p>Z
CODE_SMELL
∏
)fb-contrib:BSB_BLOATED_SYNCHRONIZED_BLOCKä

fb-contribBSB_BLOATED_SYNCHRONIZED_BLOCK8Performance - Method overly synchronizes a block of code"MAJOR*java2BSB_BLOATED_SYNCHRONIZED_BLOCK:Ô<p>This method implements a synchronized block, but the code found at the beginning
			of this block only accesses local variables, and not member variables, or this.
			For better performance, move the code that accesses local variables only, above the
			synchronized block, and leave the synchronized block only for field accesses, or access
			to this object.</p>ZBUG
á
1fb-contrib:SMII_STATIC_METHOD_INSTANCE_INVOCATION—

fb-contrib&SMII_STATIC_METHOD_INSTANCE_INVOCATION8Style - Method calls static method on instance reference"INFO*java2&SMII_STATIC_METHOD_INSTANCE_INVOCATION:†<p>This method makes a static method call on an instance reference. For
			reading comprehension of the code is better to call the method on the class,
			rather than an instance. Perhaps this method's static nature has changed since
			this code was written, and should be revisited.</p>Z
CODE_SMELL
¡
:fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_EQUALSÇ

fb-contrib/UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_EQUALScCorrectness - JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue"MAJOR*java2/UTAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_EQUALS:ö<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.
			It is better to pass the two values that are being equated to the Assert.assertEquals method so that the
			JUnit failure method is more descriptive of the intended test.</p>ZBUG
≥	
!fb-contrib:ISB_TOSTRING_APPENDINGç	

fb-contribISB_TOSTRING_APPENDINGACorrectness - Method concatenates the result of a toString() call"MAJOR*java2ISB_TOSTRING_APPENDING:˘<p>This method concatenates the output of a <code>toString()</code> call into a <code>StringBuffer</code> or <code>StringBuilder</code>.
			It is simpler just to pass the object you want to append to the append call, as that form
			does not suffer the potential for <code>NullPointerException</code>s, and is easier to read.</p>
			
			<p>
			Keep in mind that Java compiles simple <code>String</code> concatenation to use <code>StringBuilder</code>s, 
			so you may see this bug even when you don't use <code>StringBuilder</code>s explicitly.
			</p>
			
			<p>
			Instead of: <br/>
<pre><code>
StringBuilder builder = ...;
builder.append(someObj.toString());
...
System.out.println("Problem with the object :" + someObj.toString());
</code></pre>

just do: <br/>

<pre><code>
StringBuilder builder = ...
builder.append(someObj);
...
System.out.println("Problem with the object :" + someObj);
</code></pre>
			to avoid the possibility of <code>NullPointerException</code>s when someObj is <code>null</code>.
			</p>ZBUG
Ï
3fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_NO_ASSERT¥

fb-contrib(UTAO_TESTNG_ASSERTION_ODDITIES_NO_ASSERT>Correctness - TestNG test method appears to have no assertions"MAJOR*java2(UTAO_TESTNG_ASSERTION_ODDITIES_NO_ASSERT:ˇ<p>This TestNG test method has no assertions. While a unit test could still be valid if it relies on whether
			or not an exception is thrown, it is usually a sign of a weak test if there are no assertions. It is also
			possible that assertions occur in a called method that is not seen by this detector, but this makes the logic of 
			this test more difficult to reason about.</p>ZBUG
ö
3fb-contrib:PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS‚

fb-contrib(PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS8Correctness - Constructor makes call to non-final method"MAJOR*java2(PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS:≥<p>This constructor makes a call to a non-final method. Since this method can be overridden, a subclasses
			implementation will be executing against an object that has not been initialized at the subclass level.
			You should mark all methods called from the constructor as final to avoid this problem.</p>ZBUG
ù
&fb-contrib:SEC_SIDE_EFFECT_CONSTRUCTORÚ

fb-contribSEC_SIDE_EFFECT_CONSTRUCTOR-Style - Method uses a Side Effect Constructor"INFO*java2SEC_SIDE_EFFECT_CONSTRUCTOR:‚<p>This method creates an object but does not assign this object to any variable or field.
			This implies that the class operates through side effects in the constructor, which is a
			bad pattern to use, as it adds unnecessary coupling. Consider pulling the side effect out of
			the constructor, into a separate method, or into the calling method.</p>Z
CODE_SMELL
˙
*fb-contrib:SNG_SUSPICIOUS_NULL_LOCAL_GUARDÀ

fb-contribSNG_SUSPICIOUS_NULL_LOCAL_GUARDRCorrectness - Method tests a local variable for not null as guard and reassigns it"MAJOR*java2SNG_SUSPICIOUS_NULL_LOCAL_GUARD:î<p>This method tests a local variable to make sure it's not null before executing a conditional block of
			code. However, in the conditional block it reassigns the local variable. It is likely that the guard
			should have been a check to see if the local variable is null, not that the local variable was not null.</p>
			<p>example:
<pre><code>
if (name != null) {
    name = person.getName();
}
</code></pre>
			It is possible this is correct, but it seems likely the guard was meant to be <code>if (name == null)</code>
			</p>ZBUG
Å
(fb-contrib:LGO_LINGERING_GRAPHICS_OBJECT‘

fb-contribLGO_LINGERING_GRAPHICS_OBJECTPPerformance - Method allocations a java.awt.Graphics object without disposing it"MAJOR*java2LGO_LINGERING_GRAPHICS_OBJECT:£<p>This method allocates a java.awt.Graphics object but doesn't dispose of it when done. While
			the garbage collector will clean this up, given that a large number of Graphics objects can be
			created in a short period of time, it is recommended that you explicitly dispose() of them.</p>ZBUG
ˆ
.fb-contrib:LO_APPENDED_STRING_IN_FORMAT_STRING√

fb-contrib#LO_APPENDED_STRING_IN_FORMAT_STRINGJPerformance - Method passes a concatenated string to SLF4J's format string"MAJOR*java2#LO_APPENDED_STRING_IN_FORMAT_STRING:å<p>This method uses an SLF4J logger to log a string, where the first (format) string is created using concatenation.
	       You should use {} markers to inject dynamic content into the string, so that String building is delayed until the
	       actual log string is needed. If the log level is high enough that this log statement isn't used, then the appends
	       will never be executed.</p>ZBUG
°
fb-contrib:CBX_CUSTOM_BUILT_XML˝

fb-contribCBX_CUSTOM_BUILT_XML>Style - Method builds XML strings through ad hoc concatenation"INFO*java2CBX_CUSTOM_BUILT_XML:Í<p>This method generates an XML based string by concatenating together various
			XML fragments, and variable values. Doing so makes the code difficult to read, modify
			and validate. It is much more clean to build XML structures in external files that are
			read in and transformed into the final product, through modification by Transformer.setParameter.</p>Z
CODE_SMELL
Û
fb-contrib:MDM_RUNFINALIZATION–

fb-contribMDM_RUNFINALIZATION*Correctness - Method triggers finalization"MAJOR*java2MDM_RUNFINALIZATION:Ÿ<p>Manually triggering finalization can result in serious performance problems and may be masking resource cleanup bugs. 
			Only the garbage collector, not application code, should be concerned with finalization.</p>ZBUG
ò
(fb-contrib:MOM_MISLEADING_OVERLOAD_MODELÎ

fb-contribMOM_MISLEADING_OVERLOAD_MODELIStyle - Class 'overloads' a method with both instance and static versions"INFO*java2MOM_MISLEADING_OVERLOAD_MODEL:ª<p>This class 'overloads' the same method with both an instance and static version. As the use
			of these two models is different, it will be confusing to the users of these methods.</p>Z
CODE_SMELL
ù
fb-contrib:FP_FINAL_PARAMETERS˙

fb-contribFP_FINAL_PARAMETERS>Style - Method does not define a parameter as final, but could"INFO*java2FP_FINAL_PARAMETERS:È<p>This method does not write to a parameter. To help document this, and to perhaps
			help the JVM optimize the invocation of this method, you should consider defining these parameters
			as final.</p>
			
			<p>Performance gains are debatable as "the final keyword does not appear in the class file for 
			local variables and parameters, thus it cannot impact the runtime performance. Its only use 
			is to clarify the coders intent that the variable not be changed (which many consider dubious 
			reason for its usage), and dealing with anonymous inner classes." - http://stackoverflow.com/a/266981/1447621 </p>Z
CODE_SMELL
Î
-fb-contrib:SPP_STRINGBUFFER_WITH_EMPTY_STRINGπ

fb-contrib"SPP_STRINGBUFFER_WITH_EMPTY_STRINGXPerformance - Method passes an empty string to StringBuffer of StringBuilder constructor"MAJOR*java2"SPP_STRINGBUFFER_WITH_EMPTY_STRING:ˆ<p>This method calls the StringBuffer or StringBuilder constructor passing in a constant empty string ("").
			This is the same as calling the default constructor, but makes the code work harder. Consider passing in a
			default size instead.</p>ZBUG
Ó
.fb-contrib:CAO_CONFUSING_AUTOBOXED_OVERLOADINGª

fb-contrib#CAO_CONFUSING_AUTOBOXED_OVERLOADINGOCorrectness - Class defines methods which confuse Character with int parameters"MAJOR*java2#CAO_CONFUSING_AUTOBOXED_OVERLOADING:ˇ<p>This class defines two methods that differ only by a parameter being defined
			as Character vs. int, long, float or double. As autoboxing is present, it may be
			assumed that a parameter of 'a' would map to the Character version, but it does not.</p>ZBUG
Û
<fb-contrib:LO_EMBEDDED_SIMPLE_STRING_FORMAT_IN_FORMAT_STRING≤

fb-contrib1LO_EMBEDDED_SIMPLE_STRING_FORMAT_IN_FORMAT_STRINGUCorrectness - Method passes a simple String.format result to an SLF4J's format string"MAJOR*java21LO_EMBEDDED_SIMPLE_STRING_FORMAT_IN_FORMAT_STRING:‘<p>This method uses an SLF4J logger to log a string, which was produced through a call to String.format, where
	       the format string passed was a constant string containing only simple format markers that could be directly handled
	       by slf4j. Rather than doing
	       <pre>
	          logger.error("String.format("This %s is an error", s));
	       <pre>
	       do
	       <pre>
	          logger.error(This {} is an error", s);
	       </pre>
	       </p>ZBUG
À	
3fb-contrib:NAB_NEEDLESS_BOOLEAN_CONSTANT_CONVERSIONì	

fb-contrib(NAB_NEEDLESS_BOOLEAN_CONSTANT_CONVERSION8Performance - Method needlessly boxes a boolean constant"MAJOR*java2(NAB_NEEDLESS_BOOLEAN_CONSTANT_CONVERSION:‰<p>This method assigns a Boxed boolean constant to a primitive boolean variable, or assigns a primitive boolean
			constant to a Boxed boolean variable. Use the correct constant for the variable desired. Use <br/>
<pre><code>
boolean b = true;
boolean b = false;
</code></pre>
			or <br/>
<pre><code>
Boolean b = Boolean.TRUE;
Boolean b = Boolean.FALSE;
</code></pre>
			</p>
			
			<p>Be aware that this boxing happens automatically when you might not expect it.  For example, <br/>
<pre><code>
Map<String, Boolean> statusMap = ...

public Boolean someMethod() {
    statusMap.put("foo", true);  //the "true" here is boxed
    return false;  //the "false" here is boxed
}
</code></pre>
			has two cases of this needless autoboxing.  This can be made more efficient by simply substituting 
			in the constant values: <br/>
			
<pre><code>
Map<String, Boolean> statusMap = ...

public Boolean someMethod() {
    statusMap.put("foo", Boolean.TRUE);
    return Boolean.FALSE;
}
</code></pre>
			</p>ZBUG
∑
/fb-contrib:IMC_IMMATURE_CLASS_WRONG_FIELD_ORDERÉ

fb-contrib$IMC_IMMATURE_CLASS_WRONG_FIELD_ORDER9Style - Class orders instance fields before static fields"INFO*java2$IMC_IMMATURE_CLASS_WRONG_FIELD_ORDER:’<p>This class adds fields to the class in an order that is confusing, and not expected by 
    		other developers. The standard is for static fields to be listed first, followed by instance 
    		fields. when fields are listed out of order, developers may make assumptions about their
    		behaviour that is incorrect and lead to bugs.</p>Z
CODE_SMELL
À
6fb-contrib:OI_OPTIONAL_ISSUES_USES_IMMEDIATE_EXECUTIONê

fb-contrib+OI_OPTIONAL_ISSUES_USES_IMMEDIATE_EXECUTIONWCorrectness - Method uses immediate execution of a block of code that is often not used"MAJOR*java2+OI_OPTIONAL_ISSUES_USES_IMMEDIATE_EXECUTION:º<p>This method uses the Optional.orElse() method passing in some code that will execute immediately, whether 
    		or not the else case of the Optional is needed. This may cause incorrect side effects to happen, or at the 
    		minimum, code to execute for no reason. It would be better to use Optional.orElseGet()ZBUG
˘
#fb-contrib:NAB_NEEDLESS_BOX_TO_CAST—

fb-contribNAB_NEEDLESS_BOX_TO_CASTbPerformance - Method creates Boxed primitive from primitive only to cast to another primitive type"MAJOR*java2NAB_NEEDLESS_BOX_TO_CAST:ò<p>This method constructs a Boxed Primitive from a primitive only to call the primitiveValue() method to
			cast the value to another primitive type. It is simpler to just use casting.</p>
			<p>Instead of something like:<br/>
<pre><code>
double someDouble = ...
float f = new Double(someDouble).floatValue();

int someInt = ...
byte b = new Integer(someInt).byteValue();
</code></pre>
			Simply do: <br/>
<pre><code>
double someDouble = ...
float f = (float) someDouble;

int someInt = ...
byte b = (byte)someInt;
</code></pre>
			</p>ZBUG
È
5fb-contrib:UTAO_TESTNG_ASSERTION_ODDITIES_ASSERT_USEDØ

fb-contrib*UTAO_TESTNG_ASSERTION_ODDITIES_ASSERT_USEDQCorrectness - TestNG test method uses Java asserts rather than a TestNG assertion"MAJOR*java2*UTAO_TESTNG_ASSERTION_ODDITIES_ASSERT_USED:„<p>This method uses a Java assert to assure that a certain state is in effect. As this is
			a TestNG test it makes more sense to either check this condition with a TestNG assert, or allow
			a following exception to occur.</p>ZBUG
ˆ
*fb-contrib:WOC_WRITE_ONLY_COLLECTION_FIELD«

fb-contribWOC_WRITE_ONLY_COLLECTION_FIELDeCorrectness - Class creates and initializes a collection but never reads or gains information from it"MAJOR*java2WOC_WRITE_ONLY_COLLECTION_FIELD:˝<p>This class creates and initializes a collection as a field but then never access this collection
			to gain information, or fetch items from the collection. It is likely that this collection
			is left over from a past effort, and can be removed.</p>ZBUG
å
"fb-contrib:CLI_CONSTANT_LIST_INDEXÂ

fb-contribCLI_CONSTANT_LIST_INDEX?Correctness - Method accesses list or array with constant index"MAJOR*java2CLI_CONSTANT_LIST_INDEX:—<p>This method accesses an array or list using a constant integer index. Often,
			this is a typo where a loop variable is intended to be used. If however, specific
			list indices mean different specific things, then perhaps replacing the list with
			a first-class object with meaningful accessors would make the code less brittle.</p>ZBUG
¥
-fb-contrib:IMC_IMMATURE_CLASS_PRINTSTACKTRACEÇ

fb-contrib"IMC_IMMATURE_CLASS_PRINTSTACKTRACE4Style - Method prints the stack trace to the console"INFO*java2"IMC_IMMATURE_CLASS_PRINTSTACKTRACE:›<p>This method prints a stack trace to the console. This is non configurable, and causes an 
    		application to look unprofessional. Switch to using loggers so that users can control what 
    		is logged and where.</p>Z
CODE_SMELL
ë
"fb-contrib:PSC_PRESIZE_COLLECTIONSÍ

fb-contribPSC_PRESIZE_COLLECTIONSDPerformance - Method does not presize the allocation of a collection"MAJOR*java2PSC_PRESIZE_COLLECTIONS:—<p>This method allocates a collection using the default constructor even though it is known
			a priori how many items are going to be placed in the collection (or at least can be reasonably guessed)
			and thus needlessly causes intermediate reallocations of the collection.</p>
			<p>You can use the constructor that takes an initial size and that will be much better, but
			due to the loadFactor of Maps and Sets, even this will not be a correct estimate.</p>
			<p>If you are using Guava, use its methods that allocate maps and sets with a predetermined size,
			to get the best chance for no reallocations, such as:
			<ul>
			    <li>Sets.newHashSetWithExpectedSize(int)</li>
			    <li>Maps.newHashMapWithExpectedSize(int)</li>
			</ul>
			If not, a good estimate would be the expectedSize / {LOADING_FACTOR} which by default is 0.75
			</p>ZBUG
‹
2fb-contrib:IKNC_INCONSISTENT_HTTP_ATTRIBUTE_CASING•

fb-contrib'IKNC_INCONSISTENT_HTTP_ATTRIBUTE_CASINGQStyle - Method uses the same HttpSession attribute name but with different casing"INFO*java2'IKNC_INCONSISTENT_HTTP_ATTRIBUTE_CASING:Ÿ<p>This method sets or gets an HttpSession attribute with a parameter name that was used in other locations
			but with a different casing. As HttpSession attribute are case-sensitive, this will be very confusing.</p>Z
CODE_SMELL
≤
9fb-contrib:UTAO_JUNIT_ASSERTION_ODDITIES_USING_DEPRECATEDÙ

fb-contrib.UTAO_JUNIT_ASSERTION_ODDITIES_USING_DEPRECATEDECorrectness - JUnit 4 test using deprecated junit.framework.* classes"MAJOR*java2.UTAO_JUNIT_ASSERTION_ODDITIES_USING_DEPRECATED:¨<p>This JUnit 4 test is still using classes from the junit.framework.* package. You should switch them
			over to the corresponding org.junit.* set of classes, instead.</p>ZBUG
å
pmd:PackageCase¯
pmdPackageCasePackage case"MAJOR*java2$rulesets/java/naming.xml/PackageCase:ñDetects when a package definition contains upper case characters. Example :
<pre>
package com.MyCompany;  // <- should be lower case name
public class SomeClass {
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00120'>S00120</a> instead.
</p>Z
CODE_SMELL
„
$pmd:AvoidFieldNameMatchingMethodName∫
pmd AvoidFieldNameMatchingMethodName.Naming - Avoid field name matching method name"MAJOR*java29rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName:åIt is somewhat confusing to have a field name with the same name as a method. While this is totally legal, having information (field) and actions (method) is not clear naming. Example :
<pre>
public class Foo {
  Object bar;
  // bar is data or an action or both?
  void bar() {
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1845'>S1845</a> instead.
</p>Z
CODE_SMELL
‡
$pmd:FinalizeDoesNotCallSuperFinalize∑
pmd FinalizeDoesNotCallSuperFinalize%Finalize Does Not Call Super Finalize"MAJOR*java2=rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize:éIf the finalize() is implemented, its last action should be to call super.finalize.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AObjectFinalizeOverridenCallsSuperFinalizeCheck'>ObjectFinalizeOverridenCallsSuperFinalizeCheck</a> instead.
</p>Z
CODE_SMELL
÷
pmd:OneDeclarationPerLine∏
pmdOneDeclarationPerLineOne Declaration Per Line"MAJOR*java25rulesets/java/controversial.xml/OneDeclarationPerLine:ØJava allows the use of several variables declaration of the same type on one line. However, it
can lead to quite messy code. This rule looks for several declarations on the same line. Example: 
<pre>
String name; // separate declarations
String lastname;

String name, lastname; // combined declaration, a violation
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00122'>S00122</a> instead.
</p>Z
CODE_SMELL
ı
pmd:CloseResourceﬂ
pmdCloseResourceClose Resource"CRITICAL*java2&rulesets/java/design.xml/CloseResource:˚Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use. It does this by looking for code patterned like :
<pre>
Connection c = openConnection();
try {
  // do stuff, and maybe catch something
} finally {
  c.close();
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2095'>S2095</a> instead.
</p>ZBUG
∑
pmd:ExcessivePublicCountö
pmdExcessivePublicCountExcessive Public Count"MAJOR*java2/rulesets/java/codesize.xml/ExcessivePublicCount:öA large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1448'>S1448</a> instead.
</p>Z
CODE_SMELL
Ä
pmd:AvoidReassigningParameters›
pmdAvoidReassigningParametersAvoid Reassigning Parameters"MAJOR*java23rulesets/java/design.xml/AvoidReassigningParameters:ÕReassigning values to parameters is a questionable practice. Use a temporary local variable instead.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1226'>S1226</a> instead.
</p>Z
CODE_SMELL
∆
pmd:IfStmtsMustUseBraces©
pmdIfStmtsMustUseBracesIf Stmts Must Use Braces"MAJOR*java2-rulesets/java/braces.xml/IfStmtsMustUseBraces:©<p>
Avoid using if statements without using curly braces.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.
</p>Z
CODE_SMELL
ª
pmd:EqualsNull®
pmd
EqualsNullEquals Null"CRITICAL*java2#rulesets/java/design.xml/EqualsNull:ÕInexperienced programmers sometimes confuse comparison concepts and use equals() to compare to null.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2159'>S2159</a> instead.
</p>ZBUG
Î
pmd:UseArrayListInsteadOfVector«
pmdUseArrayListInsteadOfVector Use Array List Instead Of Vector"MAJOR*java2;rulesets/java/optimizations.xml/UseArrayListInsteadOfVector:™ArrayList is a much better Collection implementation than Vector.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.
</p>Z
CODE_SMELL
…
!pmd:UnnecessaryFullyQualifiedName£
pmdUnnecessaryFullyQualifiedName Unnecessary Fully Qualified Name"MAJOR*java27rulesets/java/imports.xml/UnnecessaryFullyQualifiedName:àImport statements allow the use of non-fully qualified names.  The use of a fully qualified name
which is covered by an import statement is redundant.  Consider using the non-fully qualified name. Example: 
<pre>
import java.util.List;

public class Foo {
   private java.util.List list1; // Unnecessary FQN
   private List list2; // More appropriate given import of 'java.util.List'
}
</pre>Z
CODE_SMELL
—
 pmd:UnnecessaryLocalBeforeReturn¨
pmdUnnecessaryLocalBeforeReturnUnnecessary Local Before Return"MAJOR*java25rulesets/java/design.xml/UnnecessaryLocalBeforeReturn:ïAvoid unnecessarily creating local variables

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1488'>S1488</a> instead.
</p>Z
CODE_SMELL
á
)pmd:CloneThrowsCloneNotSupportedExceptionŸ
pmd%CloneThrowsCloneNotSupportedException*Clone Throws Clone Not Supported Exception"MAJOR*java2=rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException:¶The method clone() should throw a CloneNotSupportedException.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.
</p>Z
CODE_SMELL
Ë
pmd:EmptyStatementBlockÃ
pmdEmptyStatementBlockEmpty Statement Block"MAJOR*java2+rulesets/java/empty.xml/EmptyStatementBlock:“Empty block statements serve no purpose and should be removed. Example: 
<pre>
public class Foo {

   private int _bar;

   public void setBar(int bar) {
      { _bar = bar; } // Why not?
      {} // But remove this.
   }

}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
‘
pmd:TooManyStaticImports∑
pmdTooManyStaticImportsToo Many Static Imports"MAJOR*java2.rulesets/java/imports.xml/TooManyStaticImports:∑If you overuse the static import feature, it can make your program unreadable and  unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).Z
CODE_SMELL
≈
pmd:AvoidEnumAsIdentifierß
pmdAvoidEnumAsIdentifierAvoid Enum As Identifier"MAJOR*java21rulesets/java/migrating.xml/AvoidEnumAsIdentifier:¢Finds all places 'enum' is used as an identifier is used.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1190'>S1190</a> instead.
</p>Z
CODE_SMELL
›
pmd:CompareObjectsWithEqualsº
pmdCompareObjectsWithEqualsCompare Objects With Equals"MAJOR*java21rulesets/java/design.xml/CompareObjectsWithEquals:±Use equals() to compare object references; avoid comparing them with ==.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1698'>S1698</a> instead.
</p>Z
CODE_SMELL
¬
pmd:EmptySynchronizedBlock£
pmdEmptySynchronizedBlockEmpty Synchronized Block"CRITICAL*java2.rulesets/java/empty.xml/EmptySynchronizedBlock:ùAvoid empty synchronized blocks - they're useless.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
±
!pmd:ConsecutiveAppendsShouldReuseã
pmdConsecutiveAppendsShouldReuse Consecutive Appends Should Reuse"MAJOR*java27rulesets/java/strings.xml/ConsecutiveAppendsShouldReuse:Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance. Example: 
<pre>
String foo = " ";

StringBuffer buf = new StringBuffer();
buf.append("Hello"); // poor
buf.append(foo);
buf.append("World");

StringBuffer buf = new StringBuffer();
buf.append("Hello").append(foo).append("World"); // good
</pre>Z
CODE_SMELL
‡
pmd:UseArraysAsList»
pmdUseArraysAsListUse Arrays As List"MAJOR*java2/rulesets/java/optimizations.xml/UseArraysAsList:—The class java.util.Arrays has a asList method that should be use when you want to create a new List from an array of objects. It is faster than executing a loop to cpy all the elements of the array one by oneZ
CODE_SMELL
Õ
+pmd:CloneMethodReturnTypeMustMatchClassNameù
pmd'CloneMethodReturnTypeMustMatchClassName\If a class implements Cloneable the return type of the method clone() must be the class name"MAJOR*java2?rulesets/java/clone.xml/CloneMethodReturnTypeMustMatchClassName:¥<p>Minimum Language Version: java 1.5</p>
<p>
  If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller of the clone method doesn‚Äôt need to cast the returned clone to the correct type.
</p>
<p>
  Note: This is only possible with Java 1.5 or higher.
</p>

<p>Examples:</p>
<pre>
public class Foo implements Cloneable {
    @Override
    protected Object clone() { // Violation, Object must be Foo
    }
}

public class Foo implements Cloneable {
    @Override
    public Foo clone() { //Ok
    }
}
</pre>Z
CODE_SMELL
ô
pmd:AvoidConstantsInterface˘
pmdAvoidConstantsInterfaceAvoid Constants Interface"MAJOR*java20rulesets/java/design.xml/AvoidConstantsInterface:ÚAn interface should be used only to model a behaviour of a class: using an interface as a container of constants is a poor usage pattern.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1214'>S1214</a> instead.
</p>Z
CODE_SMELL
˛
pmd:AvoidRethrowingException›
pmdAvoidRethrowingExceptionAvoid Rethrowing Exception"MAJOR*java2:rulesets/java/strictexception.xml/AvoidRethrowingException: Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.
</p>Z
CODE_SMELL
Î
pmd:UnusedFormalParameterÕ
pmdUnusedFormalParameterUnused formal parameter"MAJOR*java22rulesets/java/unusedcode.xml/UnusedFormalParameter:»<p>Avoid passing parameters to methods or constructors and then not using those parameters.</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1172'>S1172</a> instead.
</p>Z
CODE_SMELL
ß
pmd:AvoidDuplicateLiteralsà
pmdAvoidDuplicateLiteralsAvoid Duplicate Literals"MAJOR*java20rulesets/java/strings.xml/AvoidDuplicateLiterals:ÉCode containing duplicate String literals can usually be improved by declaring the String as a constant field. Example :
<pre>
public class Foo {
 private void bar() {
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
    buz("Howdy");
 }
 private void buz(String x) {}
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1192'>S1192</a> instead.
</p>Z
CODE_SMELL
ë
pmd:XPathRuleˇ
pmd	XPathRuleXPath rule template"MAJOR*java2'net.sourceforge.pmd.lang.rule.XPathRule:ìPMD provides a very handy method for creating new rules by writing an XPath query. When the XPath query finds a match, a violation is created.
Let's take a simple example: assume we have a Factory class that must be always declared final.
We'd like to report a violation each time a declaration of Factory is not declared final. Consider the following class:
<pre>
public class a {
  Factory f1;

  void myMethod() {
    Factory f2;
    int a;
  }
}
</pre>
The following expression does the magic we need:
<pre>
//VariableDeclarator
 [../Type/ReferenceType/ClassOrInterfaceType
  [@Image = 'Factory'] and ..[@Final='false']]
</pre>
See the <a href="http://pmd.sourceforge.net/xpathruletutorial.html" target="_blank">XPath rule tutorial</a> for more information.

<p>
This rule is deprecated, please see the documentation on <a href="http://docs.sonarqube.org/x/HQxR" target="_blank">Extending Coding Rules</a>.
</p>@Z
CODE_SMELL
†
pmd:ConfusingTernaryá
pmdConfusingTernaryConfusing Ternary"MAJOR*java2)rulesets/java/design.xml/ConfusingTernary:ñIn an if expression with an else clause, avoid negation in the test. For example, rephrase: if (x != y) diff(); else same(); as: if (x == y) same(); else diff(); Most if (x != y) cases without an else are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as does the error case go first? or does the common case go first?.Z
CODE_SMELL
ß
pmd:EmptySwitchStatementsâ
pmdEmptySwitchStatementsEmpty Switch Statements"MAJOR*java2-rulesets/java/empty.xml/EmptySwitchStatements:âAvoid empty switch statements.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
î
pmd:CommentRequired¸
pmdCommentRequiredComment Required"MINOR*java2*rulesets/java/comments.xml/CommentRequired:åDenotes whether comments are required (or unwanted) for specific language elements. Example: 
<pre>
/**
* 
*
* @author George Bush
*/
</pre>Z
CODE_SMELL
⁄
'pmd:InsufficientStringBufferDeclarationÆ
pmd#InsufficientStringBufferDeclaration&Insufficient String Buffer Declaration"MAJOR*java2=rulesets/java/strings.xml/InsufficientStringBufferDeclaration:ÅFailing to pre-size a StringBuffer properly could cause it to re-size many times during runtime. This rule checks the characters that are actually passed into StringBuffer.append(), but represents a best guess worst case scenario. An empty StringBuffer constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.Z
CODE_SMELL
ß
pmd:UncommentedEmptyConstructorÉ
pmdUncommentedEmptyConstructorUncommented Empty Constructor"MAJOR*java24rulesets/java/design.xml/UncommentedEmptyConstructor:Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2094'>S2094</a> instead.
</p>Z
CODE_SMELL
ö
&pmd:AbstractClassWithoutAbstractMethodÔ
pmd"AbstractClassWithoutAbstractMethod&Abstract Class Without Abstract Method"MAJOR*java2;rulesets/java/design.xml/AbstractClassWithoutAbstractMethod:≈The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated direcly) a protected constructor can be provided prevent direct instantiation.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1694'>S1694</a> instead.
</p>Z
CODE_SMELL
¯
pmd:NoPackageÊ
pmd	NoPackage
No package"MAJOR*java2"rulesets/java/naming.xml/NoPackage:äDetects when a class or interface does not have a package definition. Example :
  <pre>
// no package declaration
public class ClassInDefaultPackage {
}
  </pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1220'>S1220</a> instead.
</p>Z
CODE_SMELL
˚
pmd:UnnecessaryFinalModifier⁄
pmdUnnecessaryFinalModifierUnnecessary Final Modifier"INFO*java26rulesets/java/unnecessary.xml/UnnecessaryFinalModifier:MWhen a class has the final modifier, all the methods are automatically final.Z
CODE_SMELL
∞
pmd:CloneMethodMustBePublicê
pmdCloneMethodMustBePublicÑBy convention, classes that implement the Cloneable interface should override Object.clone (which is protected) with a public method"MAJOR*java2/rulesets/java/clone.xml/CloneMethodMustBePublic:û<p>
  The java Manual says ‚ÄúBy convention, classes that implement this interface should override Object.clone (which is protected) with a public method.‚Äù
</p>

<p>Examples:</p>
<pre>
public class Foo implements Cloneable {
  @Override
  protected Object clone() throws CloneNotSupportedException { // Violation, must be public
  }
}

public class Foo implements Cloneable {
  @Override
  protected Foo clone() { // Violation, must be public
  }
}

public class Foo implements Cloneable {
  @Override
  public Object clone() // Ok
}
</pre>Z
CODE_SMELL
å
pmd:UseProperClassLoaderÔ
pmdUseProperClassLoaderUse Proper Class Loader"CRITICAL*java2+rulesets/java/j2ee.xml/UseProperClassLoader:pIn J2EE getClassLoader() might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.Z
CODE_SMELL
á
pmd:DontCallThreadRunÌ
pmdDontCallThreadRunDont Call Thread Run"MAJOR*java2)rulesets/java/basic.xml/DontCallThreadRun:¯Explicitly calling Thread.run() method will execute in the caller's thread of control.  Instead, call Thread.start() for the intended behavior.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1217'>S1217</a> instead.
</p>Z
CODE_SMELL
î
pmd:MisleadingVariableNameı
pmdMisleadingVariableName!Naming - Misleading variable name"MAJOR*java2/rulesets/java/naming.xml/MisleadingVariableName:ËDetects when a non-field has a name starting with 'm_'. This usually indicates a field and thus is confusing. Example :
<pre>
public class Foo {
  private int m_foo; // OK
  public void bar(String m_baz) {  // Bad
    int m_boz = 42; // Bad
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.
</p>Z
CODE_SMELL
≠
pmd:RedundantFieldInitializerã
pmdRedundantFieldInitializerRedundant Field Initializer"MAJOR*java29rulesets/java/optimizations.xml/RedundantFieldInitializer:˜Java will initialize fields with known default values so any explicit initialization of those same defaults
is redundant and results in a larger class file (approximately three additional bytecode instructions per field). Example: 
<pre>
public class C {
  boolean b = false; // examples of redundant initializers
  byte by   = 0;
  short s   = 0;
  char c    = 0;
  int i     = 0;
  long l    = 0;

  float f   = .0f;   // all possible float literals
  doable d  = 0d;    // all possible double literals
  Object o  = null;

  MyClass mca[] = null;
  int i1 = 0, ia1[] = null;

  class Nested {
    boolean b = false;
  }
}
</pre>Z
CODE_SMELL
˘
pmd:ExceptionAsFlowControl⁄
pmdExceptionAsFlowControlException As Flow Control"MAJOR*java28rulesets/java/strictexception.xml/ExceptionAsFlowControl:ÃUsing Exceptions as flow control leads to GOTOish code and obscures true exceptions when debugging.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1141'>S1141</a> instead.
</p>Z
CODE_SMELL
≠
pmd:GodClassú
pmdGodClass	God Class"MAJOR*java2!rulesets/java/design.xml/GodClass:√The God Class rule detects the God Class design flaw using metrics. God classes do too many things,
are very big and overly complex. They should be split apart to be more object-oriented.
The rule uses the detection strategy described in "Object-Oriented Metrics in Practice".
The violations are reported against the entire class. See also the references:
Michele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:
Using Software Metrics to Characterize, Evaluate, and Improve the Design
of Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.Z
CODE_SMELL
«
pmd:MethodNamingConventionsß
pmdMethodNamingConventions"Naming - Method naming conventions"MAJOR*java20rulesets/java/naming.xml/MethodNamingConventions:óMethod names should always begin with a lower case character, and should not contain underscores. Example :
<pre>
public class Foo {
  public void fooStuff() {
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00100'>S00100</a> instead.
</p>Z
CODE_SMELL
›
pmd:BigIntegerInstantiationΩ
pmdBigIntegerInstantiationBig Integer Instantiation"MAJOR*java2/rulesets/java/basic.xml/BigIntegerInstantiation:∑Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for 1.5 on, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)Z
CODE_SMELL
Ë
%pmd:CloneMethodMustImplementCloneableæ
pmd!CloneMethodMustImplementCloneable%Clone method must implement Cloneable"MAJOR*java29rulesets/java/clone.xml/CloneMethodMustImplementCloneable:òThe method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.
</p>Z
CODE_SMELL
≥
pmd:EmptyStaticInitializerî
pmdEmptyStaticInitializerEmpty Static Initializer"MAJOR*java2.rulesets/java/empty.xml/EmptyStaticInitializer:ëAn empty static initializer was found.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
„
pmd:AddEmptyStringÃ
pmdAddEmptyStringAdd Empty String"MAJOR*java2.rulesets/java/optimizations.xml/AddEmptyString:ŸFinds empty string literals which are being added. This is an inefficient way to convert any type to a String.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2131'>S2131</a> instead.
</p>Z
CODE_SMELL
Ü
 pmd:ModifiedCyclomaticComplexity·
pmdModifiedCyclomaticComplexityModified Cyclomatic Complexity"MAJOR*java27rulesets/java/codesize.xml/ModifiedCyclomaticComplexity:…Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a single decision point.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AMethodCyclomaticComplexity'>MethodCyclomaticComplexity</a> instead.
</p>Z
CODE_SMELL
Ã
pmd:CyclomaticComplexityØ
pmdCyclomaticComplexity!Code size - cyclomatic complexity"MAJOR*java2/rulesets/java/codesize.xml/CyclomaticComplexity:§<p>
Complexity is determined by the number of decision points in a method plus one for the method entry. The decision points are 'if', 'while', 'for', and 'case labels'. Generally, 1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity, and 11+ is very high complexity.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AMethodCyclomaticComplexity'>MethodCyclomaticComplexity</a> or <a href='/coding_rules#rule_key=squid%3AClassCyclomaticComplexity'>ClassCyclomaticComplexity</a> instead.
</p>Z
CODE_SMELL
Ø
%pmd:TooFewBranchesForASwitchStatementÖ
pmd!TooFewBranchesForASwitchStatement'Too few branches for a switch statement"MINOR*java2:rulesets/java/design.xml/TooFewBranchesForASwitchStatement:‹Swith are designed complex branches, and allow branches to share treatement. Using a switch for only a few branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement instead, at least to increase code readability. Example :
<pre>
// With a minimumNumberCaseForASwitch of 3
public class Foo {
  public void bar() {
    switch (condition) {
      case ONE:
        instruction;
        break;
      default:
        break; // not enough for a 'switch' stmt,
               // a simple 'if' stmt would have been more appropriate
    }
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1301'>S1301</a> instead.
</p>Z
CODE_SMELL
ù
pmd:UnusedPrivateMethodÅ
pmdUnusedPrivateMethodUnused private method"MAJOR*java20rulesets/java/unusedcode.xml/UnusedPrivateMethod:Ç<p>
Unused Private Method detects when a private method is declared but is unused. This PMD rule should be switched off and replaced by its equivalent from Squid that is more effective : it generates less false-positives and detects more dead code.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUnusedPrivateMethod'>UnusedPrivateMethod</a> instead.
</p>Z
CODE_SMELL
è
pmd:BooleanGetMethodNameÚ
pmdBooleanGetMethodNameBoolean Get Method Name"MAJOR*java2-rulesets/java/naming.xml/BooleanGetMethodName:tLooks for methods named "getX()" with "boolean" as the return type. The convention is to name these methods "isX()".Z
CODE_SMELL
¨
pmd:SimplifyBooleanExpressionsâ
pmdSimplifyBooleanExpressions4Avoid unnecessary comparisons in boolean expressions"MAJOR*java23rulesets/java/design.xml/SimplifyBooleanExpressions:·Avoid unnecessary comparisons in boolean expressions - this complicates simple code. Example :
<pre>
public class Bar {
 // can be simplified to
 // bar = isFoo();
 private boolean bar = (isFoo() == true);

 public isFoo() { return false;}
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1125'>S1125</a> instead.
</p>Z
CODE_SMELL
˜
"pmd:AvoidSynchronizedAtMethodLevel–
pmdAvoidSynchronizedAtMethodLevel"Avoid Synchronized At Method Level"MAJOR*java27rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel:≤Method level synchronization can backfire when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.Z
CODE_SMELL
Ì
pmd:NcssMethodCount’
pmdNcssMethodCountNcss Method Count"MAJOR*java2*rulesets/java/codesize.xml/NcssMethodCount:‰This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS138'>S138</a> instead.
</p>Z
CODE_SMELL
µ
pmd:UnnecessaryReturnõ
pmdUnnecessaryReturnUnnecessary Return"MINOR*java2/rulesets/java/unnecessary.xml/UnnecessaryReturn:#Avoid unnecessary return statementsZ
CODE_SMELL
Ø
pmd:CheckResultSetò
pmdCheckResultSetCheck ResultSet"MAJOR*java2&rulesets/java/basic.xml/CheckResultSet:ÆAlways check the return of one of the navigation method (next,previous,first,last) of a ResultSet. Indeed, if the value return is "false", the developer should deal with it !Z
CODE_SMELL
ì
pmd:EmptyTryBlock˝
pmdEmptyTryBlockEmpty Try Block"MAJOR*java2%rulesets/java/empty.xml/EmptyTryBlock:ïAvoid empty try blocks - what's the point?

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
Ø
pmd:StringToStringò
pmdStringToStringString To String"MAJOR*java2(rulesets/java/strings.xml/StringToString:´Avoid calling toString() on String objects; this is unnecessary.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1858'>S1858</a> instead.
</p>Z
CODE_SMELL
¨
pmd:AccessorClassGenerationå
pmdAccessorClassGenerationAccessor Class Generation"MAJOR*java20rulesets/java/design.xml/AccessorClassGeneration:ÖInstantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor. A factory method, or non-privitization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.Z
CODE_SMELL
Î
pmd:TooManyFields’
pmdTooManyFieldsToo Many Fields"MAJOR*java2(rulesets/java/codesize.xml/TooManyFields:ÍClasses that have too many fields could be redesigned to have fewer fields, possibly through some nested object grouping of some of the information. For example, a class with city/state/zip fields could instead have one Address field.Z
CODE_SMELL
◊
pmd:ExtendsObject¡
pmdExtendsObjectExtends Object"MINOR*java2%rulesets/java/basic.xml/ExtendsObject:⁄No need to explicitly extend Object. Example: 
<pre>
public class Foo extends Object { // not required
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1939'>S1939</a> instead.
</p>Z
CODE_SMELL
˛
pmd:InefficientStringBuffering€
pmdInefficientStringBufferingInefficient String Buffering"MAJOR*java24rulesets/java/strings.xml/InefficientStringBuffering:KAvoid concatenating non literals in a StringBuffer constructor or append().Z
CODE_SMELL
≠
pmd:SuspiciousEqualsMethodNameä
pmdSuspiciousEqualsMethodName&Naming - Suspicious equals method name"CRITICAL*java23rulesets/java/naming.xml/SuspiciousEqualsMethodName:ÌThe method name and parameter number are suspiciously close to equals(Object), which may mean you are intending to override the equals(Object) method. Example :
<pre>
public class Foo {
  public int equals(Object o) {
  // oops, this probably was supposed to be boolean equals
  }
  public boolean equals(String s) {
  // oops, this probably was supposed to be equals(Object)
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1201'>S1201</a> instead.
</p>Z
CODE_SMELL
Ä
pmd:NonStaticInitializer„
pmdNonStaticInitializerNon Static Initializer"MAJOR*java2-rulesets/java/design.xml/NonStaticInitializer:ÂA nonstatic initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing. Example :<br/><code>public class MyClass {<br/>// this block gets run before any call to a constructor {<br/>System.out.println("I am about to construct myself");<br/>}<br/>}</code>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1171'>S1171</a> instead.
</p>Z
CODE_SMELL
ı
"pmd:ReplaceEnumerationWithIteratorŒ
pmdReplaceEnumerationWithIterator!Replace Enumeration With Iterator"MAJOR*java2:rulesets/java/migrating.xml/ReplaceEnumerationWithIterator:ÆConsider replacing this Enumeration with the newer java.util.Iterator

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1150'>S1150</a> instead.
</p>Z
CODE_SMELL
Ã
#pmd:AvoidProtectedFieldInFinalClass§
pmdAvoidProtectedFieldInFinalClass$Avoid Protected Field In Final Class"MAJOR*java28rulesets/java/design.xml/AvoidProtectedFieldInFinalClass:ÇDo not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2156'>S2156</a> instead.
</p>Z
CODE_SMELL
ˇ
pmd:AvoidUsingOctalValues·
pmdAvoidUsingOctalValuesAvoid Using Octal Values"MAJOR*java2-rulesets/java/basic.xml/AvoidUsingOctalValues:‡Integer literals should not start with zero. Zero means that the rest of literal will be interpreted as an octal value.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1314'>S1314</a> instead.
</p>Z
CODE_SMELL
Ù
pmd:SuspiciousConstantFieldName–
pmdSuspiciousConstantFieldName'Naming - Suspicious constant field name"MAJOR*java24rulesets/java/naming.xml/SuspiciousConstantFieldName:≥A field name is all in uppercase characters, which in Sun's Java naming conventions indicate a constant. However, the field is not final. Example :
<pre>
public class Foo {
  // this is bad, since someone could accidentally
  // do PI = 2.71828; which is actualy e
  // final double PI = 3.16; is ok
  double PI = 3.16;
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00116'>S00116</a> instead.
</p>Z
CODE_SMELL
≥
pmd:LongVariableû
pmdLongVariableLong Variable"MAJOR*java2%rulesets/java/naming.xml/LongVariable:πDetects when a field, formal or local variable is declared with a long name.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.
</p>Z
CODE_SMELL
Ô
pmd:UnnecessaryParentheses–
pmdUnnecessaryParenthesesUnnecessary parentheses"MINOR*java26rulesets/java/controversial.xml/UnnecessaryParentheses:∆Sometimes expressions are wrapped in unnecessary parentheses, making them look like a function call. Example :
<pre>
public class Foo {
  boolean bar() {
    return (true);
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessParenthesesCheck'>UselessParenthesesCheck</a> instead.
</p>Z
CODE_SMELL
©
7pmd:CloneMethodMustImplementCloneableWithTypeResolutionÌ
pmd3CloneMethodMustImplementCloneableWithTypeResolution<Clone Method Must Implement Cloneable (With Type Resolution)"MAJOR*java2Brulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable:ïThe method clone() should only be implemented if the class implements the Cloneable interface with the exception 
of a final method that only throws CloneNotSupportedException. This version uses PMD's type resolution facilities, 
and can detect if the class implements or extends a Cloneable class. Example: 
<pre>
public class MyClass {
  public Object clone() throws CloneNotSupportedException {
    return foo;
  }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.
</p>Z
CODE_SMELL
µ
pmd:CouplingBetweenObjectsñ
pmdCouplingBetweenObjectsCoupling between objects"MAJOR*java21rulesets/java/coupling.xml/CouplingBetweenObjects:êThis rule counts unique attributes, local variables and return types within an object. A number higher than specified threshold can indicate a high degree of coupling.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1200'>S1200</a> instead.
</p>Z
CODE_SMELL
∞
pmd:ExcessiveParameterListë
pmdExcessiveParameterListExcessive Parameter List"MAJOR*java21rulesets/java/codesize.xml/ExcessiveParameterList:ã<p>
Long parameter lists can indicate that a new object should be created to wrap the numerous parameters. Basically, try to group the parameters together.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00107'>S00107</a> instead.
</p>Z
CODE_SMELL
∞
pmd:DuplicateImportsó
pmdDuplicateImportsDuplicate Imports"MINOR*java2*rulesets/java/imports.xml/DuplicateImports:•Avoid duplicate import statements.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.
</p>Z
CODE_SMELL
€
!pmd:NonCaseLabelInSwitchStatementµ
pmdNonCaseLabelInSwitchStatement"Non Case Label In Switch Statement"MAJOR*java26rulesets/java/design.xml/NonCaseLabelInSwitchStatement:ôA non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1219'>S1219</a> instead.
</p>Z
CODE_SMELL
è
pmd:AssignmentInOperandÛ
pmdAssignmentInOperandAssignment In Operand"MAJOR*java23rulesets/java/controversial.xml/AssignmentInOperand:ÒAvoid assignments in operands; this can make code more complicated and harder to read.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AAssignmentInSubExpressionCheck'>AssignmentInSubExpressionCheck</a> instead.
</p>Z
CODE_SMELL
Á
pmd:DoNotHardCodeSDCardÀ
pmdDoNotHardCodeSDCard"Android - Do Not Hard Code SD Card"MAJOR*java2-rulesets/java/android.xml/DoNotHardCodeSDCard:CUse Environment.getExternalStorageDirectory() instead of "/sdcard".Z
CODE_SMELL
¿
pmd:UseVarargs≠
pmd
UseVarargsUse Varargs"MAJOR*java2#rulesets/java/design.xml/UseVarargs:ŒJava 5 introduced the varargs parameter declaration for methods and constructors.  This syntactic 
sugar provides flexibility for users of these methods and constructors, allowing them to avoid 
having to deal with the creation of an array. Example: 
<pre>
public class Foo {
   public void foo(String s, Object[] args) {
      // Do something here...
   }

   public void bar(String s, Object... args) {
      // Ahh, varargs tastes much better...
   }
}
</pre>Z
CODE_SMELL
Ø
%pmd:AvoidThrowingNullPointerExceptionÖ
pmd!AvoidThrowingNullPointerException%Avoid Throwing Null Pointer Exception"MAJOR*java2Crulesets/java/strictexception.xml/AvoidThrowingNullPointerException:’Avoid throwing a NullPointerException - it's confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1695'>S1695</a> instead.
</p>Z
CODE_SMELL
∫
pmd:AvoidUsingVolatileü
pmdAvoidUsingVolatileAvoid Using Volatile"MAJOR*java22rulesets/java/controversial.xml/AvoidUsingVolatile:†Use of the keyword "volatile" is general used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Morover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.Z
CODE_SMELL
†
pmd:SimplifiedTernaryÜ
pmdSimplifiedTernarySTernary operator with a boolean literal can be simplified with a boolean expression"MAJOR*java2)rulesets/java/basic.xml/SimplifiedTernary:“<p>
  Look for ternary operators with the form condition ? literalBoolean : foo or condition ? foo : literalBoolean.
</p>

<p>Examples:</p>
<pre>
public class Foo {
  public boolean test() {
    return condition ? true : something(); // can be as simple as return condition || something();
  }

  public void test2() {
    final boolean value = condition ? false : something(); // can be as simple as value = !condition && something();
  }

  public boolean test3() {
    return condition ? something() : true; // can be as simple as return !condition || something();
  }

  public void test4() {
    final boolean otherValue = condition ? something() : false; // can be as simple as condition && something();
  }
}
</pre>Z
CODE_SMELL
Û
"pmd:AvoidPrefixingMethodParametersÃ
pmdAvoidPrefixingMethodParameters!Avoid Prefixing Method Parameters"MAJOR*java2>rulesets/java/controversial.xml/AvoidPrefixingMethodParameters:®Prefixing parameters by 'in' or 'out' pollutes the name of the parameters and reduces code readability.
To indicate whether or not a parameter will be modify in a method, its better to document method
behavior with Javadoc. Example: 
<pre>
// Not really clear
public class Foo {
  public void bar(
      int inLeftOperand,
      Result outRightOperand) {
      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());
  }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.
</p>Z
CODE_SMELL
◊
pmd:WhileLoopsMustUseBraces∑
pmdWhileLoopsMustUseBracesWhile Loops Must Use Braces"MAJOR*java20rulesets/java/braces.xml/WhileLoopsMustUseBraces:Æ<p>
Avoid using 'while' statements without using curly braces.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.
</p>Z
CODE_SMELL
 
pmd:DefaultPackage≥
pmdDefaultPackageDefault Package"MINOR*java2.rulesets/java/controversial.xml/DefaultPackage:BUse explicit scoping instead of the default package private level.Z
CODE_SMELL
›
pmd:IfElseStmtsMustUseBracesº
pmdIfElseStmtsMustUseBracesIf Else Stmts Must Use Braces"MAJOR*java21rulesets/java/braces.xml/IfElseStmtsMustUseBraces:Ø<p>
Avoid using if..else statements without using curly braces.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.
</p>Z
CODE_SMELL
ç
pmd:TooManyMethodsˆ
pmdTooManyMethodsToo many methods"MAJOR*java2)rulesets/java/codesize.xml/TooManyMethods:àA class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1448'>S1448</a> instead.
</p>Z
CODE_SMELL
Á
/pmd:AvoidDecimalLiteralsInBigDecimalConstructor≥
pmd+AvoidDecimalLiteralsInBigDecimalConstructor1Avoid Decimal Literals In Big Decimal Constructor"MAJOR*java2Crulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor:ÌOne might assume that new BigDecimal(.1) is exactly equal to .1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is so because .1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to .1, appearances notwithstanding. The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal(.1)' is exactly equal to .1, as one would expect. Therefore, it is generally recommended that the (String) constructor be used in preference to this one.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2111'>S2111</a> instead.
</p>Z
CODE_SMELL
˝
pmd:FinalizeShouldBeProtected€
pmdFinalizeShouldBeProtectedFinalize Should Be Protected"MAJOR*java26rulesets/java/finalizers.xml/FinalizeShouldBeProtected:…If you override finalize(), make it protected. If you make it public, other classes may call it.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1174'>S1174</a> instead.
</p>Z
CODE_SMELL
ª
pmd:MethodReturnsInternalArrayò
pmdMethodReturnsInternalArray(Security - Method returns internal array"CRITICAL*java26rulesets/java/sunsecure.xml/MethodReturnsInternalArray:ÛExposing internal arrays directly allows the user to modify some code that could be critical. It is safer to return a copy of the array.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2384'>S2384</a> instead.
</p>ZVULNERABILITY
Æ
pmd:UseCollectionIsEmptyë
pmdUseCollectionIsEmptyUse Collection Is Empty"MINOR*java2-rulesets/java/design.xml/UseCollectionIsEmpty:íThe isEmpty() method on java.util.Collection is provided to see if a collection has any elements. Comparing the value of size() to 0 merely duplicates existing behavior.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1155'>S1155</a> instead.
</p>Z
CODE_SMELL
æ
pmd:AvoidPrintStackTrace°
pmdAvoidPrintStackTraceAvoid Print Stack Trace"MAJOR*java23rulesets/java/logging-java.xml/AvoidPrintStackTrace:úAvoid printStackTrace(); use a logger call instead.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1148'>S1148</a> instead.
</p>Z
CODE_SMELL
„
pmd:UseIndexOfCharÃ
pmdUseIndexOfCharUse Index Of Char"MAJOR*java2(rulesets/java/strings.xml/UseIndexOfChar:_Use String.indexOf(char) when checking for the index of a single character; it executes faster.Z
CODE_SMELL
˚
#pmd:DefaultLabelNotLastInSwitchStmt”
pmdDefaultLabelNotLastInSwitchStmt*Default label not last in switch statement"MAJOR*java28rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt:´Switch statements should have a default label. Example :
  <pre>
public class Foo {
 void bar(int a) {
  switch (a) {
   case 1:  // do something
      break;
   default:  // the default case should be last, by convention
      break;
   case 2:
      break;
  }
 }
}
  </pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3ASwitchLastCaseIsDefaultCheck'>SwitchLastCaseIsDefaultCheck</a> instead.
</p>Z
CODE_SMELL
†
pmd:LocalVariableCouldBeFinal˛
pmdLocalVariableCouldBeFinalLocal variable could be final"MINOR*java29rulesets/java/optimizations.xml/LocalVariableCouldBeFinal:ËA local variable assigned only once can be declared final. Example :
  <pre>
public class Bar {
 public void foo () {
  String a = "a"; //if a will not be assigned again it is better to do this:
  final String b = "b";
 }
}
  </pre>Z
CODE_SMELL
“
pmd:SingularFieldº
pmdSingularFieldSingular Field"MINOR*java2&rulesets/java/design.xml/SingularField:UA field that's only used by one method could perhaps be replaced by a local variable.Z
CODE_SMELL
œ
pmd:ReturnFromFinallyBlock∞
pmdReturnFromFinallyBlockReturn From Finally Block"MAJOR*java2.rulesets/java/basic.xml/ReturnFromFinallyBlock:¨Avoid returning from a finally block - this can discard exceptions.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1143'>S1143</a> instead.
</p>Z
CODE_SMELL
Ö
pmd:SimpleDateFormatNeedsLocale·
pmdSimpleDateFormatNeedsLocaleSimple Date Format Needs Locale"MAJOR*java24rulesets/java/design.xml/SimpleDateFormatNeedsLocale:MBe sure to specify a Locale when creating a new instance of SimpleDateFormat.Z
CODE_SMELL
À
&pmd:PositionLiteralsFirstInComparisons†
pmd"PositionLiteralsFirstInComparisons&Position Literals First In Comparisons"MAJOR*java2;rulesets/java/design.xml/PositionLiteralsFirstInComparisons:ˆPosition literals first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1132'>S1132</a> instead.
</p>Z
CODE_SMELL
‘
pmd:UnconditionalIfStatement≥
pmdUnconditionalIfStatementUnconditional If Statement"CRITICAL*java20rulesets/java/basic.xml/UnconditionalIfStatement:ßDo not use if statements that are always true or always false.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2583'>S2583</a> instead.
</p>Z
CODE_SMELL
Ù
"pmd:UnnecessaryConversionTemporaryÕ
pmdUnnecessaryConversionTemporary Unnecessary Conversion Temporary"MAJOR*java2<rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary:¨Avoid unnecessary temporaries when converting primitives to Strings

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1158'>S1158</a> instead.
</p>Z
CODE_SMELL
ó
 pmd:AvoidAccessibilityAlterationÚ
pmdAvoidAccessibilityAlterationAvoid Accessibility Alteration"MAJOR*java2<rulesets/java/controversial.xml/AvoidAccessibilityAlteration:’Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow to alter, at runtime, the visilibilty of variable, classes, or methods, even if they are private. Obviously, no one should do so, as such behavior is against everything encapsulation principal stands for.Z
CODE_SMELL
ú
pmd:ClassNamingConventions˝
pmdClassNamingConventions!Naming - Class naming conventions"MAJOR*java2/rulesets/java/naming.xml/ClassNamingConventions:<p>
Class names should always begin with an upper case character.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00101'>S00101</a> and <a href='/coding_rules#rule_key=squid%3AS00114'>S00114</a> instead.
</p>Z
CODE_SMELL
‹
pmd:ImportFromSamePackageæ
pmdImportFromSamePackageImport From Same Package"MINOR*java2/rulesets/java/imports.xml/ImportFromSamePackage:ªNo need to import a type that lives in the same package.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.
</p>Z
CODE_SMELL
Ω
pmd:DoNotUseThreads•
pmdDoNotUseThreadsDo Not Use Threads"MAJOR*java2&rulesets/java/j2ee.xml/DoNotUseThreads:8The J2EE specification explicitly forbid use of threads.Z
CODE_SMELL
ƒ
pmd:MisplacedNullCheck©
pmdMisplacedNullCheckMisplaced Null Check"CRITICAL*java2*rulesets/java/basic.xml/MisplacedNullCheck:ØThe null check here is misplaced. if the variable is null you'll get a NullPointerException. 
Either the check is useless (the variable will never be null) or it's incorrect.
<br>Example :
<pre>
if (object1!=null && object2.equals(object1)) { 
  ...
}      
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1697'>S1697</a> or <a href='/coding_rules#rule_key=squid%3AS2259'>S2259</a> instead.
</p>Z
CODE_SMELL
´
pmd:UnnecessaryConstructorå
pmdUnnecessaryConstructorUnnecessary constructor"MAJOR*java26rulesets/java/controversial.xml/UnnecessaryConstructor:ÇThis rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1186'>S1186</a> instead.
</p>Z
CODE_SMELL
˚
pmd:AvoidUsingShortTypeﬂ
pmdAvoidUsingShortTypeAvoid Using Short Type"MAJOR*java23rulesets/java/controversial.xml/AvoidUsingShortType:‹Java uses the short type to reduce memory usage, not to optimize calculation. On the contrary, the jvm does not has an arithmetic capabilities with the type short. So, the P-code must convert the short into int, then do the proper caculation and then again, convert int to short. So, use of the "short" type may have a great effect on memory usage.Z
CODE_SMELL
Ñ
+pmd:FieldDeclarationsShouldBeAtStartOfClass‘
pmd'FieldDeclarationsShouldBeAtStartOfClass.Field Declarations Should Be At Start Of Class"MINOR*java2@rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass:òFields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes. Example: 
<pre>
public class HelloWorldBean {

  // Field declared before methods / inner classes - OK
  private String _thing;

  public String getMessage() {
    return "Hello World!";
  }

  // Field declared after methods / inner classes - avoid this
  private String _fieldInWrongLocation;
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1213'>S1213</a> instead.
</p>Z
CODE_SMELL
è
pmd:FinalizeOverloadedÙ
pmdFinalizeOverloadedFinalize Overloaded"MAJOR*java2/rulesets/java/finalizers.xml/FinalizeOverloaded:˘Methods named finalize() should not have parameters. It is confusing and probably a bug to overload finalize(). It will not be called by the VM.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1175'>S1175</a> instead.
</p>Z
CODE_SMELL
ô
5pmd:PositionLiteralsFirstInCaseInsensitiveComparisonsﬂ
pmd1PositionLiteralsFirstInCaseInsensitiveComparisons7Position Literals First In Case Insensitive Comparisons"MAJOR*java2Jrulesets/java/design.xml/PositionLiteralsFirstInCaseInsensitiveComparisons:ÜPosition literals first in comparisons, if the second argument is null then NullPointerExceptions 
can be avoided, they will just return false. Example: 
<pre>
class Foo {
  boolean bar(String x) {
    return x.equalsIgnoreCase("2"); // should be "2".equalsIgnoreCase(x)
  }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1132'>S1132</a> instead.
</p>Z
CODE_SMELL
∑
pmd:EmptyFinallyBlockù
pmdEmptyFinallyBlockEmpty Finally Block"CRITICAL*java2)rulesets/java/empty.xml/EmptyFinallyBlock:¶<p>
Avoid empty finally blocks - these can be deleted.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
˝
pmd:LoosePackageCoupling‡
pmdLoosePackageCouplingLoose Package Coupling"MAJOR*java2/rulesets/java/coupling.xml/LoosePackageCoupling:‡Avoid using classes from the configured package hierarchy outside of the package hierarchy, 
except when using one of the configured allowed classes. Example: 
<pre>
package some.package;

import some.other.package.subpackage.subsubpackage.DontUseThisClass;

public class Bar {
   DontUseThisClass boo = new DontUseThisClass();
}
</pre>

<p>
   This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AArchitecturalConstraint'>ArchitecturalConstraint</a> instead.
</p>Z
CODE_SMELL
ı
pmd:AvoidCatchingThrowable÷
pmdAvoidCatchingThrowableAvoid Catching Throwable"CRITICAL*java28rulesets/java/strictexception.xml/AvoidCatchingThrowable:∆This is dangerous because it casts too wide a net; it can catch things like OutOfMemoryError.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1181'>S1181</a> instead.
</p>Z
CODE_SMELL
˙
pmd:NullAssignment„
pmdNullAssignmentNull Assignment"MAJOR*java2.rulesets/java/controversial.xml/NullAssignment:ÒAssigning a null to a variable (outside of its declaration) is usually bad form. Some times, the assignment is an indication that the programmer doesn't completely understand what is going on in the code. NOTE: This sort of assignment may in rare cases be useful to encourage garbage collection. If that's what you're using it for, by all means, disregard this rule :-)Z
CODE_SMELL
ã
pmd:ShortMethodNameÛ
pmdShortMethodNameNaming - Short method name"MAJOR*java2(rulesets/java/naming.xml/ShortMethodName:˚Detects when very short method names are used. Example :
<pre>
public class ShortMethod {
  public void a( int i ) { // Violation
  }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00100'>S00100</a> instead.
</p>Z
CODE_SMELL
Å
pmd:AtLeastOneConstructor„
pmdAtLeastOneConstructorAt Least One Constructor"MAJOR*java25rulesets/java/controversial.xml/AtLeastOneConstructor:⁄Each class should declare at least one constructor.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> or <a href='/coding_rules#rule_key=squid%3AS1258'>S1258</a> instead.
</p>Z
CODE_SMELL
€
pmd:ShortClassNameƒ
pmdShortClassNameShort Class Name"MINOR*java2'rulesets/java/naming.xml/ShortClassName:ÿClassnames with fewer than five characters are not recommended. Example: 
<pre>
public class Foo {
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00101'>S00101</a> instead.
</p>Z
CODE_SMELL
é
pmd:CommentContent˜
pmdCommentContentComment Content"MINOR*java2)rulesets/java/comments.xml/CommentContent:äA rule for the politically correct... we don't want to offend anyone. Example: 
<pre>
// OMG, this is horrible, Bob is an idiot !!!
</pre>Z
CODE_SMELL
ƒ
pmd:ProperCloneImplementation¢
pmdProperCloneImplementationProper clone implementation"CRITICAL*java21rulesets/java/clone.xml/ProperCloneImplementation:ìObject clone() should be implemented with super.clone(). Example :
  <pre>
class Foo{
    public Object clone(){
        return new Foo(); // This is bad
    }
}
  </pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.
</p>Z
CODE_SMELL
Â
pmd:UselessStringValueOf»
pmdUselessStringValueOfUseless String Value Of"MINOR*java2.rulesets/java/strings.xml/UselessStringValueOf:»No need to call String.valueOf to append to a string; just use the valueOf() argument directly.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1153'>S1153</a> instead.
</p>Z
CODE_SMELL
Ó
pmd:AbstractNaming◊
pmdAbstractNamingAbstract naming"MAJOR*java2'rulesets/java/naming.xml/AbstractNaming:ÏAbstract classes should be named 'AbstractXXX'. Example :
  <pre>
public abstract class Foo { // should be AbstractFoo
}
  </pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00118'>S00118</a> instead.
</p>Z
CODE_SMELL
–
pmd:AvoidStringBufferField±
pmdAvoidStringBufferFieldAvoid StringBuffer field"MAJOR*java20rulesets/java/strings.xml/AvoidStringBufferField:¨StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time). Example :
<pre>
class Foo {
  private StringBuffer memoryLeak;
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.
</p>Z
CODE_SMELL
ƒ
pmd:ArrayIsStoredDirectly¶
pmdArrayIsStoredDirectly#Security - Array is stored directly"CRITICAL*java21rulesets/java/sunsecure.xml/ArrayIsStoredDirectly:êConstructors and methods receiving arrays should clone objects and store the copy. This prevents that future changes from the user affect the internal functionality.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2384'>S2384</a> instead.
</p>ZVULNERABILITY
 
pmd:MissingBreakInSwitch≠
pmdMissingBreakInSwitchMissing Break In Switch"CRITICAL*java2-rulesets/java/design.xml/MissingBreakInSwitch:´A switch statement without an enclosed break statement may be a bug.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS128'>S128</a> instead.
</p>Z
CODE_SMELL
∏
5pmd:SignatureDeclareThrowsExceptionWithTypeResolution˛
pmd1SignatureDeclareThrowsExceptionWithTypeResolution9Signature Declare Throws Exception (With Type Resolution)"MAJOR*java2@rulesets/java/typeresolution.xml/SignatureDeclareThrowsException:≠It is unclear which exceptions that can be thrown from the methods.
It might be difficult to document and understand the vague interfaces.
Use either a class derived from RuntimeException or a checked exception.

JUnit classes are excluded. Example: 
<pre>
public void methodThrowingException() throws Exception {
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00112'>S00112</a> instead.
</p>Z
CODE_SMELL
ø
pmd:GuardLogStatementJavaUtilù
pmdGuardLogStatementJavaUtilGuard Log Statement Java Util"MAJOR*java28rulesets/java/logging-java.xml/GuardLogStatementJavaUtil:àWhenever using a log level, one should check if the loglevel is actually enabled, or
otherwise skip the associate String creation and manipulation. Example: 
<pre>
// Add this for performance
if (log.isLoggable(Level.FINE)) { ...
  log.fine("This happens");
</pre>Z
CODE_SMELL
Ù
pmd:LogicInversion›
pmdLogicInversionLogic Inversion"MINOR*java2'rulesets/java/design.xml/LogicInversion:ÚUse opposite operator instead of negating the whole expression with a logic complement operator. Example: 
<pre>
public boolean bar(int a, int b) {

  if (!(a == b)) // use !=
    return false;

  if (!(a < b)) // use >=
    return false;

  return true;
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1940'>S1940</a> instead.
</p>Z
CODE_SMELL
ˆ
#pmd:LooseCouplingWithTypeResolutionŒ
pmdLooseCouplingWithTypeResolution%Loose Coupling (With Type Resolution)"MAJOR*java2.rulesets/java/typeresolution.xml/LooseCoupling:µAvoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead Example: 
<pre>
import java.util.ArrayList;
import java.util.HashSet;

public class Bar {

  // Use List instead
  private ArrayList list = new ArrayList();

  // Use Set instead
  public HashSet getFoo() {
    return new HashSet();
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1319'>S1319</a> instead.
</p>Z
CODE_SMELL
É
pmd:EmptyStatementNotInLoop„
pmdEmptyStatementNotInLoopEmpty Statement Not In Loop"MAJOR*java2/rulesets/java/empty.xml/EmptyStatementNotInLoop:€An empty statement (aka a semicolon by itself) that is not used as the sole body of a for loop or while loop is probably a bug. It could also be a double semicolon, which is useless and should be removed.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AEmptyStatementUsageCheck'>EmptyStatementUsageCheck</a> instead.
</p>Z
CODE_SMELL
‡
pmd:SimplifyBooleanReturns¡
pmdSimplifyBooleanReturnsSimplify boolean returns"MINOR*java2/rulesets/java/design.xml/SimplifyBooleanReturns:ΩAvoid unnecessary if..then..else statements when returning a boolean. Example :
<pre>
public class Foo {
  private int bar =2;
  public boolean isBarEqualsTo(int x) {
    // this bit of code
    if (bar == x) {
     return true;
    } else {
     return false;
    }
    // can be replaced with a simple
    // return bar == x;
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1126'>S1126</a> instead.
</p>Z
CODE_SMELL
Ö
pmd:SingleMethodSingletonÁ
pmdSingleMethodSingleton&Only one getInstance method is allowed"CRITICAL*java2.rulesets/java/design.xml/SingleMethodSingleton:‘<p>
  Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.
</p>

<p>Examples:</p>
<pre>
public class Singleton {
  private static Singleton singleton = new Singleton( );

  private Singleton() { }

  public static Singleton getInstance( ) {
    return singleton;
  }

  public static Singleton getInstance(Object obj) {
    Singleton singleton = (Singleton) obj;
    return singleton; //violation
  }
}
</pre>Z
CODE_SMELL
ß
pmd:GenericsNamingê
pmdGenericsNamingGenerics Naming"MAJOR*java2'rulesets/java/naming.xml/GenericsNaming:•Generics names should be a one letter long and upper case.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00119'>S00119</a> instead.
</p>Z
CODE_SMELL
À
&pmd:MethodWithSameNameAsEnclosingClass†
pmd"MethodWithSameNameAsEnclosingClass1Naming - Method with same name as enclosing class"MAJOR*java2;rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass:ÎNon-constructor methods should not have the same name as the enclosing class. Example :
<pre>
public class MyClass {
  // this is bad because it is a method
  public void MyClass() {}
  // this is OK because it is a constructor
  public MyClass() {}
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1223'>S1223</a> instead.
</p>Z
CODE_SMELL
Ï
pmd:IdempotentOperationsœ
pmdIdempotentOperationsIdempotent Operations"MAJOR*java2-rulesets/java/design.xml/IdempotentOperations:“Avoid idempotent operations - they are have no effect. Example : <br/><code>int x = 2;<br/> x = x;</code>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> instead.
</p>Z
CODE_SMELL
§
&pmd:SingletonClassReturningNewInstance˘
pmd"SingletonClassReturningNewInstance%getInstance should cache the instance"MAJOR*java2;rulesets/java/design.xml/SingletonClassReturningNewInstance:–<p>
  Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.
</p>

<p>Examples:</p>
<pre>
class Singleton {
  private static Singleton instance = null;

  public static Singleton getInstance() {
    synchronized(Singleton.class) {
      return new Singleton();
    }
  }
}
</pre>Z
CODE_SMELL
Ì
pmd:ConsecutiveLiteralAppendsÀ
pmdConsecutiveLiteralAppendsConsecutive Literal Appends"MINOR*java23rulesets/java/strings.xml/ConsecutiveLiteralAppends:>Consecutively calling StringBuffer.append with String literalsZ
CODE_SMELL
Ò
pmd:UseNotifyAllInsteadOfNotifyÕ
pmdUseNotifyAllInsteadOfNotify Use Notify All Instead Of Notify"MAJOR*java24rulesets/java/design.xml/UseNotifyAllInsteadOfNotify:∑Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus it's usually safer to call notifyAll() instead.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2446'>S2446</a> instead.
</p>Z
CODE_SMELL
Ô
(pmd:DoNotCallGarbageCollectionExplicitly¬
pmd$DoNotCallGarbageCollectionExplicitly)Do not call garbage collection explicitly"CRITICAL*java2Drulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly:áCalls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, "modern" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself. Example :
<pre>
 public class GCCall
{
  public GCCall()
  {
  // Explicit gc call !
    System.gc();
  }
  public void doSomething()
  {
    // Explicit gc call !
    Runtime.getRuntime().gc();
  }

  public explicitGCcall() { // Explicit gc call ! System.gc(); }

  public void doSomething() { // Explicit gc call ! Runtime.getRuntime().gc(); }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1215'>S1215</a> instead.
</p>Z
CODE_SMELL
Ø
pmd:ExcessiveMethodLengthë
pmdExcessiveMethodLengthExcessive Method Length"MAJOR*java20rulesets/java/codesize.xml/ExcessiveMethodLength:éViolations of this rule usually indicate that the method is doing too much. Try to reduce the method size by creating helper methods and removing any copy/pasted code.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS138'>S138</a> instead.
</p>Z
CODE_SMELL
‘
pmd:AvoidArrayLoopsº
pmdAvoidArrayLoopsAvoid Array Loops"MAJOR*java2/rulesets/java/optimizations.xml/AvoidArrayLoops:GInstead of copying data between two arrays, use System.arrayCopy methodZ
CODE_SMELL
”
pmd:AvoidUsingNativeCode∂
pmdAvoidUsingNativeCodeAvoid Using Native Code"MAJOR*java24rulesets/java/controversial.xml/AvoidUsingNativeCode:∞As JVM and Java language offer already many help in creating application, it should be very rare to have to rely on non-java code. Even though, it is rare to actually have to use Java Native Interface (JNI). As the use of JNI make application less portable, and harder to maintain, it is not recommended.Z
CODE_SMELL
é
pmd:BooleanInstantiationÒ
pmdBooleanInstantiationBoolean Instantiation"MAJOR*java2,rulesets/java/basic.xml/BooleanInstantiation:vAvoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.Z
CODE_SMELL
ï
pmd:NonThreadSafeSingletonˆ
pmdNonThreadSafeSingletonNon Thread Safe Singleton"MAJOR*java2/rulesets/java/design.xml/NonThreadSafeSingleton:ÒNon-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class (do not use the double-check idiom). See Effective Java, item 48.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2444'>S2444</a> instead.
</p>Z
CODE_SMELL
œ
pmd:LoggerIsNotStaticFinal∞
pmdLoggerIsNotStaticFinalLogger Is Not Static Final"MAJOR*java25rulesets/java/logging-java.xml/LoggerIsNotStaticFinal:§In most cases, the Logger can be declared static and final.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1312'>S1312</a> instead.
</p>Z
CODE_SMELL
ç
"pmd:ReturnEmptyArrayRatherThanNullÊ
pmdReturnEmptyArrayRatherThanNull#Return empty array rather than null"MINOR*java27rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull:«For any method that returns an array, it's a better behavior to return an empty array rather than a null reference. Example :
<pre>
public class Example
{
  // Not a good idea...
  public int []badBehavior()
  {
    // ...
    return null;
  }

  // Good behavior
  public String[] bonnePratique()
  {
    //...
    return new String[0];
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1168'>S1168</a> instead.
</p>Z
CODE_SMELL
É
#pmd:UnusedImportsWithTypeResolution€
pmdUnusedImportsWithTypeResolution%Unused Imports (With Type Resolution)"INFO*java2.rulesets/java/typeresolution.xml/UnusedImports:√Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*. Example: 
<pre>
import java.io.*; // not referenced or required

public class Foo {}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.
</p>Z
CODE_SMELL
∆
+pmd:AvoidThrowingNewInstanceOfSameExceptionñ
pmd'AvoidThrowingNewInstanceOfSameException@Strict Exception - Avoid throwing new instance of same exception"MAJOR*java2Irulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException:øCatch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity. Example :
<pre>
public class Foo {
  void bar() {
    try {
      // do something
    }  catch (SomeException se) {
      // harmless comment
      throw new SomeException(se);
    }
  }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.
</p>Z
CODE_SMELL
‹
pmd:DontImportSun∆
pmdDontImportSunDont Import Sun"MINOR*java2-rulesets/java/controversial.xml/DontImportSun:÷Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1191'>S1191</a> instead.
</p>Z
CODE_SMELL
¡
pmd:PreserveStackTrace¶
pmdPreserveStackTracePreserve Stack Trace"MAJOR*java2+rulesets/java/design.xml/PreserveStackTrace:ÆThrowing a new exception from a catch block without passing the original exception into the new Exception will cause the true stack trace to be lost, and can make it difficult to debug effectively.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.
</p>Z
CODE_SMELL
Å
 pmd:SwitchStmtsShouldHaveDefault‹
pmdSwitchStmtsShouldHaveDefault%Switch statements should have default"MAJOR*java25rulesets/java/design.xml/SwitchStmtsShouldHaveDefault:øSwitch statements should have a default label. Example :
<pre>
public class Foo {
 public void bar() {
  int x = 2;
  switch (x) {
   case 2: int j = 8;
  }
 }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3ASwitchLastCaseIsDefaultCheck'>SwitchLastCaseIsDefaultCheck</a> instead.
</p>Z
CODE_SMELL
¢
pmd:GuardLogStatementà
pmdGuardLogStatementGuard Log Statement"MAJOR*java2;rulesets/java/logging-jakarta-commons.xml/GuardLogStatement:ÇWhenever using a log level, one should check if the loglevel is actually enabled, or
otherwise skip the associate String creation and manipulation. Example: 
<pre>
// Add this for performance
if (log.isDebugEnabled() { ...
  log.debug("This happens");
</pre>Z
CODE_SMELL
Û
pmd:UnusedImports›
pmdUnusedImportsUnused imports"INFO*java2'rulesets/java/imports.xml/UnusedImports:ıAvoid unused import statements. Example :
  <pre>
// this is bad
import java.io.File;
public class Foo {}
  </pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.
</p>Z
CODE_SMELL
‹
pmd:MissingSerialVersionUIDº
pmdMissingSerialVersionUIDMissing Serial Version UID"MAJOR*java23rulesets/java/javabeans.xml/MissingSerialVersionUID:±Classes that are serializable should provide a serialVersionUID field.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2057'>S2057</a> instead.
</p>Z
CODE_SMELL
µ
 pmd:SuspiciousHashcodeMethodNameê
pmdSuspiciousHashcodeMethodName(Naming - Suspicious Hashcode method name"MAJOR*java25rulesets/java/naming.xml/SuspiciousHashcodeMethodName:The method name and return type are suspiciously close to hashCode(), which may mean you are intending to override the hashCode() method. Example :
<pre>
public class Foo {
  public int hashcode() {
  // oops, this probably was supposed to be hashCode
  }
}</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1221'>S1221</a> instead.
</p>Z
CODE_SMELL
ì
pmd:FinalFieldCouldBeStaticÛ
pmdFinalFieldCouldBeStaticFinal Field Could Be Static"MINOR*java20rulesets/java/design.xml/FinalFieldCouldBeStatic:ÍIf a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1170'>S1170</a> instead.
</p>Z
CODE_SMELL
Ö
pmd:SimplifyConditionalÈ
pmdSimplifyConditionalSimplify Conditional"MAJOR*java2,rulesets/java/design.xml/SimplifyConditional:pNo need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.Z
CODE_SMELL
ø
pmd:LooseCoupling©
pmdLooseCouplingLoose coupling"MAJOR*java2(rulesets/java/coupling.xml/LooseCoupling:øAvoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1319'>S1319</a> instead.
</p>Z
CODE_SMELL
Å
pmd:UselessOperationOnImmutable›
pmdUselessOperationOnImmutableUseless Operation On Immutable"CRITICAL*java29rulesets/java/unnecessary.xml/UselessOperationOnImmutable:¡An operation on an Immutable object (BigDecimal or BigInteger) won't change the object itself. The result of the operation is a new object. Therefore, ignoring the operation result is an error.Z
CODE_SMELL
Ã
pmd:UnusedLocalVariable∞
pmdUnusedLocalVariableUnused local variable"MAJOR*java20rulesets/java/unusedcode.xml/UnusedLocalVariable:±Detects when a local variable is declared and/or assigned, but not used.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1481'>S1481</a> instead.
</p>Z
CODE_SMELL
«
pmd:AvoidDeeplyNestedIfStmts¶
pmdAvoidDeeplyNestedIfStmtsAvoid Deeply Nested If Stmts"MAJOR*java21rulesets/java/design.xml/AvoidDeeplyNestedIfStmts:öDeeply nested if..then statements are hard to read.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS134'>S134</a> instead.
</p>Z
CODE_SMELL
Ü
pmd:CollapsibleIfStatementsÊ
pmdCollapsibleIfStatementsCollapsible If Statements"MINOR*java2/rulesets/java/basic.xml/CollapsibleIfStatements:‡Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1066'>S1066</a> instead.
</p>Z
CODE_SMELL
π
pmd:AvoidCallingFinalizeú
pmdAvoidCallingFinalizeAvoid Calling Finalize"MAJOR*java21rulesets/java/finalizers.xml/AvoidCallingFinalize:öObject.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AObjectFinalizeCheck'>ObjectFinalizeCheck</a> instead.
</p>Z
CODE_SMELL
·
pmd:AvoidFinalLocalVariable¡
pmdAvoidFinalLocalVariableAvoid Final Local Variable"MAJOR*java27rulesets/java/controversial.xml/AvoidFinalLocalVariable:≤Avoid using final local variables, turn them into fields. Example :
<pre>
public class MyClass {
    public void foo() {
        final String finalLocalVariable;
    }
}
  </pre>Z
CODE_SMELL
ç
pmd:AvoidCatchingNPEÙ
pmdAvoidCatchingNPEAvoid Catching NPE"MAJOR*java22rulesets/java/strictexception.xml/AvoidCatchingNPE:˘Code should never throw NPE under normal circumstances. A catch block may hide the original error, causing other more subtle errors in its wake.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1696'>S1696</a> instead.
</p>Z
CODE_SMELL
È
pmd:AppendCharacterWithChar…
pmdAppendCharacterWithCharAppend Character With Char"MINOR*java21rulesets/java/strings.xml/AppendCharacterWithChar:AAvoid concatenating characters as strings in StringBuffer.append.Z
CODE_SMELL
¯
pmd:LongInstantiationﬁ
pmdLongInstantiation$Java5 migration - Long instantiation"MAJOR*java2-rulesets/java/migrating.xml/LongInstantiation:’In JDK 1.5, calling new Long() causes memory allocation. Long.valueOf() is more memory friendly. Example :
  <pre>
public class Foo {
private Long i = new Long(0); // change to Long i =
Long.valueOf(0);
}
  </pre>Z
CODE_SMELL
ó
pmd:NcssTypeCountÅ
pmdNcssTypeCountNcss Type Count"MAJOR*java2(rulesets/java/codesize.xml/NcssTypeCount:ñThis rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=common-java%3AInsufficientCommentDensity'>InsufficientCommentDensity</a> instead.
</p>Z
CODE_SMELL
ê
pmd:AvoidThreadGroup˜
pmdAvoidThreadGroupAvoid Thread Group"CRITICAL*java2(rulesets/java/basic.xml/AvoidThreadGroup:ÉAvoid using ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread safe.Z
CODE_SMELL
ˆ
pmd:InefficientEmptyStringCheck“
pmdInefficientEmptyStringCheckInefficient Empty String Check"MAJOR*java25rulesets/java/strings.xml/InefficientEmptyStringCheck:ΩString.trim().length() is an inefficient way to check if a String is really empty, as it creates a new String object just to check its size. Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found.Z
CODE_SMELL
—
pmd:DoNotExtendJavaLangError∞
pmdDoNotExtendJavaLangErrorDo Not Extend Java Lang Error"MAJOR*java2:rulesets/java/strictexception.xml/DoNotExtendJavaLangError:öErrors are system exceptions. Do not extend them.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1194'>S1194</a> instead.
</p>Z
CODE_SMELL
‡
pmd:UseEqualsToCompareStringsæ
pmdUseEqualsToCompareStringsUse Equals To Compare Strings"MAJOR*java23rulesets/java/strings.xml/UseEqualsToCompareStrings:ÆUsing "==" or "!=" to compare strings only works if intern version is used on both sides.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AStringEqualityComparisonCheck'>StringEqualityComparisonCheck</a> or <a href='/coding_rules#rule_key=squid%3AS1698'>S1698</a> instead.
</p>Z
CODE_SMELL
Á
pmd:UseUtilityClassœ
pmdUseUtilityClassUse Utility Class"MAJOR*java2(rulesets/java/design.xml/UseUtilityClass:‡For classes that only have static methods, consider making them utility classes. 
Note that this doesn't apply to abstract classes, since their subclasses may well include non-static methods. 
Also, if you want this class to be a utility class, remember to add a private constructor to prevent instantiation. 
(Note, that this use was known before PMD 5.1.0 as UseSingleton).

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> instead.
</p>Z
CODE_SMELL
∞
pmd:EmptyCatchBlockò
pmdEmptyCatchBlockEmpty Catch Block"CRITICAL*java2'rulesets/java/empty.xml/EmptyCatchBlock:ß<p>
Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
ç
pmd:StdCyclomaticComplexityÌ
pmdStdCyclomaticComplexityStd Cyclomatic Complexity"MAJOR*java22rulesets/java/codesize.xml/StdCyclomaticComplexity:‰Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AMethodCyclomaticComplexity'>MethodCyclomaticComplexity</a> or <a href='/coding_rules#rule_key=squid%3AClassCyclomaticComplexity'>ClassCyclomaticComplexity</a> instead.
</p>Z
CODE_SMELL
–
.pmd:EmptyMethodInAbstractClassShouldBeAbstractù
pmd*EmptyMethodInAbstractClassShouldBeAbstract1Empty Method In Abstract Class Should Be Abstract"MAJOR*java2Crulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract:ÿAn empty method in an abstract class should be abstract instead, as developer may rely on this empty implementation rather than code the appropriate one.
  <pre>
public abstract class ShouldBeAbstract
{
  public Object couldBeAbstract()
  {
  // Should be abstract method ?
    return null;
  }

  public void couldBeAbstract()
  {
  }
}
</pre>Z
CODE_SMELL
 
pmd:ImmutableField≥
pmdImmutableFieldImmutable Field"MAJOR*java2'rulesets/java/design.xml/ImmutableField:»Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor. This aids in converting existing classes to immutable classes.Z
CODE_SMELL
ù
pmd:SimplifyStartsWithÇ
pmdSimplifyStartsWithSimplify Starts With"MINOR*java22rulesets/java/optimizations.xml/SimplifyStartsWith:ÉSince it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.Z
CODE_SMELL
Õ
pmd:OnlyOneReturn∑
pmdOnlyOneReturnOnly One Return"MINOR*java2-rulesets/java/controversial.xml/OnlyOneReturn:«A method should have only one exit point, and that should be the last statement in the method.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1142'>S1142</a> instead.
</p>Z
CODE_SMELL
Ÿ
pmd:UnnecessaryCaseChangeª
pmdUnnecessaryCaseChangeUnnecessary Case Change"MINOR*java2/rulesets/java/strings.xml/UnnecessaryCaseChange:πUsing equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1157'>S1157</a> instead.
</p>Z
CODE_SMELL
Ç
!pmd:ClassCastExceptionWithToArray‹
pmdClassCastExceptionWithToArray"Class Cast Exception With To Array"MAJOR*java25rulesets/java/basic.xml/ClassCastExceptionWithToArray:¡if you need to get an array of a class from your Collection, you should pass an array of the desidered class as the parameter of the toArray method. Otherwise you will get a ClassCastException.Z
CODE_SMELL
ê
pmd:UncommentedEmptyMethodBodyÌ
pmdUncommentedEmptyMethodBodyUncommented Empty Method"MAJOR*java23rulesets/java/design.xml/UncommentedEmptyMethodBody:·<p>Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1186'>S1186</a> instead.
</p>Z
CODE_SMELL
ç
pmd:UseConcurrentHashMap
pmdUseConcurrentHashMapUse ConcurrentHashMap"MAJOR*java24rulesets/java/controversial.xml/UseConcurrentHashMap:mSince Java5 brought a new implementation of the Map interface, specially designed for concurrent application.Z
CODE_SMELL
‰
pmd:MethodArgumentCouldBeFinal¡
pmdMethodArgumentCouldBeFinalMethod Argument Could Be Final"MINOR*java2:rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal:®A method argument that is never assigned can be declared final.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1226'>S1226</a> instead.
</p>Z
CODE_SMELL
Ñ
pmd:OptimizableToArrayCallÂ
pmdOptimizableToArrayCallOptimizable To Array Call"MAJOR*java2/rulesets/java/design.xml/OptimizableToArrayCall:aA call to Collection.toArray can use the Collection's size vs an empty Array of the desired type.Z
CODE_SMELL
¿
pmd:UnusedNullCheckInEquals†
pmdUnusedNullCheckInEqualsUnused Null Check In Equals"MAJOR*java25rulesets/java/unnecessary.xml/UnusedNullCheckInEquals:íAfter checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.Z
CODE_SMELL
ó
!pmd:AbstractClassWithoutAnyMethodÒ
pmdAbstractClassWithoutAnyMethod"Abstract class without any methods"MAJOR*java26rulesets/java/design.xml/AbstractClassWithoutAnyMethod:’If the abstract class does not provides any methods, it may be just a data container that is not to be instantiated. In this case, it's probably better to use a private or a protected constructor in order to prevent instantiation than make the class misleadingly abstract. Example :
<pre>
public class abstract Example {
  String field;
  int otherField;
}
</pre>

<p>
 This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1694'>S1694</a> instead.
</p>Z
CODE_SMELL
≥
pmd:DataflowAnomalyAnalysisì
pmdDataflowAnomalyAnalysisDataflow Anomaly Analysis"MAJOR*java27rulesets/java/controversial.xml/DataflowAnomalyAnalysis:ÖThe dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow. From those informations there can be found various problems. 1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error. 2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text. 3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.Z
CODE_SMELL
Ã
 pmd:CommentDefaultAccessModifierß
pmdCommentDefaultAccessModifier#Comment the default access modifier"MAJOR*java27rulesets/java/comments.xml/CommentDefaultAccessModifier:ä<p>
  To avoid mistakes if we want that a Method, Field or Nested class have a default access modifier
  we must add a comment at the beginning of the Method, Field or Nested class.
  By default the comment must be /* default */, if you want another, you have to provide a regex.
</p>

<pre>
public class Foo {
    final String stringValue = "some string";
    String getString() {
       return stringValue;
    }

    class NestedFoo {
    }
}

// should be
public class Foo {
  /* default */ final String stringValue = "some string";
  /* default */ String getString() {
     return stringValue;
  }

  /* default */ class NestedFoo {
  }
}
</pre>Z
CODE_SMELL
Á
pmd:PrematureDeclaration 
pmdPrematureDeclarationPremature Declaration"MAJOR*java24rulesets/java/optimizations.xml/PrematureDeclaration:∆Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception. Example: 
<pre>
public int getLength(String[] strings) {

  int length = 0; // declared prematurely

  if (strings == null || strings.length == 0) return 0;

  for (String str : strings) {
    length += str.length();
  }

  return length;
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1941'>S1941</a> instead.
</p>Z
CODE_SMELL
Ñ
&pmd:AvoidInstanceofChecksInCatchClauseŸ
pmd"AvoidInstanceofChecksInCatchClause'Avoid Instanceof Checks In Catch Clause"MINOR*java2;rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause:ÆEach caught exception type should be handled in its own catch clause.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1193'>S1193</a> instead.
</p>Z
CODE_SMELL
—
pmd:CallSuperLastª
pmdCallSuperLastAndroid - call super last"MAJOR*java2'rulesets/java/android.xml/CallSuperLast:«Super should be called at the end of the method. Example :
<pre>
public class DummyActivity extends Activity {
  public void onPause() {
    foo();
    // missing call to super.onPause()
  }
}
</pre>Z
CODE_SMELL
ƒ
pmd:UselessQualifiedThisß
pmdUselessQualifiedThis*Flags unnecessary qualified usages of this"MAJOR*java22rulesets/java/unnecessary.xml/UselessQualifiedThis:ê<p>Look for qualified this usages in the same class.</p>

<p>Examples:</p>

<pre>
public class Foo {
  final Foo otherFoo = Foo.this;  // use "this" directly

  public void doSomething() {
    final Foo anotherFoo = Foo.this;  // use "this" directly
  }

  private ActionListener returnListener() {
    return new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        doSomethingWithQualifiedThis(Foo.this);  // This is fine
      }
    };
  }

  private class Foo3 {
    final Foo myFoo = Foo.this;  // This is fine
  }

  private class Foo2 {
    final Foo2 myFoo2 = Foo2.this;  // Use "this" direclty
  }
}
</pre>Z
CODE_SMELL
ƒ
pmd:ExcessiveImports´
pmdExcessiveImportsCoupling - excessive imports"MAJOR*java2+rulesets/java/coupling.xml/ExcessiveImports:≠A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1200'>S1200</a> instead.
</p>Z
CODE_SMELL
Ç
pmd:ReplaceVectorWithList‰
pmdReplaceVectorWithListReplace Vector With List"MAJOR*java21rulesets/java/migrating.xml/ReplaceVectorWithList:ﬂConsider replacing Vector usages with the newer java.util.ArrayList if expensive threadsafe operation is not required.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.
</p>Z
CODE_SMELL
È
pmd:AssignmentToNonFinalStatic∆
pmdAssignmentToNonFinalStaticAssignment To Non Final Static"MAJOR*java23rulesets/java/design.xml/AssignmentToNonFinalStatic:5Identifies a possible unsafe usage of a static field.Z
CODE_SMELL
¥
pmd:BrokenNullCheckú
pmdBrokenNullCheckBroken Null Check"CRITICAL*java2'rulesets/java/basic.xml/BrokenNullCheck:´The null check is broken since it will throw a Nullpointer itself. The reason is that a method is called on the object when it is null. It is likely that you used || instead of && or vice versa.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1697'>S1697</a> instead.
</p>Z
CODE_SMELL
£
!pmd:AvoidCatchingGenericException˝
pmdAvoidCatchingGenericException Avoid Catching Generic Exception"MAJOR*java2?rulesets/java/strictexception.xml/AvoidCatchingGenericException:⁄Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2221'>S2221</a> instead.
</p>Z
CODE_SMELL
è
#pmd:SignatureDeclareThrowsExceptionÁ
pmdSignatureDeclareThrowsException"Signature Declare Throws Exception"MAJOR*java2Arulesets/java/strictexception.xml/SignatureDeclareThrowsException:æIt is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00112'>S00112</a> instead.
</p>Z
CODE_SMELL
¨
pmd:VariableNamingConventionsä
pmdVariableNamingConventions$Naming - Variable naming conventions"MAJOR*java22rulesets/java/naming.xml/VariableNamingConventions:ÙA variable naming conventions rule - customize this to your liking. Currently, it checks for final variables that should be fully capitalized and non-final variables that should not include underscores.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00115'>S00115</a> and <a href='/coding_rules#rule_key=squid%3AS00116'>S00116</a> instead.
</p>Z
CODE_SMELL
˘
pmd:LocalHomeNamingConvention◊
pmdLocalHomeNamingConventionLocal Home Naming Convention"MAJOR*java20rulesets/java/j2ee.xml/LocalHomeNamingConvention:LThe Local Home interface of a Session EJB should be suffixed by "LocalHome".Z
CODE_SMELL
£
pmd:SystemPrintlnç
pmdSystemPrintlnSystem Println"MAJOR*java2,rulesets/java/logging-java.xml/SystemPrintln:üSystem.(out|err).print is used, consider using a logger.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS106'>S106</a> instead.
</p>Z
CODE_SMELL
‡
pmd:CallSuperInConstructor¡
pmdCallSuperInConstructorCall Super In Constructor"MINOR*java26rulesets/java/controversial.xml/CallSuperInConstructor:µIt is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.Z
CODE_SMELL
Ó
$pmd:UnnecessaryWrapperObjectCreation≈
pmd UnnecessaryWrapperObjectCreation#Unnecessary Wrapper Object Creation"MAJOR*java2@rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation:õParsing method should be called directy instead.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1158'>S1158</a> instead.
</p>Z
CODE_SMELL
‘
 pmd:DoNotThrowExceptionInFinallyØ
pmdDoNotThrowExceptionInFinally4Strict Exception - Do not throw exception in finally"MAJOR*java2>rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally:˙Throwing exception in a finally block is confusing. It may mask exception or a defect of the code, it also render code cleanup uninstable. Example :
<pre>
public class Foo
{
  public void bar()
  {
    try {
    // Here do some stuff
    }
    catch( Exception e) {
    // Handling the issue
    }
    finally
    {
      // is this really a good idea ?
      throw new Exception();
    }
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1163'>S1163</a> instead.
</p>Z
CODE_SMELL
ˆ
pmd:EmptyInitializer›
pmdEmptyInitializerBasic - Empty Initializer"MAJOR*java2(rulesets/java/empty.xml/EmptyInitializer:ÂAn empty initializer was found. Example :
<pre>
public class Foo {

   static {} // Why ?

   {} // Again, why ?

}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
Ô
pmd:SuspiciousOctalEscape—
pmdSuspiciousOctalEscapeSuspicious Octal Escape"MAJOR*java25rulesets/java/controversial.xml/SuspiciousOctalEscape:…A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit Any octal escape sequence followed by non-octal digits can be confusing, e.g. "\038" is interpreted as the octal escape sequence "\03" followed by the literal character 8.Z
CODE_SMELL
≠
!pmd:OverrideBothEqualsAndHashcodeá
pmdOverrideBothEqualsAndHashcode!Override both equals and hashcode"BLOCKER*java25rulesets/java/basic.xml/OverrideBothEqualsAndHashcode:ÚOverride both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass. Example :
<pre>
// this is bad
public class Bar {
  public boolean equals(Object o) {
      // do some comparison
  }
}

// and so is this
public class Baz {
  public int hashCode() {
      // return some hash value
  }
}

// this is OK
public class Foo {
  public boolean equals(Object other) {
      // do some comparison
  }
  public int hashCode() {
      // return some hash value
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1206'>S1206</a> instead.
</p>ZBUG
É
pmd:ShortInstantiationË
pmdShortInstantiation%Java5 migration - Short instantiation"MAJOR*java2.rulesets/java/migrating.xml/ShortInstantiation:‹In JDK 1.5, calling new Short() causes memory allocation. Short.valueOf() is more memory friendly.  Example :
  <pre>
public class Foo {
private Short i = new Short(0); // change to Short i =
Short.valueOf(0);
}
  </pre>Z
CODE_SMELL
˛
pmd:ForLoopsMustUseBraces‡
pmdForLoopsMustUseBracesFor Loops Must Use Braces"MAJOR*java2.rulesets/java/braces.xml/ForLoopsMustUseBraces:›<p>
Avoid using 'for' statements without using curly braces, like <code>for (int i=0; i<42;i++) foo();</code>
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.
</p>Z
CODE_SMELL
˘
#pmd:UseStringBufferForStringAppends—
pmdUseStringBufferForStringAppends$Use String Buffer For String Appends"MAJOR*java2?rulesets/java/optimizations.xml/UseStringBufferForStringAppends:)Finds usages of += for appending strings.Z
CODE_SMELL
Ç
pmd:LawOfDemeterÌ

pmdLawOfDemeterLaw Of Demeter"MAJOR*java2'rulesets/java/coupling.xml/LawOfDemeter:Ö
The Law of Demeter is a simple rule, that says "only talk to friends". It helps to reduce coupling between classes or objects. 
See also the references:
Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;
K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38‚Äì48, 1989.;
http://www.ccs.neu.edu/home/lieber/LoD.html;
http://en.wikipedia.org/wiki/Law_of_Demeter 
<p>Example:</p> 
<pre>
public class Foo {
    /**
     * This example will result in two violations.
     */
    public void example(Bar b) {
        // this method call is ok, as b is a parameter of "example"
        C c = b.getC();
        
        // this method call is a violation, as we are using c, which we got from B.
        // We should ask b directly instead, e.g. "b.doItOnC();"
        c.doIt();
        
        // this is also a violation, just expressed differently as a method chain without temporary variables.
        b.getC().doIt();
        
        // a constructor call, not a method call.
        D d = new D();
        // this method call is ok, because we have create the new instance of D locally.
        d.doSomethingElse(); 
    }
}
</pre>Z
CODE_SMELL
Ü
pmd:NcssConstructorCountÈ
pmdNcssConstructorCountNcss Constructor Count"MAJOR*java2/rulesets/java/codesize.xml/NcssConstructorCount:ÈThis rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS138'>S138</a> instead.
</p>Z
CODE_SMELL
€
pmd:ProperLogger∆
pmdProperLoggerProper Logger"MAJOR*java26rulesets/java/logging-jakarta-commons.xml/ProperLogger:–Logger should normally be defined private static final and have the correct class. Private final Log log; is also allowed for rare cases when loggers need to be passed around, but the logger needs to be passed into the constructor.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1312'>S1312</a> instead.
</p>Z
CODE_SMELL

'pmd:AvoidBranchingStatementAsLastInLoopƒ
pmd#AvoidBranchingStatementAsLastInLoop)Avoid Branching Statement As Last In Loop"MAJOR*java2;rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop:ñUsing a branching statement as the last part of a loop may be a bug, and/or is confusing.
Ensure that the usage is not a bug, or consider using another approach. Example: 
<pre>
// unusual use of branching statement in a loop
for (int i = 0; i < 10; i++) {
  if (i*i <= 25) {
    continue;
  }
  break;
}

// this makes more sense...
for (int i = 0; i < 10; i++) {
  if (i*i > 25) {
    break;
  }
}
</pre>Z
CODE_SMELL
ë
"pmd:FinalizeOnlyCallsSuperFinalizeÍ
pmdFinalizeOnlyCallsSuperFinalize"Finalize Only Calls Super Finalize"MAJOR*java2;rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize:»If the finalize() is implemented, it should do something besides just calling super.finalize().

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1185'>S1185</a> instead.
</p>Z
CODE_SMELL
÷
pmd:StringInstantiation∫
pmdStringInstantiationString Instantiation"MAJOR*java2-rulesets/java/strings.xml/StringInstantiation:@Avoid instantiating String objects; this is usually unnecessary.Z
CODE_SMELL
—
pmd:AvoidAssertAsIdentifier±
pmdAvoidAssertAsIdentifierAvoid Assert As Identifier"MAJOR*java23rulesets/java/migrating.xml/AvoidAssertAsIdentifier:¶Finds all places 'assert' is used as an identifier is used.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1190'>S1190</a> instead.
</p>Z
CODE_SMELL
·
pmd:InstantiationToGetClass¡
pmdInstantiationToGetClassInstantiation To Get Class"MAJOR*java20rulesets/java/design.xml/InstantiationToGetClass:πAvoid instantiating an object just to call getClass() on it; use the .class public member instead. Example : replace <code>Class c = new String().getClass();</code> with <code>Class c = String.class;</code>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2133'>S2133</a> instead.
</p>Z
CODE_SMELL
¿
pmd:GuardDebugLogging¶
pmdGuardDebugLoggingGuard Debug Logging"MAJOR*java2;rulesets/java/logging-jakarta-commons.xml/GuardDebugLogging:†When log messages are composed by concatenating strings, the whole section should be guarded by a isDebugEnabled() check to avoid performance and memory issues.Z
CODE_SMELL
§
pmd:UseCorrectExceptionLoggingÅ
pmdUseCorrectExceptionLoggingUse Correct Exception Logging"MAJOR*java2Drulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging:ﬂTo make sure the full stacktrace is printed out, use the logging statement with 2 arguments: a String and a Throwable.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.
</p>Z
CODE_SMELL
Ñ
pmd:DontImportJavaLangÈ
pmdDontImportJavaLangDont Import Java Lang"MINOR*java2,rulesets/java/imports.xml/DontImportJavaLang:ÔAvoid importing anything from the package 'java.lang'. These classes are automatically imported (JLS 7.5.3).

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.
</p>Z
CODE_SMELL
⁄
pmd:UnusedModifier√
pmdUnusedModifierUnused Modifier"INFO*java2+rulesets/java/unusedcode.xml/UnusedModifier:’Fields in interfaces are automatically public static final, and methods are public abstract. Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static). For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.Z
CODE_SMELL
ó
pmd:UselessParentheses¸
pmdUselessParenthesesUseless Parentheses"INFO*java20rulesets/java/unnecessary.xml/UselessParentheses:ÅUseless parentheses should be removed. Example: 
<pre>
public class Foo {

   private int _bar1;
   private Integer _bar2;

   public void setBar(int n) {
      _bar1 = Integer.valueOf((n)); // here
      _bar2 = (n); // and here
   }

}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessParenthesesCheck'>UselessParenthesesCheck</a> instead.
</p>Z
CODE_SMELL
£
%pmd:ConstructorCallsOverridableMethod˘

pmd!ConstructorCallsOverridableMethod$Constructor Calls Overridable Method"MAJOR*java2:rulesets/java/design.xml/ConstructorCallsOverridableMethod:”	Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object 
      and can be difficult to discern. It may leave the sub-class unable to construct its superclass or forced to replicate 
      the construction process completely within itself, losing the ability to call super(). 
      If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. 
      Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls 
      a private method bar() that calls a public method buz(), this denotes a problem. 
      <br/>Example :
<pre>
public class SeniorClass {
  public SeniorClass(){
      toString(); //may throw NullPointerException if overridden
  }
  public String toString(){
    return "IAmSeniorClass";
  }
}
public class JuniorClass extends SeniorClass {
  private String name;
  public JuniorClass(){
    super(); //Automatic call leads to NullPointerException
    name = "JuniorClass";
  }
  public String toString(){
    return name.toUpperCase();
  }
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1699'>S1699</a> instead.
</p>Z
CODE_SMELL
°
)pmd:LocalInterfaceSessionNamingConventionÛ
pmd%LocalInterfaceSessionNamingConvention)Local Interface Session Naming Convention"MAJOR*java2<rulesets/java/j2ee.xml/LocalInterfaceSessionNamingConvention:CThe Local Interface of a Session EJB should be suffixed by "Local".Z
CODE_SMELL
É
pmd:AvoidUsingHardCodedIPÂ
pmdAvoidUsingHardCodedIPAvoid Using Hard Coded IP"MAJOR*java2-rulesets/java/basic.xml/AvoidUsingHardCodedIP:„An application with hard coded IP may become impossible to deploy in some case. It never hurts to externalize IP adresses.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1313'>S1313</a> instead.
</p>Z
CODE_SMELL
ê
"pmd:DontUseFloatTypeForLoopIndicesÈ
pmdDontUseFloatTypeForLoopIndices$Dont Use Float Type For Loop Indices"MAJOR*java26rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices: Don't use floating point for loop indices. If you must use floating point, use double
unless you're certain that float provides enough precision and you have a compelling
performance need (space or time). Example: 
<pre>
public class Count {
  public static void main(String[] args) {
    final int START = 2000000000;
    int count = 0;
    for (float f = START; f < START + 50; f++)
      count++;
      //Prints 0 because (float) START == (float) (START + 50).
      System.out.println(count);
      //The termination test misbehaves due to floating point granularity.
    }
}
</pre>Z
CODE_SMELL
Ö
$pmd:AvoidInstantiatingObjectsInLoops‹
pmd AvoidInstantiatingObjectsInLoops$Avoid instantiating objects in loops"MINOR*java2@rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops:2Detects when a new object is created inside a loopZ
CODE_SMELL
∂
1pmd:ClassWithOnlyPrivateConstructorsShouldBeFinalÄ
pmd-ClassWithOnlyPrivateConstructorsShouldBeFinal4Class with only private constructors should be final"MAJOR*java2Frulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal:≤A class with only private constructors should be final, unless the private constructor is called by a inner class. Example :
<pre>
public class Foo {  //Should be final
    private Foo() { }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2974'>S2974</a> instead.
</p>Z
CODE_SMELL
Ç
pmd:IntegerInstantiationÂ
pmdIntegerInstantiationInteger Instantiation"MAJOR*java20rulesets/java/migrating.xml/IntegerInstantiation:fIn JDK 1.5, calling new Integer() causes memory allocation. Integer.valueOf() is more memory friendly.Z
CODE_SMELL
©
%pmd:StringBufferInstantiationWithCharˇ
pmd!StringBufferInstantiationWithChar%String Buffer Instantiation With Char"MAJOR*java2;rulesets/java/strings.xml/StringBufferInstantiationWithChar:◊StringBuffer sb = new StringBuffer('c'); The char will be converted into int to intialize StringBuffer size.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1317'>S1317</a> instead.
</p>Z
CODE_SMELL
ø
"pmd:AvoidFieldNameMatchingTypeNameò
pmdAvoidFieldNameMatchingTypeName,Naming - Avoid field name matching type name"MAJOR*java27rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName:It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and or field names could be more precise. Example :
<pre>
public class Foo extends Bar {
  // There's probably a better name for foo
  int foo;
}
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1700'>S1700</a> instead.
</p>Z
CODE_SMELL
Â
pmd:JumbledIncrementer 
pmdJumbledIncrementerJumbled Incrementer"MAJOR*java2*rulesets/java/basic.xml/JumbledIncrementer:‘Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.
    <br>Example :
    <pre>
public class JumbledIncrementerRule1 {
  public void foo() {
   for (int i = 0; i < 10; i++) {
    for (int k = 0; k < 20; i++) {
     System.out.println("Hello");
    }
   }
  }
}</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AForLoopCounterChangedCheck'>ForLoopCounterChangedCheck</a> instead.
</p>Z
CODE_SMELL
˛
#pmd:RemoteInterfaceNamingConvention÷
pmdRemoteInterfaceNamingConvention"Remote Interface Naming Convention"MAJOR*java26rulesets/java/j2ee.xml/RemoteInterfaceNamingConvention:9Remote Interface of a Session EJB should NOT be suffixed.Z
CODE_SMELL
Ø
pmd:NPathComplexityó
pmdNPathComplexityNPath complexity"MAJOR*java2*rulesets/java/codesize.xml/NPathComplexity:ßThe NPath complexity of a method is the number of acyclic execution paths through that method. A threshold of 200 is generally considered the point where measures should be taken to reduce complexity. Example :
<pre>
public class Foo {
  void bar() {
   // lots of complicated code
  }
 }
</pre>Z
CODE_SMELL
∑
pmd:StaticEJBFieldShouldBeFinalì
pmdStaticEJBFieldShouldBeFinal Static EJB Field Should Be Final"MAJOR*java22rulesets/java/j2ee.xml/StaticEJBFieldShouldBeFinal:ˇAccording to the J2EE specification (p.494), an EJB should not have any static fields with write access. However, static read only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.Z
CODE_SMELL
Ï
pmd:CallSuperFirst’
pmdCallSuperFirstAndroid - call super first"MAJOR*java2(rulesets/java/android.xml/CallSuperFirst:ﬁSuper should be called at the start of the method. Example :
<pre>
public class DummyActivity extends Activity {
  public void onCreate(Bundle bundle) {
    // missing call to super.onCreate(bundle)
    foo();
  }
}
</pre>Z
CODE_SMELL
≥
pmd:CheckSkipResultõ
pmdCheckSkipResultCheck Skip Result"MINOR*java2'rulesets/java/basic.xml/CheckSkipResult:≠The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not. Example: 
<pre>
public class Foo {

   private FileInputStream _s = new FileInputStream("file");

   public void skip(int n) throws IOException {
      _s.skip(n); // You are not sure that exactly n bytes are skipped
   }

   public void skipExactly(int n) throws IOException {
      while (n != 0) {
         long skipped = _s.skip(n);
         if (skipped == 0)
            throw new EOFException();
         n -= skipped;
      }
   }
</pre>

<p>
   This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2674'>S2674</a> instead.
</p>Z
CODE_SMELL
∏
 pmd:UseLocaleWithCaseConversionsì
pmdUseLocaleWithCaseConversions Use Locale With Case Conversions"MAJOR*java25rulesets/java/design.xml/UseLocaleWithCaseConversions:|When doing a String.toLowerCase()/toUpperCase() call, use a Locale. This avoids problems with certain locales, i.e. Turkish.Z
CODE_SMELL
∏
pmd:EmptyFinalizer°
pmdEmptyFinalizerEmpty Finalizer"MAJOR*java2+rulesets/java/finalizers.xml/EmptyFinalizer:≤<p>If the finalize() method is empty, then it does not need to exist.</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1186'>S1186</a> instead.
</p>Z
CODE_SMELL
¡
pmd:SwitchDensity´
pmdSwitchDensitySwitch Density"MAJOR*java2&rulesets/java/design.xml/SwitchDensity:√A high ratio of statements to labels in a switch statement implies that the switch statement is doing too much work. Consider moving the statements into new methods, or creating subclasses based on the switch variable.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1151'>S1151</a> instead.
</p>Z
CODE_SMELL
°
pmd:CommentSizeç
pmdCommentSizeComment Size"MINOR*java2&rulesets/java/comments.xml/CommentSize:©Determines whether the dimensions of non-header comments found are within the specified limits. Example: 
<pre>
/**
*
* too many lines!
*
*
*
*
*
*
*
*
*
*
*
*
*/
</pre>Z
CODE_SMELL
ı
pmd:AvoidMultipleUnaryOperators—
pmdAvoidMultipleUnaryOperatorsAvoid Multiple Unary Operators"MAJOR*java23rulesets/java/basic.xml/AvoidMultipleUnaryOperators:æUsing multiple unary operators may be a bug, and/or is confusing. Check the usage is not a bug, or consider simplifying the expression. Example :
<pre>
// These are typo bugs, or at best needlessly complex and confusing:
int i = - -1;
int j = + - +1;
int z = ~~2;
boolean b = !!true;
boolean c = !!!true;

// These are better:
int i = 1;
int j = -1;
int z = 2;
boolean b = true;
boolean c = false;

// And these just make your brain hurt:
int i = ~-2;
int j = -~7;
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS881'>S881</a> instead.
</p>Z
CODE_SMELL
Œ
pmd:BadComparison∏
pmdBadComparisonBad Comparison"MAJOR*java2&rulesets/java/design.xml/BadComparison:QAvoid equality comparisons with Double.NaN - these are likely to be logic errors.Z
CODE_SMELL
œ
pmd:UnusedPrivateField¥
pmdUnusedPrivateFieldUnused Private Field"MAJOR*java2/rulesets/java/unusedcode.xml/UnusedPrivateField:∏Detects when a private field is declared and/or assigned a value, but not used.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1068'>S1068</a> instead.
</p>Z
CODE_SMELL
ï
pmd:AvoidLiteralsInIfConditionÚ
pmdAvoidLiteralsInIfConditionAvoid Literals In If Condition"MAJOR*java2:rulesets/java/controversial.xml/AvoidLiteralsInIfCondition:ŸAvoid using hard coded literals in conditional statements, declare those as static variables or private members.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS109'>S109</a> instead.
</p>Z
CODE_SMELL
∂
pmd:UseStringBufferLengthò
pmdUseStringBufferLengthUse String Buffer Length"MINOR*java2/rulesets/java/strings.xml/UseStringBufferLength:ïUse StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals() or StringBuffer.toString().length() ==.Z
CODE_SMELL
ﬁ
pmd:EmptyWhileStmt«
pmdEmptyWhileStmtEmpty While Stmt"CRITICAL*java2&rulesets/java/empty.xml/EmptyWhileStmt:ŸEmpty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
Æ
pmd:MoreThanOneLoggerî
pmdMoreThanOneLoggerMore Than One Logger"MAJOR*java20rulesets/java/logging-java.xml/MoreThanOneLogger:òNormally only one logger is used in each class.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1312'>S1312</a> instead.
</p>Z
CODE_SMELL
Ù
pmd:ByteInstantiation⁄
pmdByteInstantiation$Java5 migration - Byte instantiation"MAJOR*java2-rulesets/java/migrating.xml/ByteInstantiation:—In JDK 1.5, calling new Byte() causes memory allocation. Byte.valueOf() is more memory friendly. Example :
<pre>
public class Foo {
private Byte i = new Byte(0); // change to Byte i =
Byte.valueOf(0);
}
</pre>Z
CODE_SMELL
ò
pmd:ExcessiveClassLength˚
pmdExcessiveClassLengthExcessive Class Length"MAJOR*java2/rulesets/java/codesize.xml/ExcessiveClassLength:˚Long Class files are indications that the class may be trying to do too much. Try to break it down, and reduce the size to something manageable.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1448'>S1448</a> instead.
</p>Z
CODE_SMELL
´
pmd:ShortVariableï
pmdShortVariableShort Variable"MAJOR*java2&rulesets/java/naming.xml/ShortVariable:≠Detects when a field, local, or parameter has a very short name.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.
</p>Z
CODE_SMELL
ﬁ
/pmd:MissingStaticMethodInNonInstantiatableClass™
pmd+MissingStaticMethodInNonInstantiatableClass1Missing Static Method In Non Instantiatable Class"MAJOR*java2Drulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass:dA class that has private constructors and does not have any static methods or fields cannot be used.Z
CODE_SMELL
“
pmd:ReplaceHashtableWithMap≤
pmdReplaceHashtableWithMapReplace Hashtable With Map"MAJOR*java23rulesets/java/migrating.xml/ReplaceHashtableWithMap:ßConsider replacing this Hashtable with the newer java.util.Map

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.
</p>Z
CODE_SMELL
˚
pmd:DoNotCallSystemExitﬂ
pmdDoNotCallSystemExitDo Not Call System Exit"MAJOR*java2*rulesets/java/j2ee.xml/DoNotCallSystemExit:‰Web applications should not call System.exit(), since only the web container or the application server should stop the JVM.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1147'>S1147</a> instead.
</p>Z
CODE_SMELL
 
pmd:EmptyIfStmt∂
pmdEmptyIfStmtEmpty If Stmt"CRITICAL*java2#rulesets/java/empty.xml/EmptyIfStmt:—<p>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.
</p>Z
CODE_SMELL
ﬂ
pmd:UselessOverridingMethodø
pmdUselessOverridingMethodUseless Overriding Method"MAJOR*java25rulesets/java/unnecessary.xml/UselessOverridingMethod:≥The overriding method merely calls the same method defined in a superclass

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1185'>S1185</a> instead.
</p>Z
CODE_SMELL
Å
pmd:AvoidDollarSignsË
pmdAvoidDollarSignsNaming - Avoid dollar signs"MINOR*java2)rulesets/java/naming.xml/AvoidDollarSigns:Ì<p>
Avoid using dollar signs in variable/method/class/interface names.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00114'>S00114</a>, <a href='/coding_rules#rule_key=squid%3AS00115'>S00115</a>, <a href='/coding_rules#rule_key=squid%3AS00116'>S00116</a> and <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.
</p>Z
CODE_SMELL
Ã
pmd:BeanMembersShouldSerialize©
pmdBeanMembersShouldSerializeBean Members Should Serialize"MAJOR*java26rulesets/java/javabeans.xml/BeanMembersShouldSerialize:ïIf a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class. Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e.if you have a variable foo, you should provide getFoo and setFoo methods.Z
CODE_SMELL
‡
"pmd:AvoidThrowingRawExceptionTypesπ
pmdAvoidThrowingRawExceptionTypes"Avoid Throwing Raw Exception Types"MAJOR*java2@rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes:í<p>
Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.
</p>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00112'>S00112</a> instead.
</p>Z
CODE_SMELL
Á
pmd:ForLoopShouldBeWhileLoop∆
pmdForLoopShouldBeWhileLoopFor Loop Should Be While Loop"MINOR*java20rulesets/java/basic.xml/ForLoopShouldBeWhileLoop:∫Some for loops can be simplified to while loops - this makes them more concise.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1264'>S1264</a> instead.
</p>Z
CODE_SMELL
‹	
pmd:UseObjectForClearerAPIΩ	
pmdUseObjectForClearerAPIUse Object For Clearer API"MINOR*java26rulesets/java/controversial.xml/UseObjectForClearerAPI:∞When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class
will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information
as a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simplier
API (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some
point to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification to
your API. Example: 
<pre>
public class MyClass {
  public void connect(String username,
    String pssd,
    String databaseName,
    String databaseAdress)
    // Instead of those parameters object
    // would ensure a cleaner API and permit
    // to add extra data transparently (no code change):
    // void connect(UserData data);
    {

  }
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00107'>S00107</a> instead.
</p>Z
CODE_SMELL
Ÿ
0pmd:AvoidProtectedMethodInFinalClassNotExtending§
pmd,AvoidProtectedMethodInFinalClassNotExtending3Avoid Protected Method In Final Class Not Extending"MAJOR*java2Erulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending:ŸDo not use protected methods in most final classes since they cannot be subclassed. This should 
only be allowed in final classes that extend other classes with protected methods (whose
visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead. Example: 
<pre>
public final class Foo {
  private int bar() {}
  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible? 
}
</pre>

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2156'>S2156</a> instead.
</p>Z
CODE_SMELL
¶
*pmd:RemoteSessionInterfaceNamingConvention˜
pmd&RemoteSessionInterfaceNamingConvention*Remote Session Interface Naming Convention"MAJOR*java2=rulesets/java/j2ee.xml/RemoteSessionInterfaceNamingConvention:DRemote Home interface of a Session EJB should be suffixed by "Home".Z
CODE_SMELL
Â
pmd:DoubleCheckedLocking»
pmdDoubleCheckedLockingDouble checked locking"MAJOR*java2,rulesets/java/basic.xml/DoubleCheckedLocking:ÀPartially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to. <a href="http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html">More details</a>. Example :
<pre>
public class Foo {
  Object baz;
  Object bar() {
    if(baz == null) { //baz may be non-null yet not fully created
      synchronized(this){
        if(baz == null){
          baz = new Object();
        }
      }
    }
    return baz;
  }
}
</pre>Z
CODE_SMELL
¿
%pmd:MDBAndSessionBeanNamingConventionñ
pmd!MDBAndSessionBeanNamingConvention6Message Driven Bean And Session Bean Naming Convention"MAJOR*java28rulesets/java/j2ee.xml/MDBAndSessionBeanNamingConvention:aThe EJB Specification state that any MessageDrivenBean or SessionBean should be suffixed by Bean.Z
CODE_SMELL
ë
%pmd:UnsynchronizedStaticDateFormatterÁ
pmd!UnsynchronizedStaticDateFormatter$Unsynchronized Static Date Formatter"MAJOR*java2:rulesets/java/design.xml/UnsynchronizedStaticDateFormatter:¡SimpleDateFormat is not synchronized. Sun recomends separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.

<p>
  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2156'>S2156</a> instead.
</p>Z
CODE_SMELL
Í
#pmd:AvoidLosingExceptionInformation¬
pmdAvoidLosingExceptionInformation"Avoid Losing Exception Information"MAJOR*java2Arulesets/java/strictexception.xml/AvoidLosingExceptionInformation:ôStatements in a catch block that invoke accessors on the exception without using the information only add to code size.  Either remove the invocation, or use the return result.

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.
</p>Z
CODE_SMELL
≤
common-java:FailedUnitTestsí
common-javaFailedUnitTests!Failed unit tests should be fixed"MAJOR*java:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
è
common-java:SkippedUnitTestsÓ
common-javaSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*java:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Û
common-java:DuplicatedBlocks“
common-javaDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*java:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ù
&common-java:InsufficientCommentDensityÚ
common-javaInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*java:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
Ë
&common-java:InsufficientBranchCoverageΩ
common-javaInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*java:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
›
$common-java:InsufficientLineCoverage¥
common-javaInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*java:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
≤
common-flex:FailedUnitTestsí
common-flexFailedUnitTests!Failed unit tests should be fixed"MAJOR*flex:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
è
common-flex:SkippedUnitTestsÓ
common-flexSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*flex:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Û
common-flex:DuplicatedBlocks“
common-flexDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*flex:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ù
&common-flex:InsufficientCommentDensityÚ
common-flexInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*flex:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
›
$common-flex:InsufficientLineCoverage¥
common-flexInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*flex:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
Ë
&common-flex:InsufficientBranchCoverageΩ
common-flexInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*flex:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
¨
common-js:FailedUnitTestsé
	common-jsFailedUnitTests!Failed unit tests should be fixed"MAJOR*js:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-js:SkippedUnitTestsÍ
	common-jsSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*js:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Ì
common-js:DuplicatedBlocksŒ
	common-jsDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*js:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-js:InsufficientCommentDensityÓ
	common-jsInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*js:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
◊
"common-js:InsufficientLineCoverage∞
	common-jsInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*js:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
‚
$common-js:InsufficientBranchCoverageπ
	common-jsInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*js:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
¨
common-py:FailedUnitTestsé
	common-pyFailedUnitTests!Failed unit tests should be fixed"MAJOR*py:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.ZBUG
â
common-py:SkippedUnitTestsÍ
	common-pySkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*py:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.Z
CODE_SMELL
Ì
common-py:DuplicatedBlocksŒ
	common-pyDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*py:dAn issue is created on a file as soon as there is at least one block of duplicated code on this fileZ
CODE_SMELL
ó
$common-py:InsufficientCommentDensityÓ
	common-pyInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*py:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.Z
CODE_SMELL
◊
"common-py:InsufficientLineCoverage∞
	common-pyInsufficientLineCoverage.Lines should have sufficient coverage by tests"MAJOR*py:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.Z
CODE_SMELL
‚
$common-py:InsufficientBranchCoverageπ
	common-pyInsufficientBranchCoverage1Branches should have sufficient coverage by tests"MAJOR*py:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.Z
CODE_SMELL
±
python:S1131†
pythonS1131.Lines should not end with trailing whitespaces"MINOR*py:«<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same
file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the
opportunity to do so. </p>Z
CODE_SMELL
Œ
python:S1134Ω
pythonS1134Track uses of "FIXME" tags"MAJOR*py:¯<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def divide(numerator, denominator):
  return numerator / denominator              # FIXME denominator value might be 0
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>Z
CODE_SMELL
Î
python:BackticksUsage—
pythonBackticksUsageBackticks should not be used"BLOCKER*py:Ü<p>Backticks are a deprecated alias for <code>repr()</code>. Don't use them any more, the syntax was removed in Python 3.0.</p>
<h2>Noncompliant Code Example</h2>
<pre>
return `num`  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
return repr(num)
</pre>ZBUG
»
python:ParsingError∞
pythonParsingErrorPython parser failure"MAJOR*py:È<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the
number of files that do not parse but also to easily find out why they do not parse.</p>Z
CODE_SMELL
’
python:LineLengthø
python
LineLengthLines should not be too long"MAJOR*py:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>Z
CODE_SMELL
˙
python:S1656È
pythonS1656%Variables should not be self-assigned"MAJOR*py:†<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
name = name
</pre>
<h2>Compliant Solution</h2>
<pre>
name = other.name
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
Ω
python:S1578¨
pythonS15783Module names should comply with a naming convention"MINOR*py:Œ<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/P4IyAQ">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/lQAl">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>
</ul>Z
CODE_SMELL
ﬂ
python:S104œ
pythonS104,Files should not have too many lines of code"MAJOR*py:˘<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>Z
CODE_SMELL
ò
python:S107à
pythonS107BFunctions, methods and lambdas should not have too many parameters"MAJOR*py:ú<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
def do_something(param1, param2, param3, param4, param5):
	...
</pre>
<h2>Compliant Solution</h2>
<pre>
def do_something(param1, param2, param3, param4):
	...
</pre>Z
CODE_SMELL
®
python:S108ò
pythonS108.Nested blocks of code should not be left empty"MAJOR*py:¿<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for i in range(3):
    pass
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty.</p>Z
CODE_SMELL
Ö

python:S1862Ù	
pythonS1862BRelated "if/else if" statements should not have the same condition"MAJOR*py:é	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and
at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if param == 1:
  openWindow()
elif param == 2:
  closeWindow()
elif param == 1:            # Noncompliant
  moveWindowToTheBackground()
</pre>
<h2>Compliant Solution</h2>
<pre>
if param == 1:
  openWindow()
elif param == 2:
  closeWindow()
elif param == 3:
  moveWindowToTheBackground()
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
</ul>ZBUG
Û
python:XPath‚
pythonXPathTrack breaches of an XPath rule"MAJOR*py:ñ<p>This rule allows the definition of custom rules using XPath expressions.</p>
<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>
<ul>
  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>
  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>
  <li> anything else, no issue is created </li>
</ul>
<p>This rule allows the definition of custom rules using XPath expressions.</p>
<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>
<ul>
  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>
  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>
  <li> anything else, no issue is created </li>
</ul>
<p>Here is an example of an XPath expression to log a violation on each statement: </p>
<pre>
//statement
</pre>@Z
CODE_SMELL
Ë
python:S1542◊
pythonS15425Function names should comply with a naming convention"MAJOR*py:˜<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>
<pre>
def MyFunction(a,b):
    ...
</pre>
<h2>Compliant Solution</h2>
<pre>
def my_function(a,b):
    ...
</pre>Z
CODE_SMELL

python:S1066ﬂ
pythonS1066,Collapsible "if" statements should be merged"MAJOR*py:à<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if condition1:
    if condition2:
        # ...
</pre>
<h2>Compliant Solution</h2>
<pre>
if condition1 and condition2:
    # ...
</pre>Z
CODE_SMELL
˝
python:S1142Ï
pythonS11427Functions should not contain too many return statements"MAJOR*py:ä<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the function.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
def fun():          # Noncompliant as there are 4 return statements
  if condition1:
    return True
  elif condition2:
    return False
  else:
    return True
  return False
}
</pre>Z
CODE_SMELL
‚
python:OneStatementPerLine√
pythonOneStatementPerLine&Statements should be on separate lines"MAJOR*py:‰<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (True): print("hello")
</pre>
<h2>Compliant Solution</h2>
<pre>
if (True):
    print("hello")
</pre>Z
CODE_SMELL
Å
python:PreIncrementDecrement‡
pythonPreIncrementDecrement4Increment and decrement operators should not be used"MAJOR*py:¯<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,
<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
++x # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
x += 1
</pre>ZBUG
®
python:S1700ó
pythonS1700=A field should not duplicate the name of its containing class"MAJOR*py:Ø<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo:
  foo = ''

  def getFoo(self):
    ...

foo = Foo()
foo.getFoo() # what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo:
  name = ''

  def getName(self):
    ...

foo = Foo()
foo.getName()
</pre>Z
CODE_SMELL
π
python:S2711®
pythonS27119"yield" and "return" should not be used outside functions"BLOCKER*py:…<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a
<code>SyntaxError</code>. To break out of a loop, use <code>break</code> instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass:
    while True:
        return False #Noncompliant
</pre>ZBUG
ì
python:S2712Ç
pythonS2712<"return" and "yield" should not be used in the same function"BLOCKER*py:†<p>Functions that use <code>yield</code> are known as "generators", and generators cannot <code>return</code> values. Similarly, functions that use
<code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def adder(n):
     num = 0
     while num &lt; n:
         yield num
         num += 1
     return num  #Noncompliant
</pre>ZBUG
Ö
python:ClassComplexityÍ
pythonClassComplexity!Classes should not be too complex"CRITICAL*py:ë<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to
understand and therefore to maintain.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
æ
python:S113Æ
pythonS1131Files should contain an empty new line at the end"MINOR*py:”<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<p>&lt;pre&gt;</p>
<p>+class Test:</p>
<p>+ pass</p>
<p> \ No newline at end of file</p>
<p>&lt;/pre&gt;</p>Z
CODE_SMELL
å
python:S116¸
pythonS1162Field names should comply with a naming convention"MINOR*py:†<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$</code>:</p>
<pre>
class MyClass:
  myField = 1
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
  my_field = 1
</pre>Z
CODE_SMELL
‹
python:ExecStatementUsageæ
pythonExecStatementUsage'The "exec" statement should not be used"BLOCKER*py:‰<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python
3.0. Instead, the built-in <code>exec()</code> function can be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
exec 'print 1' # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
exec('print 1')
</pre>ZBUG
Ò
python:S117·
pythonS117RLocal variable and function parameter names should comply with a naming convention"MINOR*py:Â<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local
variable and function parameter names match a provided regular expression.</p>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for i in range(limit):  # Compliant
    print(i)
</pre>Z
CODE_SMELL
ƒ
python:S1313≥
pythonS1313$IP addresses should not be hardcoded"MINOR*py:·<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>
<ul>
  <li> a recompile is required if the address changes </li>
  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>
  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>
  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ip = '127.0.0.1'
sock = socket.socket()
sock.bind((ip, 9090))
</pre>
<h2>Compliant Solution</h2>
<pre>
ip = config.get(section, ipAddress)
sock = socket.socket()
sock.bind((ip, 9090))
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>ZVULNERABILITY
™
python:S3776ô
pythonS37768Cognitive Complexity of functions should not be too high"CRITICAL*py:≥<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>Z
CODE_SMELL
ß
python:S1871ñ
pythonS1871WTwo branches in a conditional structure should not have exactly the same implementation"MAJOR*py:î<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error. If
the same logic is truly needed for both instances, then they should be combined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if 0 &lt;= a &lt; 10:
    do_the_thing()
elif 10 &lt;= a &lt; 20:
    do_the_other_thing()
elif 20 &lt;= a &lt; 50:
    do_the_thing()  # Noncompliant; duplicates first condition
else:
    do_the_rest()

b = 4 if a &gt; 12 else 4
</pre>
<h2>Compliant Solution</h2>
<pre>
if (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):
    do_the_thing()
elif 10 &lt;= a &lt; 20:
    do_the_other_thing()
else:
    do_the_rest()

b = 4
</pre>
<p>or </p>
<pre>
if 0 &lt;= a &lt; 10:
    do_the_thing()
elif 10 &lt;= a &lt; 20:
    do_the_other_thing()
elif 20 &lt;= a &lt; 50:
    do_the_third_thing()
else:
    do_the_rest()

b = 8 if a &gt; 12 else 4
</pre>Z
CODE_SMELL
ü
python:S2325é
pythonS2325GMethods and properties that don't access instance data should be static"MINOR*py:ú<p>Class methods that don't access instance data can and should be static because they yield more performant code.</p>
<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the
class as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities:
    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant
        #...
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities:
    @classmethod
    def do_the_thing(cls, arg1, arg2, ...):
        #...
</pre>
<p>or</p>
<pre>
class Utilities:
    @staticmethod
    def do_the_thing(arg1, arg2, ...):
        #...
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Methods which raise or may raise a <code>NotImplementedError</code> are ignored. </li>
</ul>Z
CODE_SMELL
€
python:S1110 
pythonS11100Redundant pairs of parentheses should be removed"MAJOR*py:Ô<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
return ((3))        # Noncompliant
return ((x + 1))    # Noncompliant
x = ((y / 2)) + 1   # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
return 3
return (3)
return x + 1
return (x + 1)
x = y / 2 + 1
x = (y / 2) + 1
</pre>Z
CODE_SMELL
û
python:S134é
pythonS134^Control flow statements "if", "for", "while", "try" and "with" should not be nested too deeply"CRITICAL*py:É<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> statements are key ingredients for making
what's known as "Spaghetti code". Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>The following code snippet illustrates this rule with the default threshold of 3.</p>
<pre>
  if condition1:           # Compliant - depth = 1
    # ...
    if condition2:         # Compliant - depth = 2
      # ...
      for i in range(10):  # Compliant - depth = 3, not exceeding the limit
        # ...
        if condition4:     # Non-Compliant - depth = 4
          if condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            # ...
</pre>Z
CODE_SMELL
Ç
python:S1717Ò
pythonS1717E"\" should only be used as an escape character outside of raw strings"MAJOR*py:à<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence
looks suspiciously like a broken escape sequence. </p>
<p>Characters recognized as escape-able are: <code>abfnrtvox\'"</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
s = "Hello \world."
t = "Nice to \ meet you"
u = "Let's have \ lunch"
</pre>
<h2>Compliant Solution</h2>
<pre>
s = "Hello world."
t = "Nice to \\ meet you"
u = r"Let's have \ lunch"  // raw string
</pre>ZBUG
˝
python:S1716Ï
pythonS17168"break" and "continue" should not be used outside a loop"CRITICAL*py:ç<p><code>break</code> and <code>continue</code> are unstructured control flow statements which make code harder to read. Additionally, more recent
versions of Python raise a SyntaxError when modules containing <code>break</code> or <code>continue</code> outside of a loop are imported.</p>
<p>Therefore, these statements should not be used outside of loops. </p>
<h2>Noncompliant Code Example</h2>
<pre>
narg=len(sys.argv)
if narg == 1:
        print('@Usage: input_filename nelements nintervals')
        break
</pre>
<h2>Compliant Solution</h2>
<pre>
if narg == 1:
        print('@Usage: input_filename nelements nintervals')
        sys.exit()
</pre>ZBUG
È
python:PrintStatementUsage 
pythonPrintStatementUsage(The "print" statement should not be used"BLOCKER*py:Ó<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
print '1'  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
print('1')
</pre>ZBUG
ô
python:FunctionComplexity˚
pythonFunctionComplexity#Functions should not be too complex"CRITICAL*py:ù<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test
thoroughly.</p>Z
CODE_SMELL
 
*python:LongIntegerWithLowercaseSuffixUsageõ
python#LongIntegerWithLowercaseSuffixUsage$Long suffix "L" should be upper case"MINOR*py:Æ<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>
<h2>Noncompliant Code Example</h2>
<pre>
return 10l  // Noncompliant; easily confused with one zero one
</pre>
<h2>Compliant Solution</h2>
<pre>
return 10L
</pre>Z
CODE_SMELL
ƒ
python:CommentRegularExpression†
pythonCommentRegularExpression,Track comments matching a regular expression"MAJOR*py:¥<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>
<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in
<code>(?i).*REVIEW.*</code>.</p>@Z
CODE_SMELL
…
python:S1707∏
pythonS1707MTrack "TODO" and "FIXME" comments that do not contain a reference to a person"MINOR*py:¿<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.
Unfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become
mysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>
<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME
or TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
# TODO
</pre>
<h2>Compliant Solution</h2>
<pre>
# TODO(ganncamp) per the business partners, more checks needed
</pre>Z
CODE_SMELL
π
python:S125©
pythonS125.Sections of code should not be "commented out""MAJOR*py:—<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>
  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>
  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>
  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>
</ul>Z
CODE_SMELL
ß
python:S1764ñ
pythonS1764KIdentical expressions should not be used on both sides of a binary operator"MAJOR*py:ß
<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if a == a: # Noncompliant
    work()

if  a != a: # Noncompliant
    work()

if  a == b and a == b: # Noncompliant
    work()

if a == b or a == b: # Noncompliant
    work()

j = 5 / 5 # Noncompliant
k = 5 - 5 # Noncompliant
</pre>
<h2>Exceptions</h2>
<p>The following are ignored:</p>
<ul>
  <li> The expression <code>1 &lt;&lt; 1</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>
  <li> <a href='/coding_rules#rule_key=python%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>ZBUG
“
python:S1720¡
pythonS1720Docstrings should be defined"MAJOR*py:˙<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller
needs to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well
written docstrings allow callers to use your code without having to first read it and understand its logic.</p>
<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def my_function(a,b):
</pre>
<h2>Compliant Solution</h2>
<pre>
def my_function(a,b):
      """Do X"""
</pre>Z
CODE_SMELL
É
python:S1763Ú
pythonS1763:Jump statements should not be followed by other statements"MAJOR*py:î<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code
block. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. </p>
<h2>Noncompliant Code Example</h2>
<pre>
def fun(a):
  i = 10
  return i + a       # Noncompliant
  i += 1             # this is never executed
</pre>
<h2>Compliant Solution</h2>
<pre>
def fun(a):
  i = 10
  return i + a
</pre>
<h2>See</h2>
<ul>
  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>
  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>
  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>
  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>
  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never
  executed </li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>
</ul>ZBUG
ô
python:InequalityUsage˛
pythonInequalityUsage*"<>" should not be used to test inequality"MAJOR*py:ü<p>The forms <code>&lt;&gt;</code> and <code>!=</code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;</code> form is considered obsolete.</p>
<h2>Noncompliant Code Example</h2>
<pre>
return a &lt;&gt; b # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
return a != b
</pre>Z
CODE_SMELL

python:S2772ﬂ
pythonS2772$"pass" should not be used needlessly"MINOR*py:ê<p>The use of a <code>pass</code> statement where it's not required by the syntax is pure cruft and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
    def __init__(self, log="", who="", date=0, files=[]):
        self.log = log
        self.files = files
        self.who = who
        self.date = date
        pass    # Noncompliant

    def lookup():
        pass    # Compliant; method can't be empty
</pre>
<h2>Compliant Solution</h2>
<pre>
    def __init__(self, log="", who="", date=0, files=[]):
        self.log = log
        self.files = files
        self.who = who
        self.date = date

    def lookup():
        pass
</pre>Z
CODE_SMELL
–
python:FileComplexity∂
pythonFileComplexityFiles should not be too complex"MAJOR*py:„<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>Z
CODE_SMELL
á
python:S101˜
pythonS1012Class names should comply with a naming convention"MINOR*py:õ<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class myClass:
   ...
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
   ...
</pre>Z
CODE_SMELL
π
python:S100©
pythonS1003Method names should comply with a naming convention"MINOR*py:Ã<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>
<pre>
class MyClass:
    def MyMethod(a,b):
        ...
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass:
    def my_method(a,b):
        ...
</pre>Z
CODE_SMELL
¬
python:S1845±
pythonS1845@Methods and field names should not differ only by capitalization"BLOCKER*py:ƒ<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the
class.</p>
<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case
where both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive
to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class SomeClass:
    lookUp = false
    def lookup():       # Non-compliant; method name differs from field name only by capitalization
        pass
</pre>
<h2>Compliant Solution</h2>
<pre>
class SomeClass:
    lookUp = false
    def getLookUp():
        pass
</pre>Z
CODE_SMELL
Ú
python:S2733·
pythonS2733="__exit__" should accept type, value, and traceback arguments"BLOCKER*py:˛<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration
and the result will be a <code>TypeError</code> at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass:
   def __enter__(self):
       pass
   def __exit__(self, exc_type, exc_val):  # Noncompliant
       pass
</pre>ZBUG
±
python:S1722†
pythonS1722 New-style classes should be used"MINOR*py:’<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an
instantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style
classes. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is
recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass():
    pass
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass(object):
    pass
</pre>Z
CODE_SMELL
Æ
python:S2734ù
pythonS2734$"__init__" should not return a value"BLOCKER*py:”<p>By contract, every Python function returns something, even if it's the <code>None</code> value, which can be returned implicitly by omitting the
<code>return</code> statement, or explicitly. </p>
<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>
method either <code>yield</code>s or <code>return</code>s any expression other than <code>None</code>. Returning some expression that evaluates to
<code>None</code> will not raise an error, but is considered bad practice.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass(object):
    def __init__(self):
        self.message = 'Hello'
        return self  # Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass(object):
    def __init__(self):
        self.message = 'Hello'
</pre>ZBUG
¿
python:S1721Ø
pythonS17215Parentheses should not be used after certain keywords"MINOR*py:œ<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,
<code>if</code>, <code>in</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords, and
using them unnecessarily impairs readability. They should therefore be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = 1
while (x &lt; 10):
    print "x is now %d" % (x)
    x += 1
</pre>
<h2>Compliant Solution</h2>
<pre>
x = 1
while x &lt; 10:
    print "x is now %d" % (x)
    x += 1
</pre>Z
CODE_SMELL
ê
python:S1481ˇ
pythonS1481(Unused local variables should be removed"MINOR*py:¨<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
def hello(name):
    message = "Hello " + name # Noncompliant
    print(name)
</pre>
<h2>Compliant Solution</h2>
<pre>
def hello(name):
    message = "Hello " + name
    print(message)
</pre>Z
CODE_SMELL
õ
python:S139ã
pythonS139:Comments should not be located at the end of lines of code"MINOR*py:ß<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b + c   # This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
# This very long comment is better placed before the line of code
a = b + c
</pre>Z
CODE_SMELL